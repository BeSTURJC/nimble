
MotorControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f82c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014b8  0801f9d0  0801f9d0  000209d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020e88  08020e88  00022298  2**0
                  CONTENTS
  4 .ARM          00000008  08020e88  08020e88  00021e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020e90  08020e90  00022298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08020e90  08020e90  00021e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020e98  08020e98  00021e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000298  20000000  08020e9c  00022000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011b34  20000298  08021134  00022298  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20011dcc  08021134  00022dcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00022298  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020940  00000000  00000000  000222c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004796  00000000  00000000  00042c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c8  00000000  00000000  000473a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000137b  00000000  00000000  00048c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d9a1  00000000  00000000  00049fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ed9b  00000000  00000000  00067984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b0994  00000000  00000000  0008671f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001370b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008514  00000000  00000000  0013712c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0013f640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000298 	.word	0x20000298
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801f9b4 	.word	0x0801f9b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000029c 	.word	0x2000029c
 80001dc:	0801f9b4 	.word	0x0801f9b4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cd6:	f000 b9eb 	b.w	80010b0 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d6c:	f000 b9a0 	b.w	80010b0 <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	@ (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	460c      	mov	r4, r1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d14e      	bne.n	8000e9e <__udivmoddi4+0xaa>
 8000e00:	4694      	mov	ip, r2
 8000e02:	458c      	cmp	ip, r1
 8000e04:	4686      	mov	lr, r0
 8000e06:	fab2 f282 	clz	r2, r2
 8000e0a:	d962      	bls.n	8000ed2 <__udivmoddi4+0xde>
 8000e0c:	b14a      	cbz	r2, 8000e22 <__udivmoddi4+0x2e>
 8000e0e:	f1c2 0320 	rsb	r3, r2, #32
 8000e12:	4091      	lsls	r1, r2
 8000e14:	fa20 f303 	lsr.w	r3, r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	4319      	orrs	r1, r3
 8000e1e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e26:	fa1f f68c 	uxth.w	r6, ip
 8000e2a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e32:	fb07 1114 	mls	r1, r7, r4, r1
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb04 f106 	mul.w	r1, r4, r6
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d90a      	bls.n	8000e58 <__udivmoddi4+0x64>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000e4a:	f080 8112 	bcs.w	8001072 <__udivmoddi4+0x27e>
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	f240 810f 	bls.w	8001072 <__udivmoddi4+0x27e>
 8000e54:	3c02      	subs	r4, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1a59      	subs	r1, r3, r1
 8000e5a:	fa1f f38e 	uxth.w	r3, lr
 8000e5e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e62:	fb07 1110 	mls	r1, r7, r0, r1
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb00 f606 	mul.w	r6, r0, r6
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	d90a      	bls.n	8000e88 <__udivmoddi4+0x94>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000e7a:	f080 80fc 	bcs.w	8001076 <__udivmoddi4+0x282>
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	f240 80f9 	bls.w	8001076 <__udivmoddi4+0x282>
 8000e84:	4463      	add	r3, ip
 8000e86:	3802      	subs	r0, #2
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e8e:	2100      	movs	r1, #0
 8000e90:	b11d      	cbz	r5, 8000e9a <__udivmoddi4+0xa6>
 8000e92:	40d3      	lsrs	r3, r2
 8000e94:	2200      	movs	r2, #0
 8000e96:	e9c5 3200 	strd	r3, r2, [r5]
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d905      	bls.n	8000eae <__udivmoddi4+0xba>
 8000ea2:	b10d      	cbz	r5, 8000ea8 <__udivmoddi4+0xb4>
 8000ea4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e7f5      	b.n	8000e9a <__udivmoddi4+0xa6>
 8000eae:	fab3 f183 	clz	r1, r3
 8000eb2:	2900      	cmp	r1, #0
 8000eb4:	d146      	bne.n	8000f44 <__udivmoddi4+0x150>
 8000eb6:	42a3      	cmp	r3, r4
 8000eb8:	d302      	bcc.n	8000ec0 <__udivmoddi4+0xcc>
 8000eba:	4290      	cmp	r0, r2
 8000ebc:	f0c0 80f0 	bcc.w	80010a0 <__udivmoddi4+0x2ac>
 8000ec0:	1a86      	subs	r6, r0, r2
 8000ec2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	2d00      	cmp	r5, #0
 8000eca:	d0e6      	beq.n	8000e9a <__udivmoddi4+0xa6>
 8000ecc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ed0:	e7e3      	b.n	8000e9a <__udivmoddi4+0xa6>
 8000ed2:	2a00      	cmp	r2, #0
 8000ed4:	f040 8090 	bne.w	8000ff8 <__udivmoddi4+0x204>
 8000ed8:	eba1 040c 	sub.w	r4, r1, ip
 8000edc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee0:	fa1f f78c 	uxth.w	r7, ip
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000eea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000eee:	fb08 4416 	mls	r4, r8, r6, r4
 8000ef2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ef6:	fb07 f006 	mul.w	r0, r7, r6
 8000efa:	4298      	cmp	r0, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x11c>
 8000efe:	eb1c 0303 	adds.w	r3, ip, r3
 8000f02:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000f06:	d202      	bcs.n	8000f0e <__udivmoddi4+0x11a>
 8000f08:	4298      	cmp	r0, r3
 8000f0a:	f200 80cd 	bhi.w	80010a8 <__udivmoddi4+0x2b4>
 8000f0e:	4626      	mov	r6, r4
 8000f10:	1a1c      	subs	r4, r3, r0
 8000f12:	fa1f f38e 	uxth.w	r3, lr
 8000f16:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f1a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f22:	fb00 f707 	mul.w	r7, r0, r7
 8000f26:	429f      	cmp	r7, r3
 8000f28:	d908      	bls.n	8000f3c <__udivmoddi4+0x148>
 8000f2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000f32:	d202      	bcs.n	8000f3a <__udivmoddi4+0x146>
 8000f34:	429f      	cmp	r7, r3
 8000f36:	f200 80b0 	bhi.w	800109a <__udivmoddi4+0x2a6>
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	1bdb      	subs	r3, r3, r7
 8000f3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f42:	e7a5      	b.n	8000e90 <__udivmoddi4+0x9c>
 8000f44:	f1c1 0620 	rsb	r6, r1, #32
 8000f48:	408b      	lsls	r3, r1
 8000f4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f54:	fa04 f301 	lsl.w	r3, r4, r1
 8000f58:	ea43 030c 	orr.w	r3, r3, ip
 8000f5c:	40f4      	lsrs	r4, r6
 8000f5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f62:	0c38      	lsrs	r0, r7, #16
 8000f64:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f68:	fbb4 fef0 	udiv	lr, r4, r0
 8000f6c:	fa1f fc87 	uxth.w	ip, r7
 8000f70:	fb00 441e 	mls	r4, r0, lr, r4
 8000f74:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f78:	fb0e f90c 	mul.w	r9, lr, ip
 8000f7c:	45a1      	cmp	r9, r4
 8000f7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f82:	d90a      	bls.n	8000f9a <__udivmoddi4+0x1a6>
 8000f84:	193c      	adds	r4, r7, r4
 8000f86:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f8a:	f080 8084 	bcs.w	8001096 <__udivmoddi4+0x2a2>
 8000f8e:	45a1      	cmp	r9, r4
 8000f90:	f240 8081 	bls.w	8001096 <__udivmoddi4+0x2a2>
 8000f94:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f98:	443c      	add	r4, r7
 8000f9a:	eba4 0409 	sub.w	r4, r4, r9
 8000f9e:	fa1f f983 	uxth.w	r9, r3
 8000fa2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fa6:	fb00 4413 	mls	r4, r0, r3, r4
 8000faa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fae:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fb2:	45a4      	cmp	ip, r4
 8000fb4:	d907      	bls.n	8000fc6 <__udivmoddi4+0x1d2>
 8000fb6:	193c      	adds	r4, r7, r4
 8000fb8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000fbc:	d267      	bcs.n	800108e <__udivmoddi4+0x29a>
 8000fbe:	45a4      	cmp	ip, r4
 8000fc0:	d965      	bls.n	800108e <__udivmoddi4+0x29a>
 8000fc2:	3b02      	subs	r3, #2
 8000fc4:	443c      	add	r4, r7
 8000fc6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fca:	fba0 9302 	umull	r9, r3, r0, r2
 8000fce:	eba4 040c 	sub.w	r4, r4, ip
 8000fd2:	429c      	cmp	r4, r3
 8000fd4:	46ce      	mov	lr, r9
 8000fd6:	469c      	mov	ip, r3
 8000fd8:	d351      	bcc.n	800107e <__udivmoddi4+0x28a>
 8000fda:	d04e      	beq.n	800107a <__udivmoddi4+0x286>
 8000fdc:	b155      	cbz	r5, 8000ff4 <__udivmoddi4+0x200>
 8000fde:	ebb8 030e 	subs.w	r3, r8, lr
 8000fe2:	eb64 040c 	sbc.w	r4, r4, ip
 8000fe6:	fa04 f606 	lsl.w	r6, r4, r6
 8000fea:	40cb      	lsrs	r3, r1
 8000fec:	431e      	orrs	r6, r3
 8000fee:	40cc      	lsrs	r4, r1
 8000ff0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	e750      	b.n	8000e9a <__udivmoddi4+0xa6>
 8000ff8:	f1c2 0320 	rsb	r3, r2, #32
 8000ffc:	fa20 f103 	lsr.w	r1, r0, r3
 8001000:	fa0c fc02 	lsl.w	ip, ip, r2
 8001004:	fa24 f303 	lsr.w	r3, r4, r3
 8001008:	4094      	lsls	r4, r2
 800100a:	430c      	orrs	r4, r1
 800100c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001010:	fa00 fe02 	lsl.w	lr, r0, r2
 8001014:	fa1f f78c 	uxth.w	r7, ip
 8001018:	fbb3 f0f8 	udiv	r0, r3, r8
 800101c:	fb08 3110 	mls	r1, r8, r0, r3
 8001020:	0c23      	lsrs	r3, r4, #16
 8001022:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001026:	fb00 f107 	mul.w	r1, r0, r7
 800102a:	4299      	cmp	r1, r3
 800102c:	d908      	bls.n	8001040 <__udivmoddi4+0x24c>
 800102e:	eb1c 0303 	adds.w	r3, ip, r3
 8001032:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8001036:	d22c      	bcs.n	8001092 <__udivmoddi4+0x29e>
 8001038:	4299      	cmp	r1, r3
 800103a:	d92a      	bls.n	8001092 <__udivmoddi4+0x29e>
 800103c:	3802      	subs	r0, #2
 800103e:	4463      	add	r3, ip
 8001040:	1a5b      	subs	r3, r3, r1
 8001042:	b2a4      	uxth	r4, r4
 8001044:	fbb3 f1f8 	udiv	r1, r3, r8
 8001048:	fb08 3311 	mls	r3, r8, r1, r3
 800104c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001050:	fb01 f307 	mul.w	r3, r1, r7
 8001054:	42a3      	cmp	r3, r4
 8001056:	d908      	bls.n	800106a <__udivmoddi4+0x276>
 8001058:	eb1c 0404 	adds.w	r4, ip, r4
 800105c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8001060:	d213      	bcs.n	800108a <__udivmoddi4+0x296>
 8001062:	42a3      	cmp	r3, r4
 8001064:	d911      	bls.n	800108a <__udivmoddi4+0x296>
 8001066:	3902      	subs	r1, #2
 8001068:	4464      	add	r4, ip
 800106a:	1ae4      	subs	r4, r4, r3
 800106c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001070:	e739      	b.n	8000ee6 <__udivmoddi4+0xf2>
 8001072:	4604      	mov	r4, r0
 8001074:	e6f0      	b.n	8000e58 <__udivmoddi4+0x64>
 8001076:	4608      	mov	r0, r1
 8001078:	e706      	b.n	8000e88 <__udivmoddi4+0x94>
 800107a:	45c8      	cmp	r8, r9
 800107c:	d2ae      	bcs.n	8000fdc <__udivmoddi4+0x1e8>
 800107e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001082:	eb63 0c07 	sbc.w	ip, r3, r7
 8001086:	3801      	subs	r0, #1
 8001088:	e7a8      	b.n	8000fdc <__udivmoddi4+0x1e8>
 800108a:	4631      	mov	r1, r6
 800108c:	e7ed      	b.n	800106a <__udivmoddi4+0x276>
 800108e:	4603      	mov	r3, r0
 8001090:	e799      	b.n	8000fc6 <__udivmoddi4+0x1d2>
 8001092:	4630      	mov	r0, r6
 8001094:	e7d4      	b.n	8001040 <__udivmoddi4+0x24c>
 8001096:	46d6      	mov	lr, sl
 8001098:	e77f      	b.n	8000f9a <__udivmoddi4+0x1a6>
 800109a:	4463      	add	r3, ip
 800109c:	3802      	subs	r0, #2
 800109e:	e74d      	b.n	8000f3c <__udivmoddi4+0x148>
 80010a0:	4606      	mov	r6, r0
 80010a2:	4623      	mov	r3, r4
 80010a4:	4608      	mov	r0, r1
 80010a6:	e70f      	b.n	8000ec8 <__udivmoddi4+0xd4>
 80010a8:	3e02      	subs	r6, #2
 80010aa:	4463      	add	r3, ip
 80010ac:	e730      	b.n	8000f10 <__udivmoddi4+0x11c>
 80010ae:	bf00      	nop

080010b0 <__aeabi_idiv0>:
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop

080010b4 <initMPC>:
#include "MPC.h"
#include <math.h>
#include <stdio.h>
#include <stdlib.h>

void initMPC(struct MPCData* MPCData){
 80010b4:	b5b0      	push	{r4, r5, r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]

    MPCData->N1=N1_I;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2201      	movs	r2, #1
 80010c0:	701a      	strb	r2, [r3, #0]
    MPCData->N2=N2_I;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2205      	movs	r2, #5
 80010c6:	705a      	strb	r2, [r3, #1]
    MPCData->Nu=Nu_I;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2201      	movs	r2, #1
 80010cc:	709a      	strb	r2, [r3, #2]

    MPCData->sizeA=sizeA_I;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2202      	movs	r2, #2
 80010d2:	70da      	strb	r2, [r3, #3]
    MPCData->sizeB=sizeB_I;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2202      	movs	r2, #2
 80010d8:	711a      	strb	r2, [r3, #4]
    MPCData->sizeD=sizeC_I;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2202      	movs	r2, #2
 80010de:	715a      	strb	r2, [r3, #5]
    MPCData->sizeC=sizeD_I;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2202      	movs	r2, #2
 80010e4:	719a      	strb	r2, [r3, #6]

    MPCData->dB[0]=0;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f04f 0200 	mov.w	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
    MPCData->dB[1]=0.2175;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a94      	ldr	r2, [pc, #592]	@ (8001344 <initMPC+0x290>)
 80010f2:	615a      	str	r2, [r3, #20]
    MPCData->dA[0]=1;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80010fa:	609a      	str	r2, [r3, #8]
    MPCData->dA[1]=-0.8187;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a92      	ldr	r2, [pc, #584]	@ (8001348 <initMPC+0x294>)
 8001100:	60da      	str	r2, [r3, #12]
    MPCData->C[0]=0; MPCData->C[1]=1;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	619a      	str	r2, [r3, #24]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001110:	61da      	str	r2, [r3, #28]
    MPCData->D[0]=1; MPCData->D[1]=1;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001118:	621a      	str	r2, [r3, #32]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001120:	625a      	str	r2, [r3, #36]	@ 0x24
    for (int i=0;i<MPCData->N2+MPCData->sizeA;i++)
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
 8001126:	e00a      	b.n	800113e <initMPC+0x8a>
        MPCData->X[i]=0;
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	330a      	adds	r3, #10
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
    for (int i=0;i<MPCData->N2+MPCData->sizeA;i++)
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	3301      	adds	r3, #1
 800113c:	61fb      	str	r3, [r7, #28]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001144:	461a      	mov	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800114c:	4413      	add	r3, r2
 800114e:	69fa      	ldr	r2, [r7, #28]
 8001150:	429a      	cmp	r2, r3
 8001152:	dbe9      	blt.n	8001128 <initMPC+0x74>

    for (int i=0;i<MPCData->N2+MPCData->sizeB;i++)
 8001154:	2300      	movs	r3, #0
 8001156:	61bb      	str	r3, [r7, #24]
 8001158:	e00b      	b.n	8001172 <initMPC+0xbe>
        MPCData->U[i]=0;
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	3310      	adds	r3, #16
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4413      	add	r3, r2
 8001164:	3304      	adds	r3, #4
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
    for (int i=0;i<MPCData->N2+MPCData->sizeB;i++)
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	3301      	adds	r3, #1
 8001170:	61bb      	str	r3, [r7, #24]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001178:	461a      	mov	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001180:	4413      	add	r3, r2
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	429a      	cmp	r2, r3
 8001186:	dbe8      	blt.n	800115a <initMPC+0xa6>

    for (int i=0;i<MPCData->N2+MPCData->sizeD;i++)
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	e00a      	b.n	80011a4 <initMPC+0xf0>
        MPCData->N[i]=0;
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	3318      	adds	r3, #24
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	4413      	add	r3, r2
 8001198:	f04f 0200 	mov.w	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
    for (int i=0;i<MPCData->N2+MPCData->sizeD;i++)
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	3301      	adds	r3, #1
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80011aa:	461a      	mov	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80011b2:	4413      	add	r3, r2
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	dbe9      	blt.n	800118e <initMPC+0xda>

    for (int i=0;i<MPCData->N2+MPCData->sizeC;i++)
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	e00b      	b.n	80011d8 <initMPC+0x124>
        MPCData->NF[i]=0;
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	331e      	adds	r3, #30
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	4413      	add	r3, r2
 80011ca:	3304      	adds	r3, #4
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
    for (int i=0;i<MPCData->N2+MPCData->sizeC;i++)
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	3301      	adds	r3, #1
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80011de:	461a      	mov	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80011e6:	4413      	add	r3, r2
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	dbe8      	blt.n	80011c0 <initMPC+0x10c>


    MPCData->G[0]=0.2175;  MPCData->G[1]=0.3956; MPCData->G[2]=0.5414; MPCData->G[3]= 0.6607; MPCData->G[4]=0.7584;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a54      	ldr	r2, [pc, #336]	@ (8001344 <initMPC+0x290>)
 80011f2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a54      	ldr	r2, [pc, #336]	@ (800134c <initMPC+0x298>)
 80011fa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a53      	ldr	r2, [pc, #332]	@ (8001350 <initMPC+0x29c>)
 8001202:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a52      	ldr	r2, [pc, #328]	@ (8001354 <initMPC+0x2a0>)
 800120a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a51      	ldr	r2, [pc, #324]	@ (8001358 <initMPC+0x2a4>)
 8001212:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
    //H=(G'*G+eye(Nu)*Ts);
    //invH=inv(H'*H)*H'

    MPCData->Ut=0;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f04f 0200 	mov.w	r2, #0
 800121c:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
    MPCData->Ts=0.01;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a4e      	ldr	r2, [pc, #312]	@ (800135c <initMPC+0x2a8>)
 8001224:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    MPCData->constrains=1;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2201      	movs	r2, #1
 800122c:	71da      	strb	r2, [r3, #7]
    MPCData->n1=n1_I;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2218      	movs	r2, #24
 8001232:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    MPCData->alpha=0.3;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a49      	ldr	r2, [pc, #292]	@ (8001360 <initMPC+0x2ac>)
 800123a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0

    if (MPCData->alpha==0){
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	edd3 7a38 	vldr	s15, [r3, #224]	@ 0xe0
 8001244:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124c:	d115      	bne.n	800127a <initMPC+0x1c6>
        for (int i=0; i<MPCData->N2; i++)
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	e00a      	b.n	800126a <initMPC+0x1b6>
            MPCData->weight[i]=0;
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	3348      	adds	r3, #72	@ 0x48
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	f04f 0200 	mov.w	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
        for (int i=0; i<MPCData->N2; i++)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	3301      	adds	r3, #1
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001270:	461a      	mov	r2, r3
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4293      	cmp	r3, r2
 8001276:	dbed      	blt.n	8001254 <initMPC+0x1a0>
 8001278:	e033      	b.n	80012e2 <initMPC+0x22e>
    }
    else{
        for (int i=0; i<MPCData->N2; i++)
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	e029      	b.n	80012d4 <initMPC+0x220>
            MPCData->weight[i]=pow(MPCData->alpha,MPCData->N2-i-1);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f976 	bl	8000578 <__aeabi_f2d>
 800128c:	4604      	mov	r4, r0
 800128e:	460d      	mov	r5, r1
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001296:	461a      	mov	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	3b01      	subs	r3, #1
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff f958 	bl	8000554 <__aeabi_i2d>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	ec43 2b11 	vmov	d1, r2, r3
 80012ac:	ec45 4b10 	vmov	d0, r4, r5
 80012b0:	f01d fbcc 	bl	801ea4c <pow>
 80012b4:	ec53 2b10 	vmov	r2, r3, d0
 80012b8:	4610      	mov	r0, r2
 80012ba:	4619      	mov	r1, r3
 80012bc:	f7ff fcac 	bl	8000c18 <__aeabi_d2f>
 80012c0:	4601      	mov	r1, r0
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	3348      	adds	r3, #72	@ 0x48
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4413      	add	r3, r2
 80012cc:	6019      	str	r1, [r3, #0]
        for (int i=0; i<MPCData->N2; i++)
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	3301      	adds	r3, #1
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80012da:	461a      	mov	r2, r3
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	4293      	cmp	r3, r2
 80012e0:	dbce      	blt.n	8001280 <initMPC+0x1cc>
    }

    MPCData->invG[0]=0.1442;  MPCData->invG[1]=0.2622; MPCData->invG[2]=0.3589; MPCData->invG[3]= 0.4380; MPCData->invG[4]=0.5027;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a1f      	ldr	r2, [pc, #124]	@ (8001364 <initMPC+0x2b0>)
 80012e6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a1e      	ldr	r2, [pc, #120]	@ (8001368 <initMPC+0x2b4>)
 80012ee:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a1d      	ldr	r2, [pc, #116]	@ (800136c <initMPC+0x2b8>)
 80012f6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a1c      	ldr	r2, [pc, #112]	@ (8001370 <initMPC+0x2bc>)
 80012fe:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a1b      	ldr	r2, [pc, #108]	@ (8001374 <initMPC+0x2c0>)
 8001306:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    MPCData->f[0]=0.2175;  MPCData->f[1]=0.3956; MPCData->f[2]=0.5414; MPCData->f[3]= 0.6607; MPCData->f[4]=0.7584;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a0d      	ldr	r2, [pc, #52]	@ (8001344 <initMPC+0x290>)
 800130e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a0d      	ldr	r2, [pc, #52]	@ (800134c <initMPC+0x298>)
 8001316:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a0c      	ldr	r2, [pc, #48]	@ (8001350 <initMPC+0x29c>)
 800131e:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a0b      	ldr	r2, [pc, #44]	@ (8001354 <initMPC+0x2a0>)
 8001326:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a0a      	ldr	r2, [pc, #40]	@ (8001358 <initMPC+0x2a4>)
 800132e:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    MPCData->invH[0]=0.6585;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a10      	ldr	r2, [pc, #64]	@ (8001378 <initMPC+0x2c4>)
 8001336:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac


}
 800133a:	bf00      	nop
 800133c:	3720      	adds	r7, #32
 800133e:	46bd      	mov	sp, r7
 8001340:	bdb0      	pop	{r4, r5, r7, pc}
 8001342:	bf00      	nop
 8001344:	3e5eb852 	.word	0x3e5eb852
 8001348:	bf519653 	.word	0xbf519653
 800134c:	3eca8c15 	.word	0x3eca8c15
 8001350:	3f0a9931 	.word	0x3f0a9931
 8001354:	3f2923a3 	.word	0x3f2923a3
 8001358:	3f422681 	.word	0x3f422681
 800135c:	3c23d70a 	.word	0x3c23d70a
 8001360:	3e99999a 	.word	0x3e99999a
 8001364:	3e13a92a 	.word	0x3e13a92a
 8001368:	3e863f14 	.word	0x3e863f14
 800136c:	3eb7c1be 	.word	0x3eb7c1be
 8001370:	3ee04189 	.word	0x3ee04189
 8001374:	3f00b0f2 	.word	0x3f00b0f2
 8001378:	3f289375 	.word	0x3f289375

0800137c <runController>:

float runController(double measure, double reference, struct MPCData* MPCData){
 800137c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001380:	b0d1      	sub	sp, #324	@ 0x144
 8001382:	af04      	add	r7, sp, #16
 8001384:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001388:	ed03 0b02 	vstr	d0, [r3, #-8]
 800138c:	f107 0320 	add.w	r3, r7, #32
 8001390:	ed83 1b00 	vstr	d1, [r3]
 8001394:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001398:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800139c:	6018      	str	r0, [r3, #0]
 800139e:	466b      	mov	r3, sp
 80013a0:	461e      	mov	r6, r3

    double Uopt[MPCData->Nu];
 80013a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80013a6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f993 1002 	ldrsb.w	r1, [r3, #2]
 80013b0:	460b      	mov	r3, r1
 80013b2:	3b01      	subs	r3, #1
 80013b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80013b6:	460a      	mov	r2, r1
 80013b8:	2300      	movs	r3, #0
 80013ba:	4614      	mov	r4, r2
 80013bc:	461d      	mov	r5, r3
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	f04f 0300 	mov.w	r3, #0
 80013c6:	01ab      	lsls	r3, r5, #6
 80013c8:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 80013cc:	01a2      	lsls	r2, r4, #6
 80013ce:	460a      	mov	r2, r1
 80013d0:	2300      	movs	r3, #0
 80013d2:	4690      	mov	r8, r2
 80013d4:	4699      	mov	r9, r3
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	f04f 0300 	mov.w	r3, #0
 80013de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80013e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80013e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80013ea:	460b      	mov	r3, r1
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	3307      	adds	r3, #7
 80013f0:	08db      	lsrs	r3, r3, #3
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	ebad 0d03 	sub.w	sp, sp, r3
 80013f8:	ab04      	add	r3, sp, #16
 80013fa:	3307      	adds	r3, #7
 80013fc:	08db      	lsrs	r3, r3, #3
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	67bb      	str	r3, [r7, #120]	@ 0x78
    // 1= shift EPSAC database and store base input
    double Ut=MPCData->U[MPCData->N2];
 8001402:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001406:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001410:	4619      	mov	r1, r3
 8001412:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001416:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	f101 0310 	add.w	r3, r1, #16
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	3304      	adds	r3, #4
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f8a5 	bl	8000578 <__aeabi_f2d>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    for (int k = (MPCData->sizeB+MPCData->N2); k >=1 ; k--) {
 8001436:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800143a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001444:	461a      	mov	r2, r3
 8001446:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800144a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001454:	4413      	add	r3, r2
 8001456:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800145a:	e01d      	b.n	8001498 <runController+0x11c>
        MPCData->U[k] = MPCData->U[k-1];      // [Corrimiento a la derecha]
 800145c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001460:	3b01      	subs	r3, #1
 8001462:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8001466:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 800146a:	6812      	ldr	r2, [r2, #0]
 800146c:	3310      	adds	r3, #16
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	3304      	adds	r3, #4
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800147a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800147e:	6819      	ldr	r1, [r3, #0]
 8001480:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001484:	3310      	adds	r3, #16
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	440b      	add	r3, r1
 800148a:	3304      	adds	r3, #4
 800148c:	601a      	str	r2, [r3, #0]
    for (int k = (MPCData->sizeB+MPCData->N2); k >=1 ; k--) {
 800148e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001492:	3b01      	subs	r3, #1
 8001494:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001498:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800149c:	2b00      	cmp	r3, #0
 800149e:	dcdd      	bgt.n	800145c <runController+0xe0>
    }
    for (int k = (MPCData->sizeA+MPCData->N2); k >=1 ; k--) {
 80014a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80014a4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80014ae:	461a      	mov	r2, r3
 80014b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80014b4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80014be:	4413      	add	r3, r2
 80014c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80014c4:	e01b      	b.n	80014fe <runController+0x182>
        MPCData->X[k] = MPCData->X[k-1];      // [Corrimiento a la derecha]
 80014c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80014ca:	3b01      	subs	r3, #1
 80014cc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80014d0:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 80014d4:	6812      	ldr	r2, [r2, #0]
 80014d6:	330a      	adds	r3, #10
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4413      	add	r3, r2
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80014e2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80014e6:	6819      	ldr	r1, [r3, #0]
 80014e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80014ec:	330a      	adds	r3, #10
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	440b      	add	r3, r1
 80014f2:	601a      	str	r2, [r3, #0]
    for (int k = (MPCData->sizeA+MPCData->N2); k >=1 ; k--) {
 80014f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80014f8:	3b01      	subs	r3, #1
 80014fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80014fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001502:	2b00      	cmp	r3, #0
 8001504:	dcdf      	bgt.n	80014c6 <runController+0x14a>
    }
    for (int k = (MPCData->sizeD+MPCData->N2); k >=1 ; k--) {
 8001506:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800150a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001514:	461a      	mov	r2, r3
 8001516:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800151a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001524:	4413      	add	r3, r2
 8001526:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800152a:	e01b      	b.n	8001564 <runController+0x1e8>
        MPCData->N[k] = MPCData->N[k-1];      // [Corrimiento a la derecha]
 800152c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001530:	3b01      	subs	r3, #1
 8001532:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8001536:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 800153a:	6812      	ldr	r2, [r2, #0]
 800153c:	3318      	adds	r3, #24
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001548:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800154c:	6819      	ldr	r1, [r3, #0]
 800154e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001552:	3318      	adds	r3, #24
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	440b      	add	r3, r1
 8001558:	601a      	str	r2, [r3, #0]
    for (int k = (MPCData->sizeD+MPCData->N2); k >=1 ; k--) {
 800155a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800155e:	3b01      	subs	r3, #1
 8001560:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001564:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001568:	2b00      	cmp	r3, #0
 800156a:	dcdf      	bgt.n	800152c <runController+0x1b0>
    }
    for (int k = (MPCData->sizeC+MPCData->N2); k >=1 ; k--) {
 800156c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001570:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800157a:	461a      	mov	r2, r3
 800157c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001580:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800158a:	4413      	add	r3, r2
 800158c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001590:	e01d      	b.n	80015ce <runController+0x252>
        MPCData->NF[k] = MPCData->NF[k-1];     // [Corrimiento a la derecha]
 8001592:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001596:	3b01      	subs	r3, #1
 8001598:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800159c:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	331e      	adds	r3, #30
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	3304      	adds	r3, #4
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80015b0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80015b4:	6819      	ldr	r1, [r3, #0]
 80015b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015ba:	331e      	adds	r3, #30
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	440b      	add	r3, r1
 80015c0:	3304      	adds	r3, #4
 80015c2:	601a      	str	r2, [r3, #0]
    for (int k = (MPCData->sizeC+MPCData->N2); k >=1 ; k--) {
 80015c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015c8:	3b01      	subs	r3, #1
 80015ca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80015ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	dcdd      	bgt.n	8001592 <runController+0x216>
    }
    for (int k=0; k<=MPCData->N2; k++){
 80015d6:	2300      	movs	r3, #0
 80015d8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80015dc:	e015      	b.n	800160a <runController+0x28e>
        MPCData->U[k]=Ut;       // Store Control Action
 80015de:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80015e2:	f7ff fb19 	bl	8000c18 <__aeabi_d2f>
 80015e6:	4601      	mov	r1, r0
 80015e8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80015ec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80015f6:	3310      	adds	r3, #16
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	3304      	adds	r3, #4
 80015fe:	6019      	str	r1, [r3, #0]
    for (int k=0; k<=MPCData->N2; k++){
 8001600:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001604:	3301      	adds	r3, #1
 8001606:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800160a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800160e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001618:	461a      	mov	r2, r3
 800161a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800161e:	4293      	cmp	r3, r2
 8001620:	dddd      	ble.n	80015de <runController+0x262>
    }
    // 2= compute EPSAC base-response x(t+k/t), k=0..N2
    // Model Output
    double numValues=0, denValues=0;
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	f04f 0300 	mov.w	r3, #0
 800162a:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108

    for (int k=MPCData->N2;k>=0;k--){
 800163a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800163e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001648:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800164c:	e0a9      	b.n	80017a2 <runController+0x426>
        numValues=0;
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	f04f 0300 	mov.w	r3, #0
 8001656:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
        for(int j_b=0;j_b<=(MPCData->sizeB-1);j_b++){
 800165a:	2300      	movs	r3, #0
 800165c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001660:	e030      	b.n	80016c4 <runController+0x348>
            numValues=MPCData->dB[j_b]*MPCData->U[k+j_b]+numValues;
 8001662:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001666:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001670:	3304      	adds	r3, #4
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	ed93 7a00 	vldr	s14, [r3]
 800167a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800167e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001682:	4413      	add	r3, r2
 8001684:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8001688:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 800168c:	6812      	ldr	r2, [r2, #0]
 800168e:	3310      	adds	r3, #16
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	3304      	adds	r3, #4
 8001696:	edd3 7a00 	vldr	s15, [r3]
 800169a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800169e:	ee17 0a90 	vmov	r0, s15
 80016a2:	f7fe ff69 	bl	8000578 <__aeabi_f2d>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 80016ae:	f7fe fe05 	bl	80002bc <__adddf3>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
        for(int j_b=0;j_b<=(MPCData->sizeB-1);j_b++){
 80016ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80016be:	3301      	adds	r3, #1
 80016c0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80016c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80016c8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80016d2:	461a      	mov	r2, r3
 80016d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80016d8:	4293      	cmp	r3, r2
 80016da:	dbc2      	blt.n	8001662 <runController+0x2e6>
        }
        denValues=0;
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
        for(int j_a=1;j_a<=(MPCData->sizeA-1);j_a++){
 80016e8:	2301      	movs	r3, #1
 80016ea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80016ee:	e02f      	b.n	8001750 <runController+0x3d4>
            denValues=MPCData->dA[j_a]*MPCData->X[k+j_a]+denValues;
 80016f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80016f4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80016fe:	3302      	adds	r3, #2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	ed93 7a00 	vldr	s14, [r3]
 8001708:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800170c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001710:	4413      	add	r3, r2
 8001712:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8001716:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 800171a:	6812      	ldr	r2, [r2, #0]
 800171c:	330a      	adds	r3, #10
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	edd3 7a00 	vldr	s15, [r3]
 8001726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800172a:	ee17 0a90 	vmov	r0, s15
 800172e:	f7fe ff23 	bl	8000578 <__aeabi_f2d>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 800173a:	f7fe fdbf 	bl	80002bc <__adddf3>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
        for(int j_a=1;j_a<=(MPCData->sizeA-1);j_a++){
 8001746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800174a:	3301      	adds	r3, #1
 800174c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001750:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001754:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800175e:	461a      	mov	r2, r3
 8001760:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001764:	4293      	cmp	r3, r2
 8001766:	dbc3      	blt.n	80016f0 <runController+0x374>
        }
        MPCData->X[k]=numValues-denValues;
 8001768:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800176c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001770:	f7fe fda2 	bl	80002b8 <__aeabi_dsub>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4610      	mov	r0, r2
 800177a:	4619      	mov	r1, r3
 800177c:	f7ff fa4c 	bl	8000c18 <__aeabi_d2f>
 8001780:	4601      	mov	r1, r0
 8001782:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001786:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001790:	330a      	adds	r3, #10
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	6019      	str	r1, [r3, #0]
    for (int k=MPCData->N2;k>=0;k--){
 8001798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800179c:	3b01      	subs	r3, #1
 800179e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80017a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f6bf af51 	bge.w	800164e <runController+0x2d2>
    }
    // 3= compute n(t)=y(t)-x(call) with x(call) the model output
    MPCData->N[MPCData->N2]=measure-MPCData->X[MPCData->N2];
 80017ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80017b0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80017ba:	4619      	mov	r1, r3
 80017bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80017c0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	f101 030a 	add.w	r3, r1, #10
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe fed1 	bl	8000578 <__aeabi_f2d>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80017de:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80017e2:	f7fe fd69 	bl	80002b8 <__aeabi_dsub>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80017f2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80017fc:	461c      	mov	r4, r3
 80017fe:	f7ff fa0b 	bl	8000c18 <__aeabi_d2f>
 8001802:	4601      	mov	r1, r0
 8001804:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001808:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	f104 0318 	add.w	r3, r4, #24
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	6019      	str	r1, [r3, #0]
    // 4= compute nf(t)=D/C*n(call) and put nf(t+k/t)=0, k=1..N2
    double NF_d=0,NF_c=0;
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	f04f 0300 	mov.w	r3, #0
 800182c:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8



    NF_d=0;
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	f04f 0300 	mov.w	r3, #0
 8001838:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
    for(int j_d=0;j_d<=(MPCData->sizeD-1);j_d++){
 800183c:	2300      	movs	r3, #0
 800183e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001842:	e035      	b.n	80018b0 <runController+0x534>
        NF_d=MPCData->D[j_d]*MPCData->N[MPCData->N2+j_d]+NF_d;
 8001844:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001848:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001852:	3308      	adds	r3, #8
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	ed93 7a00 	vldr	s14, [r3]
 800185c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001860:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800186a:	461a      	mov	r2, r3
 800186c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001870:	4413      	add	r3, r2
 8001872:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8001876:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 800187a:	6812      	ldr	r2, [r2, #0]
 800187c:	3318      	adds	r3, #24
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	edd3 7a00 	vldr	s15, [r3]
 8001886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800188a:	ee17 0a90 	vmov	r0, s15
 800188e:	f7fe fe73 	bl	8000578 <__aeabi_f2d>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800189a:	f7fe fd0f 	bl	80002bc <__adddf3>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
    for(int j_d=0;j_d<=(MPCData->sizeD-1);j_d++){
 80018a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80018aa:	3301      	adds	r3, #1
 80018ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80018b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80018b4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80018be:	461a      	mov	r2, r3
 80018c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80018c4:	4293      	cmp	r3, r2
 80018c6:	dbbd      	blt.n	8001844 <runController+0x4c8>
    }
    NF_c=0;
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
    int aux_en;
    if(MPCData->sizeC>=1){
 80018d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80018d8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	dd03      	ble.n	80018ee <runController+0x572>
        aux_en=0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80018ec:	e002      	b.n	80018f4 <runController+0x578>
    }
    else{
        aux_en=1;
 80018ee:	2301      	movs	r3, #1
 80018f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    }
    for(int j_c=aux_en;j_c<=(MPCData->sizeC-1);j_c++){
 80018f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80018f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80018fc:	e036      	b.n	800196c <runController+0x5f0>
        NF_c=MPCData->C[j_c]*MPCData->NF[MPCData->N2+j_c]+NF_c;
 80018fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001902:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800190c:	3306      	adds	r3, #6
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	ed93 7a00 	vldr	s14, [r3]
 8001916:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800191a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001924:	461a      	mov	r2, r3
 8001926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800192a:	4413      	add	r3, r2
 800192c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8001930:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8001934:	6812      	ldr	r2, [r2, #0]
 8001936:	331e      	adds	r3, #30
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	3304      	adds	r3, #4
 800193e:	edd3 7a00 	vldr	s15, [r3]
 8001942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001946:	ee17 0a90 	vmov	r0, s15
 800194a:	f7fe fe15 	bl	8000578 <__aeabi_f2d>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 8001956:	f7fe fcb1 	bl	80002bc <__adddf3>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
    for(int j_c=aux_en;j_c<=(MPCData->sizeC-1);j_c++){
 8001962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001966:	3301      	adds	r3, #1
 8001968:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800196c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001970:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800197a:	461a      	mov	r2, r3
 800197c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001980:	4293      	cmp	r3, r2
 8001982:	dbbc      	blt.n	80018fe <runController+0x582>
    }
    MPCData->NF[MPCData->N2]=NF_d-NF_c;
 8001984:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 8001988:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800198c:	f7fe fc94 	bl	80002b8 <__aeabi_dsub>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800199c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80019a6:	461c      	mov	r4, r3
 80019a8:	f7ff f936 	bl	8000c18 <__aeabi_d2f>
 80019ac:	4601      	mov	r1, r0
 80019ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80019b2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	f104 031e 	add.w	r3, r4, #30
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	3304      	adds	r3, #4
 80019c2:	6019      	str	r1, [r3, #0]
    for(int k=0;k<MPCData->N2;k++){
 80019c4:	2300      	movs	r3, #0
 80019c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80019ca:	e012      	b.n	80019f2 <runController+0x676>
        MPCData->NF[k]=0;
 80019cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80019d0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80019da:	331e      	adds	r3, #30
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	3304      	adds	r3, #4
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
    for(int k=0;k<MPCData->N2;k++){
 80019e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80019ec:	3301      	adds	r3, #1
 80019ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80019f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80019f6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001a00:	461a      	mov	r2, r3
 8001a02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001a06:	4293      	cmp	r3, r2
 8001a08:	dbe0      	blt.n	80019cc <runController+0x650>
    }
    // 5= compute n(t+k/t)=C/D*nf(t+k/t), k=1..N2
    double N_d=0,N_c=0;
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	f04f 0300 	mov.w	r3, #0
 8001a1e:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
    for (int k=MPCData->N2-1;k>=0;k--){
 8001a22:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001a26:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001a30:	3b01      	subs	r3, #1
 8001a32:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001a36:	e0bb      	b.n	8001bb0 <runController+0x834>
        N_c=0;
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
        int aux_en;
        if(MPCData->sizeC>=1){
 8001a44:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001a48:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	dd03      	ble.n	8001a5e <runController+0x6e2>
            aux_en=0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001a5c:	e002      	b.n	8001a64 <runController+0x6e8>
        }
        else{
            aux_en=1;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
        }
        for(int j_c=aux_en;j_c<=(MPCData->sizeC-1);j_c++){
 8001a64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a68:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001a6c:	e031      	b.n	8001ad2 <runController+0x756>
            N_c=MPCData->C[j_c]*MPCData->NF[k+j_c+1]+N_c;
 8001a6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001a72:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001a7c:	3306      	adds	r3, #6
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	ed93 7a00 	vldr	s14, [r3]
 8001a86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001a8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001a8e:	4413      	add	r3, r2
 8001a90:	3301      	adds	r3, #1
 8001a92:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8001a96:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	331e      	adds	r3, #30
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3304      	adds	r3, #4
 8001aa4:	edd3 7a00 	vldr	s15, [r3]
 8001aa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aac:	ee17 0a90 	vmov	r0, s15
 8001ab0:	f7fe fd62 	bl	8000578 <__aeabi_f2d>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001abc:	f7fe fbfe 	bl	80002bc <__adddf3>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
        for(int j_c=aux_en;j_c<=(MPCData->sizeC-1);j_c++){
 8001ac8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001acc:	3301      	adds	r3, #1
 8001ace:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001ad2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001ad6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	dbc1      	blt.n	8001a6e <runController+0x6f2>
        }
        N_d=0;
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	f04f 0300 	mov.w	r3, #0
 8001af2:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
        for(int j_d=1;j_d<=(MPCData->sizeD-1);j_d++){
 8001af6:	2301      	movs	r3, #1
 8001af8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001afc:	e02f      	b.n	8001b5e <runController+0x7e2>
            N_d=MPCData->D[j_d]*MPCData->N[k+j_d]+N_d;
 8001afe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001b02:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001b0c:	3308      	adds	r3, #8
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	ed93 7a00 	vldr	s14, [r3]
 8001b16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001b1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001b1e:	4413      	add	r3, r2
 8001b20:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8001b24:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8001b28:	6812      	ldr	r2, [r2, #0]
 8001b2a:	3318      	adds	r3, #24
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	edd3 7a00 	vldr	s15, [r3]
 8001b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b38:	ee17 0a90 	vmov	r0, s15
 8001b3c:	f7fe fd1c 	bl	8000578 <__aeabi_f2d>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8001b48:	f7fe fbb8 	bl	80002bc <__adddf3>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
        for(int j_d=1;j_d<=(MPCData->sizeD-1);j_d++){
 8001b54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001b58:	3301      	adds	r3, #1
 8001b5a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001b5e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001b62:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001b72:	4293      	cmp	r3, r2
 8001b74:	dbc3      	blt.n	8001afe <runController+0x782>
        }
        MPCData->N[k]=N_c-N_d;
 8001b76:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8001b7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001b7e:	f7fe fb9b 	bl	80002b8 <__aeabi_dsub>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4610      	mov	r0, r2
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f7ff f845 	bl	8000c18 <__aeabi_d2f>
 8001b8e:	4601      	mov	r1, r0
 8001b90:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001b94:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001b9e:	3318      	adds	r3, #24
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	6019      	str	r1, [r3, #0]
    for (int k=MPCData->N2-1;k>=0;k--){
 8001ba6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001baa:	3b01      	subs	r3, #1
 8001bac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001bb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f6bf af3f 	bge.w	8001a38 <runController+0x6bc>
    }

    // 6= calcula Ybase=X(N2-N1+1:-1:1)+N(N2-N1+1:-1:1); k=N1....N2
    for(int k=MPCData->N2-1;k>=0;k--){
 8001bba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001bbe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001bce:	e034      	b.n	8001c3a <runController+0x8be>
        MPCData->Ybase[MPCData->N2-1-k]=MPCData->N[k]+MPCData->X[k];
 8001bd0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001bd4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001bde:	3318      	adds	r3, #24
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	ed93 7a00 	vldr	s14, [r3]
 8001be8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001bec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001bf6:	330a      	adds	r3, #10
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	edd3 7a00 	vldr	s15, [r3]
 8001c00:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001c04:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001c0e:	1e5a      	subs	r2, r3, #1
 8001c10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c1a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8001c1e:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	3338      	adds	r3, #56	@ 0x38
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	3304      	adds	r3, #4
 8001c2c:	edc3 7a00 	vstr	s15, [r3]
    for(int k=MPCData->N2-1;k>=0;k--){
 8001c30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c34:	3b01      	subs	r3, #1
 8001c36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001c3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	dac6      	bge.n	8001bd0 <runController+0x854>
    }
    MPCData->X[MPCData->N2]=measure; // SERIE-PARALELO
 8001c42:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001c46:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001c50:	461c      	mov	r4, r3
 8001c52:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c56:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8001c5a:	f7fe ffdd 	bl	8000c18 <__aeabi_d2f>
 8001c5e:	4601      	mov	r1, r0
 8001c60:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001c64:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	f104 030a 	add.w	r3, r4, #10
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	6019      	str	r1, [r3, #0]
   double Ref[MPCData->N2];
   for (int i=0; i<MPCData->N2; i++)
        Ref[i]=measure;
 */

   double Ref=measure;
 8001c74:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8001c7c:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
   for (int i=0;i<MPCData->N2;i++){
 8001c80:	2300      	movs	r3, #0
 8001c82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001c86:	e03e      	b.n	8001d06 <runController+0x98a>
        MPCData->SetP[i]=reference-MPCData->weight[i]*(reference-Ref);
 8001c88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001c8c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001c96:	3348      	adds	r3, #72	@ 0x48
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe fc6a 	bl	8000578 <__aeabi_f2d>
 8001ca4:	4604      	mov	r4, r0
 8001ca6:	460d      	mov	r5, r1
 8001ca8:	f107 0320 	add.w	r3, r7, #32
 8001cac:	4619      	mov	r1, r3
 8001cae:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001cb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001cb6:	f7fe faff 	bl	80002b8 <__aeabi_dsub>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	4629      	mov	r1, r5
 8001cc2:	f7fe fcb1 	bl	8000628 <__aeabi_dmul>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	f107 0120 	add.w	r1, r7, #32
 8001cce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001cd2:	f7fe faf1 	bl	80002b8 <__aeabi_dsub>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4610      	mov	r0, r2
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f7fe ff9b 	bl	8000c18 <__aeabi_d2f>
 8001ce2:	4601      	mov	r1, r0
 8001ce4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001ce8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001cf2:	3342      	adds	r3, #66	@ 0x42
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	6019      	str	r1, [r3, #0]
   for (int i=0;i<MPCData->N2;i++){
 8001cfc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d00:	3301      	adds	r3, #1
 8001d02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001d06:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001d0a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001d14:	461a      	mov	r2, r3
 8001d16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	dbb4      	blt.n	8001c88 <runController+0x90c>
    }

    for (int i=0;i<MPCData->N2;i++){
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001d24:	e02c      	b.n	8001d80 <runController+0xa04>
        MPCData->Err[i]=MPCData->SetP[i]-MPCData->Ybase[i];
 8001d26:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001d2a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d34:	3342      	adds	r3, #66	@ 0x42
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	ed93 7a00 	vldr	s14, [r3]
 8001d40:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001d44:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d4e:	3338      	adds	r3, #56	@ 0x38
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	3304      	adds	r3, #4
 8001d56:	edd3 7a00 	vldr	s15, [r3]
 8001d5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d5e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001d62:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d6c:	333e      	adds	r3, #62	@ 0x3e
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	edc3 7a00 	vstr	s15, [r3]
    for (int i=0;i<MPCData->N2;i++){
 8001d76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001d80:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001d84:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d94:	4293      	cmp	r3, r2
 8001d96:	dbc6      	blt.n	8001d26 <runController+0x9aa>
    }

    if (MPCData->constrains==0){
 8001d98:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001d9c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f040 8098 	bne.w	8001edc <runController+0xb60>
        for(int k=0;k<MPCData->Nu;k++){
 8001dac:	2300      	movs	r3, #0
 8001dae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001db2:	e00f      	b.n	8001dd4 <runController+0xa58>
            Uopt[k]=0;
 8001db4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001db6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	18d1      	adds	r1, r2, r3
 8001dbe:	f04f 0200 	mov.w	r2, #0
 8001dc2:	f04f 0300 	mov.w	r3, #0
 8001dc6:	e9c1 2300 	strd	r2, r3, [r1]
        for(int k=0;k<MPCData->Nu;k++){
 8001dca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001dce:	3301      	adds	r3, #1
 8001dd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001dd4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001dd8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001de2:	461a      	mov	r2, r3
 8001de4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001de8:	4293      	cmp	r3, r2
 8001dea:	dbe3      	blt.n	8001db4 <runController+0xa38>
        }

        for (int k=0;k<MPCData->N2;k++){
 8001dec:	2300      	movs	r3, #0
 8001dee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001df2:	e030      	b.n	8001e56 <runController+0xada>
            Uopt[0] += MPCData->invG[k]*MPCData->Err[k];
 8001df4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001df6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001dfa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001dfe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e08:	332c      	adds	r3, #44	@ 0x2c
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	ed93 7a00 	vldr	s14, [r3]
 8001e12:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001e16:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e20:	333e      	adds	r3, #62	@ 0x3e
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	edd3 7a00 	vldr	s15, [r3]
 8001e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e2e:	ee17 0a90 	vmov	r0, s15
 8001e32:	f7fe fba1 	bl	8000578 <__aeabi_f2d>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	4629      	mov	r1, r5
 8001e3e:	f7fe fa3d 	bl	80002bc <__adddf3>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8001e48:	e9c1 2300 	strd	r2, r3, [r1]
        for (int k=0;k<MPCData->N2;k++){
 8001e4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e50:	3301      	adds	r3, #1
 8001e52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001e56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001e5a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001e64:	461a      	mov	r2, r3
 8001e66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	dbc2      	blt.n	8001df4 <runController+0xa78>

        }
        MPCData->U[MPCData->N2]=MPCData->U[MPCData->N2]+Uopt[0];
 8001e6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001e72:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001e82:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	f101 0310 	add.w	r3, r1, #16
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	3304      	adds	r3, #4
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe fb6f 	bl	8000578 <__aeabi_f2d>
 8001e9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea0:	f7fe fa0c 	bl	80002bc <__adddf3>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	4619      	mov	r1, r3
 8001eac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001eb0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001eba:	461c      	mov	r4, r3
 8001ebc:	f7fe feac 	bl	8000c18 <__aeabi_d2f>
 8001ec0:	4601      	mov	r1, r0
 8001ec2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001ec6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	f104 0310 	add.w	r3, r4, #16
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	6019      	str	r1, [r3, #0]
 8001ed8:	f000 bd4c 	b.w	8002974 <runController+0x15f8>
    }
    else{ // I/O constraints
 8001edc:	466b      	mov	r3, sp
 8001ede:	461d      	mov	r5, r3

        float maxy=105.0; // Velocidad máxima que puede alcanzar, en nuestro caso es 100.
 8001ee0:	4bd4      	ldr	r3, [pc, #848]	@ (8002234 <runController+0xeb8>)
 8001ee2:	667b      	str	r3, [r7, #100]	@ 0x64
        float miny=-105.0;
 8001ee4:	4bd4      	ldr	r3, [pc, #848]	@ (8002238 <runController+0xebc>)
 8001ee6:	663b      	str	r3, [r7, #96]	@ 0x60
        float deltaY=100.01000; //delta de velocidad
 8001ee8:	4bd4      	ldr	r3, [pc, #848]	@ (800223c <runController+0xec0>)
 8001eea:	65fb      	str	r3, [r7, #92]	@ 0x5c

        float Umin=-200.500;
 8001eec:	4bd4      	ldr	r3, [pc, #848]	@ (8002240 <runController+0xec4>)
 8001eee:	65bb      	str	r3, [r7, #88]	@ 0x58
        float Umax=200.500; // PWM máxima que puede alcanzar, en nuestro caso es 100.
 8001ef0:	4bd4      	ldr	r3, [pc, #848]	@ (8002244 <runController+0xec8>)
 8001ef2:	657b      	str	r3, [r7, #84]	@ 0x54
        float delta_U=2; //delta de la PWM cada 10 ms
 8001ef4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ef8:	653b      	str	r3, [r7, #80]	@ 0x50

        float dmaxy=MPCData->Ybase[0]+deltaY;
 8001efa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001efe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	edd3 7a39 	vldr	s15, [r3, #228]	@ 0xe4
 8001f08:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001f0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f10:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
        float dminy=MPCData->Ybase[0]-deltaY;
 8001f14:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001f18:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	ed93 7a39 	vldr	s14, [r3, #228]	@ 0xe4
 8001f22:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001f26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f2a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48


        //construct b matrix;
        //b=[maxy-Ybase;Ybase-miny;dmaxy-Ybase;Ybase-dminy; Umax-U(N2+1:-1:N2+1-Nu+1);U(N2+1:-1:N2+1-Nu+1)-Umin;ones(Nu,1)*(delta_U);ones(Nu,1)*(delta_U)];

        for (int i=0; i<MPCData->N2; i++){
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001f34:	e07a      	b.n	800202c <runController+0xcb0>
            MPCData->bmaxy[i]=maxy-MPCData->Ybase[i];
 8001f36:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001f3a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001f44:	3338      	adds	r3, #56	@ 0x38
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	3304      	adds	r3, #4
 8001f4c:	edd3 7a00 	vldr	s15, [r3]
 8001f50:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001f54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f58:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001f5c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001f66:	334e      	adds	r3, #78	@ 0x4e
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	edc3 7a00 	vstr	s15, [r3]
            MPCData->bminy[i]=MPCData->Ybase[i]-miny;
 8001f70:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001f74:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001f7e:	3338      	adds	r3, #56	@ 0x38
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	3304      	adds	r3, #4
 8001f86:	ed93 7a00 	vldr	s14, [r3]
 8001f8a:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001f8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f92:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001f96:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001fa0:	3352      	adds	r3, #82	@ 0x52
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3304      	adds	r3, #4
 8001fa8:	edc3 7a00 	vstr	s15, [r3]
            MPCData->bdmaxy[i]=dmaxy-MPCData->Ybase[i];
 8001fac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001fb0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001fba:	3338      	adds	r3, #56	@ 0x38
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	edd3 7a00 	vldr	s15, [r3]
 8001fc6:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001fca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001fd2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001fdc:	3358      	adds	r3, #88	@ 0x58
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	edc3 7a00 	vstr	s15, [r3]
            MPCData->bdminy[i]=MPCData->Ybase[i]-dminy;
 8001fe6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001fea:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001ff4:	3338      	adds	r3, #56	@ 0x38
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	ed93 7a00 	vldr	s14, [r3]
 8002000:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002004:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002008:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800200c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002016:	335c      	adds	r3, #92	@ 0x5c
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	3304      	adds	r3, #4
 800201e:	edc3 7a00 	vstr	s15, [r3]
        for (int i=0; i<MPCData->N2; i++){
 8002022:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002026:	3301      	adds	r3, #1
 8002028:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800202c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002030:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800203a:	461a      	mov	r2, r3
 800203c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002040:	4293      	cmp	r3, r2
 8002042:	f6ff af78 	blt.w	8001f36 <runController+0xbba>
        }

        for (int i=0; i<MPCData->Nu; i++){
 8002046:	2300      	movs	r3, #0
 8002048:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800204c:	e06a      	b.n	8002124 <runController+0xda8>
            MPCData->bmaxU[i]=Umax-MPCData->U[MPCData->N2-i];
 800204e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002052:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800205c:	461a      	mov	r2, r3
 800205e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8002068:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	3310      	adds	r3, #16
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	3304      	adds	r3, #4
 8002076:	edd3 7a00 	vldr	s15, [r3]
 800207a:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800207e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002082:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002086:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002090:	3362      	adds	r3, #98	@ 0x62
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	edc3 7a00 	vstr	s15, [r3]
            MPCData->bminU[i]=MPCData->U[MPCData->N2-i]-Umin;
 800209a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800209e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80020a8:	461a      	mov	r2, r3
 80020aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80020b4:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 80020b8:	6812      	ldr	r2, [r2, #0]
 80020ba:	3310      	adds	r3, #16
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	3304      	adds	r3, #4
 80020c2:	ed93 7a00 	vldr	s14, [r3]
 80020c6:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80020ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80020d2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80020dc:	3362      	adds	r3, #98	@ 0x62
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	3304      	adds	r3, #4
 80020e4:	edc3 7a00 	vstr	s15, [r3]
            MPCData->bdmaxU[i]=delta_U;
 80020e8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80020ec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80020f6:	3364      	adds	r3, #100	@ 0x64
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80020fe:	601a      	str	r2, [r3, #0]
            MPCData->bdminU[i]=delta_U;
 8002100:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002104:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800210e:	3364      	adds	r3, #100	@ 0x64
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	3304      	adds	r3, #4
 8002116:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002118:	601a      	str	r2, [r3, #0]
        for (int i=0; i<MPCData->Nu; i++){
 800211a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800211e:	3301      	adds	r3, #1
 8002120:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002124:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002128:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002132:	461a      	mov	r2, r3
 8002134:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002138:	4293      	cmp	r3, r2
 800213a:	db88      	blt.n	800204e <runController+0xcd2>
        }

        //Construct A
        //A=[G;-G;G;-G;eye(Nu);-eye(Nu);eye(Nu);-eye(Nu)];

        for (int i=0; i<MPCData->N2; i++){
 800213c:	2300      	movs	r3, #0
 800213e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002142:	e066      	b.n	8002212 <runController+0xe96>
            MPCData->Amaxy[i]=MPCData->G[i];
 8002144:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002148:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002152:	3326      	adds	r3, #38	@ 0x26
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800215e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002162:	6819      	ldr	r1, [r3, #0]
 8002164:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002168:	3366      	adds	r3, #102	@ 0x66
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	601a      	str	r2, [r3, #0]
            MPCData->Aminy[i]=-MPCData->G[i];
 8002170:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002174:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800217e:	3326      	adds	r3, #38	@ 0x26
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	edd3 7a00 	vldr	s15, [r3]
 8002188:	eef1 7a67 	vneg.f32	s15, s15
 800218c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002190:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800219a:	336a      	adds	r3, #106	@ 0x6a
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	3304      	adds	r3, #4
 80021a2:	edc3 7a00 	vstr	s15, [r3]
            MPCData->Admaxy[i]=MPCData->G[i];
 80021a6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80021aa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80021b4:	3326      	adds	r3, #38	@ 0x26
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80021c0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80021c4:	6819      	ldr	r1, [r3, #0]
 80021c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80021ca:	3370      	adds	r3, #112	@ 0x70
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	440b      	add	r3, r1
 80021d0:	601a      	str	r2, [r3, #0]
            MPCData->Adminy[i]=-MPCData->G[i];
 80021d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80021d6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80021e0:	3326      	adds	r3, #38	@ 0x26
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	edd3 7a00 	vldr	s15, [r3]
 80021ea:	eef1 7a67 	vneg.f32	s15, s15
 80021ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80021f2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80021fc:	3374      	adds	r3, #116	@ 0x74
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	3304      	adds	r3, #4
 8002204:	edc3 7a00 	vstr	s15, [r3]
        for (int i=0; i<MPCData->N2; i++){
 8002208:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800220c:	3301      	adds	r3, #1
 800220e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002212:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002216:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002220:	461a      	mov	r2, r3
 8002222:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002226:	4293      	cmp	r3, r2
 8002228:	db8c      	blt.n	8002144 <runController+0xdc8>
        }
        for (int i=0; i<MPCData->Nu; i++){
 800222a:	2300      	movs	r3, #0
 800222c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002230:	e043      	b.n	80022ba <runController+0xf3e>
 8002232:	bf00      	nop
 8002234:	42d20000 	.word	0x42d20000
 8002238:	c2d20000 	.word	0xc2d20000
 800223c:	42c8051f 	.word	0x42c8051f
 8002240:	c3488000 	.word	0xc3488000
 8002244:	43488000 	.word	0x43488000
            MPCData->AmaxU[i]=1;
 8002248:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800224c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002256:	337a      	adds	r3, #122	@ 0x7a
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002260:	601a      	str	r2, [r3, #0]
            MPCData->AminU[i]=-1;
 8002262:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002266:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002270:	337a      	adds	r3, #122	@ 0x7a
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	3304      	adds	r3, #4
 8002278:	4a94      	ldr	r2, [pc, #592]	@ (80024cc <runController+0x1150>)
 800227a:	601a      	str	r2, [r3, #0]
            MPCData->AdmaxU[i]=1;
 800227c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002280:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800228a:	337c      	adds	r3, #124	@ 0x7c
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002294:	601a      	str	r2, [r3, #0]
            MPCData->AdminU[i]=-1;
 8002296:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800229a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80022a4:	337c      	adds	r3, #124	@ 0x7c
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	3304      	adds	r3, #4
 80022ac:	4a87      	ldr	r2, [pc, #540]	@ (80024cc <runController+0x1150>)
 80022ae:	601a      	str	r2, [r3, #0]
        for (int i=0; i<MPCData->Nu; i++){
 80022b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80022b4:	3301      	adds	r3, #1
 80022b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80022ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80022be:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80022c8:	461a      	mov	r2, r3
 80022ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80022ce:	4293      	cmp	r3, r2
 80022d0:	dbba      	blt.n	8002248 <runController+0xecc>
        }
        float fullb[MPCData->N2*4+MPCData->Nu*4];
 80022d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80022d6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80022e0:	461a      	mov	r2, r3
 80022e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80022e6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80022f0:	4413      	add	r3, r2
 80022f2:	0099      	lsls	r1, r3, #2
 80022f4:	1e4b      	subs	r3, r1, #1
 80022f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80022f8:	460a      	mov	r2, r1
 80022fa:	2300      	movs	r3, #0
 80022fc:	613a      	str	r2, [r7, #16]
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	f04f 0200 	mov.w	r2, #0
 8002304:	f04f 0300 	mov.w	r3, #0
 8002308:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800230c:	4648      	mov	r0, r9
 800230e:	0143      	lsls	r3, r0, #5
 8002310:	4640      	mov	r0, r8
 8002312:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002316:	4640      	mov	r0, r8
 8002318:	0142      	lsls	r2, r0, #5
 800231a:	460a      	mov	r2, r1
 800231c:	2300      	movs	r3, #0
 800231e:	60ba      	str	r2, [r7, #8]
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	f04f 0300 	mov.w	r3, #0
 800232a:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800232e:	4648      	mov	r0, r9
 8002330:	0143      	lsls	r3, r0, #5
 8002332:	4640      	mov	r0, r8
 8002334:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002338:	4640      	mov	r0, r8
 800233a:	0142      	lsls	r2, r0, #5
 800233c:	460b      	mov	r3, r1
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	3307      	adds	r3, #7
 8002342:	08db      	lsrs	r3, r3, #3
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	ebad 0d03 	sub.w	sp, sp, r3
 800234a:	ab04      	add	r3, sp, #16
 800234c:	3303      	adds	r3, #3
 800234e:	089b      	lsrs	r3, r3, #2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	643b      	str	r3, [r7, #64]	@ 0x40
        float fullA[MPCData->Nu*4+MPCData->N2*4];
 8002354:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002358:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002362:	461a      	mov	r2, r3
 8002364:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002368:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002372:	4413      	add	r3, r2
 8002374:	0099      	lsls	r1, r3, #2
 8002376:	1e4b      	subs	r3, r1, #1
 8002378:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800237a:	460a      	mov	r2, r1
 800237c:	2300      	movs	r3, #0
 800237e:	603a      	str	r2, [r7, #0]
 8002380:	607b      	str	r3, [r7, #4]
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	f04f 0300 	mov.w	r3, #0
 800238a:	e9d7 8900 	ldrd	r8, r9, [r7]
 800238e:	4648      	mov	r0, r9
 8002390:	0143      	lsls	r3, r0, #5
 8002392:	4640      	mov	r0, r8
 8002394:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002398:	4640      	mov	r0, r8
 800239a:	0142      	lsls	r2, r0, #5
 800239c:	460a      	mov	r2, r1
 800239e:	2300      	movs	r3, #0
 80023a0:	4692      	mov	sl, r2
 80023a2:	469b      	mov	fp, r3
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	f04f 0300 	mov.w	r3, #0
 80023ac:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80023b0:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80023b4:	ea4f 124a 	mov.w	r2, sl, lsl #5
 80023b8:	460b      	mov	r3, r1
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	3307      	adds	r3, #7
 80023be:	08db      	lsrs	r3, r3, #3
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	ebad 0d03 	sub.w	sp, sp, r3
 80023c6:	ab04      	add	r3, sp, #16
 80023c8:	3303      	adds	r3, #3
 80023ca:	089b      	lsrs	r3, r3, #2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	63bb      	str	r3, [r7, #56]	@ 0x38

        for (int i=0;i<MPCData->N2;i++){
 80023d0:	2300      	movs	r3, #0
 80023d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80023d6:	e068      	b.n	80024aa <runController+0x112e>
            fullb[i]=              MPCData->bmaxy[i] ;
 80023d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80023dc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80023e6:	334e      	adds	r3, #78	@ 0x4e
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80023f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	440b      	add	r3, r1
 80023f8:	601a      	str	r2, [r3, #0]
            fullb[MPCData->N2+i]=  MPCData->bminy[i] ;
 80023fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80023fe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002408:	461a      	mov	r2, r3
 800240a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800240e:	4413      	add	r3, r2
 8002410:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8002414:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8002418:	6811      	ldr	r1, [r2, #0]
 800241a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800241e:	3252      	adds	r2, #82	@ 0x52
 8002420:	0092      	lsls	r2, r2, #2
 8002422:	440a      	add	r2, r1
 8002424:	3204      	adds	r2, #4
 8002426:	6812      	ldr	r2, [r2, #0]
 8002428:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	601a      	str	r2, [r3, #0]
            fullb[MPCData->N2*2+i]=MPCData->bdmaxy[i] ;
 8002430:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002434:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800243e:	005a      	lsls	r2, r3, #1
 8002440:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002444:	4413      	add	r3, r2
 8002446:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800244a:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 800244e:	6811      	ldr	r1, [r2, #0]
 8002450:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002454:	3258      	adds	r2, #88	@ 0x58
 8002456:	0092      	lsls	r2, r2, #2
 8002458:	440a      	add	r2, r1
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	601a      	str	r2, [r3, #0]
            fullb[MPCData->N2*3+i]=MPCData->bdminy[i] ;
 8002464:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002468:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002472:	461a      	mov	r2, r3
 8002474:	4613      	mov	r3, r2
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	441a      	add	r2, r3
 800247a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800247e:	4413      	add	r3, r2
 8002480:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8002484:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8002488:	6811      	ldr	r1, [r2, #0]
 800248a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800248e:	325c      	adds	r2, #92	@ 0x5c
 8002490:	0092      	lsls	r2, r2, #2
 8002492:	440a      	add	r2, r1
 8002494:	3204      	adds	r2, #4
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	601a      	str	r2, [r3, #0]
        for (int i=0;i<MPCData->N2;i++){
 80024a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80024a4:	3301      	adds	r3, #1
 80024a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80024aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80024ae:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80024b8:	461a      	mov	r2, r3
 80024ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80024be:	4293      	cmp	r3, r2
 80024c0:	db8a      	blt.n	80023d8 <runController+0x105c>
        }

        for (int i=0;i<MPCData->Nu;i++){
 80024c2:	2300      	movs	r3, #0
 80024c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80024c8:	e08e      	b.n	80025e8 <runController+0x126c>
 80024ca:	bf00      	nop
 80024cc:	bf800000 	.word	0xbf800000
            fullb[MPCData->N2*4+i]=              MPCData->bmaxU[i];
 80024d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80024d4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80024de:	009a      	lsls	r2, r3, #2
 80024e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024e4:	4413      	add	r3, r2
 80024e6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80024ea:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 80024ee:	6811      	ldr	r1, [r2, #0]
 80024f0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80024f4:	3262      	adds	r2, #98	@ 0x62
 80024f6:	0092      	lsls	r2, r2, #2
 80024f8:	440a      	add	r2, r1
 80024fa:	6812      	ldr	r2, [r2, #0]
 80024fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	601a      	str	r2, [r3, #0]
            fullb[MPCData->N2*4+MPCData->Nu+i]=  MPCData->bminU[i];
 8002504:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002508:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8002518:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 800251c:	6812      	ldr	r2, [r2, #0]
 800251e:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8002522:	441a      	add	r2, r3
 8002524:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002528:	4413      	add	r3, r2
 800252a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800252e:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8002532:	6811      	ldr	r1, [r2, #0]
 8002534:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002538:	3262      	adds	r2, #98	@ 0x62
 800253a:	0092      	lsls	r2, r2, #2
 800253c:	440a      	add	r2, r1
 800253e:	3204      	adds	r2, #4
 8002540:	6812      	ldr	r2, [r2, #0]
 8002542:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	440b      	add	r3, r1
 8002548:	601a      	str	r2, [r3, #0]
            fullb[MPCData->N2*4+MPCData->Nu*2+i]=MPCData->bdmaxU[i] ;
 800254a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800254e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800255e:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8002568:	4413      	add	r3, r2
 800256a:	005a      	lsls	r2, r3, #1
 800256c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002570:	4413      	add	r3, r2
 8002572:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8002576:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 800257a:	6811      	ldr	r1, [r2, #0]
 800257c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002580:	3264      	adds	r2, #100	@ 0x64
 8002582:	0092      	lsls	r2, r2, #2
 8002584:	440a      	add	r2, r1
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	601a      	str	r2, [r3, #0]
            fullb[MPCData->N2*4+MPCData->Nu*3+i]=MPCData->bdminU[i] ;
 8002590:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002594:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800259e:	009a      	lsls	r2, r3, #2
 80025a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80025a4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80025ae:	4619      	mov	r1, r3
 80025b0:	460b      	mov	r3, r1
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	440b      	add	r3, r1
 80025b6:	441a      	add	r2, r3
 80025b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025bc:	4413      	add	r3, r2
 80025be:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80025c2:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 80025c6:	6811      	ldr	r1, [r2, #0]
 80025c8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80025cc:	3264      	adds	r2, #100	@ 0x64
 80025ce:	0092      	lsls	r2, r2, #2
 80025d0:	440a      	add	r2, r1
 80025d2:	3204      	adds	r2, #4
 80025d4:	6812      	ldr	r2, [r2, #0]
 80025d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	601a      	str	r2, [r3, #0]
        for (int i=0;i<MPCData->Nu;i++){
 80025de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025e2:	3301      	adds	r3, #1
 80025e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80025e8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80025ec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80025f6:	461a      	mov	r2, r3
 80025f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025fc:	4293      	cmp	r3, r2
 80025fe:	f6ff af67 	blt.w	80024d0 <runController+0x1154>

        }


        for (int i=0;i<MPCData->N2;i++){
 8002602:	2300      	movs	r3, #0
 8002604:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002608:	e068      	b.n	80026dc <runController+0x1360>
            fullA[i]=              MPCData->Amaxy[i]  ;
 800260a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800260e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002618:	3366      	adds	r3, #102	@ 0x66
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002622:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	440b      	add	r3, r1
 800262a:	601a      	str	r2, [r3, #0]
            fullA[MPCData->N2+i]=  MPCData->Aminy[i]  ;
 800262c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002630:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800263a:	461a      	mov	r2, r3
 800263c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002640:	4413      	add	r3, r2
 8002642:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8002646:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 800264a:	6811      	ldr	r1, [r2, #0]
 800264c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002650:	326a      	adds	r2, #106	@ 0x6a
 8002652:	0092      	lsls	r2, r2, #2
 8002654:	440a      	add	r2, r1
 8002656:	3204      	adds	r2, #4
 8002658:	6812      	ldr	r2, [r2, #0]
 800265a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	440b      	add	r3, r1
 8002660:	601a      	str	r2, [r3, #0]
            fullA[MPCData->N2*2+i]=MPCData->Admaxy[i] ;
 8002662:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002666:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002670:	005a      	lsls	r2, r3, #1
 8002672:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002676:	4413      	add	r3, r2
 8002678:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800267c:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8002680:	6811      	ldr	r1, [r2, #0]
 8002682:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002686:	3270      	adds	r2, #112	@ 0x70
 8002688:	0092      	lsls	r2, r2, #2
 800268a:	440a      	add	r2, r1
 800268c:	6812      	ldr	r2, [r2, #0]
 800268e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	601a      	str	r2, [r3, #0]
            fullA[MPCData->N2*3+i]=MPCData->Adminy[i] ;
 8002696:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800269a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80026a4:	461a      	mov	r2, r3
 80026a6:	4613      	mov	r3, r2
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	441a      	add	r2, r3
 80026ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80026b0:	4413      	add	r3, r2
 80026b2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80026b6:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 80026ba:	6811      	ldr	r1, [r2, #0]
 80026bc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80026c0:	3274      	adds	r2, #116	@ 0x74
 80026c2:	0092      	lsls	r2, r2, #2
 80026c4:	440a      	add	r2, r1
 80026c6:	3204      	adds	r2, #4
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	440b      	add	r3, r1
 80026d0:	601a      	str	r2, [r3, #0]
        for (int i=0;i<MPCData->N2;i++){
 80026d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80026d6:	3301      	adds	r3, #1
 80026d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80026dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80026e0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80026ea:	461a      	mov	r2, r3
 80026ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80026f0:	4293      	cmp	r3, r2
 80026f2:	db8a      	blt.n	800260a <runController+0x128e>

        }

        for (int i=0;i<MPCData->Nu;i++){
 80026f4:	2300      	movs	r3, #0
 80026f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80026fa:	e08b      	b.n	8002814 <runController+0x1498>
            fullA[MPCData->N2*4+i]=              MPCData->AmaxU[i] ;
 80026fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002700:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800270a:	009a      	lsls	r2, r3, #2
 800270c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002710:	4413      	add	r3, r2
 8002712:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8002716:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 800271a:	6811      	ldr	r1, [r2, #0]
 800271c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8002720:	327a      	adds	r2, #122	@ 0x7a
 8002722:	0092      	lsls	r2, r2, #2
 8002724:	440a      	add	r2, r1
 8002726:	6812      	ldr	r2, [r2, #0]
 8002728:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	601a      	str	r2, [r3, #0]
            fullA[MPCData->N2*4+MPCData->Nu+i]=  MPCData->AminU[i] ;
 8002730:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002734:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8002744:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8002748:	6812      	ldr	r2, [r2, #0]
 800274a:	f992 2002 	ldrsb.w	r2, [r2, #2]
 800274e:	441a      	add	r2, r3
 8002750:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002754:	4413      	add	r3, r2
 8002756:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800275a:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 800275e:	6811      	ldr	r1, [r2, #0]
 8002760:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8002764:	327a      	adds	r2, #122	@ 0x7a
 8002766:	0092      	lsls	r2, r2, #2
 8002768:	440a      	add	r2, r1
 800276a:	3204      	adds	r2, #4
 800276c:	6812      	ldr	r2, [r2, #0]
 800276e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	440b      	add	r3, r1
 8002774:	601a      	str	r2, [r3, #0]
            fullA[MPCData->N2*4+MPCData->Nu*2+i]=MPCData->AdmaxU[i];
 8002776:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800277a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800278a:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 800278e:	6812      	ldr	r2, [r2, #0]
 8002790:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8002794:	4413      	add	r3, r2
 8002796:	005a      	lsls	r2, r3, #1
 8002798:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800279c:	4413      	add	r3, r2
 800279e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80027a2:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 80027a6:	6811      	ldr	r1, [r2, #0]
 80027a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80027ac:	327c      	adds	r2, #124	@ 0x7c
 80027ae:	0092      	lsls	r2, r2, #2
 80027b0:	440a      	add	r2, r1
 80027b2:	6812      	ldr	r2, [r2, #0]
 80027b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	601a      	str	r2, [r3, #0]
            fullA[MPCData->N2*4+MPCData->Nu*3+i]=MPCData->AdminU[i];
 80027bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80027c0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80027ca:	009a      	lsls	r2, r3, #2
 80027cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80027d0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80027da:	4619      	mov	r1, r3
 80027dc:	460b      	mov	r3, r1
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	440b      	add	r3, r1
 80027e2:	441a      	add	r2, r3
 80027e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027e8:	4413      	add	r3, r2
 80027ea:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80027ee:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 80027f2:	6811      	ldr	r1, [r2, #0]
 80027f4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80027f8:	327c      	adds	r2, #124	@ 0x7c
 80027fa:	0092      	lsls	r2, r2, #2
 80027fc:	440a      	add	r2, r1
 80027fe:	3204      	adds	r2, #4
 8002800:	6812      	ldr	r2, [r2, #0]
 8002802:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	440b      	add	r3, r1
 8002808:	601a      	str	r2, [r3, #0]
        for (int i=0;i<MPCData->Nu;i++){
 800280a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800280e:	3301      	adds	r3, #1
 8002810:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002814:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002818:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002822:	461a      	mov	r2, r3
 8002824:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002828:	4293      	cmp	r3, r2
 800282a:	f6ff af67 	blt.w	80026fc <runController+0x1380>

        }


        float F1;
        F1=0;
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	637b      	str	r3, [r7, #52]	@ 0x34
        for (int i=0;i<MPCData->N2;i++){
 8002834:	2300      	movs	r3, #0
 8002836:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800283a:	e035      	b.n	80028a8 <runController+0x152c>
            F1=F1+MPCData->f[i]*(MPCData->Ybase[i]-MPCData->SetP[i]);
 800283c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002840:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800284a:	3330      	adds	r3, #48	@ 0x30
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	3304      	adds	r3, #4
 8002852:	ed93 7a00 	vldr	s14, [r3]
 8002856:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800285a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002864:	3338      	adds	r3, #56	@ 0x38
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	3304      	adds	r3, #4
 800286c:	edd3 6a00 	vldr	s13, [r3]
 8002870:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002874:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800287e:	3342      	adds	r3, #66	@ 0x42
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	3304      	adds	r3, #4
 8002886:	edd3 7a00 	vldr	s15, [r3]
 800288a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800288e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002892:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002896:	ee77 7a27 	vadd.f32	s15, s14, s15
 800289a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
        for (int i=0;i<MPCData->N2;i++){
 800289e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028a2:	3301      	adds	r3, #1
 80028a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80028a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80028ac:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80028b6:	461a      	mov	r2, r3
 80028b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028bc:	4293      	cmp	r3, r2
 80028be:	dbbd      	blt.n	800283c <runController+0x14c0>

        }

        Uopt[0]=QPhild( MPCData->invH,&F1,fullA,fullb,MPCData->n1,1,MPCData);
 80028c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80028c4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f103 00ac 	add.w	r0, r3, #172	@ 0xac
 80028ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80028d2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80028dc:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80028e0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80028e4:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 80028e8:	6812      	ldr	r2, [r2, #0]
 80028ea:	9202      	str	r2, [sp, #8]
 80028ec:	2201      	movs	r2, #1
 80028ee:	9201      	str	r2, [sp, #4]
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80028f6:	f000 f85b 	bl	80029b0 <QPhild>
 80028fa:	eeb0 7a40 	vmov.f32	s14, s0
 80028fe:	eef0 7a60 	vmov.f32	s15, s1
 8002902:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002904:	ed83 7b00 	vstr	d7, [r3]



        MPCData->U[MPCData->N2]=MPCData->U[MPCData->N2]+Uopt[0];
 8002908:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800290c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002916:	4619      	mov	r1, r3
 8002918:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800291c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	f101 0310 	add.w	r3, r1, #16
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	3304      	adds	r3, #4
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7fd fe22 	bl	8000578 <__aeabi_f2d>
 8002934:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293a:	f7fd fcbf 	bl	80002bc <__adddf3>
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	4610      	mov	r0, r2
 8002944:	4619      	mov	r1, r3
 8002946:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800294a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002954:	461c      	mov	r4, r3
 8002956:	f7fe f95f 	bl	8000c18 <__aeabi_d2f>
 800295a:	4601      	mov	r1, r0
 800295c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002960:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	f104 0310 	add.w	r3, r4, #16
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	3304      	adds	r3, #4
 8002970:	6019      	str	r1, [r3, #0]
 8002972:	46ad      	mov	sp, r5
    }

    return MPCData->U[MPCData->N2];
 8002974:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002978:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002982:	4619      	mov	r1, r3
 8002984:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002988:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	f101 0310 	add.w	r3, r1, #16
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	3304      	adds	r3, #4
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	46b5      	mov	sp, r6
 800299c:	ee07 3a90 	vmov	s15, r3
}
 80029a0:	eeb0 0a67 	vmov.f32	s0, s15
 80029a4:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80029a8:	46bd      	mov	sp, r7
 80029aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029ae:	bf00      	nop

080029b0 <QPhild>:
double QPhild(float *invH, float *f, float *A, float *bn, int n1, int m1,struct MPCData* MPCData){
 80029b0:	b5b0      	push	{r4, r5, r7, lr}
 80029b2:	b09a      	sub	sp, #104	@ 0x68
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
 80029bc:	603b      	str	r3, [r7, #0]



    double eta=-invH[0] * f[0];
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	edd3 7a00 	vldr	s15, [r3]
 80029c4:	eeb1 7a67 	vneg.f32	s14, s15
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	edd3 7a00 	vldr	s15, [r3]
 80029ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029d2:	ee17 0a90 	vmov	r0, s15
 80029d6:	f7fd fdcf 	bl	8000578 <__aeabi_f2d>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	e9c7 2306 	strd	r2, r3, [r7, #24]

    float kk=0;
 80029e2:	f04f 0300 	mov.w	r3, #0
 80029e6:	667b      	str	r3, [r7, #100]	@ 0x64

    for (int i=0;i<n1;i++){
 80029e8:	2300      	movs	r3, #0
 80029ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80029ec:	e02c      	b.n	8002a48 <QPhild+0x98>
        if(A[i]*eta>bn[i]){
 80029ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	4413      	add	r3, r2
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7fd fdbd 	bl	8000578 <__aeabi_f2d>
 80029fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a02:	f7fd fe11 	bl	8000628 <__aeabi_dmul>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	4614      	mov	r4, r2
 8002a0c:	461d      	mov	r5, r3
 8002a0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	4413      	add	r3, r2
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fd fdad 	bl	8000578 <__aeabi_f2d>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	4620      	mov	r0, r4
 8002a24:	4629      	mov	r1, r5
 8002a26:	f7fe f88f 	bl	8000b48 <__aeabi_dcmpgt>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d008      	beq.n	8002a42 <QPhild+0x92>
            kk=kk+1;
 8002a30:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002a34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002a38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a3c:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
            break;
 8002a40:	e006      	b.n	8002a50 <QPhild+0xa0>
    for (int i=0;i<n1;i++){
 8002a42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a44:	3301      	adds	r3, #1
 8002a46:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a48:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002a4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	dbce      	blt.n	80029ee <QPhild+0x3e>
        }

    }
    if(kk==0){
 8002a50:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002a54:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a5c:	d104      	bne.n	8002a68 <QPhild+0xb8>
        return 0;
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	f04f 0300 	mov.w	r3, #0
 8002a66:	e1b9      	b.n	8002ddc <QPhild+0x42c>
    }

    for (int j=0;j<n1;j++){
 8002a68:	2300      	movs	r3, #0
 8002a6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a6c:	e02c      	b.n	8002ac8 <QPhild+0x118>
        for (int i=0;i<n1;i++){
 8002a6e:	2300      	movs	r3, #0
 8002a70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002a72:	e022      	b.n	8002aba <QPhild+0x10a>
            MPCData->P[n1*j+i]=A[j] * invH[0] * A[i];
 8002a74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	ed93 7a00 	vldr	s14, [r3]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	edd3 7a00 	vldr	s15, [r3]
 8002a86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	4413      	add	r3, r2
 8002a92:	edd3 7a00 	vldr	s15, [r3]
 8002a96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a98:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002a9a:	fb03 f202 	mul.w	r2, r3, r2
 8002a9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002aa0:	4413      	add	r3, r2
 8002aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aa6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002aaa:	33ae      	adds	r3, #174	@ 0xae
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	edc3 7a00 	vstr	s15, [r3]
        for (int i=0;i<n1;i++){
 8002ab4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002aba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002abc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	dbd8      	blt.n	8002a74 <QPhild+0xc4>
    for (int j=0;j<n1;j++){
 8002ac2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ac8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002aca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002acc:	429a      	cmp	r2, r3
 8002ace:	dbce      	blt.n	8002a6e <QPhild+0xbe>

        }

    }

    for (int i=0;i<n1;i++){
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ad4:	e023      	b.n	8002b1e <QPhild+0x16e>
        MPCData->d[i]=A[i]*invH[0]*f[0]+bn[i];
 8002ad6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	4413      	add	r3, r2
 8002ade:	ed93 7a00 	vldr	s14, [r3]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	edd3 7a00 	vldr	s15, [r3]
 8002ae8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	edd3 7a00 	vldr	s15, [r3]
 8002af2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002af6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	4413      	add	r3, r2
 8002afe:	edd3 7a00 	vldr	s15, [r3]
 8002b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b06:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002b0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b0c:	f203 23ee 	addw	r3, r3, #750	@ 0x2ee
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	edc3 7a00 	vstr	s15, [r3]
    for (int i=0;i<n1;i++){
 8002b18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b1e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002b20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b22:	429a      	cmp	r2, r3
 8002b24:	dbd7      	blt.n	8002ad6 <QPhild+0x126>
    }

    for(int k=0;k<n1;k++){
 8002b26:	2300      	movs	r3, #0
 8002b28:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b2a:	e00b      	b.n	8002b44 <QPhild+0x194>
        MPCData->lambda[k]=0;
 8002b2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002b30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b32:	337e      	adds	r3, #126	@ 0x7e
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	f04f 0200 	mov.w	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
    for(int k=0;k<n1;k++){
 8002b3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b40:	3301      	adds	r3, #1
 8002b42:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b44:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002b46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	dbef      	blt.n	8002b2c <QPhild+0x17c>
    }
    float presition=10;
 8002b4c:	4bae      	ldr	r3, [pc, #696]	@ (8002e08 <QPhild+0x458>)
 8002b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    int maxIterations=20;
 8002b50:	2314      	movs	r3, #20
 8002b52:	617b      	str	r3, [r7, #20]
    for (int i=0;i<maxIterations;i++){
 8002b54:	2300      	movs	r3, #0
 8002b56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b58:	e0ee      	b.n	8002d38 <QPhild+0x388>

        for(int k=0;k<n1;k++){
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b5e:	e010      	b.n	8002b82 <QPhild+0x1d2>
            MPCData->lambda_p[k]=MPCData->lambda[k];
 8002b60:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002b64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b66:	337e      	adds	r3, #126	@ 0x7e
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8002b72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b74:	3396      	adds	r3, #150	@ 0x96
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	601a      	str	r2, [r3, #0]
        for(int k=0;k<n1;k++){
 8002b7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b7e:	3301      	adds	r3, #1
 8002b80:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b86:	429a      	cmp	r2, r3
 8002b88:	dbea      	blt.n	8002b60 <QPhild+0x1b0>
        }
        for (int j=0;j<n1;j++){
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b8e:	e082      	b.n	8002c96 <QPhild+0x2e6>
            float temp=0;
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
            for(int k=0;k<n1;k++){
 8002b96:	2300      	movs	r3, #0
 8002b98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b9a:	e01f      	b.n	8002bdc <QPhild+0x22c>
                temp=temp+MPCData->P[n1*j+k]*MPCData->lambda[k];
 8002b9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ba0:	fb03 f202 	mul.w	r2, r3, r2
 8002ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002bac:	33ae      	adds	r3, #174	@ 0xae
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	ed93 7a00 	vldr	s14, [r3]
 8002bb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bbc:	337e      	adds	r3, #126	@ 0x7e
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	edd3 7a00 	vldr	s15, [r3]
 8002bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bca:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bd2:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
            for(int k=0;k<n1;k++){
 8002bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bd8:	3301      	adds	r3, #1
 8002bda:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bdc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002bde:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002be0:	429a      	cmp	r2, r3
 8002be2:	dbdb      	blt.n	8002b9c <QPhild+0x1ec>

            }

            temp=temp-MPCData->P[n1*j+j]*MPCData->lambda[j]+MPCData->d[j];
 8002be4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002be6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002be8:	fb03 f202 	mul.w	r2, r3, r2
 8002bec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bee:	4413      	add	r3, r2
 8002bf0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002bf4:	33ae      	adds	r3, #174	@ 0xae
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	ed93 7a00 	vldr	s14, [r3]
 8002bfe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002c02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c04:	337e      	adds	r3, #126	@ 0x7e
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	edd3 7a00 	vldr	s15, [r3]
 8002c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c12:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002c16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002c1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c20:	f203 23ee 	addw	r3, r3, #750	@ 0x2ee
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	edd3 7a00 	vldr	s15, [r3]
 8002c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c30:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
            float temp2=-temp/MPCData->P[n1*j+j];
 8002c34:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002c38:	eef1 6a67 	vneg.f32	s13, s15
 8002c3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c40:	fb03 f202 	mul.w	r2, r3, r2
 8002c44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c46:	4413      	add	r3, r2
 8002c48:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002c4c:	33ae      	adds	r3, #174	@ 0xae
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	ed93 7a00 	vldr	s14, [r3]
 8002c56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c5a:	edc7 7a04 	vstr	s15, [r7, #16]
            MPCData->lambda[j]=fmax(0,temp2);
 8002c5e:	6938      	ldr	r0, [r7, #16]
 8002c60:	f7fd fc8a 	bl	8000578 <__aeabi_f2d>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	ed9f 1b61 	vldr	d1, [pc, #388]	@ 8002df0 <QPhild+0x440>
 8002c6c:	ec43 2b10 	vmov	d0, r2, r3
 8002c70:	f01b ff67 	bl	801eb42 <fmax>
 8002c74:	ec53 2b10 	vmov	r2, r3, d0
 8002c78:	4610      	mov	r0, r2
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	f7fd ffcc 	bl	8000c18 <__aeabi_d2f>
 8002c80:	4601      	mov	r1, r0
 8002c82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002c86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c88:	337e      	adds	r3, #126	@ 0x7e
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	6019      	str	r1, [r3, #0]
        for (int j=0;j<n1;j++){
 8002c90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c92:	3301      	adds	r3, #1
 8002c94:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	f6ff af78 	blt.w	8002b90 <QPhild+0x1e0>


        }

        presition=0;
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	64fb      	str	r3, [r7, #76]	@ 0x4c
        for(int i=0;i<n1;i++){
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002caa:	e033      	b.n	8002d14 <QPhild+0x364>
            presition+=pow(MPCData->lambda[i]-MPCData->lambda_p[i],2);
 8002cac:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cb2:	337e      	adds	r3, #126	@ 0x7e
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	ed93 7a00 	vldr	s14, [r3]
 8002cbc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002cc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cc2:	3396      	adds	r3, #150	@ 0x96
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	edd3 7a00 	vldr	s15, [r3]
 8002ccc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cd0:	ee17 0a90 	vmov	r0, s15
 8002cd4:	f7fd fc50 	bl	8000578 <__aeabi_f2d>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	ed9f 1b46 	vldr	d1, [pc, #280]	@ 8002df8 <QPhild+0x448>
 8002ce0:	ec43 2b10 	vmov	d0, r2, r3
 8002ce4:	f01b feb2 	bl	801ea4c <pow>
 8002ce8:	ec55 4b10 	vmov	r4, r5, d0
 8002cec:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002cee:	f7fd fc43 	bl	8000578 <__aeabi_f2d>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	4620      	mov	r0, r4
 8002cf8:	4629      	mov	r1, r5
 8002cfa:	f7fd fadf 	bl	80002bc <__adddf3>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	4610      	mov	r0, r2
 8002d04:	4619      	mov	r1, r3
 8002d06:	f7fd ff87 	bl	8000c18 <__aeabi_d2f>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
        for(int i=0;i<n1;i++){
 8002d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d10:	3301      	adds	r3, #1
 8002d12:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	dbc7      	blt.n	8002cac <QPhild+0x2fc>
        }
        if (presition<0.001)
 8002d1c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002d1e:	f7fd fc2b 	bl	8000578 <__aeabi_f2d>
 8002d22:	a337      	add	r3, pc, #220	@ (adr r3, 8002e00 <QPhild+0x450>)
 8002d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d28:	f7fd fef0 	bl	8000b0c <__aeabi_dcmplt>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d108      	bne.n	8002d44 <QPhild+0x394>
    for (int i=0;i<maxIterations;i++){
 8002d32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d34:	3301      	adds	r3, #1
 8002d36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	f6ff af0c 	blt.w	8002b5a <QPhild+0x1aa>
 8002d42:	e000      	b.n	8002d46 <QPhild+0x396>
            break;
 8002d44:	bf00      	nop
    }
    double temp=0;
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	f04f 0300 	mov.w	r3, #0
 8002d4e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    for(int i=0;i<n1;i++){
 8002d52:	2300      	movs	r3, #0
 8002d54:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d56:	e025      	b.n	8002da4 <QPhild+0x3f4>
        temp+=invH[0]*A[i]*MPCData->lambda[i];
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	ed93 7a00 	vldr	s14, [r3]
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	4413      	add	r3, r2
 8002d66:	edd3 7a00 	vldr	s15, [r3]
 8002d6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d74:	337e      	adds	r3, #126	@ 0x7e
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	edd3 7a00 	vldr	s15, [r3]
 8002d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d82:	ee17 0a90 	vmov	r0, s15
 8002d86:	f7fd fbf7 	bl	8000578 <__aeabi_f2d>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002d92:	f7fd fa93 	bl	80002bc <__adddf3>
 8002d96:	4602      	mov	r2, r0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    for(int i=0;i<n1;i++){
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da0:	3301      	adds	r3, #1
 8002da2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002da4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002da6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002da8:	429a      	cmp	r2, r3
 8002daa:	dbd5      	blt.n	8002d58 <QPhild+0x3a8>
    }
    eta=-invH[0]*f[0]-temp;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	edd3 7a00 	vldr	s15, [r3]
 8002db2:	eeb1 7a67 	vneg.f32	s14, s15
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	edd3 7a00 	vldr	s15, [r3]
 8002dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dc0:	ee17 0a90 	vmov	r0, s15
 8002dc4:	f7fd fbd8 	bl	8000578 <__aeabi_f2d>
 8002dc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002dcc:	f7fd fa74 	bl	80002b8 <__aeabi_dsub>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	e9c7 2306 	strd	r2, r3, [r7, #24]



    return eta;
 8002dd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8002ddc:	ec43 2b17 	vmov	d7, r2, r3
 8002de0:	eeb0 0a47 	vmov.f32	s0, s14
 8002de4:	eef0 0a67 	vmov.f32	s1, s15
 8002de8:	3768      	adds	r7, #104	@ 0x68
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bdb0      	pop	{r4, r5, r7, pc}
 8002dee:	bf00      	nop
	...
 8002dfc:	40000000 	.word	0x40000000
 8002e00:	d2f1a9fc 	.word	0xd2f1a9fc
 8002e04:	3f50624d 	.word	0x3f50624d
 8002e08:	41200000 	.word	0x41200000

08002e0c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08a      	sub	sp, #40	@ 0x28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002e18:	f008 fa6a 	bl	800b2f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002e1c:	4b5a      	ldr	r3, [pc, #360]	@ (8002f88 <pvPortMallocMicroROS+0x17c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8002e24:	f000 f986 	bl	8003134 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002e28:	4b58      	ldr	r3, [pc, #352]	@ (8002f8c <pvPortMallocMicroROS+0x180>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f040 8090 	bne.w	8002f56 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d01e      	beq.n	8002e7a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8002e3c:	2208      	movs	r2, #8
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4413      	add	r3, r2
 8002e42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d015      	beq.n	8002e7a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f023 0307 	bic.w	r3, r3, #7
 8002e54:	3308      	adds	r3, #8
 8002e56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00b      	beq.n	8002e7a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e66:	f383 8811 	msr	BASEPRI, r3
 8002e6a:	f3bf 8f6f 	isb	sy
 8002e6e:	f3bf 8f4f 	dsb	sy
 8002e72:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002e74:	bf00      	nop
 8002e76:	bf00      	nop
 8002e78:	e7fd      	b.n	8002e76 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d06a      	beq.n	8002f56 <pvPortMallocMicroROS+0x14a>
 8002e80:	4b43      	ldr	r3, [pc, #268]	@ (8002f90 <pvPortMallocMicroROS+0x184>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d865      	bhi.n	8002f56 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002e8a:	4b42      	ldr	r3, [pc, #264]	@ (8002f94 <pvPortMallocMicroROS+0x188>)
 8002e8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002e8e:	4b41      	ldr	r3, [pc, #260]	@ (8002f94 <pvPortMallocMicroROS+0x188>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002e94:	e004      	b.n	8002ea0 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8002e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d903      	bls.n	8002eb2 <pvPortMallocMicroROS+0xa6>
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f1      	bne.n	8002e96 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002eb2:	4b35      	ldr	r3, [pc, #212]	@ (8002f88 <pvPortMallocMicroROS+0x17c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d04c      	beq.n	8002f56 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2208      	movs	r2, #8
 8002ec2:	4413      	add	r3, r2
 8002ec4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	1ad2      	subs	r2, r2, r3
 8002ed6:	2308      	movs	r3, #8
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d920      	bls.n	8002f20 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00b      	beq.n	8002f08 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8002ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ef4:	f383 8811 	msr	BASEPRI, r3
 8002ef8:	f3bf 8f6f 	isb	sy
 8002efc:	f3bf 8f4f 	dsb	sy
 8002f00:	613b      	str	r3, [r7, #16]
}
 8002f02:	bf00      	nop
 8002f04:	bf00      	nop
 8002f06:	e7fd      	b.n	8002f04 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	1ad2      	subs	r2, r2, r3
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002f1a:	69b8      	ldr	r0, [r7, #24]
 8002f1c:	f000 f96c 	bl	80031f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002f20:	4b1b      	ldr	r3, [pc, #108]	@ (8002f90 <pvPortMallocMicroROS+0x184>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	4a19      	ldr	r2, [pc, #100]	@ (8002f90 <pvPortMallocMicroROS+0x184>)
 8002f2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002f2e:	4b18      	ldr	r3, [pc, #96]	@ (8002f90 <pvPortMallocMicroROS+0x184>)
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	4b19      	ldr	r3, [pc, #100]	@ (8002f98 <pvPortMallocMicroROS+0x18c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d203      	bcs.n	8002f42 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002f3a:	4b15      	ldr	r3, [pc, #84]	@ (8002f90 <pvPortMallocMicroROS+0x184>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a16      	ldr	r2, [pc, #88]	@ (8002f98 <pvPortMallocMicroROS+0x18c>)
 8002f40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	4b11      	ldr	r3, [pc, #68]	@ (8002f8c <pvPortMallocMicroROS+0x180>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002f56:	f008 f9d9 	bl	800b30c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00b      	beq.n	8002f7c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8002f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f68:	f383 8811 	msr	BASEPRI, r3
 8002f6c:	f3bf 8f6f 	isb	sy
 8002f70:	f3bf 8f4f 	dsb	sy
 8002f74:	60fb      	str	r3, [r7, #12]
}
 8002f76:	bf00      	nop
 8002f78:	bf00      	nop
 8002f7a:	e7fd      	b.n	8002f78 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8002f7c:	69fb      	ldr	r3, [r7, #28]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3728      	adds	r7, #40	@ 0x28
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	20003ebc 	.word	0x20003ebc
 8002f8c:	20003ec8 	.word	0x20003ec8
 8002f90:	20003ec0 	.word	0x20003ec0
 8002f94:	20003eb4 	.word	0x20003eb4
 8002f98:	20003ec4 	.word	0x20003ec4

08002f9c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d04a      	beq.n	8003044 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002fae:	2308      	movs	r3, #8
 8002fb0:	425b      	negs	r3, r3
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	4b22      	ldr	r3, [pc, #136]	@ (800304c <vPortFreeMicroROS+0xb0>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10b      	bne.n	8002fe2 <vPortFreeMicroROS+0x46>
	__asm volatile
 8002fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fce:	f383 8811 	msr	BASEPRI, r3
 8002fd2:	f3bf 8f6f 	isb	sy
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	60fb      	str	r3, [r7, #12]
}
 8002fdc:	bf00      	nop
 8002fde:	bf00      	nop
 8002fe0:	e7fd      	b.n	8002fde <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00b      	beq.n	8003002 <vPortFreeMicroROS+0x66>
	__asm volatile
 8002fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fee:	f383 8811 	msr	BASEPRI, r3
 8002ff2:	f3bf 8f6f 	isb	sy
 8002ff6:	f3bf 8f4f 	dsb	sy
 8002ffa:	60bb      	str	r3, [r7, #8]
}
 8002ffc:	bf00      	nop
 8002ffe:	bf00      	nop
 8003000:	e7fd      	b.n	8002ffe <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	4b11      	ldr	r3, [pc, #68]	@ (800304c <vPortFreeMicroROS+0xb0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4013      	ands	r3, r2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d019      	beq.n	8003044 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d115      	bne.n	8003044 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	4b0b      	ldr	r3, [pc, #44]	@ (800304c <vPortFreeMicroROS+0xb0>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	43db      	mvns	r3, r3
 8003022:	401a      	ands	r2, r3
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003028:	f008 f962 	bl	800b2f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	4b07      	ldr	r3, [pc, #28]	@ (8003050 <vPortFreeMicroROS+0xb4>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4413      	add	r3, r2
 8003036:	4a06      	ldr	r2, [pc, #24]	@ (8003050 <vPortFreeMicroROS+0xb4>)
 8003038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800303a:	6938      	ldr	r0, [r7, #16]
 800303c:	f000 f8dc 	bl	80031f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003040:	f008 f964 	bl	800b30c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003044:	bf00      	nop
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	20003ec8 	.word	0x20003ec8
 8003050:	20003ec0 	.word	0x20003ec0

08003054 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8003054:	b480      	push	{r7}
 8003056:	b087      	sub	sp, #28
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8003060:	2308      	movs	r3, #8
 8003062:	425b      	negs	r3, r3
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	4413      	add	r3, r2
 8003068:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	4b06      	ldr	r3, [pc, #24]	@ (800308c <getBlockSize+0x38>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	43db      	mvns	r3, r3
 8003078:	4013      	ands	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]

	return count;
 800307c:	68fb      	ldr	r3, [r7, #12]
}
 800307e:	4618      	mov	r0, r3
 8003080:	371c      	adds	r7, #28
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	20003ec8 	.word	0x20003ec8

08003090 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800309a:	f008 f929 	bl	800b2f0 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800309e:	6838      	ldr	r0, [r7, #0]
 80030a0:	f7ff feb4 	bl	8002e0c <pvPortMallocMicroROS>
 80030a4:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d017      	beq.n	80030dc <pvPortReallocMicroROS+0x4c>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d014      	beq.n	80030dc <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7ff ffce 	bl	8003054 <getBlockSize>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2208      	movs	r2, #8
 80030bc:	1a9b      	subs	r3, r3, r2
 80030be:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d201      	bcs.n	80030cc <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	68b8      	ldr	r0, [r7, #8]
 80030d2:	f017 ff90 	bl	801aff6 <memcpy>

		vPortFreeMicroROS(pv);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7ff ff60 	bl	8002f9c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80030dc:	f008 f916 	bl	800b30c <xTaskResumeAll>

	return newmem;
 80030e0:	68bb      	ldr	r3, [r7, #8]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b086      	sub	sp, #24
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
 80030f2:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80030f4:	f008 f8fc 	bl	800b2f0 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	fb02 f303 	mul.w	r3, r2, r3
 8003100:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8003102:	6978      	ldr	r0, [r7, #20]
 8003104:	f7ff fe82 	bl	8002e0c <pvPortMallocMicroROS>
 8003108:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	613b      	str	r3, [r7, #16]

  	while(count--)
 800310e:	e004      	b.n	800311a <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1c5a      	adds	r2, r3, #1
 8003114:	613a      	str	r2, [r7, #16]
 8003116:	2200      	movs	r2, #0
 8003118:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	1e5a      	subs	r2, r3, #1
 800311e:	617a      	str	r2, [r7, #20]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1f5      	bne.n	8003110 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8003124:	f008 f8f2 	bl	800b30c <xTaskResumeAll>
  	return mem;
 8003128:	68fb      	ldr	r3, [r7, #12]
}
 800312a:	4618      	mov	r0, r3
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
	...

08003134 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800313a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800313e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003140:	4b27      	ldr	r3, [pc, #156]	@ (80031e0 <prvHeapInit+0xac>)
 8003142:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00c      	beq.n	8003168 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	3307      	adds	r3, #7
 8003152:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f023 0307 	bic.w	r3, r3, #7
 800315a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	4a1f      	ldr	r2, [pc, #124]	@ (80031e0 <prvHeapInit+0xac>)
 8003164:	4413      	add	r3, r2
 8003166:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800316c:	4a1d      	ldr	r2, [pc, #116]	@ (80031e4 <prvHeapInit+0xb0>)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003172:	4b1c      	ldr	r3, [pc, #112]	@ (80031e4 <prvHeapInit+0xb0>)
 8003174:	2200      	movs	r2, #0
 8003176:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	4413      	add	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003180:	2208      	movs	r2, #8
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1a9b      	subs	r3, r3, r2
 8003186:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f023 0307 	bic.w	r3, r3, #7
 800318e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4a15      	ldr	r2, [pc, #84]	@ (80031e8 <prvHeapInit+0xb4>)
 8003194:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003196:	4b14      	ldr	r3, [pc, #80]	@ (80031e8 <prvHeapInit+0xb4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2200      	movs	r2, #0
 800319c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800319e:	4b12      	ldr	r3, [pc, #72]	@ (80031e8 <prvHeapInit+0xb4>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	1ad2      	subs	r2, r2, r3
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80031b4:	4b0c      	ldr	r3, [pc, #48]	@ (80031e8 <prvHeapInit+0xb4>)
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	4a0a      	ldr	r2, [pc, #40]	@ (80031ec <prvHeapInit+0xb8>)
 80031c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	4a09      	ldr	r2, [pc, #36]	@ (80031f0 <prvHeapInit+0xbc>)
 80031ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80031cc:	4b09      	ldr	r3, [pc, #36]	@ (80031f4 <prvHeapInit+0xc0>)
 80031ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80031d2:	601a      	str	r2, [r3, #0]
}
 80031d4:	bf00      	nop
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	200002b4 	.word	0x200002b4
 80031e4:	20003eb4 	.word	0x20003eb4
 80031e8:	20003ebc 	.word	0x20003ebc
 80031ec:	20003ec4 	.word	0x20003ec4
 80031f0:	20003ec0 	.word	0x20003ec0
 80031f4:	20003ec8 	.word	0x20003ec8

080031f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003200:	4b28      	ldr	r3, [pc, #160]	@ (80032a4 <prvInsertBlockIntoFreeList+0xac>)
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	e002      	b.n	800320c <prvInsertBlockIntoFreeList+0x14>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	429a      	cmp	r2, r3
 8003214:	d8f7      	bhi.n	8003206 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	4413      	add	r3, r2
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	429a      	cmp	r2, r3
 8003226:	d108      	bne.n	800323a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	441a      	add	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	441a      	add	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	429a      	cmp	r2, r3
 800324c:	d118      	bne.n	8003280 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	4b15      	ldr	r3, [pc, #84]	@ (80032a8 <prvInsertBlockIntoFreeList+0xb0>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d00d      	beq.n	8003276 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	441a      	add	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	e008      	b.n	8003288 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003276:	4b0c      	ldr	r3, [pc, #48]	@ (80032a8 <prvInsertBlockIntoFreeList+0xb0>)
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	e003      	b.n	8003288 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	429a      	cmp	r2, r3
 800328e:	d002      	beq.n	8003296 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003296:	bf00      	nop
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	20003eb4 	.word	0x20003eb4
 80032a8:	20003ebc 	.word	0x20003ebc

080032ac <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80032ba:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80032bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80032c0:	4904      	ldr	r1, [pc, #16]	@ (80032d4 <cubemx_transport_open+0x28>)
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f005 fcf8 	bl	8008cb8 <HAL_UART_Receive_DMA>
    return true;
 80032c8:	2301      	movs	r3, #1
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	20003ecc 	.word	0x20003ecc

080032d8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80032e6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f005 fd15 	bl	8008d18 <HAL_UART_DMAStop>
    return true;
 80032ee:	2301      	movs	r3, #1
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
 8003304:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800330c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b20      	cmp	r3, #32
 8003318:	d11c      	bne.n	8003354 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	b29b      	uxth	r3, r3
 800331e:	461a      	mov	r2, r3
 8003320:	68b9      	ldr	r1, [r7, #8]
 8003322:	6978      	ldr	r0, [r7, #20]
 8003324:	f005 fc4a 	bl	8008bbc <HAL_UART_Transmit_DMA>
 8003328:	4603      	mov	r3, r0
 800332a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800332c:	e002      	b.n	8003334 <cubemx_transport_write+0x3c>
            osDelay(1);
 800332e:	2001      	movs	r0, #1
 8003330:	f006 ff7c 	bl	800a22c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8003334:	7cfb      	ldrb	r3, [r7, #19]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d105      	bne.n	8003346 <cubemx_transport_write+0x4e>
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b20      	cmp	r3, #32
 8003344:	d1f3      	bne.n	800332e <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8003346:	7cfb      	ldrb	r3, [r7, #19]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <cubemx_transport_write+0x58>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	e002      	b.n	8003356 <cubemx_transport_write+0x5e>
 8003350:	2300      	movs	r3, #0
 8003352:	e000      	b.n	8003356 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8003354:	2300      	movs	r3, #0
    }
}
 8003356:	4618      	mov	r0, r3
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8003360:	b580      	push	{r7, lr}
 8003362:	b088      	sub	sp, #32
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
 800336c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8003374:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8003376:	2300      	movs	r3, #0
 8003378:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800337a:	b672      	cpsid	i
}
 800337c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800338a:	4a1c      	ldr	r2, [pc, #112]	@ (80033fc <cubemx_transport_read+0x9c>)
 800338c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800338e:	b662      	cpsie	i
}
 8003390:	bf00      	nop
        __enable_irq();
        ms_used++;
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	3301      	adds	r3, #1
 8003396:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8003398:	2001      	movs	r0, #1
 800339a:	f006 ff47 	bl	800a22c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800339e:	4b18      	ldr	r3, [pc, #96]	@ (8003400 <cubemx_transport_read+0xa0>)
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	4b16      	ldr	r3, [pc, #88]	@ (80033fc <cubemx_transport_read+0x9c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d103      	bne.n	80033b2 <cubemx_transport_read+0x52>
 80033aa:	69fa      	ldr	r2, [r7, #28]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	dbe3      	blt.n	800337a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80033b6:	e011      	b.n	80033dc <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80033b8:	4b11      	ldr	r3, [pc, #68]	@ (8003400 <cubemx_transport_read+0xa0>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	440b      	add	r3, r1
 80033c2:	4910      	ldr	r1, [pc, #64]	@ (8003404 <cubemx_transport_read+0xa4>)
 80033c4:	5c8a      	ldrb	r2, [r1, r2]
 80033c6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80033c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003400 <cubemx_transport_read+0xa0>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	3301      	adds	r3, #1
 80033ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033d2:	4a0b      	ldr	r2, [pc, #44]	@ (8003400 <cubemx_transport_read+0xa0>)
 80033d4:	6013      	str	r3, [r2, #0]
        wrote++;
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	3301      	adds	r3, #1
 80033da:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80033dc:	4b08      	ldr	r3, [pc, #32]	@ (8003400 <cubemx_transport_read+0xa0>)
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	4b06      	ldr	r3, [pc, #24]	@ (80033fc <cubemx_transport_read+0x9c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d003      	beq.n	80033f0 <cubemx_transport_read+0x90>
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d3e3      	bcc.n	80033b8 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80033f0:	69bb      	ldr	r3, [r7, #24]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3720      	adds	r7, #32
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	200046d0 	.word	0x200046d0
 8003400:	200046cc 	.word	0x200046cc
 8003404:	20003ecc 	.word	0x20003ecc

08003408 <initMainStructures>:
 *  Created on: Mar 7, 2024
 *      Author: juan
 */
#include "flowControl.h"

void initMainStructures( struct mode *controlMode, struct controlSignals* controlValues){
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
	controlMode->controlMode=0;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	705a      	strb	r2, [r3, #1]
	controlMode->verbose=0;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	701a      	strb	r2, [r3, #0]
	controlValues->direction=0;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2200      	movs	r2, #0
 8003422:	741a      	strb	r2, [r3, #16]
	controlValues->positionReference=0;
 8003424:	6839      	ldr	r1, [r7, #0]
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	e9c1 2300 	strd	r2, r3, [r1]
	controlValues->speedReference=0;
 8003432:	6839      	ldr	r1, [r7, #0]
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	f04f 0300 	mov.w	r3, #0
 800343c:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <printData>:

void printData(uint8_t* data, struct mode *controlMode, struct controlSignals* controlValues){
 800344c:	b580      	push	{r7, lr}
 800344e:	b088      	sub	sp, #32
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
	memset(controlMode->res_string, '\000', sizeof(controlMode->res_string));
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	3302      	adds	r3, #2
 800345c:	2232      	movs	r2, #50	@ 0x32
 800345e:	2100      	movs	r1, #0
 8003460:	4618      	mov	r0, r3
 8003462:	f017 fca5 	bl	801adb0 <memset>
	if( data[0]=='P' && strcmp(data,"POSITION")){
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	2b50      	cmp	r3, #80	@ 0x50
 800346c:	d124      	bne.n	80034b8 <printData+0x6c>
 800346e:	498f      	ldr	r1, [pc, #572]	@ (80036ac <printData+0x260>)
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f7fc feb5 	bl	80001e0 <strcmp>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d01d      	beq.n	80034b8 <printData+0x6c>
		double extractedNumber;
		if (sscanf(data, "P%lf", &extractedNumber) == 1) {
 800347c:	f107 0318 	add.w	r3, r7, #24
 8003480:	461a      	mov	r2, r3
 8003482:	498b      	ldr	r1, [pc, #556]	@ (80036b0 <printData+0x264>)
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f017 fb2d 	bl	801aae4 <siscanf>
 800348a:	4603      	mov	r3, r0
 800348c:	2b01      	cmp	r3, #1
 800348e:	d10c      	bne.n	80034aa <printData+0x5e>
			sprintf(controlMode->res_string, "Position reference updated to %.2f\r\n", extractedNumber);
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	1c98      	adds	r0, r3, #2
 8003494:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003498:	4986      	ldr	r1, [pc, #536]	@ (80036b4 <printData+0x268>)
 800349a:	f017 fb03 	bl	801aaa4 <siprintf>
			controlValues->positionReference=extractedNumber;
 800349e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	e9c1 2300 	strd	r2, r3, [r1]
	if( data[0]=='P' && strcmp(data,"POSITION")){
 80034a8:	e0fc      	b.n	80036a4 <printData+0x258>
		}
		else{
			sprintf(controlMode->res_string,"Error format is P0.000\r\n");
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	3302      	adds	r3, #2
 80034ae:	4982      	ldr	r1, [pc, #520]	@ (80036b8 <printData+0x26c>)
 80034b0:	4618      	mov	r0, r3
 80034b2:	f017 faf7 	bl	801aaa4 <siprintf>
	if( data[0]=='P' && strcmp(data,"POSITION")){
 80034b6:	e0f5      	b.n	80036a4 <printData+0x258>
		}

	}
	else if( data[0]=='V' && (strcmp(data,"VERBOSE0")!=0 && strcmp(data,"VELOCITY")!=0) ){
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b56      	cmp	r3, #86	@ 0x56
 80034be:	d12b      	bne.n	8003518 <printData+0xcc>
 80034c0:	497e      	ldr	r1, [pc, #504]	@ (80036bc <printData+0x270>)
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f7fc fe8c 	bl	80001e0 <strcmp>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d024      	beq.n	8003518 <printData+0xcc>
 80034ce:	497c      	ldr	r1, [pc, #496]	@ (80036c0 <printData+0x274>)
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f7fc fe85 	bl	80001e0 <strcmp>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d01d      	beq.n	8003518 <printData+0xcc>
		double extractedNumber;
		if (sscanf(data, "V%lf", &extractedNumber) == 1) {
 80034dc:	f107 0310 	add.w	r3, r7, #16
 80034e0:	461a      	mov	r2, r3
 80034e2:	4978      	ldr	r1, [pc, #480]	@ (80036c4 <printData+0x278>)
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f017 fafd 	bl	801aae4 <siscanf>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d10c      	bne.n	800350a <printData+0xbe>
			sprintf(controlMode->res_string, "Velocity reference updated to %.2f\r\n", extractedNumber);
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	1c98      	adds	r0, r3, #2
 80034f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80034f8:	4973      	ldr	r1, [pc, #460]	@ (80036c8 <printData+0x27c>)
 80034fa:	f017 fad3 	bl	801aaa4 <siprintf>
			controlValues->speedReference=extractedNumber;
 80034fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	e9c1 2302 	strd	r2, r3, [r1, #8]
	else if( data[0]=='V' && (strcmp(data,"VERBOSE0")!=0 && strcmp(data,"VELOCITY")!=0) ){
 8003508:	e0cc      	b.n	80036a4 <printData+0x258>
		}
		else{
			sprintf(controlMode->res_string,"Error format is V000.00\r\n");
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	3302      	adds	r3, #2
 800350e:	496f      	ldr	r1, [pc, #444]	@ (80036cc <printData+0x280>)
 8003510:	4618      	mov	r0, r3
 8003512:	f017 fac7 	bl	801aaa4 <siprintf>
	else if( data[0]=='V' && (strcmp(data,"VERBOSE0")!=0 && strcmp(data,"VELOCITY")!=0) ){
 8003516:	e0c5      	b.n	80036a4 <printData+0x258>
		}
	}
	else if( strcmp(data,"ssssssss")==0){
 8003518:	496d      	ldr	r1, [pc, #436]	@ (80036d0 <printData+0x284>)
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f7fc fe60 	bl	80001e0 <strcmp>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d109      	bne.n	800353a <printData+0xee>
			controlMode->controlMode=3;
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2203      	movs	r2, #3
 800352a:	705a      	strb	r2, [r3, #1]
			sprintf(controlMode->res_string, "System OFF\r\n");
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	3302      	adds	r3, #2
 8003530:	4968      	ldr	r1, [pc, #416]	@ (80036d4 <printData+0x288>)
 8003532:	4618      	mov	r0, r3
 8003534:	f017 fab6 	bl	801aaa4 <siprintf>
	}
	else{
		sprintf(controlMode->res_string,"other thing\r\n");
	}

}
 8003538:	e0b4      	b.n	80036a4 <printData+0x258>
	else if( strcmp(data,"VERBOSE0")==0){
 800353a:	4960      	ldr	r1, [pc, #384]	@ (80036bc <printData+0x270>)
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f7fc fe4f 	bl	80001e0 <strcmp>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d118      	bne.n	800357a <printData+0x12e>
		if (controlMode->verbose) {
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f993 3000 	ldrsb.w	r3, [r3]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d009      	beq.n	8003566 <printData+0x11a>
			sprintf(controlMode->res_string, "Verbose turned OFF\r\n");
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	3302      	adds	r3, #2
 8003556:	4960      	ldr	r1, [pc, #384]	@ (80036d8 <printData+0x28c>)
 8003558:	4618      	mov	r0, r3
 800355a:	f017 faa3 	bl	801aaa4 <siprintf>
			controlMode->verbose=0;
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	2200      	movs	r2, #0
 8003562:	701a      	strb	r2, [r3, #0]
}
 8003564:	e09e      	b.n	80036a4 <printData+0x258>
			sprintf(controlMode->res_string,"Verbose turned ON\r\n");
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	3302      	adds	r3, #2
 800356a:	495c      	ldr	r1, [pc, #368]	@ (80036dc <printData+0x290>)
 800356c:	4618      	mov	r0, r3
 800356e:	f017 fa99 	bl	801aaa4 <siprintf>
			controlMode->verbose=1;
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2201      	movs	r2, #1
 8003576:	701a      	strb	r2, [r3, #0]
}
 8003578:	e094      	b.n	80036a4 <printData+0x258>
	else if( strcmp(data,"POSITION")==0){
 800357a:	494c      	ldr	r1, [pc, #304]	@ (80036ac <printData+0x260>)
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f7fc fe2f 	bl	80001e0 <strcmp>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d118      	bne.n	80035ba <printData+0x16e>
		if (controlMode->controlMode) {
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d009      	beq.n	80035a6 <printData+0x15a>
			sprintf(controlMode->res_string, "Control MODE is in Position mode\r\n");
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	3302      	adds	r3, #2
 8003596:	4952      	ldr	r1, [pc, #328]	@ (80036e0 <printData+0x294>)
 8003598:	4618      	mov	r0, r3
 800359a:	f017 fa83 	bl	801aaa4 <siprintf>
			controlMode->controlMode=1;
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2201      	movs	r2, #1
 80035a2:	705a      	strb	r2, [r3, #1]
}
 80035a4:	e07e      	b.n	80036a4 <printData+0x258>
			sprintf(controlMode->res_string,"Control MODE pass to position\r\n");
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	3302      	adds	r3, #2
 80035aa:	494e      	ldr	r1, [pc, #312]	@ (80036e4 <printData+0x298>)
 80035ac:	4618      	mov	r0, r3
 80035ae:	f017 fa79 	bl	801aaa4 <siprintf>
			controlMode->controlMode=1;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2201      	movs	r2, #1
 80035b6:	705a      	strb	r2, [r3, #1]
}
 80035b8:	e074      	b.n	80036a4 <printData+0x258>
	else if( strcmp(data,"VELOCITY")==0){
 80035ba:	4941      	ldr	r1, [pc, #260]	@ (80036c0 <printData+0x274>)
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f7fc fe0f 	bl	80001e0 <strcmp>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d118      	bne.n	80035fa <printData+0x1ae>
		if (controlMode->controlMode==0) {
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d109      	bne.n	80035e6 <printData+0x19a>
			sprintf(controlMode->res_string, "Control MODE is in velocity mode\r\n");
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	3302      	adds	r3, #2
 80035d6:	4944      	ldr	r1, [pc, #272]	@ (80036e8 <printData+0x29c>)
 80035d8:	4618      	mov	r0, r3
 80035da:	f017 fa63 	bl	801aaa4 <siprintf>
			controlMode->controlMode=0;
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2200      	movs	r2, #0
 80035e2:	705a      	strb	r2, [r3, #1]
}
 80035e4:	e05e      	b.n	80036a4 <printData+0x258>
			sprintf(controlMode->res_string,"Control MODE pass to velocity\r\n");
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	3302      	adds	r3, #2
 80035ea:	4940      	ldr	r1, [pc, #256]	@ (80036ec <printData+0x2a0>)
 80035ec:	4618      	mov	r0, r3
 80035ee:	f017 fa59 	bl	801aaa4 <siprintf>
			controlMode->controlMode=0;
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2200      	movs	r2, #0
 80035f6:	705a      	strb	r2, [r3, #1]
}
 80035f8:	e054      	b.n	80036a4 <printData+0x258>
	else if( strcmp(data,"FORWARD0")==0){
 80035fa:	493d      	ldr	r1, [pc, #244]	@ (80036f0 <printData+0x2a4>)
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f7fc fdef 	bl	80001e0 <strcmp>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d11f      	bne.n	8003648 <printData+0x1fc>
		if (controlValues->direction==0) {
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d109      	bne.n	8003626 <printData+0x1da>
			sprintf(controlMode->res_string, "Direction is forward\r\n");
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	3302      	adds	r3, #2
 8003616:	4937      	ldr	r1, [pc, #220]	@ (80036f4 <printData+0x2a8>)
 8003618:	4618      	mov	r0, r3
 800361a:	f017 fa43 	bl	801aaa4 <siprintf>
			controlValues->direction=0;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	741a      	strb	r2, [r3, #16]
}
 8003624:	e03e      	b.n	80036a4 <printData+0x258>
			sprintf(controlMode->res_string,"Direction change to Forward, velocity set to 0\r\n");
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	3302      	adds	r3, #2
 800362a:	4933      	ldr	r1, [pc, #204]	@ (80036f8 <printData+0x2ac>)
 800362c:	4618      	mov	r0, r3
 800362e:	f017 fa39 	bl	801aaa4 <siprintf>
			controlValues->direction=0;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	741a      	strb	r2, [r3, #16]
			controlValues->speedReference=0;
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	f04f 0200 	mov.w	r2, #0
 800363e:	f04f 0300 	mov.w	r3, #0
 8003642:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8003646:	e02d      	b.n	80036a4 <printData+0x258>
	else if( strcmp(data,"BACKWARD")==0){
 8003648:	492c      	ldr	r1, [pc, #176]	@ (80036fc <printData+0x2b0>)
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f7fc fdc8 	bl	80001e0 <strcmp>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d11f      	bne.n	8003696 <printData+0x24a>
		if (controlValues->direction==1) {
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d109      	bne.n	8003674 <printData+0x228>
			sprintf(controlMode->res_string, "Direction is backward\r\n");
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	3302      	adds	r3, #2
 8003664:	4926      	ldr	r1, [pc, #152]	@ (8003700 <printData+0x2b4>)
 8003666:	4618      	mov	r0, r3
 8003668:	f017 fa1c 	bl	801aaa4 <siprintf>
			controlValues->direction=1;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	741a      	strb	r2, [r3, #16]
}
 8003672:	e017      	b.n	80036a4 <printData+0x258>
			sprintf(controlMode->res_string,"Direction change to Backward, velocity set to 0\r\n");
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	3302      	adds	r3, #2
 8003678:	4922      	ldr	r1, [pc, #136]	@ (8003704 <printData+0x2b8>)
 800367a:	4618      	mov	r0, r3
 800367c:	f017 fa12 	bl	801aaa4 <siprintf>
			controlValues->direction=1;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	741a      	strb	r2, [r3, #16]
			controlValues->speedReference=0;
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	f04f 0300 	mov.w	r3, #0
 8003690:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8003694:	e006      	b.n	80036a4 <printData+0x258>
		sprintf(controlMode->res_string,"other thing\r\n");
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	3302      	adds	r3, #2
 800369a:	491b      	ldr	r1, [pc, #108]	@ (8003708 <printData+0x2bc>)
 800369c:	4618      	mov	r0, r3
 800369e:	f017 fa01 	bl	801aaa4 <siprintf>
}
 80036a2:	e7ff      	b.n	80036a4 <printData+0x258>
 80036a4:	bf00      	nop
 80036a6:	3720      	adds	r7, #32
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	0801f9d0 	.word	0x0801f9d0
 80036b0:	0801f9dc 	.word	0x0801f9dc
 80036b4:	0801f9e4 	.word	0x0801f9e4
 80036b8:	0801fa0c 	.word	0x0801fa0c
 80036bc:	0801fa28 	.word	0x0801fa28
 80036c0:	0801fa34 	.word	0x0801fa34
 80036c4:	0801fa40 	.word	0x0801fa40
 80036c8:	0801fa48 	.word	0x0801fa48
 80036cc:	0801fa70 	.word	0x0801fa70
 80036d0:	0801fa8c 	.word	0x0801fa8c
 80036d4:	0801fa98 	.word	0x0801fa98
 80036d8:	0801faa8 	.word	0x0801faa8
 80036dc:	0801fac0 	.word	0x0801fac0
 80036e0:	0801fad4 	.word	0x0801fad4
 80036e4:	0801faf8 	.word	0x0801faf8
 80036e8:	0801fb18 	.word	0x0801fb18
 80036ec:	0801fb3c 	.word	0x0801fb3c
 80036f0:	0801fb5c 	.word	0x0801fb5c
 80036f4:	0801fb68 	.word	0x0801fb68
 80036f8:	0801fb80 	.word	0x0801fb80
 80036fc:	0801fbb4 	.word	0x0801fbb4
 8003700:	0801fbc0 	.word	0x0801fbc0
 8003704:	0801fbd8 	.word	0x0801fbd8
 8003708:	0801fc0c 	.word	0x0801fc0c

0800370c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800370c:	b5b0      	push	{r4, r5, r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a7a      	ldr	r2, [pc, #488]	@ (8003904 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800371a:	4293      	cmp	r3, r2
 800371c:	f040 80e7 	bne.w	80038ee <HAL_TIM_PeriodElapsedCallback+0x1e2>
	{ // REVISAR CLOCKS CON PEDRO
		pos_R=__HAL_TIM_GET_COUNTER(&htim1);
 8003720:	4b79      	ldr	r3, [pc, #484]	@ (8003908 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003726:	b21a      	sxth	r2, r3
 8003728:	4b78      	ldr	r3, [pc, #480]	@ (800390c <HAL_TIM_PeriodElapsedCallback+0x200>)
 800372a:	801a      	strh	r2, [r3, #0]
		pos_L=__HAL_TIM_GET_COUNTER(&htim3);
 800372c:	4b78      	ldr	r3, [pc, #480]	@ (8003910 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003732:	b21a      	sxth	r2, r3
 8003734:	4b77      	ldr	r3, [pc, #476]	@ (8003914 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8003736:	801a      	strh	r2, [r3, #0]

		ready=1; //Ocurre cada 10ms
 8003738:	4b77      	ldr	r3, [pc, #476]	@ (8003918 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800373a:	2201      	movs	r2, #1
 800373c:	701a      	strb	r2, [r3, #0]
		pos_Rp=pos_Rc;
 800373e:	4b77      	ldr	r3, [pc, #476]	@ (800391c <HAL_TIM_PeriodElapsedCallback+0x210>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a77      	ldr	r2, [pc, #476]	@ (8003920 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8003744:	6013      	str	r3, [r2, #0]
		pos_Lp=pos_Lc;
 8003746:	4b77      	ldr	r3, [pc, #476]	@ (8003924 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a77      	ldr	r2, [pc, #476]	@ (8003928 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800374c:	6013      	str	r3, [r2, #0]
		pos_Rc=pos_R*360.0/resolucion+pos_Rc;
 800374e:	4b6f      	ldr	r3, [pc, #444]	@ (800390c <HAL_TIM_PeriodElapsedCallback+0x200>)
 8003750:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003754:	4618      	mov	r0, r3
 8003756:	f7fc fefd 	bl	8000554 <__aeabi_i2d>
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	4b73      	ldr	r3, [pc, #460]	@ (800392c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8003760:	f7fc ff62 	bl	8000628 <__aeabi_dmul>
 8003764:	4602      	mov	r2, r0
 8003766:	460b      	mov	r3, r1
 8003768:	4614      	mov	r4, r2
 800376a:	461d      	mov	r5, r3
 800376c:	4b70      	ldr	r3, [pc, #448]	@ (8003930 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800376e:	881b      	ldrh	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f7fc feef 	bl	8000554 <__aeabi_i2d>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	4620      	mov	r0, r4
 800377c:	4629      	mov	r1, r5
 800377e:	f7fd f87d 	bl	800087c <__aeabi_ddiv>
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	4614      	mov	r4, r2
 8003788:	461d      	mov	r5, r3
 800378a:	4b64      	ldr	r3, [pc, #400]	@ (800391c <HAL_TIM_PeriodElapsedCallback+0x210>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f7fc fef2 	bl	8000578 <__aeabi_f2d>
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	4620      	mov	r0, r4
 800379a:	4629      	mov	r1, r5
 800379c:	f7fc fd8e 	bl	80002bc <__adddf3>
 80037a0:	4602      	mov	r2, r0
 80037a2:	460b      	mov	r3, r1
 80037a4:	4610      	mov	r0, r2
 80037a6:	4619      	mov	r1, r3
 80037a8:	f7fd fa36 	bl	8000c18 <__aeabi_d2f>
 80037ac:	4603      	mov	r3, r0
 80037ae:	4a5b      	ldr	r2, [pc, #364]	@ (800391c <HAL_TIM_PeriodElapsedCallback+0x210>)
 80037b0:	6013      	str	r3, [r2, #0]
		pos_Lc=pos_L*360.0/resolucion+pos_Lc;
 80037b2:	4b58      	ldr	r3, [pc, #352]	@ (8003914 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80037b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fc fecb 	bl	8000554 <__aeabi_i2d>
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	4b5a      	ldr	r3, [pc, #360]	@ (800392c <HAL_TIM_PeriodElapsedCallback+0x220>)
 80037c4:	f7fc ff30 	bl	8000628 <__aeabi_dmul>
 80037c8:	4602      	mov	r2, r0
 80037ca:	460b      	mov	r3, r1
 80037cc:	4614      	mov	r4, r2
 80037ce:	461d      	mov	r5, r3
 80037d0:	4b57      	ldr	r3, [pc, #348]	@ (8003930 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fc febd 	bl	8000554 <__aeabi_i2d>
 80037da:	4602      	mov	r2, r0
 80037dc:	460b      	mov	r3, r1
 80037de:	4620      	mov	r0, r4
 80037e0:	4629      	mov	r1, r5
 80037e2:	f7fd f84b 	bl	800087c <__aeabi_ddiv>
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	4614      	mov	r4, r2
 80037ec:	461d      	mov	r5, r3
 80037ee:	4b4d      	ldr	r3, [pc, #308]	@ (8003924 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fc fec0 	bl	8000578 <__aeabi_f2d>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	4620      	mov	r0, r4
 80037fe:	4629      	mov	r1, r5
 8003800:	f7fc fd5c 	bl	80002bc <__adddf3>
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	4610      	mov	r0, r2
 800380a:	4619      	mov	r1, r3
 800380c:	f7fd fa04 	bl	8000c18 <__aeabi_d2f>
 8003810:	4603      	mov	r3, r0
 8003812:	4a44      	ldr	r2, [pc, #272]	@ (8003924 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8003814:	6013      	str	r3, [r2, #0]

		vel_R=fabs(pos_Rc-pos_Rp)/(360.0)*100.0*60.0;
 8003816:	4b41      	ldr	r3, [pc, #260]	@ (800391c <HAL_TIM_PeriodElapsedCallback+0x210>)
 8003818:	ed93 7a00 	vldr	s14, [r3]
 800381c:	4b40      	ldr	r3, [pc, #256]	@ (8003920 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800381e:	edd3 7a00 	vldr	s15, [r3]
 8003822:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003826:	eef0 7ae7 	vabs.f32	s15, s15
 800382a:	ee17 0a90 	vmov	r0, s15
 800382e:	f7fc fea3 	bl	8000578 <__aeabi_f2d>
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	4b3d      	ldr	r3, [pc, #244]	@ (800392c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8003838:	f7fd f820 	bl	800087c <__aeabi_ddiv>
 800383c:	4602      	mov	r2, r0
 800383e:	460b      	mov	r3, r1
 8003840:	4610      	mov	r0, r2
 8003842:	4619      	mov	r1, r3
 8003844:	f04f 0200 	mov.w	r2, #0
 8003848:	4b3a      	ldr	r3, [pc, #232]	@ (8003934 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800384a:	f7fc feed 	bl	8000628 <__aeabi_dmul>
 800384e:	4602      	mov	r2, r0
 8003850:	460b      	mov	r3, r1
 8003852:	4610      	mov	r0, r2
 8003854:	4619      	mov	r1, r3
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	4b37      	ldr	r3, [pc, #220]	@ (8003938 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800385c:	f7fc fee4 	bl	8000628 <__aeabi_dmul>
 8003860:	4602      	mov	r2, r0
 8003862:	460b      	mov	r3, r1
 8003864:	4610      	mov	r0, r2
 8003866:	4619      	mov	r1, r3
 8003868:	f7fd f9d6 	bl	8000c18 <__aeabi_d2f>
 800386c:	4603      	mov	r3, r0
 800386e:	4a33      	ldr	r2, [pc, #204]	@ (800393c <HAL_TIM_PeriodElapsedCallback+0x230>)
 8003870:	6013      	str	r3, [r2, #0]
		vel_L=fabs(pos_Lc-pos_Lp)/(360.0)*100.0*60.0;
 8003872:	4b2c      	ldr	r3, [pc, #176]	@ (8003924 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8003874:	ed93 7a00 	vldr	s14, [r3]
 8003878:	4b2b      	ldr	r3, [pc, #172]	@ (8003928 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800387a:	edd3 7a00 	vldr	s15, [r3]
 800387e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003882:	eef0 7ae7 	vabs.f32	s15, s15
 8003886:	ee17 0a90 	vmov	r0, s15
 800388a:	f7fc fe75 	bl	8000578 <__aeabi_f2d>
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	4b26      	ldr	r3, [pc, #152]	@ (800392c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8003894:	f7fc fff2 	bl	800087c <__aeabi_ddiv>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4610      	mov	r0, r2
 800389e:	4619      	mov	r1, r3
 80038a0:	f04f 0200 	mov.w	r2, #0
 80038a4:	4b23      	ldr	r3, [pc, #140]	@ (8003934 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80038a6:	f7fc febf 	bl	8000628 <__aeabi_dmul>
 80038aa:	4602      	mov	r2, r0
 80038ac:	460b      	mov	r3, r1
 80038ae:	4610      	mov	r0, r2
 80038b0:	4619      	mov	r1, r3
 80038b2:	f04f 0200 	mov.w	r2, #0
 80038b6:	4b20      	ldr	r3, [pc, #128]	@ (8003938 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80038b8:	f7fc feb6 	bl	8000628 <__aeabi_dmul>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	4610      	mov	r0, r2
 80038c2:	4619      	mov	r1, r3
 80038c4:	f7fd f9a8 	bl	8000c18 <__aeabi_d2f>
 80038c8:	4603      	mov	r3, r0
 80038ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003940 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80038cc:	6013      	str	r3, [r2, #0]

		TIM3->CNT=0;
 80038ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003944 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	625a      	str	r2, [r3, #36]	@ 0x24
		TIM1->CNT=0;
 80038d4:	4b1c      	ldr	r3, [pc, #112]	@ (8003948 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	625a      	str	r2, [r3, #36]	@ 0x24
		contador = contador+1.0;
 80038da:	4b1c      	ldr	r3, [pc, #112]	@ (800394c <HAL_TIM_PeriodElapsedCallback+0x240>)
 80038dc:	edd3 7a00 	vldr	s15, [r3]
 80038e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80038e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038e8:	4b18      	ldr	r3, [pc, #96]	@ (800394c <HAL_TIM_PeriodElapsedCallback+0x240>)
 80038ea:	edc3 7a00 	vstr	s15, [r3]
	}
	if (htim->Instance == TIM2) {
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038f6:	d101      	bne.n	80038fc <HAL_TIM_PeriodElapsedCallback+0x1f0>
		HAL_IncTick();
 80038f8:	f002 f86a 	bl	80059d0 <HAL_IncTick>
	}

	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
}
 80038fc:	bf00      	nop
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bdb0      	pop	{r4, r5, r7, pc}
 8003904:	40000800 	.word	0x40000800
 8003908:	2000471c 	.word	0x2000471c
 800390c:	200078cc 	.word	0x200078cc
 8003910:	20004764 	.word	0x20004764
 8003914:	200078ce 	.word	0x200078ce
 8003918:	200078e8 	.word	0x200078e8
 800391c:	200078d8 	.word	0x200078d8
 8003920:	200078d0 	.word	0x200078d0
 8003924:	200078dc 	.word	0x200078dc
 8003928:	200078d4 	.word	0x200078d4
 800392c:	40768000 	.word	0x40768000
 8003930:	20000000 	.word	0x20000000
 8003934:	40590000 	.word	0x40590000
 8003938:	404e0000 	.word	0x404e0000
 800393c:	200078e0 	.word	0x200078e0
 8003940:	200078e4 	.word	0x200078e4
 8003944:	40000400 	.word	0x40000400
 8003948:	40010000 	.word	0x40010000
 800394c:	200086ac 	.word	0x200086ac

08003950 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
	printData(data,&mode, &controlS);
 8003958:	4a08      	ldr	r2, [pc, #32]	@ (800397c <HAL_UART_RxCpltCallback+0x2c>)
 800395a:	4909      	ldr	r1, [pc, #36]	@ (8003980 <HAL_UART_RxCpltCallback+0x30>)
 800395c:	4809      	ldr	r0, [pc, #36]	@ (8003984 <HAL_UART_RxCpltCallback+0x34>)
 800395e:	f7ff fd75 	bl	800344c <printData>
	HAL_UART_Transmit_DMA(&huart2, mode.res_string, sizeof(res_string));
 8003962:	2232      	movs	r2, #50	@ 0x32
 8003964:	4908      	ldr	r1, [pc, #32]	@ (8003988 <HAL_UART_RxCpltCallback+0x38>)
 8003966:	4809      	ldr	r0, [pc, #36]	@ (800398c <HAL_UART_RxCpltCallback+0x3c>)
 8003968:	f005 f928 	bl	8008bbc <HAL_UART_Transmit_DMA>
	newdata=1;
 800396c:	4b08      	ldr	r3, [pc, #32]	@ (8003990 <HAL_UART_RxCpltCallback+0x40>)
 800396e:	2201      	movs	r2, #1
 8003970:	701a      	strb	r2, [r3, #0]

}
 8003972:	bf00      	nop
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20007930 	.word	0x20007930
 8003980:	200078f8 	.word	0x200078f8
 8003984:	200078ec 	.word	0x200078ec
 8003988:	200078fa 	.word	0x200078fa
 800398c:	2000483c 	.word	0x2000483c
 8003990:	20000002 	.word	0x20000002

08003994 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
	//__NOP();
	HAL_ADC_Start_IT(&hadc1);
 800399c:	4803      	ldr	r0, [pc, #12]	@ (80039ac <HAL_ADC_ConvCpltCallback+0x18>)
 800399e:	f002 f87b 	bl	8005a98 <HAL_ADC_Start_IT>
}
 80039a2:	bf00      	nop
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	200046d4 	.word	0x200046d4

080039b0 <subscription_callback_PosRef>:
const char *r;
char valueControl [15];
const std_msgs__msg__String *msg4;

void subscription_callback_PosRef(const void * msgin)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
	// Cast received message to used type
	// const std_msgs__msg__Int32 * msg3 = (const std_msgs__msg__Int32 *)msgin;
	const std_msgs__msg__Float32 * msg3 = (const std_msgs__msg__Float32 *)msgin;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	60fb      	str	r3, [r7, #12]
	// Process message
	//pos_Rc=40;
	valueFramePos = msg3->data;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	edd3 7a00 	vldr	s15, [r3]
 80039c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039c6:	ee17 2a90 	vmov	r2, s15
 80039ca:	4b04      	ldr	r3, [pc, #16]	@ (80039dc <subscription_callback_PosRef+0x2c>)
 80039cc:	601a      	str	r2, [r3, #0]

	// valueMax=valueMax+100;
	return;
 80039ce:	bf00      	nop
}
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	200086b0 	.word	0x200086b0

080039e0 <subscription_callback_SpeedRef>:
void subscription_callback_SpeedRef(const void * msgin)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
	// Cast received message to used type
	const std_msgs__msg__Float32 * msg5 = (const std_msgs__msg__Float32 *)msgin;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	60fb      	str	r3, [r7, #12]
	// Process message
	//vel_R=30;
	valueMax2 = msg5->data;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	edd3 7a00 	vldr	s15, [r3]
 80039f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039f6:	ee17 2a90 	vmov	r2, s15
 80039fa:	4b04      	ldr	r3, [pc, #16]	@ (8003a0c <subscription_callback_SpeedRef+0x2c>)
 80039fc:	601a      	str	r2, [r3, #0]
	//valueMax2=valueMax2+100-1;
	return;
 80039fe:	bf00      	nop
}
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	200086b4 	.word	0x200086b4

08003a10 <subscription_callback_ControlMode>:
void subscription_callback_ControlMode(const void * msgin)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
	//get_message_typesupport_handle(msg4, r);
	//	strcpy(valueControl,msg4->data.data);
	// Se puede probar también memcpy()
	// según chatgpt: const std_msgs__msg__String * received_msg = (const std_msgs__msg__String *)msgin;

	return;
 8003a18:	bf00      	nop
}
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	0000      	movs	r0, r0
	...

08003a28 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */
	float dy=(v2-v1); //0.55-2.2
 8003a2e:	4b48      	ldr	r3, [pc, #288]	@ (8003b50 <main+0x128>)
 8003a30:	617b      	str	r3, [r7, #20]
	float dx=(d2-d1); //50-4
 8003a32:	4b48      	ldr	r3, [pc, #288]	@ (8003b54 <main+0x12c>)
 8003a34:	613b      	str	r3, [r7, #16]
	float m =dy/dx;// -(dist_max-dist_min)/(raw_min-raw_max);
 8003a36:	edd7 6a05 	vldr	s13, [r7, #20]
 8003a3a:	ed97 7a04 	vldr	s14, [r7, #16]
 8003a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a42:	edc7 7a03 	vstr	s15, [r7, #12]
	float n = 2-m*10;
 8003a46:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a4a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003a4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a52:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003a56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a5a:	edc7 7a02 	vstr	s15, [r7, #8]
	float dist_dif = dist_max-dist_min;
 8003a5e:	4b3e      	ldr	r3, [pc, #248]	@ (8003b58 <main+0x130>)
 8003a60:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003a62:	f001 ff93 	bl	800598c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003a66:	f000 f899 	bl	8003b9c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003a6a:	f000 fb05 	bl	8004078 <MX_GPIO_Init>
	MX_DMA_Init();
 8003a6e:	f000 fadb 	bl	8004028 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8003a72:	f000 faaf 	bl	8003fd4 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8003a76:	f000 f94f 	bl	8003d18 <MX_TIM1_Init>
	MX_TIM3_Init();
 8003a7a:	f000 f9a5 	bl	8003dc8 <MX_TIM3_Init>
	MX_TIM5_Init();
 8003a7e:	f000 fa45 	bl	8003f0c <MX_TIM5_Init>
	MX_ADC1_Init();
 8003a82:	f000 f8f7 	bl	8003c74 <MX_ADC1_Init>
	MX_TIM4_Init();
 8003a86:	f000 f9f3 	bl	8003e70 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim4); // REVISAR
 8003a8a:	4834      	ldr	r0, [pc, #208]	@ (8003b5c <main+0x134>)
 8003a8c:	f003 ffaa 	bl	80079e4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Init(&htim5);
 8003a90:	4833      	ldr	r0, [pc, #204]	@ (8003b60 <main+0x138>)
 8003a92:	f004 f809 	bl	8007aa8 <HAL_TIM_PWM_Init>
	HAL_UART_Init(&huart2);
 8003a96:	4833      	ldr	r0, [pc, #204]	@ (8003b64 <main+0x13c>)
 8003a98:	f005 f842 	bl	8008b20 <HAL_UART_Init>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	4830      	ldr	r0, [pc, #192]	@ (8003b60 <main+0x138>)
 8003aa0:	f004 f852 	bl	8007b48 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8003aa4:	2104      	movs	r1, #4
 8003aa6:	482e      	ldr	r0, [pc, #184]	@ (8003b60 <main+0x138>)
 8003aa8:	f004 f84e 	bl	8007b48 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8003aac:	213c      	movs	r1, #60	@ 0x3c
 8003aae:	482e      	ldr	r0, [pc, #184]	@ (8003b68 <main+0x140>)
 8003ab0:	f004 f9a0 	bl	8007df4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8003ab4:	213c      	movs	r1, #60	@ 0x3c
 8003ab6:	482d      	ldr	r0, [pc, #180]	@ (8003b6c <main+0x144>)
 8003ab8:	f004 f99c 	bl	8007df4 <HAL_TIM_Encoder_Start>
	HAL_ADC_Start_IT(&hadc1);
 8003abc:	482c      	ldr	r0, [pc, #176]	@ (8003b70 <main+0x148>)
 8003abe:	f001 ffeb 	bl	8005a98 <HAL_ADC_Start_IT>

	initMainStructures(&mode, &controlS);
 8003ac2:	492c      	ldr	r1, [pc, #176]	@ (8003b74 <main+0x14c>)
 8003ac4:	482c      	ldr	r0, [pc, #176]	@ (8003b78 <main+0x150>)
 8003ac6:	f7ff fc9f 	bl	8003408 <initMainStructures>
	initControlStructure(0.8, 0.85,&SpeedControlMotor1);
 8003aca:	482c      	ldr	r0, [pc, #176]	@ (8003b7c <main+0x154>)
 8003acc:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 8003b30 <main+0x108>
 8003ad0:	ed9f 0b19 	vldr	d0, [pc, #100]	@ 8003b38 <main+0x110>
 8003ad4:	f001 fa2b 	bl	8004f2e <initControlStructure>
	initControlStructure(0.8, 0.85,&SpeedControlMotor2);
 8003ad8:	4829      	ldr	r0, [pc, #164]	@ (8003b80 <main+0x158>)
 8003ada:	ed9f 1b15 	vldr	d1, [pc, #84]	@ 8003b30 <main+0x108>
 8003ade:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8003b38 <main+0x110>
 8003ae2:	f001 fa24 	bl	8004f2e <initControlStructure>

	initControlStructure(17, 0.822,&PosControlMotor1);
 8003ae6:	4827      	ldr	r0, [pc, #156]	@ (8003b84 <main+0x15c>)
 8003ae8:	ed9f 1b15 	vldr	d1, [pc, #84]	@ 8003b40 <main+0x118>
 8003aec:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8003b48 <main+0x120>
 8003af0:	f001 fa1d 	bl	8004f2e <initControlStructure>
	initControlStructure(17, 0.822,&PosControlMotor2);
 8003af4:	4824      	ldr	r0, [pc, #144]	@ (8003b88 <main+0x160>)
 8003af6:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 8003b40 <main+0x118>
 8003afa:	ed9f 0b13 	vldr	d0, [pc, #76]	@ 8003b48 <main+0x120>
 8003afe:	f001 fa16 	bl	8004f2e <initControlStructure>

	/////////////  NUEVO MPC  ////////////////////7

	initMPC(&myControl);
 8003b02:	4822      	ldr	r0, [pc, #136]	@ (8003b8c <main+0x164>)
 8003b04:	f7fd fad6 	bl	80010b4 <initMPC>
	//////////////////////////////////////////////777

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8003b08:	f006 fab4 	bl	800a074 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003b0c:	4a20      	ldr	r2, [pc, #128]	@ (8003b90 <main+0x168>)
 8003b0e:	2100      	movs	r1, #0
 8003b10:	4820      	ldr	r0, [pc, #128]	@ (8003b94 <main+0x16c>)
 8003b12:	f006 faf9 	bl	800a108 <osThreadNew>
 8003b16:	4603      	mov	r3, r0
 8003b18:	4a1f      	ldr	r2, [pc, #124]	@ (8003b98 <main+0x170>)
 8003b1a:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8003b1c:	f006 face 	bl	800a0bc <osKernelStart>
 8003b20:	2300      	movs	r3, #0

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	/* USER CODE END 3 */
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3718      	adds	r7, #24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	f3af 8000 	nop.w
 8003b30:	33333333 	.word	0x33333333
 8003b34:	3feb3333 	.word	0x3feb3333
 8003b38:	9999999a 	.word	0x9999999a
 8003b3c:	3fe99999 	.word	0x3fe99999
 8003b40:	f1a9fbe7 	.word	0xf1a9fbe7
 8003b44:	3fea4dd2 	.word	0x3fea4dd2
 8003b48:	00000000 	.word	0x00000000
 8003b4c:	40310000 	.word	0x40310000
 8003b50:	bfd33333 	.word	0xbfd33333
 8003b54:	42380000 	.word	0x42380000
 8003b58:	4132e148 	.word	0x4132e148
 8003b5c:	200047ac 	.word	0x200047ac
 8003b60:	200047f4 	.word	0x200047f4
 8003b64:	2000483c 	.word	0x2000483c
 8003b68:	2000471c 	.word	0x2000471c
 8003b6c:	20004764 	.word	0x20004764
 8003b70:	200046d4 	.word	0x200046d4
 8003b74:	20007930 	.word	0x20007930
 8003b78:	200078f8 	.word	0x200078f8
 8003b7c:	20007948 	.word	0x20007948
 8003b80:	20007998 	.word	0x20007998
 8003b84:	200079e8 	.word	0x200079e8
 8003b88:	20007a38 	.word	0x20007a38
 8003b8c:	20007a88 	.word	0x20007a88
 8003b90:	0801fd3c 	.word	0x0801fd3c
 8003b94:	080041a9 	.word	0x080041a9
 8003b98:	20004940 	.word	0x20004940

08003b9c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b094      	sub	sp, #80	@ 0x50
 8003ba0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ba2:	f107 0320 	add.w	r3, r7, #32
 8003ba6:	2230      	movs	r2, #48	@ 0x30
 8003ba8:	2100      	movs	r1, #0
 8003baa:	4618      	mov	r0, r3
 8003bac:	f017 f900 	bl	801adb0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003bb0:	f107 030c 	add.w	r3, r7, #12
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	605a      	str	r2, [r3, #4]
 8003bba:	609a      	str	r2, [r3, #8]
 8003bbc:	60da      	str	r2, [r3, #12]
 8003bbe:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	60bb      	str	r3, [r7, #8]
 8003bc4:	4b29      	ldr	r3, [pc, #164]	@ (8003c6c <SystemClock_Config+0xd0>)
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc8:	4a28      	ldr	r2, [pc, #160]	@ (8003c6c <SystemClock_Config+0xd0>)
 8003bca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bce:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bd0:	4b26      	ldr	r3, [pc, #152]	@ (8003c6c <SystemClock_Config+0xd0>)
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bdc:	2300      	movs	r3, #0
 8003bde:	607b      	str	r3, [r7, #4]
 8003be0:	4b23      	ldr	r3, [pc, #140]	@ (8003c70 <SystemClock_Config+0xd4>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003be8:	4a21      	ldr	r2, [pc, #132]	@ (8003c70 <SystemClock_Config+0xd4>)
 8003bea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bee:	6013      	str	r3, [r2, #0]
 8003bf0:	4b1f      	ldr	r3, [pc, #124]	@ (8003c70 <SystemClock_Config+0xd4>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003bf8:	607b      	str	r3, [r7, #4]
 8003bfa:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003c00:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003c04:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c06:	2302      	movs	r3, #2
 8003c08:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c0a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8003c10:	2308      	movs	r3, #8
 8003c12:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8003c14:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003c18:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003c1a:	2304      	movs	r3, #4
 8003c1c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8003c1e:	2307      	movs	r3, #7
 8003c20:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c22:	f107 0320 	add.w	r3, r7, #32
 8003c26:	4618      	mov	r0, r3
 8003c28:	f003 f9c2 	bl	8006fb0 <HAL_RCC_OscConfig>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8003c32:	f001 f811 	bl	8004c58 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c36:	230f      	movs	r3, #15
 8003c38:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003c42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c46:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003c4c:	f107 030c 	add.w	r3, r7, #12
 8003c50:	2102      	movs	r1, #2
 8003c52:	4618      	mov	r0, r3
 8003c54:	f003 fc24 	bl	80074a0 <HAL_RCC_ClockConfig>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8003c5e:	f000 fffb 	bl	8004c58 <Error_Handler>
	}
}
 8003c62:	bf00      	nop
 8003c64:	3750      	adds	r7, #80	@ 0x50
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	40007000 	.word	0x40007000

08003c74 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8003c7a:	463b      	mov	r3, r7
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	605a      	str	r2, [r3, #4]
 8003c82:	609a      	str	r2, [r3, #8]
 8003c84:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8003c86:	4b21      	ldr	r3, [pc, #132]	@ (8003d0c <MX_ADC1_Init+0x98>)
 8003c88:	4a21      	ldr	r2, [pc, #132]	@ (8003d10 <MX_ADC1_Init+0x9c>)
 8003c8a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003c8c:	4b1f      	ldr	r3, [pc, #124]	@ (8003d0c <MX_ADC1_Init+0x98>)
 8003c8e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003c92:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003c94:	4b1d      	ldr	r3, [pc, #116]	@ (8003d0c <MX_ADC1_Init+0x98>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8003c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8003d0c <MX_ADC1_Init+0x98>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8003ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8003d0c <MX_ADC1_Init+0x98>)
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003ca6:	4b19      	ldr	r3, [pc, #100]	@ (8003d0c <MX_ADC1_Init+0x98>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003cae:	4b17      	ldr	r3, [pc, #92]	@ (8003d0c <MX_ADC1_Init+0x98>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003cb4:	4b15      	ldr	r3, [pc, #84]	@ (8003d0c <MX_ADC1_Init+0x98>)
 8003cb6:	4a17      	ldr	r2, [pc, #92]	@ (8003d14 <MX_ADC1_Init+0xa0>)
 8003cb8:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003cba:	4b14      	ldr	r3, [pc, #80]	@ (8003d0c <MX_ADC1_Init+0x98>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8003cc0:	4b12      	ldr	r3, [pc, #72]	@ (8003d0c <MX_ADC1_Init+0x98>)
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8003cc6:	4b11      	ldr	r3, [pc, #68]	@ (8003d0c <MX_ADC1_Init+0x98>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003cce:	4b0f      	ldr	r3, [pc, #60]	@ (8003d0c <MX_ADC1_Init+0x98>)
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003cd4:	480d      	ldr	r0, [pc, #52]	@ (8003d0c <MX_ADC1_Init+0x98>)
 8003cd6:	f001 fe9b 	bl	8005a10 <HAL_ADC_Init>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 8003ce0:	f000 ffba 	bl	8004c58 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8003ce4:	2304      	movs	r3, #4
 8003ce6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003cec:	2307      	movs	r3, #7
 8003cee:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003cf0:	463b      	mov	r3, r7
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	4805      	ldr	r0, [pc, #20]	@ (8003d0c <MX_ADC1_Init+0x98>)
 8003cf6:	f002 f8b1 	bl	8005e5c <HAL_ADC_ConfigChannel>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 8003d00:	f000 ffaa 	bl	8004c58 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8003d04:	bf00      	nop
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	200046d4 	.word	0x200046d4
 8003d10:	40012000 	.word	0x40012000
 8003d14:	0f000001 	.word	0x0f000001

08003d18 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08c      	sub	sp, #48	@ 0x30
 8003d1c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 8003d1e:	f107 030c 	add.w	r3, r7, #12
 8003d22:	2224      	movs	r2, #36	@ 0x24
 8003d24:	2100      	movs	r1, #0
 8003d26:	4618      	mov	r0, r3
 8003d28:	f017 f842 	bl	801adb0 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d2c:	1d3b      	adds	r3, r7, #4
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8003d34:	4b22      	ldr	r3, [pc, #136]	@ (8003dc0 <MX_TIM1_Init+0xa8>)
 8003d36:	4a23      	ldr	r2, [pc, #140]	@ (8003dc4 <MX_TIM1_Init+0xac>)
 8003d38:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8003d3a:	4b21      	ldr	r3, [pc, #132]	@ (8003dc0 <MX_TIM1_Init+0xa8>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d40:	4b1f      	ldr	r3, [pc, #124]	@ (8003dc0 <MX_TIM1_Init+0xa8>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8003d46:	4b1e      	ldr	r3, [pc, #120]	@ (8003dc0 <MX_TIM1_Init+0xa8>)
 8003d48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d4c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d4e:	4b1c      	ldr	r3, [pc, #112]	@ (8003dc0 <MX_TIM1_Init+0xa8>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8003d54:	4b1a      	ldr	r3, [pc, #104]	@ (8003dc0 <MX_TIM1_Init+0xa8>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003d5a:	4b19      	ldr	r3, [pc, #100]	@ (8003dc0 <MX_TIM1_Init+0xa8>)
 8003d5c:	2280      	movs	r2, #128	@ 0x80
 8003d5e:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003d60:	2303      	movs	r3, #3
 8003d62:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003d64:	2300      	movs	r3, #0
 8003d66:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 8003d70:	230a      	movs	r3, #10
 8003d72:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003d74:	2300      	movs	r3, #0
 8003d76:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 10;
 8003d80:	230a      	movs	r3, #10
 8003d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003d84:	f107 030c 	add.w	r3, r7, #12
 8003d88:	4619      	mov	r1, r3
 8003d8a:	480d      	ldr	r0, [pc, #52]	@ (8003dc0 <MX_TIM1_Init+0xa8>)
 8003d8c:	f003 ff8c 	bl	8007ca8 <HAL_TIM_Encoder_Init>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <MX_TIM1_Init+0x82>
	{
		Error_Handler();
 8003d96:	f000 ff5f 	bl	8004c58 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003da2:	1d3b      	adds	r3, r7, #4
 8003da4:	4619      	mov	r1, r3
 8003da6:	4806      	ldr	r0, [pc, #24]	@ (8003dc0 <MX_TIM1_Init+0xa8>)
 8003da8:	f004 fe38 	bl	8008a1c <HAL_TIMEx_MasterConfigSynchronization>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <MX_TIM1_Init+0x9e>
	{
		Error_Handler();
 8003db2:	f000 ff51 	bl	8004c58 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8003db6:	bf00      	nop
 8003db8:	3730      	adds	r7, #48	@ 0x30
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	2000471c 	.word	0x2000471c
 8003dc4:	40010000 	.word	0x40010000

08003dc8 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08c      	sub	sp, #48	@ 0x30
 8003dcc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 8003dce:	f107 030c 	add.w	r3, r7, #12
 8003dd2:	2224      	movs	r2, #36	@ 0x24
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f016 ffea 	bl	801adb0 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ddc:	1d3b      	adds	r3, r7, #4
 8003dde:	2200      	movs	r2, #0
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8003de4:	4b20      	ldr	r3, [pc, #128]	@ (8003e68 <MX_TIM3_Init+0xa0>)
 8003de6:	4a21      	ldr	r2, [pc, #132]	@ (8003e6c <MX_TIM3_Init+0xa4>)
 8003de8:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8003dea:	4b1f      	ldr	r3, [pc, #124]	@ (8003e68 <MX_TIM3_Init+0xa0>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003df0:	4b1d      	ldr	r3, [pc, #116]	@ (8003e68 <MX_TIM3_Init+0xa0>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8003df6:	4b1c      	ldr	r3, [pc, #112]	@ (8003e68 <MX_TIM3_Init+0xa0>)
 8003df8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003dfc:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8003e68 <MX_TIM3_Init+0xa0>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003e04:	4b18      	ldr	r3, [pc, #96]	@ (8003e68 <MX_TIM3_Init+0xa0>)
 8003e06:	2280      	movs	r2, #128	@ 0x80
 8003e08:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003e12:	2301      	movs	r3, #1
 8003e14:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003e16:	2300      	movs	r3, #0
 8003e18:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 8003e1a:	230a      	movs	r3, #10
 8003e1c:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003e22:	2301      	movs	r3, #1
 8003e24:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003e26:	2300      	movs	r3, #0
 8003e28:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 10;
 8003e2a:	230a      	movs	r3, #10
 8003e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003e2e:	f107 030c 	add.w	r3, r7, #12
 8003e32:	4619      	mov	r1, r3
 8003e34:	480c      	ldr	r0, [pc, #48]	@ (8003e68 <MX_TIM3_Init+0xa0>)
 8003e36:	f003 ff37 	bl	8007ca8 <HAL_TIM_Encoder_Init>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <MX_TIM3_Init+0x7c>
	{
		Error_Handler();
 8003e40:	f000 ff0a 	bl	8004c58 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e44:	2300      	movs	r3, #0
 8003e46:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003e4c:	1d3b      	adds	r3, r7, #4
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4805      	ldr	r0, [pc, #20]	@ (8003e68 <MX_TIM3_Init+0xa0>)
 8003e52:	f004 fde3 	bl	8008a1c <HAL_TIMEx_MasterConfigSynchronization>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <MX_TIM3_Init+0x98>
	{
		Error_Handler();
 8003e5c:	f000 fefc 	bl	8004c58 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8003e60:	bf00      	nop
 8003e62:	3730      	adds	r7, #48	@ 0x30
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	20004764 	.word	0x20004764
 8003e6c:	40000400 	.word	0x40000400

08003e70 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e76:	f107 0308 	add.w	r3, r7, #8
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	605a      	str	r2, [r3, #4]
 8003e80:	609a      	str	r2, [r3, #8]
 8003e82:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e84:	463b      	mov	r3, r7
 8003e86:	2200      	movs	r2, #0
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8003e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8003f04 <MX_TIM4_Init+0x94>)
 8003e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8003f08 <MX_TIM4_Init+0x98>)
 8003e90:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 84;
 8003e92:	4b1c      	ldr	r3, [pc, #112]	@ (8003f04 <MX_TIM4_Init+0x94>)
 8003e94:	2254      	movs	r2, #84	@ 0x54
 8003e96:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e98:	4b1a      	ldr	r3, [pc, #104]	@ (8003f04 <MX_TIM4_Init+0x94>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 10000;
 8003e9e:	4b19      	ldr	r3, [pc, #100]	@ (8003f04 <MX_TIM4_Init+0x94>)
 8003ea0:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003ea4:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ea6:	4b17      	ldr	r3, [pc, #92]	@ (8003f04 <MX_TIM4_Init+0x94>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003eac:	4b15      	ldr	r3, [pc, #84]	@ (8003f04 <MX_TIM4_Init+0x94>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003eb2:	4814      	ldr	r0, [pc, #80]	@ (8003f04 <MX_TIM4_Init+0x94>)
 8003eb4:	f003 fd46 	bl	8007944 <HAL_TIM_Base_Init>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <MX_TIM4_Init+0x52>
	{
		Error_Handler();
 8003ebe:	f000 fecb 	bl	8004c58 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ec2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ec6:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003ec8:	f107 0308 	add.w	r3, r7, #8
 8003ecc:	4619      	mov	r1, r3
 8003ece:	480d      	ldr	r0, [pc, #52]	@ (8003f04 <MX_TIM4_Init+0x94>)
 8003ed0:	f004 f9e8 	bl	80082a4 <HAL_TIM_ConfigClockSource>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <MX_TIM4_Init+0x6e>
	{
		Error_Handler();
 8003eda:	f000 febd 	bl	8004c58 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003ee6:	463b      	mov	r3, r7
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4806      	ldr	r0, [pc, #24]	@ (8003f04 <MX_TIM4_Init+0x94>)
 8003eec:	f004 fd96 	bl	8008a1c <HAL_TIMEx_MasterConfigSynchronization>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <MX_TIM4_Init+0x8a>
	{
		Error_Handler();
 8003ef6:	f000 feaf 	bl	8004c58 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8003efa:	bf00      	nop
 8003efc:	3718      	adds	r7, #24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	200047ac 	.word	0x200047ac
 8003f08:	40000800 	.word	0x40000800

08003f0c <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08a      	sub	sp, #40	@ 0x28
 8003f10:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f12:	f107 0320 	add.w	r3, r7, #32
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8003f1c:	1d3b      	adds	r3, r7, #4
 8003f1e:	2200      	movs	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	605a      	str	r2, [r3, #4]
 8003f24:	609a      	str	r2, [r3, #8]
 8003f26:	60da      	str	r2, [r3, #12]
 8003f28:	611a      	str	r2, [r3, #16]
 8003f2a:	615a      	str	r2, [r3, #20]
 8003f2c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8003f2e:	4b27      	ldr	r3, [pc, #156]	@ (8003fcc <MX_TIM5_Init+0xc0>)
 8003f30:	4a27      	ldr	r2, [pc, #156]	@ (8003fd0 <MX_TIM5_Init+0xc4>)
 8003f32:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 84;
 8003f34:	4b25      	ldr	r3, [pc, #148]	@ (8003fcc <MX_TIM5_Init+0xc0>)
 8003f36:	2254      	movs	r2, #84	@ 0x54
 8003f38:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f3a:	4b24      	ldr	r3, [pc, #144]	@ (8003fcc <MX_TIM5_Init+0xc0>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 100;
 8003f40:	4b22      	ldr	r3, [pc, #136]	@ (8003fcc <MX_TIM5_Init+0xc0>)
 8003f42:	2264      	movs	r2, #100	@ 0x64
 8003f44:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f46:	4b21      	ldr	r3, [pc, #132]	@ (8003fcc <MX_TIM5_Init+0xc0>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003f4c:	4b1f      	ldr	r3, [pc, #124]	@ (8003fcc <MX_TIM5_Init+0xc0>)
 8003f4e:	2280      	movs	r2, #128	@ 0x80
 8003f50:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8003f52:	481e      	ldr	r0, [pc, #120]	@ (8003fcc <MX_TIM5_Init+0xc0>)
 8003f54:	f003 fda8 	bl	8007aa8 <HAL_TIM_PWM_Init>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <MX_TIM5_Init+0x56>
	{
		Error_Handler();
 8003f5e:	f000 fe7b 	bl	8004c58 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f62:	2300      	movs	r3, #0
 8003f64:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f66:	2300      	movs	r3, #0
 8003f68:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003f6a:	f107 0320 	add.w	r3, r7, #32
 8003f6e:	4619      	mov	r1, r3
 8003f70:	4816      	ldr	r0, [pc, #88]	@ (8003fcc <MX_TIM5_Init+0xc0>)
 8003f72:	f004 fd53 	bl	8008a1c <HAL_TIMEx_MasterConfigSynchronization>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <MX_TIM5_Init+0x74>
	{
		Error_Handler();
 8003f7c:	f000 fe6c 	bl	8004c58 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f80:	2360      	movs	r3, #96	@ 0x60
 8003f82:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8003f84:	2300      	movs	r3, #0
 8003f86:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f90:	1d3b      	adds	r3, r7, #4
 8003f92:	2200      	movs	r2, #0
 8003f94:	4619      	mov	r1, r3
 8003f96:	480d      	ldr	r0, [pc, #52]	@ (8003fcc <MX_TIM5_Init+0xc0>)
 8003f98:	f004 f8c2 	bl	8008120 <HAL_TIM_PWM_ConfigChannel>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <MX_TIM5_Init+0x9a>
	{
		Error_Handler();
 8003fa2:	f000 fe59 	bl	8004c58 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003fa6:	1d3b      	adds	r3, r7, #4
 8003fa8:	2204      	movs	r2, #4
 8003faa:	4619      	mov	r1, r3
 8003fac:	4807      	ldr	r0, [pc, #28]	@ (8003fcc <MX_TIM5_Init+0xc0>)
 8003fae:	f004 f8b7 	bl	8008120 <HAL_TIM_PWM_ConfigChannel>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <MX_TIM5_Init+0xb0>
	{
		Error_Handler();
 8003fb8:	f000 fe4e 	bl	8004c58 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 8003fbc:	4803      	ldr	r0, [pc, #12]	@ (8003fcc <MX_TIM5_Init+0xc0>)
 8003fbe:	f001 f9f5 	bl	80053ac <HAL_TIM_MspPostInit>

}
 8003fc2:	bf00      	nop
 8003fc4:	3728      	adds	r7, #40	@ 0x28
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	200047f4 	.word	0x200047f4
 8003fd0:	40000c00 	.word	0x40000c00

08003fd4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8003fd8:	4b11      	ldr	r3, [pc, #68]	@ (8004020 <MX_USART2_UART_Init+0x4c>)
 8003fda:	4a12      	ldr	r2, [pc, #72]	@ (8004024 <MX_USART2_UART_Init+0x50>)
 8003fdc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8003fde:	4b10      	ldr	r3, [pc, #64]	@ (8004020 <MX_USART2_UART_Init+0x4c>)
 8003fe0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003fe4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8004020 <MX_USART2_UART_Init+0x4c>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003fec:	4b0c      	ldr	r3, [pc, #48]	@ (8004020 <MX_USART2_UART_Init+0x4c>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8003ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8004020 <MX_USART2_UART_Init+0x4c>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003ff8:	4b09      	ldr	r3, [pc, #36]	@ (8004020 <MX_USART2_UART_Init+0x4c>)
 8003ffa:	220c      	movs	r2, #12
 8003ffc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ffe:	4b08      	ldr	r3, [pc, #32]	@ (8004020 <MX_USART2_UART_Init+0x4c>)
 8004000:	2200      	movs	r2, #0
 8004002:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004004:	4b06      	ldr	r3, [pc, #24]	@ (8004020 <MX_USART2_UART_Init+0x4c>)
 8004006:	2200      	movs	r2, #0
 8004008:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800400a:	4805      	ldr	r0, [pc, #20]	@ (8004020 <MX_USART2_UART_Init+0x4c>)
 800400c:	f004 fd88 	bl	8008b20 <HAL_UART_Init>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8004016:	f000 fe1f 	bl	8004c58 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800401a:	bf00      	nop
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	2000483c 	.word	0x2000483c
 8004024:	40004400 	.word	0x40004400

08004028 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800402e:	2300      	movs	r3, #0
 8004030:	607b      	str	r3, [r7, #4]
 8004032:	4b10      	ldr	r3, [pc, #64]	@ (8004074 <MX_DMA_Init+0x4c>)
 8004034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004036:	4a0f      	ldr	r2, [pc, #60]	@ (8004074 <MX_DMA_Init+0x4c>)
 8004038:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800403c:	6313      	str	r3, [r2, #48]	@ 0x30
 800403e:	4b0d      	ldr	r3, [pc, #52]	@ (8004074 <MX_DMA_Init+0x4c>)
 8004040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004042:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004046:	607b      	str	r3, [r7, #4]
 8004048:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800404a:	2200      	movs	r2, #0
 800404c:	2105      	movs	r1, #5
 800404e:	2010      	movs	r0, #16
 8004050:	f002 f9e4 	bl	800641c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004054:	2010      	movs	r0, #16
 8004056:	f002 f9fd 	bl	8006454 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800405a:	2200      	movs	r2, #0
 800405c:	2105      	movs	r1, #5
 800405e:	2011      	movs	r0, #17
 8004060:	f002 f9dc 	bl	800641c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8004064:	2011      	movs	r0, #17
 8004066:	f002 f9f5 	bl	8006454 <HAL_NVIC_EnableIRQ>

}
 800406a:	bf00      	nop
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40023800 	.word	0x40023800

08004078 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b08a      	sub	sp, #40	@ 0x28
 800407c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800407e:	f107 0314 	add.w	r3, r7, #20
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	605a      	str	r2, [r3, #4]
 8004088:	609a      	str	r2, [r3, #8]
 800408a:	60da      	str	r2, [r3, #12]
 800408c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800408e:	2300      	movs	r3, #0
 8004090:	613b      	str	r3, [r7, #16]
 8004092:	4b40      	ldr	r3, [pc, #256]	@ (8004194 <MX_GPIO_Init+0x11c>)
 8004094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004096:	4a3f      	ldr	r2, [pc, #252]	@ (8004194 <MX_GPIO_Init+0x11c>)
 8004098:	f043 0304 	orr.w	r3, r3, #4
 800409c:	6313      	str	r3, [r2, #48]	@ 0x30
 800409e:	4b3d      	ldr	r3, [pc, #244]	@ (8004194 <MX_GPIO_Init+0x11c>)
 80040a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a2:	f003 0304 	and.w	r3, r3, #4
 80040a6:	613b      	str	r3, [r7, #16]
 80040a8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80040aa:	2300      	movs	r3, #0
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	4b39      	ldr	r3, [pc, #228]	@ (8004194 <MX_GPIO_Init+0x11c>)
 80040b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b2:	4a38      	ldr	r2, [pc, #224]	@ (8004194 <MX_GPIO_Init+0x11c>)
 80040b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80040ba:	4b36      	ldr	r3, [pc, #216]	@ (8004194 <MX_GPIO_Init+0x11c>)
 80040bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c2:	60fb      	str	r3, [r7, #12]
 80040c4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80040c6:	2300      	movs	r3, #0
 80040c8:	60bb      	str	r3, [r7, #8]
 80040ca:	4b32      	ldr	r3, [pc, #200]	@ (8004194 <MX_GPIO_Init+0x11c>)
 80040cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ce:	4a31      	ldr	r2, [pc, #196]	@ (8004194 <MX_GPIO_Init+0x11c>)
 80040d0:	f043 0301 	orr.w	r3, r3, #1
 80040d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80040d6:	4b2f      	ldr	r3, [pc, #188]	@ (8004194 <MX_GPIO_Init+0x11c>)
 80040d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	60bb      	str	r3, [r7, #8]
 80040e0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80040e2:	2300      	movs	r3, #0
 80040e4:	607b      	str	r3, [r7, #4]
 80040e6:	4b2b      	ldr	r3, [pc, #172]	@ (8004194 <MX_GPIO_Init+0x11c>)
 80040e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ea:	4a2a      	ldr	r2, [pc, #168]	@ (8004194 <MX_GPIO_Init+0x11c>)
 80040ec:	f043 0302 	orr.w	r3, r3, #2
 80040f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80040f2:	4b28      	ldr	r3, [pc, #160]	@ (8004194 <MX_GPIO_Init+0x11c>)
 80040f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	607b      	str	r3, [r7, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80040fe:	2200      	movs	r2, #0
 8004100:	2120      	movs	r1, #32
 8004102:	4825      	ldr	r0, [pc, #148]	@ (8004198 <MX_GPIO_Init+0x120>)
 8004104:	f002 ff3a 	bl	8006f7c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(di2M2_GPIO_Port, di2M2_Pin, GPIO_PIN_RESET);
 8004108:	2200      	movs	r2, #0
 800410a:	2110      	movs	r1, #16
 800410c:	4823      	ldr	r0, [pc, #140]	@ (800419c <MX_GPIO_Init+0x124>)
 800410e:	f002 ff35 	bl	8006f7c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|Dir_L_Pin|Dir_R_Pin, GPIO_PIN_RESET);
 8004112:	2200      	movs	r2, #0
 8004114:	2129      	movs	r1, #41	@ 0x29
 8004116:	4822      	ldr	r0, [pc, #136]	@ (80041a0 <MX_GPIO_Init+0x128>)
 8004118:	f002 ff30 	bl	8006f7c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800411c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004120:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004122:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004126:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004128:	2300      	movs	r3, #0
 800412a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800412c:	f107 0314 	add.w	r3, r7, #20
 8004130:	4619      	mov	r1, r3
 8004132:	481a      	ldr	r0, [pc, #104]	@ (800419c <MX_GPIO_Init+0x124>)
 8004134:	f002 fd9e 	bl	8006c74 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8004138:	2320      	movs	r3, #32
 800413a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800413c:	2301      	movs	r3, #1
 800413e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004140:	2300      	movs	r3, #0
 8004142:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004144:	2300      	movs	r3, #0
 8004146:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004148:	f107 0314 	add.w	r3, r7, #20
 800414c:	4619      	mov	r1, r3
 800414e:	4812      	ldr	r0, [pc, #72]	@ (8004198 <MX_GPIO_Init+0x120>)
 8004150:	f002 fd90 	bl	8006c74 <HAL_GPIO_Init>

	/*Configure GPIO pin : di2M2_Pin */
	GPIO_InitStruct.Pin = di2M2_Pin;
 8004154:	2310      	movs	r3, #16
 8004156:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004158:	2301      	movs	r3, #1
 800415a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800415c:	2300      	movs	r3, #0
 800415e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004160:	2300      	movs	r3, #0
 8004162:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(di2M2_GPIO_Port, &GPIO_InitStruct);
 8004164:	f107 0314 	add.w	r3, r7, #20
 8004168:	4619      	mov	r1, r3
 800416a:	480c      	ldr	r0, [pc, #48]	@ (800419c <MX_GPIO_Init+0x124>)
 800416c:	f002 fd82 	bl	8006c74 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 Dir_L_Pin Dir_R_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_0|Dir_L_Pin|Dir_R_Pin;
 8004170:	2329      	movs	r3, #41	@ 0x29
 8004172:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004174:	2301      	movs	r3, #1
 8004176:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004178:	2300      	movs	r3, #0
 800417a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800417c:	2300      	movs	r3, #0
 800417e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004180:	f107 0314 	add.w	r3, r7, #20
 8004184:	4619      	mov	r1, r3
 8004186:	4806      	ldr	r0, [pc, #24]	@ (80041a0 <MX_GPIO_Init+0x128>)
 8004188:	f002 fd74 	bl	8006c74 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800418c:	bf00      	nop
 800418e:	3728      	adds	r7, #40	@ 0x28
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40023800 	.word	0x40023800
 8004198:	40020000 	.word	0x40020000
 800419c:	40020800 	.word	0x40020800
 80041a0:	40020400 	.word	0x40020400
 80041a4:	00000000 	.word	0x00000000

080041a8 <StartDefaultTask>:
std_msgs__msg__Float32 msg_PosRef;
std_msgs__msg__Float32 msg_SpeedRef;
std_msgs__msg__Float32 msg_ControlMode;

void StartDefaultTask(void *argument)
{
 80041a8:	b5b0      	push	{r4, r5, r7, lr}
 80041aa:	b0e8      	sub	sp, #416	@ 0x1a0
 80041ac:	af02      	add	r7, sp, #8
 80041ae:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80041b2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80041b6:	6018      	str	r0, [r3, #0]
	/* USER CODE BEGIN 5 */

	// micro-ROS configuration
	/* Se llama a las funciones declaradas anteriormente para la comunicación con el HW*/
	rmw_uros_set_custom_transport(
 80041b8:	4bd1      	ldr	r3, [pc, #836]	@ (8004500 <StartDefaultTask+0x358>)
 80041ba:	9301      	str	r3, [sp, #4]
 80041bc:	4bd1      	ldr	r3, [pc, #836]	@ (8004504 <StartDefaultTask+0x35c>)
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	4bd1      	ldr	r3, [pc, #836]	@ (8004508 <StartDefaultTask+0x360>)
 80041c2:	4ad2      	ldr	r2, [pc, #840]	@ (800450c <StartDefaultTask+0x364>)
 80041c4:	49d2      	ldr	r1, [pc, #840]	@ (8004510 <StartDefaultTask+0x368>)
 80041c6:	2001      	movs	r0, #1
 80041c8:	f009 fe1e 	bl	800de08 <rmw_uros_set_custom_transport>
			cubemx_transport_open,
			cubemx_transport_close,
			cubemx_transport_write,
			cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80041cc:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 80041d0:	4618      	mov	r0, r3
 80041d2:	f009 fd4b 	bl	800dc6c <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 80041d6:	4bcf      	ldr	r3, [pc, #828]	@ (8004514 <StartDefaultTask+0x36c>)
 80041d8:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
	freeRTOS_allocator.deallocate = microros_deallocate;
 80041dc:	4bce      	ldr	r3, [pc, #824]	@ (8004518 <StartDefaultTask+0x370>)
 80041de:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
	freeRTOS_allocator.reallocate = microros_reallocate;
 80041e2:	4bce      	ldr	r3, [pc, #824]	@ (800451c <StartDefaultTask+0x374>)
 80041e4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80041e8:	4bcd      	ldr	r3, [pc, #820]	@ (8004520 <StartDefaultTask+0x378>)
 80041ea:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80041ee:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 80041f2:	4618      	mov	r0, r3
 80041f4:	f009 fd48 	bl	800dc88 <rcutils_set_default_allocator>
 80041f8:	4603      	mov	r3, r0
 80041fa:	f083 0301 	eor.w	r3, r3, #1
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b00      	cmp	r3, #0
 8004202:	d004      	beq.n	800420e <StartDefaultTask+0x66>
		printf("Error on default allocators (line %d)\n", __LINE__);
 8004204:	f240 3113 	movw	r1, #787	@ 0x313
 8004208:	48c6      	ldr	r0, [pc, #792]	@ (8004524 <StartDefaultTask+0x37c>)
 800420a:	f016 fc05 	bl	801aa18 <iprintf>

	frame_data__msg__FrameData intento;

	rcl_node_t node;
	rclc_support_t support;
	rcl_allocator_t allocator = rcl_get_default_allocator();
 800420e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004212:	4618      	mov	r0, r3
 8004214:	f009 fd56 	bl	800dcc4 <rcutils_get_default_allocator>

	// Instancias de inicialización, creación de nodo, publisher, etc.
	//create init_options
	rclc_support_init(&support, 0, NULL, &allocator);
 8004218:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800421c:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 8004220:	2200      	movs	r2, #0
 8004222:	2100      	movs	r1, #0
 8004224:	f009 fc2c 	bl	800da80 <rclc_support_init>

	// create node
	rclc_node_init_default(&node, "controlST", "", &support);
 8004228:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800422c:	f107 00ec 	add.w	r0, r7, #236	@ 0xec
 8004230:	4abd      	ldr	r2, [pc, #756]	@ (8004528 <StartDefaultTask+0x380>)
 8004232:	49be      	ldr	r1, [pc, #760]	@ (800452c <StartDefaultTask+0x384>)
 8004234:	f009 fc6e 	bl	800db14 <rclc_node_init_default>

	// create publishers
	rclc_publisher_init_default(
 8004238:	f00a fb2a 	bl	800e890 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 800423c:	4602      	mov	r2, r0
 800423e:	f107 01ec 	add.w	r1, r7, #236	@ 0xec
 8004242:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 8004246:	4bba      	ldr	r3, [pc, #744]	@ (8004530 <StartDefaultTask+0x388>)
 8004248:	f009 fca0 	bl	800db8c <rclc_publisher_init_default>
			&publisher_framePos,
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
			"frame_position");
	rclc_publisher_init_default(
 800424c:	f00a fb20 	bl	800e890 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 8004250:	4602      	mov	r2, r0
 8004252:	f107 01ec 	add.w	r1, r7, #236	@ 0xec
 8004256:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800425a:	4bb6      	ldr	r3, [pc, #728]	@ (8004534 <StartDefaultTask+0x38c>)
 800425c:	f009 fc96 	bl	800db8c <rclc_publisher_init_default>
			&publisher_frameVel,
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
			"frame_speed");
	rclc_publisher_init_default(
 8004260:	f00a fb16 	bl	800e890 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 8004264:	4602      	mov	r2, r0
 8004266:	f107 01ec 	add.w	r1, r7, #236	@ 0xec
 800426a:	f507 709a 	add.w	r0, r7, #308	@ 0x134
 800426e:	4bb2      	ldr	r3, [pc, #712]	@ (8004538 <StartDefaultTask+0x390>)
 8004270:	f009 fc8c 	bl	800db8c <rclc_publisher_init_default>
			&publisher_framePosRef,
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
			"frame_positionRef");
	rclc_publisher_init_default(
 8004274:	f00a fb0c 	bl	800e890 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 8004278:	4602      	mov	r2, r0
 800427a:	f107 01ec 	add.w	r1, r7, #236	@ 0xec
 800427e:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 8004282:	4bae      	ldr	r3, [pc, #696]	@ (800453c <StartDefaultTask+0x394>)
 8004284:	f009 fc82 	bl	800db8c <rclc_publisher_init_default>
			&publisher_frameVelRef,
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
			"frame_speedRef");
	rclc_publisher_init_default(
 8004288:	f00a fb02 	bl	800e890 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 800428c:	4602      	mov	r2, r0
 800428e:	f107 01ec 	add.w	r1, r7, #236	@ 0xec
 8004292:	f507 7096 	add.w	r0, r7, #300	@ 0x12c
 8004296:	4baa      	ldr	r3, [pc, #680]	@ (8004540 <StartDefaultTask+0x398>)
 8004298:	f009 fc78 	bl	800db8c <rclc_publisher_init_default>
	/*rclc_publisher_init_default(
			&publisher_frameMode,
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
			"frame_mode");*/
	rclc_publisher_init_default(
 800429c:	f00a faf8 	bl	800e890 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 80042a0:	4602      	mov	r2, r0
 80042a2:	f107 01ec 	add.w	r1, r7, #236	@ 0xec
 80042a6:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 80042aa:	4ba6      	ldr	r3, [pc, #664]	@ (8004544 <StartDefaultTask+0x39c>)
 80042ac:	f009 fc6e 	bl	800db8c <rclc_publisher_init_default>
	rcl_subscription_t subscriber;
	rcl_subscription_t subscriber_PosRef;
	rcl_subscription_t subscriber_SpeedRef;
	rcl_subscription_t subscriber_ControlMode;

	const char * topic_name  = "PositionReference"; //COMx
 80042b0:	4ba5      	ldr	r3, [pc, #660]	@ (8004548 <StartDefaultTask+0x3a0>)
 80042b2:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
	const char * topic_name2 = "SpeedReference"; //"COMx"; //"SpeedReference";
 80042b6:	4ba5      	ldr	r3, [pc, #660]	@ (800454c <StartDefaultTask+0x3a4>)
 80042b8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
	const char * topic_name5 = "ControlMode";
 80042bc:	4ba4      	ldr	r3, [pc, #656]	@ (8004550 <StartDefaultTask+0x3a8>)
 80042be:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c

	//rclc_subscription_init_default(&subscriber, &node, type_support, topic_name);
	rclc_subscription_init_best_effort(&subscriber_SpeedRef, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32), topic_name2);
 80042c2:	f00a fae5 	bl	800e890 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 80042c6:	4602      	mov	r2, r0
 80042c8:	f107 01ec 	add.w	r1, r7, #236	@ 0xec
 80042cc:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 80042d0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80042d4:	f009 fc8e 	bl	800dbf4 <rclc_subscription_init_best_effort>
	rclc_subscription_init_best_effort(&subscriber_ControlMode, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32), topic_name5);
 80042d8:	f00a fada 	bl	800e890 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 80042dc:	4602      	mov	r2, r0
 80042de:	f107 01ec 	add.w	r1, r7, #236	@ 0xec
 80042e2:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 80042e6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80042ea:	f009 fc83 	bl	800dbf4 <rclc_subscription_init_best_effort>
	rclc_subscription_init_best_effort(&subscriber_PosRef, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32), topic_name);
 80042ee:	f00a facf 	bl	800e890 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 80042f2:	4602      	mov	r2, r0
 80042f4:	f107 01ec 	add.w	r1, r7, #236	@ 0xec
 80042f8:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 80042fc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8004300:	f009 fc78 	bl	800dbf4 <rclc_subscription_init_best_effort>
	//  rclc_subscription_init_default(&subscriber1,&node,ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),"nombre_del_primer_topic",&topic1_callback,ON_NEW_DATA);


	std_msgs__msg__String__init(&msg_ControlMode);
 8004304:	4893      	ldr	r0, [pc, #588]	@ (8004554 <StartDefaultTask+0x3ac>)
 8004306:	f00a fab1 	bl	800e86c <std_msgs__msg__String__init>
	std_msgs__msg__Float32__init(&msg_PosRef);
 800430a:	4893      	ldr	r0, [pc, #588]	@ (8004558 <StartDefaultTask+0x3b0>)
 800430c:	f00a faa8 	bl	800e860 <std_msgs__msg__Float32__init>
	std_msgs__msg__Float32__init(&msg_SpeedRef);
 8004310:	4892      	ldr	r0, [pc, #584]	@ (800455c <StartDefaultTask+0x3b4>)
 8004312:	f00a faa5 	bl	800e860 <std_msgs__msg__Float32__init>

	// create timer
	rcl_timer_t timer;
	const unsigned int timer_rate = 100;  // 1 Hz (arbitrary value)
 8004316:	2364      	movs	r3, #100	@ 0x64
 8004318:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188

	// create executor
	const size_t num_handles = 3;  // number of subscribers & timers. ¿¿Serían 5??
 800431c:	2303      	movs	r3, #3
 800431e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
	rclc_executor_t executor=rclc_executor_get_zero_initialized_executor();
 8004322:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8004326:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800432a:	4618      	mov	r0, r3
 800432c:	f009 f8d4 	bl	800d4d8 <rclc_executor_get_zero_initialized_executor>
	rclc_executor_init(&executor, &support.context, num_handles, &allocator);
 8004330:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004334:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 8004338:	f107 0008 	add.w	r0, r7, #8
 800433c:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8004340:	f009 f8d6 	bl	800d4f0 <rclc_executor_init>
	// Para agregarle al ejecutor el suscriptor
	// rclc_executor_add_subscription(&executor, &subscriber1, &refPos, subscription_callback, ON_NEW_DATA); //refPos antes era msg_PosRef
	rclc_executor_add_subscription(&executor, &subscriber_PosRef, &msg_PosRef, subscription_callback_PosRef, ON_NEW_DATA);
 8004344:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 8004348:	f107 0008 	add.w	r0, r7, #8
 800434c:	2300      	movs	r3, #0
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	4b83      	ldr	r3, [pc, #524]	@ (8004560 <StartDefaultTask+0x3b8>)
 8004352:	4a81      	ldr	r2, [pc, #516]	@ (8004558 <StartDefaultTask+0x3b0>)
 8004354:	f009 f93c 	bl	800d5d0 <rclc_executor_add_subscription>
	rclc_executor_add_subscription(&executor, &subscriber_SpeedRef, &msg_SpeedRef, subscription_callback_SpeedRef, ON_NEW_DATA);
 8004358:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 800435c:	f107 0008 	add.w	r0, r7, #8
 8004360:	2300      	movs	r3, #0
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	4b7f      	ldr	r3, [pc, #508]	@ (8004564 <StartDefaultTask+0x3bc>)
 8004366:	4a7d      	ldr	r2, [pc, #500]	@ (800455c <StartDefaultTask+0x3b4>)
 8004368:	f009 f932 	bl	800d5d0 <rclc_executor_add_subscription>
	rclc_executor_add_subscription(&executor, &subscriber_ControlMode, &msg_ControlMode, subscription_callback_ControlMode, ON_NEW_DATA);
 800436c:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 8004370:	f107 0008 	add.w	r0, r7, #8
 8004374:	2300      	movs	r3, #0
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	4b7b      	ldr	r3, [pc, #492]	@ (8004568 <StartDefaultTask+0x3c0>)
 800437a:	4a76      	ldr	r2, [pc, #472]	@ (8004554 <StartDefaultTask+0x3ac>)
 800437c:	f009 f928 	bl	800d5d0 <rclc_executor_add_subscription>

	float dy=(v2-v1); //0.55-2.2
 8004380:	4b7a      	ldr	r3, [pc, #488]	@ (800456c <StartDefaultTask+0x3c4>)
 8004382:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
	float dx=(d2-d1); //50-4
 8004386:	4b7a      	ldr	r3, [pc, #488]	@ (8004570 <StartDefaultTask+0x3c8>)
 8004388:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
	float m =dy/dx;// -(dist_max-dist_min)/(raw_min-raw_max);
 800438c:	edd7 6a60 	vldr	s13, [r7, #384]	@ 0x180
 8004390:	ed97 7a5f 	vldr	s14, [r7, #380]	@ 0x17c
 8004394:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004398:	edc7 7a5e 	vstr	s15, [r7, #376]	@ 0x178
	float n = 2-m*10;
 800439c:	edd7 7a5e 	vldr	s15, [r7, #376]	@ 0x178
 80043a0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80043a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043a8:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80043ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043b0:	edc7 7a5d 	vstr	s15, [r7, #372]	@ 0x174
	float dist_dif = dist_max-dist_min;
 80043b4:	4b6f      	ldr	r3, [pc, #444]	@ (8004574 <StartDefaultTask+0x3cc>)
 80043b6:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170

	//msg_ControlMode.data=3;
	for(;;)
	{
		if(ready){
 80043ba:	4b6f      	ldr	r3, [pc, #444]	@ (8004578 <StartDefaultTask+0x3d0>)
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 83d0 	beq.w	8004b64 <StartDefaultTask+0x9bc>
			ready=0;
 80043c4:	4b6c      	ldr	r3, [pc, #432]	@ (8004578 <StartDefaultTask+0x3d0>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	701a      	strb	r2, [r3, #0]
			valor_DR=ADC1->DR;
 80043ca:	4b6c      	ldr	r3, [pc, #432]	@ (800457c <StartDefaultTask+0x3d4>)
 80043cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	4b6b      	ldr	r3, [pc, #428]	@ (8004580 <StartDefaultTask+0x3d8>)
 80043d2:	801a      	strh	r2, [r3, #0]
			dist_act = (valor_DR*escala-n)/m;
 80043d4:	4b6a      	ldr	r3, [pc, #424]	@ (8004580 <StartDefaultTask+0x3d8>)
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	4618      	mov	r0, r3
 80043da:	f7fc f8bb 	bl	8000554 <__aeabi_i2d>
 80043de:	a344      	add	r3, pc, #272	@ (adr r3, 80044f0 <StartDefaultTask+0x348>)
 80043e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e4:	f7fc f920 	bl	8000628 <__aeabi_dmul>
 80043e8:	4602      	mov	r2, r0
 80043ea:	460b      	mov	r3, r1
 80043ec:	4614      	mov	r4, r2
 80043ee:	461d      	mov	r5, r3
 80043f0:	f8d7 0174 	ldr.w	r0, [r7, #372]	@ 0x174
 80043f4:	f7fc f8c0 	bl	8000578 <__aeabi_f2d>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4620      	mov	r0, r4
 80043fe:	4629      	mov	r1, r5
 8004400:	f7fb ff5a 	bl	80002b8 <__aeabi_dsub>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4614      	mov	r4, r2
 800440a:	461d      	mov	r5, r3
 800440c:	f8d7 0178 	ldr.w	r0, [r7, #376]	@ 0x178
 8004410:	f7fc f8b2 	bl	8000578 <__aeabi_f2d>
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	4620      	mov	r0, r4
 800441a:	4629      	mov	r1, r5
 800441c:	f7fc fa2e 	bl	800087c <__aeabi_ddiv>
 8004420:	4602      	mov	r2, r0
 8004422:	460b      	mov	r3, r1
 8004424:	4610      	mov	r0, r2
 8004426:	4619      	mov	r1, r3
 8004428:	f7fc fbf6 	bl	8000c18 <__aeabi_d2f>
 800442c:	4603      	mov	r3, r0
 800442e:	4a55      	ldr	r2, [pc, #340]	@ (8004584 <StartDefaultTask+0x3dc>)
 8004430:	6013      	str	r3, [r2, #0]
			dist = (alfa*dist_act) + ((1-alfa)*dist);
 8004432:	4b55      	ldr	r3, [pc, #340]	@ (8004588 <StartDefaultTask+0x3e0>)
 8004434:	ed93 7a00 	vldr	s14, [r3]
 8004438:	4b52      	ldr	r3, [pc, #328]	@ (8004584 <StartDefaultTask+0x3dc>)
 800443a:	edd3 7a00 	vldr	s15, [r3]
 800443e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004442:	4b51      	ldr	r3, [pc, #324]	@ (8004588 <StartDefaultTask+0x3e0>)
 8004444:	edd3 7a00 	vldr	s15, [r3]
 8004448:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800444c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004450:	4b4e      	ldr	r3, [pc, #312]	@ (800458c <StartDefaultTask+0x3e4>)
 8004452:	edd3 7a00 	vldr	s15, [r3]
 8004456:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800445a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800445e:	4b4b      	ldr	r3, [pc, #300]	@ (800458c <StartDefaultTask+0x3e4>)
 8004460:	edc3 7a00 	vstr	s15, [r3]
			if (dist>=dist_max) dist=dist_max;
 8004464:	4b49      	ldr	r3, [pc, #292]	@ (800458c <StartDefaultTask+0x3e4>)
 8004466:	edd3 7a00 	vldr	s15, [r3]
 800446a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8004590 <StartDefaultTask+0x3e8>
 800446e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004476:	db02      	blt.n	800447e <StartDefaultTask+0x2d6>
 8004478:	4b44      	ldr	r3, [pc, #272]	@ (800458c <StartDefaultTask+0x3e4>)
 800447a:	4a46      	ldr	r2, [pc, #280]	@ (8004594 <StartDefaultTask+0x3ec>)
 800447c:	601a      	str	r2, [r3, #0]
			if (dist<=dist_min) dist=dist_min-0.5;
 800447e:	4b43      	ldr	r3, [pc, #268]	@ (800458c <StartDefaultTask+0x3e4>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4618      	mov	r0, r3
 8004484:	f7fc f878 	bl	8000578 <__aeabi_f2d>
 8004488:	a31b      	add	r3, pc, #108	@ (adr r3, 80044f8 <StartDefaultTask+0x350>)
 800448a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448e:	f7fc fb47 	bl	8000b20 <__aeabi_dcmple>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <StartDefaultTask+0x2f6>
 8004498:	4b3c      	ldr	r3, [pc, #240]	@ (800458c <StartDefaultTask+0x3e4>)
 800449a:	4a3f      	ldr	r2, [pc, #252]	@ (8004598 <StartDefaultTask+0x3f0>)
 800449c:	601a      	str	r2, [r3, #0]

			if(msg_ControlMode.data==1){
 800449e:	4b2d      	ldr	r3, [pc, #180]	@ (8004554 <StartDefaultTask+0x3ac>)
 80044a0:	edd3 7a00 	vldr	s15, [r3]
 80044a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044a8:	eef4 7a47 	vcmp.f32	s15, s14
 80044ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b0:	f040 80b5 	bne.w	800461e <StartDefaultTask+0x476>
				controlS.positionReference = msg_PosRef.data;
 80044b4:	4b28      	ldr	r3, [pc, #160]	@ (8004558 <StartDefaultTask+0x3b0>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7fc f85d 	bl	8000578 <__aeabi_f2d>
 80044be:	4602      	mov	r2, r0
 80044c0:	460b      	mov	r3, r1
 80044c2:	4936      	ldr	r1, [pc, #216]	@ (800459c <StartDefaultTask+0x3f4>)
 80044c4:	e9c1 2300 	strd	r2, r3, [r1]
				PosControlMotor1.error=controlS.positionReference-pos_Rc;
 80044c8:	4b34      	ldr	r3, [pc, #208]	@ (800459c <StartDefaultTask+0x3f4>)
 80044ca:	e9d3 4500 	ldrd	r4, r5, [r3]
 80044ce:	4b34      	ldr	r3, [pc, #208]	@ (80045a0 <StartDefaultTask+0x3f8>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fc f850 	bl	8000578 <__aeabi_f2d>
 80044d8:	4602      	mov	r2, r0
 80044da:	460b      	mov	r3, r1
 80044dc:	4620      	mov	r0, r4
 80044de:	4629      	mov	r1, r5
 80044e0:	f7fb feea 	bl	80002b8 <__aeabi_dsub>
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	e05c      	b.n	80045a4 <StartDefaultTask+0x3fc>
 80044ea:	bf00      	nop
 80044ec:	f3af 8000 	nop.w
 80044f0:	12698f10 	.word	0x12698f10
 80044f4:	3f4a6861 	.word	0x3f4a6861
 80044f8:	0a3d70a4 	.word	0x0a3d70a4
 80044fc:	4026a3d7 	.word	0x4026a3d7
 8004500:	08003361 	.word	0x08003361
 8004504:	080032f9 	.word	0x080032f9
 8004508:	080032d9 	.word	0x080032d9
 800450c:	080032ad 	.word	0x080032ad
 8004510:	2000483c 	.word	0x2000483c
 8004514:	08004c65 	.word	0x08004c65
 8004518:	08004ca9 	.word	0x08004ca9
 800451c:	08004ce1 	.word	0x08004ce1
 8004520:	08004d4d 	.word	0x08004d4d
 8004524:	0801fc28 	.word	0x0801fc28
 8004528:	0801fc50 	.word	0x0801fc50
 800452c:	0801fc54 	.word	0x0801fc54
 8004530:	0801fc60 	.word	0x0801fc60
 8004534:	0801fc70 	.word	0x0801fc70
 8004538:	0801fc7c 	.word	0x0801fc7c
 800453c:	0801fc90 	.word	0x0801fc90
 8004540:	0801fca0 	.word	0x0801fca0
 8004544:	0801fcb8 	.word	0x0801fcb8
 8004548:	0801fcc8 	.word	0x0801fcc8
 800454c:	0801fcdc 	.word	0x0801fcdc
 8004550:	0801fcec 	.word	0x0801fcec
 8004554:	200086c0 	.word	0x200086c0
 8004558:	200086b8 	.word	0x200086b8
 800455c:	200086bc 	.word	0x200086bc
 8004560:	080039b1 	.word	0x080039b1
 8004564:	080039e1 	.word	0x080039e1
 8004568:	08003a11 	.word	0x08003a11
 800456c:	bfd33333 	.word	0xbfd33333
 8004570:	42380000 	.word	0x42380000
 8004574:	4132e148 	.word	0x4132e148
 8004578:	200078e8 	.word	0x200078e8
 800457c:	40012000 	.word	0x40012000
 8004580:	200086a0 	.word	0x200086a0
 8004584:	200086a8 	.word	0x200086a8
 8004588:	20000004 	.word	0x20000004
 800458c:	200086a4 	.word	0x200086a4
 8004590:	41b40000 	.word	0x41b40000
 8004594:	41b40000 	.word	0x41b40000
 8004598:	412d1eb8 	.word	0x412d1eb8
 800459c:	20007930 	.word	0x20007930
 80045a0:	200078d8 	.word	0x200078d8
 80045a4:	49b8      	ldr	r1, [pc, #736]	@ (8004888 <StartDefaultTask+0x6e0>)
 80045a6:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
				TIM5->CCR1=applyPosControl(&PosControlMotor1);
 80045aa:	48b7      	ldr	r0, [pc, #732]	@ (8004888 <StartDefaultTask+0x6e0>)
 80045ac:	f000 fd26 	bl	8004ffc <applyPosControl>
 80045b0:	ec53 2b10 	vmov	r2, r3, d0
 80045b4:	4cb5      	ldr	r4, [pc, #724]	@ (800488c <StartDefaultTask+0x6e4>)
 80045b6:	4610      	mov	r0, r2
 80045b8:	4619      	mov	r1, r3
 80045ba:	f7fc fb0d 	bl	8000bd8 <__aeabi_d2uiz>
 80045be:	4603      	mov	r3, r0
 80045c0:	6363      	str	r3, [r4, #52]	@ 0x34
				TIM5->CCR2=applyPosControl(&PosControlMotor1);
 80045c2:	48b1      	ldr	r0, [pc, #708]	@ (8004888 <StartDefaultTask+0x6e0>)
 80045c4:	f000 fd1a 	bl	8004ffc <applyPosControl>
 80045c8:	ec53 2b10 	vmov	r2, r3, d0
 80045cc:	4caf      	ldr	r4, [pc, #700]	@ (800488c <StartDefaultTask+0x6e4>)
 80045ce:	4610      	mov	r0, r2
 80045d0:	4619      	mov	r1, r3
 80045d2:	f7fc fb01 	bl	8000bd8 <__aeabi_d2uiz>
 80045d6:	4603      	mov	r3, r0
 80045d8:	63a3      	str	r3, [r4, #56]	@ 0x38
				if (PosControlMotor1.rotDirection){
 80045da:	4bab      	ldr	r3, [pc, #684]	@ (8004888 <StartDefaultTask+0x6e0>)
 80045dc:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 80045e0:	f04f 0200 	mov.w	r2, #0
 80045e4:	f04f 0300 	mov.w	r3, #0
 80045e8:	f7fc fa86 	bl	8000af8 <__aeabi_dcmpeq>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10a      	bne.n	8004608 <StartDefaultTask+0x460>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 80045f2:	2201      	movs	r2, #1
 80045f4:	2120      	movs	r1, #32
 80045f6:	48a6      	ldr	r0, [pc, #664]	@ (8004890 <StartDefaultTask+0x6e8>)
 80045f8:	f002 fcc0 	bl	8006f7c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 80045fc:	2200      	movs	r2, #0
 80045fe:	2108      	movs	r1, #8
 8004600:	48a3      	ldr	r0, [pc, #652]	@ (8004890 <StartDefaultTask+0x6e8>)
 8004602:	f002 fcbb 	bl	8006f7c <HAL_GPIO_WritePin>
 8004606:	e2ad      	b.n	8004b64 <StartDefaultTask+0x9bc>
				}
				else{
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8004608:	2200      	movs	r2, #0
 800460a:	2120      	movs	r1, #32
 800460c:	48a0      	ldr	r0, [pc, #640]	@ (8004890 <StartDefaultTask+0x6e8>)
 800460e:	f002 fcb5 	bl	8006f7c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8004612:	2201      	movs	r2, #1
 8004614:	2108      	movs	r1, #8
 8004616:	489e      	ldr	r0, [pc, #632]	@ (8004890 <StartDefaultTask+0x6e8>)
 8004618:	f002 fcb0 	bl	8006f7c <HAL_GPIO_WritePin>
 800461c:	e2a2      	b.n	8004b64 <StartDefaultTask+0x9bc>
				}
			}
			else if(msg_ControlMode.data==2){
 800461e:	4b9d      	ldr	r3, [pc, #628]	@ (8004894 <StartDefaultTask+0x6ec>)
 8004620:	edd3 7a00 	vldr	s15, [r3]
 8004624:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8004628:	eef4 7a47 	vcmp.f32	s15, s14
 800462c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004630:	d155      	bne.n	80046de <StartDefaultTask+0x536>
				controlS.speedReference = msg_SpeedRef.data;//*150.0;
 8004632:	4b99      	ldr	r3, [pc, #612]	@ (8004898 <StartDefaultTask+0x6f0>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4618      	mov	r0, r3
 8004638:	f7fb ff9e 	bl	8000578 <__aeabi_f2d>
 800463c:	4602      	mov	r2, r0
 800463e:	460b      	mov	r3, r1
 8004640:	4996      	ldr	r1, [pc, #600]	@ (800489c <StartDefaultTask+0x6f4>)
 8004642:	e9c1 2302 	strd	r2, r3, [r1, #8]
				SpeedControlMotor1.error=controlS.speedReference-vel_R;
 8004646:	4b95      	ldr	r3, [pc, #596]	@ (800489c <StartDefaultTask+0x6f4>)
 8004648:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800464c:	4b94      	ldr	r3, [pc, #592]	@ (80048a0 <StartDefaultTask+0x6f8>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4618      	mov	r0, r3
 8004652:	f7fb ff91 	bl	8000578 <__aeabi_f2d>
 8004656:	4602      	mov	r2, r0
 8004658:	460b      	mov	r3, r1
 800465a:	4620      	mov	r0, r4
 800465c:	4629      	mov	r1, r5
 800465e:	f7fb fe2b 	bl	80002b8 <__aeabi_dsub>
 8004662:	4602      	mov	r2, r0
 8004664:	460b      	mov	r3, r1
 8004666:	498f      	ldr	r1, [pc, #572]	@ (80048a4 <StartDefaultTask+0x6fc>)
 8004668:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
				TIM5->CCR1=applySpeedControl(&SpeedControlMotor1);
 800466c:	488d      	ldr	r0, [pc, #564]	@ (80048a4 <StartDefaultTask+0x6fc>)
 800466e:	f000 fc76 	bl	8004f5e <applySpeedControl>
 8004672:	ec53 2b10 	vmov	r2, r3, d0
 8004676:	4c85      	ldr	r4, [pc, #532]	@ (800488c <StartDefaultTask+0x6e4>)
 8004678:	4610      	mov	r0, r2
 800467a:	4619      	mov	r1, r3
 800467c:	f7fc faac 	bl	8000bd8 <__aeabi_d2uiz>
 8004680:	4603      	mov	r3, r0
 8004682:	6363      	str	r3, [r4, #52]	@ 0x34
				SpeedControlMotor1.speedReference=controlS.speedReference;
 8004684:	4b85      	ldr	r3, [pc, #532]	@ (800489c <StartDefaultTask+0x6f4>)
 8004686:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800468a:	4986      	ldr	r1, [pc, #536]	@ (80048a4 <StartDefaultTask+0x6fc>)
 800468c:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
				TIM5->CCR2=applySpeedControl(&SpeedControlMotor1);
 8004690:	4884      	ldr	r0, [pc, #528]	@ (80048a4 <StartDefaultTask+0x6fc>)
 8004692:	f000 fc64 	bl	8004f5e <applySpeedControl>
 8004696:	ec53 2b10 	vmov	r2, r3, d0
 800469a:	4c7c      	ldr	r4, [pc, #496]	@ (800488c <StartDefaultTask+0x6e4>)
 800469c:	4610      	mov	r0, r2
 800469e:	4619      	mov	r1, r3
 80046a0:	f7fc fa9a 	bl	8000bd8 <__aeabi_d2uiz>
 80046a4:	4603      	mov	r3, r0
 80046a6:	63a3      	str	r3, [r4, #56]	@ 0x38
				if (controlS.direction){
 80046a8:	4b7c      	ldr	r3, [pc, #496]	@ (800489c <StartDefaultTask+0x6f4>)
 80046aa:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00a      	beq.n	80046c8 <StartDefaultTask+0x520>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 80046b2:	2200      	movs	r2, #0
 80046b4:	2120      	movs	r1, #32
 80046b6:	4876      	ldr	r0, [pc, #472]	@ (8004890 <StartDefaultTask+0x6e8>)
 80046b8:	f002 fc60 	bl	8006f7c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 80046bc:	2201      	movs	r2, #1
 80046be:	2108      	movs	r1, #8
 80046c0:	4873      	ldr	r0, [pc, #460]	@ (8004890 <StartDefaultTask+0x6e8>)
 80046c2:	f002 fc5b 	bl	8006f7c <HAL_GPIO_WritePin>
 80046c6:	e24d      	b.n	8004b64 <StartDefaultTask+0x9bc>
				}
				else{
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 80046c8:	2201      	movs	r2, #1
 80046ca:	2120      	movs	r1, #32
 80046cc:	4870      	ldr	r0, [pc, #448]	@ (8004890 <StartDefaultTask+0x6e8>)
 80046ce:	f002 fc55 	bl	8006f7c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 80046d2:	2200      	movs	r2, #0
 80046d4:	2108      	movs	r1, #8
 80046d6:	486e      	ldr	r0, [pc, #440]	@ (8004890 <StartDefaultTask+0x6e8>)
 80046d8:	f002 fc50 	bl	8006f7c <HAL_GPIO_WritePin>
 80046dc:	e242      	b.n	8004b64 <StartDefaultTask+0x9bc>
				}
			}

			else if(msg_ControlMode.data==3){
 80046de:	4b6d      	ldr	r3, [pc, #436]	@ (8004894 <StartDefaultTask+0x6ec>)
 80046e0:	edd3 7a00 	vldr	s15, [r3]
 80046e4:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80046e8:	eef4 7a47 	vcmp.f32	s15, s14
 80046ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f0:	f040 80ea 	bne.w	80048c8 <StartDefaultTask+0x720>
				pos_Rp=0; pos_Lp=0; pos_Rc=0; pos_Lc=0;
 80046f4:	4b6c      	ldr	r3, [pc, #432]	@ (80048a8 <StartDefaultTask+0x700>)
 80046f6:	f04f 0200 	mov.w	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	4b6b      	ldr	r3, [pc, #428]	@ (80048ac <StartDefaultTask+0x704>)
 80046fe:	f04f 0200 	mov.w	r2, #0
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	4b6a      	ldr	r3, [pc, #424]	@ (80048b0 <StartDefaultTask+0x708>)
 8004706:	f04f 0200 	mov.w	r2, #0
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	4b69      	ldr	r3, [pc, #420]	@ (80048b4 <StartDefaultTask+0x70c>)
 800470e:	f04f 0200 	mov.w	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
				if (dist<=dist_min){
 8004714:	4b68      	ldr	r3, [pc, #416]	@ (80048b8 <StartDefaultTask+0x710>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4618      	mov	r0, r3
 800471a:	f7fb ff2d 	bl	8000578 <__aeabi_f2d>
 800471e:	a356      	add	r3, pc, #344	@ (adr r3, 8004878 <StartDefaultTask+0x6d0>)
 8004720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004724:	f7fc f9fc 	bl	8000b20 <__aeabi_dcmple>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d007      	beq.n	800473e <StartDefaultTask+0x596>
					controlS.positionReference=0; //Quedarse en la posición actual
 800472e:	495b      	ldr	r1, [pc, #364]	@ (800489c <StartDefaultTask+0x6f4>)
 8004730:	f04f 0200 	mov.w	r2, #0
 8004734:	f04f 0300 	mov.w	r3, #0
 8004738:	e9c1 2300 	strd	r2, r3, [r1]
 800473c:	e04e      	b.n	80047dc <StartDefaultTask+0x634>
				}
				else if(dist>dist_min && dist<dist_max){
 800473e:	4b5e      	ldr	r3, [pc, #376]	@ (80048b8 <StartDefaultTask+0x710>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f7fb ff18 	bl	8000578 <__aeabi_f2d>
 8004748:	a34b      	add	r3, pc, #300	@ (adr r3, 8004878 <StartDefaultTask+0x6d0>)
 800474a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474e:	f7fc f9fb 	bl	8000b48 <__aeabi_dcmpgt>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d031      	beq.n	80047bc <StartDefaultTask+0x614>
 8004758:	4b57      	ldr	r3, [pc, #348]	@ (80048b8 <StartDefaultTask+0x710>)
 800475a:	edd3 7a00 	vldr	s15, [r3]
 800475e:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 80048bc <StartDefaultTask+0x714>
 8004762:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800476a:	d527      	bpl.n	80047bc <StartDefaultTask+0x614>
					controlS.positionReference=((96/dist_dif)*dist)-(96*dist_min/dist_dif);
 800476c:	eddf 6a54 	vldr	s13, [pc, #336]	@ 80048c0 <StartDefaultTask+0x718>
 8004770:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 8004774:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004778:	4b4f      	ldr	r3, [pc, #316]	@ (80048b8 <StartDefaultTask+0x710>)
 800477a:	edd3 7a00 	vldr	s15, [r3]
 800477e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004782:	ee17 0a90 	vmov	r0, s15
 8004786:	f7fb fef7 	bl	8000578 <__aeabi_f2d>
 800478a:	4604      	mov	r4, r0
 800478c:	460d      	mov	r5, r1
 800478e:	f8d7 0170 	ldr.w	r0, [r7, #368]	@ 0x170
 8004792:	f7fb fef1 	bl	8000578 <__aeabi_f2d>
 8004796:	4602      	mov	r2, r0
 8004798:	460b      	mov	r3, r1
 800479a:	a139      	add	r1, pc, #228	@ (adr r1, 8004880 <StartDefaultTask+0x6d8>)
 800479c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047a0:	f7fc f86c 	bl	800087c <__aeabi_ddiv>
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	4620      	mov	r0, r4
 80047aa:	4629      	mov	r1, r5
 80047ac:	f7fb fd84 	bl	80002b8 <__aeabi_dsub>
 80047b0:	4602      	mov	r2, r0
 80047b2:	460b      	mov	r3, r1
 80047b4:	4939      	ldr	r1, [pc, #228]	@ (800489c <StartDefaultTask+0x6f4>)
 80047b6:	e9c1 2300 	strd	r2, r3, [r1]
 80047ba:	e00f      	b.n	80047dc <StartDefaultTask+0x634>
				}
				else if(dist>=dist_max){
 80047bc:	4b3e      	ldr	r3, [pc, #248]	@ (80048b8 <StartDefaultTask+0x710>)
 80047be:	edd3 7a00 	vldr	s15, [r3]
 80047c2:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 80048bc <StartDefaultTask+0x714>
 80047c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ce:	db05      	blt.n	80047dc <StartDefaultTask+0x634>
					controlS.positionReference=96; // 11 cms corresponden a 96 grados de giro de la rueda
 80047d0:	4932      	ldr	r1, [pc, #200]	@ (800489c <StartDefaultTask+0x6f4>)
 80047d2:	f04f 0200 	mov.w	r2, #0
 80047d6:	4b3b      	ldr	r3, [pc, #236]	@ (80048c4 <StartDefaultTask+0x71c>)
 80047d8:	e9c1 2300 	strd	r2, r3, [r1]
				}
				PosControlMotor1.error=controlS.positionReference-pos_Rc;
 80047dc:	4b2f      	ldr	r3, [pc, #188]	@ (800489c <StartDefaultTask+0x6f4>)
 80047de:	e9d3 4500 	ldrd	r4, r5, [r3]
 80047e2:	4b33      	ldr	r3, [pc, #204]	@ (80048b0 <StartDefaultTask+0x708>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fb fec6 	bl	8000578 <__aeabi_f2d>
 80047ec:	4602      	mov	r2, r0
 80047ee:	460b      	mov	r3, r1
 80047f0:	4620      	mov	r0, r4
 80047f2:	4629      	mov	r1, r5
 80047f4:	f7fb fd60 	bl	80002b8 <__aeabi_dsub>
 80047f8:	4602      	mov	r2, r0
 80047fa:	460b      	mov	r3, r1
 80047fc:	4922      	ldr	r1, [pc, #136]	@ (8004888 <StartDefaultTask+0x6e0>)
 80047fe:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
				TIM5->CCR1=applyPosControl(&PosControlMotor1);
 8004802:	4821      	ldr	r0, [pc, #132]	@ (8004888 <StartDefaultTask+0x6e0>)
 8004804:	f000 fbfa 	bl	8004ffc <applyPosControl>
 8004808:	ec53 2b10 	vmov	r2, r3, d0
 800480c:	4c1f      	ldr	r4, [pc, #124]	@ (800488c <StartDefaultTask+0x6e4>)
 800480e:	4610      	mov	r0, r2
 8004810:	4619      	mov	r1, r3
 8004812:	f7fc f9e1 	bl	8000bd8 <__aeabi_d2uiz>
 8004816:	4603      	mov	r3, r0
 8004818:	6363      	str	r3, [r4, #52]	@ 0x34
				TIM5->CCR2=applyPosControl(&PosControlMotor1);
 800481a:	481b      	ldr	r0, [pc, #108]	@ (8004888 <StartDefaultTask+0x6e0>)
 800481c:	f000 fbee 	bl	8004ffc <applyPosControl>
 8004820:	ec53 2b10 	vmov	r2, r3, d0
 8004824:	4c19      	ldr	r4, [pc, #100]	@ (800488c <StartDefaultTask+0x6e4>)
 8004826:	4610      	mov	r0, r2
 8004828:	4619      	mov	r1, r3
 800482a:	f7fc f9d5 	bl	8000bd8 <__aeabi_d2uiz>
 800482e:	4603      	mov	r3, r0
 8004830:	63a3      	str	r3, [r4, #56]	@ 0x38
				if (PosControlMotor1.rotDirection){
 8004832:	4b15      	ldr	r3, [pc, #84]	@ (8004888 <StartDefaultTask+0x6e0>)
 8004834:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8004838:	f04f 0200 	mov.w	r2, #0
 800483c:	f04f 0300 	mov.w	r3, #0
 8004840:	f7fc f95a 	bl	8000af8 <__aeabi_dcmpeq>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10a      	bne.n	8004860 <StartDefaultTask+0x6b8>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 800484a:	2201      	movs	r2, #1
 800484c:	2120      	movs	r1, #32
 800484e:	4810      	ldr	r0, [pc, #64]	@ (8004890 <StartDefaultTask+0x6e8>)
 8004850:	f002 fb94 	bl	8006f7c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8004854:	2200      	movs	r2, #0
 8004856:	2108      	movs	r1, #8
 8004858:	480d      	ldr	r0, [pc, #52]	@ (8004890 <StartDefaultTask+0x6e8>)
 800485a:	f002 fb8f 	bl	8006f7c <HAL_GPIO_WritePin>
 800485e:	e181      	b.n	8004b64 <StartDefaultTask+0x9bc>
				}
				else{
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8004860:	2200      	movs	r2, #0
 8004862:	2120      	movs	r1, #32
 8004864:	480a      	ldr	r0, [pc, #40]	@ (8004890 <StartDefaultTask+0x6e8>)
 8004866:	f002 fb89 	bl	8006f7c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 800486a:	2201      	movs	r2, #1
 800486c:	2108      	movs	r1, #8
 800486e:	4808      	ldr	r0, [pc, #32]	@ (8004890 <StartDefaultTask+0x6e8>)
 8004870:	f002 fb84 	bl	8006f7c <HAL_GPIO_WritePin>
 8004874:	e176      	b.n	8004b64 <StartDefaultTask+0x9bc>
 8004876:	bf00      	nop
 8004878:	0a3d70a4 	.word	0x0a3d70a4
 800487c:	4026a3d7 	.word	0x4026a3d7
 8004880:	47ae147b 	.word	0x47ae147b
 8004884:	4090fae1 	.word	0x4090fae1
 8004888:	200079e8 	.word	0x200079e8
 800488c:	40000c00 	.word	0x40000c00
 8004890:	40020400 	.word	0x40020400
 8004894:	200086c0 	.word	0x200086c0
 8004898:	200086bc 	.word	0x200086bc
 800489c:	20007930 	.word	0x20007930
 80048a0:	200078e0 	.word	0x200078e0
 80048a4:	20007948 	.word	0x20007948
 80048a8:	200078d0 	.word	0x200078d0
 80048ac:	200078d4 	.word	0x200078d4
 80048b0:	200078d8 	.word	0x200078d8
 80048b4:	200078dc 	.word	0x200078dc
 80048b8:	200086a4 	.word	0x200086a4
 80048bc:	41b40000 	.word	0x41b40000
 80048c0:	42c00000 	.word	0x42c00000
 80048c4:	40580000 	.word	0x40580000
				}
			}
			else if(msg_ControlMode.data==4){
 80048c8:	4b93      	ldr	r3, [pc, #588]	@ (8004b18 <StartDefaultTask+0x970>)
 80048ca:	edd3 7a00 	vldr	s15, [r3]
 80048ce:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80048d2:	eef4 7a47 	vcmp.f32	s15, s14
 80048d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048da:	f040 80bd 	bne.w	8004a58 <StartDefaultTask+0x8b0>
				if (dist<=dist_min){
 80048de:	4b8f      	ldr	r3, [pc, #572]	@ (8004b1c <StartDefaultTask+0x974>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fb fe48 	bl	8000578 <__aeabi_f2d>
 80048e8:	a385      	add	r3, pc, #532	@ (adr r3, 8004b00 <StartDefaultTask+0x958>)
 80048ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ee:	f7fc f917 	bl	8000b20 <__aeabi_dcmple>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d007      	beq.n	8004908 <StartDefaultTask+0x760>
					controlS.speedReference=vel_min;
 80048f8:	4989      	ldr	r1, [pc, #548]	@ (8004b20 <StartDefaultTask+0x978>)
 80048fa:	f04f 0200 	mov.w	r2, #0
 80048fe:	f04f 0300 	mov.w	r3, #0
 8004902:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004906:	e05b      	b.n	80049c0 <StartDefaultTask+0x818>
				}
				else if(dist>dist_min && dist<dist_max){
 8004908:	4b84      	ldr	r3, [pc, #528]	@ (8004b1c <StartDefaultTask+0x974>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4618      	mov	r0, r3
 800490e:	f7fb fe33 	bl	8000578 <__aeabi_f2d>
 8004912:	a37b      	add	r3, pc, #492	@ (adr r3, 8004b00 <StartDefaultTask+0x958>)
 8004914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004918:	f7fc f916 	bl	8000b48 <__aeabi_dcmpgt>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d03e      	beq.n	80049a0 <StartDefaultTask+0x7f8>
 8004922:	4b7e      	ldr	r3, [pc, #504]	@ (8004b1c <StartDefaultTask+0x974>)
 8004924:	edd3 7a00 	vldr	s15, [r3]
 8004928:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8004b24 <StartDefaultTask+0x97c>
 800492c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004934:	d534      	bpl.n	80049a0 <StartDefaultTask+0x7f8>
					//controlS.speedReference=((50.0/23.0)*dist)-(550.0/23.0);
					controlS.speedReference=((vel_max/dist_dif)*dist)-(vel_max*dist_min/dist_dif);
 8004936:	f8d7 0170 	ldr.w	r0, [r7, #368]	@ 0x170
 800493a:	f7fb fe1d 	bl	8000578 <__aeabi_f2d>
 800493e:	4602      	mov	r2, r0
 8004940:	460b      	mov	r3, r1
 8004942:	f04f 0000 	mov.w	r0, #0
 8004946:	4978      	ldr	r1, [pc, #480]	@ (8004b28 <StartDefaultTask+0x980>)
 8004948:	f7fb ff98 	bl	800087c <__aeabi_ddiv>
 800494c:	4602      	mov	r2, r0
 800494e:	460b      	mov	r3, r1
 8004950:	4614      	mov	r4, r2
 8004952:	461d      	mov	r5, r3
 8004954:	4b71      	ldr	r3, [pc, #452]	@ (8004b1c <StartDefaultTask+0x974>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4618      	mov	r0, r3
 800495a:	f7fb fe0d 	bl	8000578 <__aeabi_f2d>
 800495e:	4602      	mov	r2, r0
 8004960:	460b      	mov	r3, r1
 8004962:	4620      	mov	r0, r4
 8004964:	4629      	mov	r1, r5
 8004966:	f7fb fe5f 	bl	8000628 <__aeabi_dmul>
 800496a:	4602      	mov	r2, r0
 800496c:	460b      	mov	r3, r1
 800496e:	4614      	mov	r4, r2
 8004970:	461d      	mov	r5, r3
 8004972:	f8d7 0170 	ldr.w	r0, [r7, #368]	@ 0x170
 8004976:	f7fb fdff 	bl	8000578 <__aeabi_f2d>
 800497a:	4602      	mov	r2, r0
 800497c:	460b      	mov	r3, r1
 800497e:	a162      	add	r1, pc, #392	@ (adr r1, 8004b08 <StartDefaultTask+0x960>)
 8004980:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004984:	f7fb ff7a 	bl	800087c <__aeabi_ddiv>
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	4620      	mov	r0, r4
 800498e:	4629      	mov	r1, r5
 8004990:	f7fb fc92 	bl	80002b8 <__aeabi_dsub>
 8004994:	4602      	mov	r2, r0
 8004996:	460b      	mov	r3, r1
 8004998:	4961      	ldr	r1, [pc, #388]	@ (8004b20 <StartDefaultTask+0x978>)
 800499a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800499e:	e00f      	b.n	80049c0 <StartDefaultTask+0x818>
				}
				else if(dist>=dist_max){
 80049a0:	4b5e      	ldr	r3, [pc, #376]	@ (8004b1c <StartDefaultTask+0x974>)
 80049a2:	edd3 7a00 	vldr	s15, [r3]
 80049a6:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8004b24 <StartDefaultTask+0x97c>
 80049aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049b2:	db05      	blt.n	80049c0 <StartDefaultTask+0x818>
					controlS.speedReference=vel_max;
 80049b4:	495a      	ldr	r1, [pc, #360]	@ (8004b20 <StartDefaultTask+0x978>)
 80049b6:	f04f 0200 	mov.w	r2, #0
 80049ba:	4b5b      	ldr	r3, [pc, #364]	@ (8004b28 <StartDefaultTask+0x980>)
 80049bc:	e9c1 2302 	strd	r2, r3, [r1, #8]
				}
				// controlS.speedReference = msg_SpeedRef.data;
				SpeedControlMotor1.error=controlS.speedReference-vel_R;
 80049c0:	4b57      	ldr	r3, [pc, #348]	@ (8004b20 <StartDefaultTask+0x978>)
 80049c2:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80049c6:	4b59      	ldr	r3, [pc, #356]	@ (8004b2c <StartDefaultTask+0x984>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fb fdd4 	bl	8000578 <__aeabi_f2d>
 80049d0:	4602      	mov	r2, r0
 80049d2:	460b      	mov	r3, r1
 80049d4:	4620      	mov	r0, r4
 80049d6:	4629      	mov	r1, r5
 80049d8:	f7fb fc6e 	bl	80002b8 <__aeabi_dsub>
 80049dc:	4602      	mov	r2, r0
 80049de:	460b      	mov	r3, r1
 80049e0:	4953      	ldr	r1, [pc, #332]	@ (8004b30 <StartDefaultTask+0x988>)
 80049e2:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
				TIM5->CCR1=applySpeedControl(&SpeedControlMotor1);
 80049e6:	4852      	ldr	r0, [pc, #328]	@ (8004b30 <StartDefaultTask+0x988>)
 80049e8:	f000 fab9 	bl	8004f5e <applySpeedControl>
 80049ec:	ec53 2b10 	vmov	r2, r3, d0
 80049f0:	4c50      	ldr	r4, [pc, #320]	@ (8004b34 <StartDefaultTask+0x98c>)
 80049f2:	4610      	mov	r0, r2
 80049f4:	4619      	mov	r1, r3
 80049f6:	f7fc f8ef 	bl	8000bd8 <__aeabi_d2uiz>
 80049fa:	4603      	mov	r3, r0
 80049fc:	6363      	str	r3, [r4, #52]	@ 0x34
				SpeedControlMotor1.speedReference=controlS.speedReference;
 80049fe:	4b48      	ldr	r3, [pc, #288]	@ (8004b20 <StartDefaultTask+0x978>)
 8004a00:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004a04:	494a      	ldr	r1, [pc, #296]	@ (8004b30 <StartDefaultTask+0x988>)
 8004a06:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
				TIM5->CCR2=applySpeedControl(&SpeedControlMotor1);
 8004a0a:	4849      	ldr	r0, [pc, #292]	@ (8004b30 <StartDefaultTask+0x988>)
 8004a0c:	f000 faa7 	bl	8004f5e <applySpeedControl>
 8004a10:	ec53 2b10 	vmov	r2, r3, d0
 8004a14:	4c47      	ldr	r4, [pc, #284]	@ (8004b34 <StartDefaultTask+0x98c>)
 8004a16:	4610      	mov	r0, r2
 8004a18:	4619      	mov	r1, r3
 8004a1a:	f7fc f8dd 	bl	8000bd8 <__aeabi_d2uiz>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	63a3      	str	r3, [r4, #56]	@ 0x38
				if (controlS.direction){
 8004a22:	4b3f      	ldr	r3, [pc, #252]	@ (8004b20 <StartDefaultTask+0x978>)
 8004a24:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00a      	beq.n	8004a42 <StartDefaultTask+0x89a>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	2120      	movs	r1, #32
 8004a30:	4841      	ldr	r0, [pc, #260]	@ (8004b38 <StartDefaultTask+0x990>)
 8004a32:	f002 faa3 	bl	8006f7c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8004a36:	2201      	movs	r2, #1
 8004a38:	2108      	movs	r1, #8
 8004a3a:	483f      	ldr	r0, [pc, #252]	@ (8004b38 <StartDefaultTask+0x990>)
 8004a3c:	f002 fa9e 	bl	8006f7c <HAL_GPIO_WritePin>
 8004a40:	e090      	b.n	8004b64 <StartDefaultTask+0x9bc>
				}
				else{
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8004a42:	2201      	movs	r2, #1
 8004a44:	2120      	movs	r1, #32
 8004a46:	483c      	ldr	r0, [pc, #240]	@ (8004b38 <StartDefaultTask+0x990>)
 8004a48:	f002 fa98 	bl	8006f7c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	2108      	movs	r1, #8
 8004a50:	4839      	ldr	r0, [pc, #228]	@ (8004b38 <StartDefaultTask+0x990>)
 8004a52:	f002 fa93 	bl	8006f7c <HAL_GPIO_WritePin>
 8004a56:	e085      	b.n	8004b64 <StartDefaultTask+0x9bc>
				}
			}
			else if(msg_ControlMode.data==5){
 8004a58:	4b2f      	ldr	r3, [pc, #188]	@ (8004b18 <StartDefaultTask+0x970>)
 8004a5a:	edd3 7a00 	vldr	s15, [r3]
 8004a5e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8004a62:	eef4 7a47 	vcmp.f32	s15, s14
 8004a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a6a:	d16b      	bne.n	8004b44 <StartDefaultTask+0x99c>
				controlS.speedReference = msg_SpeedRef.data*150.0;
 8004a6c:	4b33      	ldr	r3, [pc, #204]	@ (8004b3c <StartDefaultTask+0x994>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7fb fd81 	bl	8000578 <__aeabi_f2d>
 8004a76:	a326      	add	r3, pc, #152	@ (adr r3, 8004b10 <StartDefaultTask+0x968>)
 8004a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7c:	f7fb fdd4 	bl	8000628 <__aeabi_dmul>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4926      	ldr	r1, [pc, #152]	@ (8004b20 <StartDefaultTask+0x978>)
 8004a86:	e9c1 2302 	strd	r2, r3, [r1, #8]
				TIM5->CCR1=runController(vel_R,controlS.speedReference,&myControl); //runController(vel_R,controlS.speedReference,myControl);
 8004a8a:	4b28      	ldr	r3, [pc, #160]	@ (8004b2c <StartDefaultTask+0x984>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fb fd72 	bl	8000578 <__aeabi_f2d>
 8004a94:	4604      	mov	r4, r0
 8004a96:	460d      	mov	r5, r1
 8004a98:	4b21      	ldr	r3, [pc, #132]	@ (8004b20 <StartDefaultTask+0x978>)
 8004a9a:	ed93 7b02 	vldr	d7, [r3, #8]
 8004a9e:	4828      	ldr	r0, [pc, #160]	@ (8004b40 <StartDefaultTask+0x998>)
 8004aa0:	eeb0 1a47 	vmov.f32	s2, s14
 8004aa4:	eef0 1a67 	vmov.f32	s3, s15
 8004aa8:	ec45 4b10 	vmov	d0, r4, r5
 8004aac:	f7fc fc66 	bl	800137c <runController>
 8004ab0:	eef0 7a40 	vmov.f32	s15, s0
 8004ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8004b34 <StartDefaultTask+0x98c>)
 8004ab6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aba:	ee17 2a90 	vmov	r2, s15
 8004abe:	635a      	str	r2, [r3, #52]	@ 0x34
				TIM5->CCR2=TIM5->CCR1;
 8004ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8004b34 <StartDefaultTask+0x98c>)
 8004ac2:	4a1c      	ldr	r2, [pc, #112]	@ (8004b34 <StartDefaultTask+0x98c>)
 8004ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac6:	6393      	str	r3, [r2, #56]	@ 0x38

				if (controlS.direction){
 8004ac8:	4b15      	ldr	r3, [pc, #84]	@ (8004b20 <StartDefaultTask+0x978>)
 8004aca:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00a      	beq.n	8004ae8 <StartDefaultTask+0x940>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	2120      	movs	r1, #32
 8004ad6:	4818      	ldr	r0, [pc, #96]	@ (8004b38 <StartDefaultTask+0x990>)
 8004ad8:	f002 fa50 	bl	8006f7c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8004adc:	2201      	movs	r2, #1
 8004ade:	2108      	movs	r1, #8
 8004ae0:	4815      	ldr	r0, [pc, #84]	@ (8004b38 <StartDefaultTask+0x990>)
 8004ae2:	f002 fa4b 	bl	8006f7c <HAL_GPIO_WritePin>
 8004ae6:	e03d      	b.n	8004b64 <StartDefaultTask+0x9bc>
				}
				else{
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8004ae8:	2201      	movs	r2, #1
 8004aea:	2120      	movs	r1, #32
 8004aec:	4812      	ldr	r0, [pc, #72]	@ (8004b38 <StartDefaultTask+0x990>)
 8004aee:	f002 fa45 	bl	8006f7c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8004af2:	2200      	movs	r2, #0
 8004af4:	2108      	movs	r1, #8
 8004af6:	4810      	ldr	r0, [pc, #64]	@ (8004b38 <StartDefaultTask+0x990>)
 8004af8:	f002 fa40 	bl	8006f7c <HAL_GPIO_WritePin>
 8004afc:	e032      	b.n	8004b64 <StartDefaultTask+0x9bc>
 8004afe:	bf00      	nop
 8004b00:	0a3d70a4 	.word	0x0a3d70a4
 8004b04:	4026a3d7 	.word	0x4026a3d7
 8004b08:	00000000 	.word	0x00000000
 8004b0c:	4091b000 	.word	0x4091b000
 8004b10:	00000000 	.word	0x00000000
 8004b14:	4062c000 	.word	0x4062c000
 8004b18:	200086c0 	.word	0x200086c0
 8004b1c:	200086a4 	.word	0x200086a4
 8004b20:	20007930 	.word	0x20007930
 8004b24:	41b40000 	.word	0x41b40000
 8004b28:	40590000 	.word	0x40590000
 8004b2c:	200078e0 	.word	0x200078e0
 8004b30:	20007948 	.word	0x20007948
 8004b34:	40000c00 	.word	0x40000c00
 8004b38:	40020400 	.word	0x40020400
 8004b3c:	200086bc 	.word	0x200086bc
 8004b40:	20007a88 	.word	0x20007a88
				}
			}
			else if(msg_ControlMode.data==6){
 8004b44:	4b3c      	ldr	r3, [pc, #240]	@ (8004c38 <StartDefaultTask+0xa90>)
 8004b46:	edd3 7a00 	vldr	s15, [r3]
 8004b4a:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8004b4e:	eef4 7a47 	vcmp.f32	s15, s14
 8004b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b56:	d105      	bne.n	8004b64 <StartDefaultTask+0x9bc>
				TIM5->CCR1=0;
 8004b58:	4b38      	ldr	r3, [pc, #224]	@ (8004c3c <StartDefaultTask+0xa94>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	635a      	str	r2, [r3, #52]	@ 0x34
				TIM5->CCR2=0;
 8004b5e:	4b37      	ldr	r3, [pc, #220]	@ (8004c3c <StartDefaultTask+0xa94>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
		msg_framePos.data=pos_Rc;
 8004b64:	4b36      	ldr	r3, [pc, #216]	@ (8004c40 <StartDefaultTask+0xa98>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
		msg_frameVel.data=vel_R;
 8004b6c:	4b35      	ldr	r3, [pc, #212]	@ (8004c44 <StartDefaultTask+0xa9c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
		msg_frameSensor.data=dist;
 8004b74:	4b34      	ldr	r3, [pc, #208]	@ (8004c48 <StartDefaultTask+0xaa0>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		msg_contador.data=contador;
 8004b7c:	4b33      	ldr	r3, [pc, #204]	@ (8004c4c <StartDefaultTask+0xaa4>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
		msg_framePosRef.data=controlS.positionReference;
 8004b84:	4b32      	ldr	r3, [pc, #200]	@ (8004c50 <StartDefaultTask+0xaa8>)
 8004b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8a:	4610      	mov	r0, r2
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	f7fc f843 	bl	8000c18 <__aeabi_d2f>
 8004b92:	4603      	mov	r3, r0
 8004b94:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
		msg_frameVelRef.data=controlS.speedReference;
 8004b98:	4b2d      	ldr	r3, [pc, #180]	@ (8004c50 <StartDefaultTask+0xaa8>)
 8004b9a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004b9e:	4610      	mov	r0, r2
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	f7fc f839 	bl	8000c18 <__aeabi_d2f>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114


		//rosidl_runtime_c__String__assign(&msg_frameMode.data, valueControl);
		//strcpy(&msg_frameMode.data,valueControl);
		rcl_ret_t ret = rcl_publish(&publisher_framePos, &msg_framePos, NULL);
 8004bac:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8004bb0:	f507 739e 	add.w	r3, r7, #316	@ 0x13c
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f008 f900 	bl	800cdbc <rcl_publish>
 8004bbc:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
		rcl_ret_t ret2 = rcl_publish(&publisher_frameVel, &msg_frameVel, NULL);
 8004bc0:	f507 718e 	add.w	r1, r7, #284	@ 0x11c
 8004bc4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004bc8:	2200      	movs	r2, #0
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f008 f8f6 	bl	800cdbc <rcl_publish>
 8004bd0:	f8c7 0168 	str.w	r0, [r7, #360]	@ 0x168
		rcl_ret_t ret5 = rcl_publish(&publisher_framePosRef, &msg_framePosRef, NULL);
 8004bd4:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8004bd8:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8004bdc:	2200      	movs	r2, #0
 8004bde:	4618      	mov	r0, r3
 8004be0:	f008 f8ec 	bl	800cdbc <rcl_publish>
 8004be4:	f8c7 0164 	str.w	r0, [r7, #356]	@ 0x164
		rcl_ret_t ret6 = rcl_publish(&publisher_frameVelRef, &msg_frameVelRef, NULL);
 8004be8:	f507 718a 	add.w	r1, r7, #276	@ 0x114
 8004bec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f008 f8e2 	bl	800cdbc <rcl_publish>
 8004bf8:	f8c7 0160 	str.w	r0, [r7, #352]	@ 0x160
		rcl_ret_t ret3 = rcl_publish(&publisher_frameSensor, &msg_frameSensor, NULL);
 8004bfc:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8004c00:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8004c04:	2200      	movs	r2, #0
 8004c06:	4618      	mov	r0, r3
 8004c08:	f008 f8d8 	bl	800cdbc <rcl_publish>
 8004c0c:	f8c7 015c 	str.w	r0, [r7, #348]	@ 0x15c
		rcl_ret_t ret4 = rcl_publish(&publisher_contador, &msg_contador, NULL);
 8004c10:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 8004c14:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8004c18:	2200      	movs	r2, #0
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f008 f8ce 	bl	800cdbc <rcl_publish>
 8004c20:	f8c7 0158 	str.w	r0, [r7, #344]	@ 0x158
		/*if (ret != RCL_RET_OK)
		{
			printf("Error publishing (line %d)\n", __LINE__);
		}*/
		//Para suscribirse
		rclc_executor_spin_some(&executor, 1* (1000 * 1000));
 8004c24:	f107 0108 	add.w	r1, r7, #8
 8004c28:	4a0a      	ldr	r2, [pc, #40]	@ (8004c54 <StartDefaultTask+0xaac>)
 8004c2a:	f04f 0300 	mov.w	r3, #0
 8004c2e:	4608      	mov	r0, r1
 8004c30:	f008 feee 	bl	800da10 <rclc_executor_spin_some>
	{
 8004c34:	f7ff bbc1 	b.w	80043ba <StartDefaultTask+0x212>
 8004c38:	200086c0 	.word	0x200086c0
 8004c3c:	40000c00 	.word	0x40000c00
 8004c40:	200078d8 	.word	0x200078d8
 8004c44:	200078e0 	.word	0x200078e0
 8004c48:	200086a4 	.word	0x200086a4
 8004c4c:	200086ac 	.word	0x200086ac
 8004c50:	20007930 	.word	0x20007930
 8004c54:	000f4240 	.word	0x000f4240

08004c58 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004c5c:	b672      	cpsid	i
}
 8004c5e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004c60:	bf00      	nop
 8004c62:	e7fd      	b.n	8004c60 <Error_Handler+0x8>

08004c64 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8004c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ca0 <microros_allocate+0x3c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	461a      	mov	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4413      	add	r3, r2
 8004c78:	461a      	mov	r2, r3
 8004c7a:	4b09      	ldr	r3, [pc, #36]	@ (8004ca0 <microros_allocate+0x3c>)
 8004c7c:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8004c7e:	4b09      	ldr	r3, [pc, #36]	@ (8004ca4 <microros_allocate+0x40>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	461a      	mov	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4413      	add	r3, r2
 8004c88:	461a      	mov	r2, r3
 8004c8a:	4b06      	ldr	r3, [pc, #24]	@ (8004ca4 <microros_allocate+0x40>)
 8004c8c:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7fe f8bc 	bl	8002e0c <pvPortMallocMicroROS>
 8004c94:	4603      	mov	r3, r0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	200086c4 	.word	0x200086c4
 8004ca4:	200086c8 	.word	0x200086c8

08004ca8 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00c      	beq.n	8004cd2 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7fe f9cb 	bl	8003054 <getBlockSize>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	4a06      	ldr	r2, [pc, #24]	@ (8004cdc <microros_deallocate+0x34>)
 8004cc2:	6812      	ldr	r2, [r2, #0]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	4b04      	ldr	r3, [pc, #16]	@ (8004cdc <microros_deallocate+0x34>)
 8004cca:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7fe f965 	bl	8002f9c <vPortFreeMicroROS>
  }
}
 8004cd2:	bf00      	nop
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	200086c8 	.word	0x200086c8

08004ce0 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8004cec:	4b15      	ldr	r3, [pc, #84]	@ (8004d44 <microros_reallocate+0x64>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	4b12      	ldr	r3, [pc, #72]	@ (8004d44 <microros_reallocate+0x64>)
 8004cfa:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8004cfc:	4b12      	ldr	r3, [pc, #72]	@ (8004d48 <microros_reallocate+0x68>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	461a      	mov	r2, r3
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	4413      	add	r3, r2
 8004d06:	461a      	mov	r2, r3
 8004d08:	4b0f      	ldr	r3, [pc, #60]	@ (8004d48 <microros_reallocate+0x68>)
 8004d0a:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d104      	bne.n	8004d1c <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8004d12:	68b8      	ldr	r0, [r7, #8]
 8004d14:	f7fe f87a 	bl	8002e0c <pvPortMallocMicroROS>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	e00e      	b.n	8004d3a <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f7fe f999 	bl	8003054 <getBlockSize>
 8004d22:	4603      	mov	r3, r0
 8004d24:	4a08      	ldr	r2, [pc, #32]	@ (8004d48 <microros_reallocate+0x68>)
 8004d26:	6812      	ldr	r2, [r2, #0]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	4b06      	ldr	r3, [pc, #24]	@ (8004d48 <microros_reallocate+0x68>)
 8004d2e:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8004d30:	68b9      	ldr	r1, [r7, #8]
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f7fe f9ac 	bl	8003090 <pvPortReallocMicroROS>
 8004d38:	4603      	mov	r3, r0
  }
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	200086c4 	.word	0x200086c4
 8004d48:	200086c8 	.word	0x200086c8

08004d4c <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	fb02 f303 	mul.w	r3, r2, r3
 8004d60:	4a0c      	ldr	r2, [pc, #48]	@ (8004d94 <microros_zero_allocate+0x48>)
 8004d62:	6812      	ldr	r2, [r2, #0]
 8004d64:	4413      	add	r3, r2
 8004d66:	461a      	mov	r2, r3
 8004d68:	4b0a      	ldr	r3, [pc, #40]	@ (8004d94 <microros_zero_allocate+0x48>)
 8004d6a:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	fb02 f303 	mul.w	r3, r2, r3
 8004d74:	4a08      	ldr	r2, [pc, #32]	@ (8004d98 <microros_zero_allocate+0x4c>)
 8004d76:	6812      	ldr	r2, [r2, #0]
 8004d78:	4413      	add	r3, r2
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	4b06      	ldr	r3, [pc, #24]	@ (8004d98 <microros_zero_allocate+0x4c>)
 8004d7e:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8004d80:	68b9      	ldr	r1, [r7, #8]
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f7fe f9b1 	bl	80030ea <pvPortCallocMicroROS>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	200086c4 	.word	0x200086c4
 8004d98:	200086c8 	.word	0x200086c8
 8004d9c:	00000000 	.word	0x00000000

08004da0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8004da0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004da4:	b086      	sub	sp, #24
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004dac:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8004dae:	2300      	movs	r3, #0
 8004db0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8004db2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004db6:	a320      	add	r3, pc, #128	@ (adr r3, 8004e38 <UTILS_NanosecondsToTimespec+0x98>)
 8004db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbc:	f7fb ff7c 	bl	8000cb8 <__aeabi_ldivmod>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	6879      	ldr	r1, [r7, #4]
 8004dc6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8004dca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004dce:	a31a      	add	r3, pc, #104	@ (adr r3, 8004e38 <UTILS_NanosecondsToTimespec+0x98>)
 8004dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd4:	f7fb ff70 	bl	8000cb8 <__aeabi_ldivmod>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	da20      	bge.n	8004e26 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	4a11      	ldr	r2, [pc, #68]	@ (8004e30 <UTILS_NanosecondsToTimespec+0x90>)
 8004dea:	fb82 1203 	smull	r1, r2, r2, r3
 8004dee:	1712      	asrs	r2, r2, #28
 8004df0:	17db      	asrs	r3, r3, #31
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	3301      	adds	r3, #1
 8004df6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfe:	6979      	ldr	r1, [r7, #20]
 8004e00:	17c8      	asrs	r0, r1, #31
 8004e02:	460c      	mov	r4, r1
 8004e04:	4605      	mov	r5, r0
 8004e06:	ebb2 0804 	subs.w	r8, r2, r4
 8004e0a:	eb63 0905 	sbc.w	r9, r3, r5
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	4906      	ldr	r1, [pc, #24]	@ (8004e34 <UTILS_NanosecondsToTimespec+0x94>)
 8004e1c:	fb01 f303 	mul.w	r3, r1, r3
 8004e20:	441a      	add	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	609a      	str	r2, [r3, #8]
    }
}
 8004e26:	bf00      	nop
 8004e28:	3718      	adds	r7, #24
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004e30:	44b82fa1 	.word	0x44b82fa1
 8004e34:	3b9aca00 	.word	0x3b9aca00
 8004e38:	3b9aca00 	.word	0x3b9aca00
 8004e3c:	00000000 	.word	0x00000000

08004e40 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8004e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e44:	b08e      	sub	sp, #56	@ 0x38
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6278      	str	r0, [r7, #36]	@ 0x24
 8004e4a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8004e4c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8004e50:	2300      	movs	r3, #0
 8004e52:	6013      	str	r3, [r2, #0]
 8004e54:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8004e56:	f04f 0200 	mov.w	r2, #0
 8004e5a:	f04f 0300 	mov.w	r3, #0
 8004e5e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8004e62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004e66:	4618      	mov	r0, r3
 8004e68:	f006 fcd4 	bl	800b814 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8004e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e6e:	17da      	asrs	r2, r3, #31
 8004e70:	61bb      	str	r3, [r7, #24]
 8004e72:	61fa      	str	r2, [r7, #28]
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	f04f 0300 	mov.w	r3, #0
 8004e7c:	69b9      	ldr	r1, [r7, #24]
 8004e7e:	000b      	movs	r3, r1
 8004e80:	2200      	movs	r2, #0
 8004e82:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8004e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e88:	2200      	movs	r2, #0
 8004e8a:	461c      	mov	r4, r3
 8004e8c:	4615      	mov	r5, r2
 8004e8e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004e92:	1911      	adds	r1, r2, r4
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	416b      	adcs	r3, r5
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004e9e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8004ea2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	f04f 0400 	mov.w	r4, #0
 8004eae:	f04f 0500 	mov.w	r5, #0
 8004eb2:	015d      	lsls	r5, r3, #5
 8004eb4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8004eb8:	0154      	lsls	r4, r2, #5
 8004eba:	4622      	mov	r2, r4
 8004ebc:	462b      	mov	r3, r5
 8004ebe:	ebb2 0800 	subs.w	r8, r2, r0
 8004ec2:	eb63 0901 	sbc.w	r9, r3, r1
 8004ec6:	f04f 0200 	mov.w	r2, #0
 8004eca:	f04f 0300 	mov.w	r3, #0
 8004ece:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8004ed2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8004ed6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8004eda:	4690      	mov	r8, r2
 8004edc:	4699      	mov	r9, r3
 8004ede:	eb18 0a00 	adds.w	sl, r8, r0
 8004ee2:	eb49 0b01 	adc.w	fp, r9, r1
 8004ee6:	f04f 0200 	mov.w	r2, #0
 8004eea:	f04f 0300 	mov.w	r3, #0
 8004eee:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ef2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ef6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004efa:	ebb2 040a 	subs.w	r4, r2, sl
 8004efe:	603c      	str	r4, [r7, #0]
 8004f00:	eb63 030b 	sbc.w	r3, r3, fp
 8004f04:	607b      	str	r3, [r7, #4]
 8004f06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f0a:	4623      	mov	r3, r4
 8004f0c:	181b      	adds	r3, r3, r0
 8004f0e:	613b      	str	r3, [r7, #16]
 8004f10:	462b      	mov	r3, r5
 8004f12:	eb41 0303 	adc.w	r3, r1, r3
 8004f16:	617b      	str	r3, [r7, #20]
 8004f18:	6a3a      	ldr	r2, [r7, #32]
 8004f1a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004f1e:	f7ff ff3f 	bl	8004da0 <UTILS_NanosecondsToTimespec>

    return 0;
 8004f22:	2300      	movs	r3, #0
 8004f24:	4618      	mov	r0, r3
 8004f26:	3738      	adds	r7, #56	@ 0x38
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004f2e <initControlStructure>:

#include "motorControl.h"



void initControlStructure(double K, double zeroPosition, struct controlData *a){
 8004f2e:	b480      	push	{r7}
 8004f30:	b087      	sub	sp, #28
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	ed87 0b04 	vstr	d0, [r7, #16]
 8004f38:	ed87 1b02 	vstr	d1, [r7, #8]
 8004f3c:	6078      	str	r0, [r7, #4]
	a->K=K;
 8004f3e:	6879      	ldr	r1, [r7, #4]
 8004f40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f44:	e9c1 2308 	strd	r2, r3, [r1, #32]
	a->zeroPosition=zeroPosition;
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f4e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	return;
 8004f52:	bf00      	nop
}
 8004f54:	371c      	adds	r7, #28
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <applySpeedControl>:

double applySpeedControl(struct controlData *a){
 8004f5e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
	a->input[1]=a->input[0];
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004f6e:	6879      	ldr	r1, [r7, #4]
 8004f70:	e9c1 2306 	strd	r2, r3, [r1, #24]

	a->input[0]=a->error;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8004f7a:	6879      	ldr	r1, [r7, #4]
 8004f7c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	a->output[1]=a->output[0];
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f86:	6879      	ldr	r1, [r7, #4]
 8004f88:	e9c1 2302 	strd	r2, r3, [r1, #8]
	a->output[0]=a->K*(a->input[0]-a->zeroPosition*a->input[1])+a->output[1];
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004fa4:	f7fb fb40 	bl	8000628 <__aeabi_dmul>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	460b      	mov	r3, r1
 8004fac:	4640      	mov	r0, r8
 8004fae:	4649      	mov	r1, r9
 8004fb0:	f7fb f982 	bl	80002b8 <__aeabi_dsub>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4620      	mov	r0, r4
 8004fba:	4629      	mov	r1, r5
 8004fbc:	f7fb fb34 	bl	8000628 <__aeabi_dmul>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4610      	mov	r0, r2
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004fce:	f7fb f975 	bl	80002bc <__adddf3>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	6879      	ldr	r1, [r7, #4]
 8004fd8:	e9c1 2300 	strd	r2, r3, [r1]
	return fabs(a->output[0]);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe2:	4692      	mov	sl, r2
 8004fe4:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8004fe8:	ec4b ab17 	vmov	d7, sl, fp

}
 8004fec:	eeb0 0a47 	vmov.f32	s0, s14
 8004ff0:	eef0 0a67 	vmov.f32	s1, s15
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004ffc <applyPosControl>:

double applyPosControl( struct controlData *a){
 8004ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005000:	b084      	sub	sp, #16
 8005002:	af00      	add	r7, sp, #0
 8005004:	60f8      	str	r0, [r7, #12]
	a->input[1]=a->input[0];
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800500c:	68f9      	ldr	r1, [r7, #12]
 800500e:	e9c1 2306 	strd	r2, r3, [r1, #24]
	a->input[0]=a->error;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8005018:	68f9      	ldr	r1, [r7, #12]
 800501a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	a->output[1]=a->output[0];
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005024:	68f9      	ldr	r1, [r7, #12]
 8005026:	e9c1 2302 	strd	r2, r3, [r1, #8]
	a->output[0]=a->K*(a->input[0]-a->zeroPosition*a->input[1]);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	e9d3 ab08 	ldrd	sl, fp, [r3, #32]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	ed93 7b04 	vldr	d7, [r3, #16]
 8005036:	ed87 7b00 	vstr	d7, [r7]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005046:	f7fb faef 	bl	8000628 <__aeabi_dmul>
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005052:	f7fb f931 	bl	80002b8 <__aeabi_dsub>
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	4650      	mov	r0, sl
 800505c:	4659      	mov	r1, fp
 800505e:	f7fb fae3 	bl	8000628 <__aeabi_dmul>
 8005062:	4602      	mov	r2, r0
 8005064:	460b      	mov	r3, r1
 8005066:	68f9      	ldr	r1, [r7, #12]
 8005068:	e9c1 2300 	strd	r2, r3, [r1]
	if (a->error>=0){
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	f04f 0300 	mov.w	r3, #0
 800507a:	f7fb fd5b 	bl	8000b34 <__aeabi_dcmpge>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d006      	beq.n	8005092 <applyPosControl+0x96>
		a->rotDirection=1;
 8005084:	68f9      	ldr	r1, [r7, #12]
 8005086:	f04f 0200 	mov.w	r2, #0
 800508a:	4b17      	ldr	r3, [pc, #92]	@ (80050e8 <applyPosControl+0xec>)
 800508c:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
 8005090:	e006      	b.n	80050a0 <applyPosControl+0xa4>
	}
	else{
		a->rotDirection=0;
 8005092:	68f9      	ldr	r1, [r7, #12]
 8005094:	f04f 0200 	mov.w	r2, #0
 8005098:	f04f 0300 	mov.w	r3, #0
 800509c:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	}
	if (fabs(a->output[0]) > 50)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a6:	4690      	mov	r8, r2
 80050a8:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80050ac:	f04f 0200 	mov.w	r2, #0
 80050b0:	4b0e      	ldr	r3, [pc, #56]	@ (80050ec <applyPosControl+0xf0>)
 80050b2:	4640      	mov	r0, r8
 80050b4:	4649      	mov	r1, r9
 80050b6:	f7fb fd47 	bl	8000b48 <__aeabi_dcmpgt>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d003      	beq.n	80050c8 <applyPosControl+0xcc>
			return 50;
 80050c0:	f04f 0400 	mov.w	r4, #0
 80050c4:	4d09      	ldr	r5, [pc, #36]	@ (80050ec <applyPosControl+0xf0>)
 80050c6:	e005      	b.n	80050d4 <applyPosControl+0xd8>
	return fabs(a->output[0]);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ce:	4614      	mov	r4, r2
 80050d0:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
}
 80050d4:	ec45 4b17 	vmov	d7, r4, r5
 80050d8:	eeb0 0a47 	vmov.f32	s0, s14
 80050dc:	eef0 0a67 	vmov.f32	s1, s15
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050e8:	3ff00000 	.word	0x3ff00000
 80050ec:	40490000 	.word	0x40490000

080050f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050f6:	2300      	movs	r3, #0
 80050f8:	607b      	str	r3, [r7, #4]
 80050fa:	4b12      	ldr	r3, [pc, #72]	@ (8005144 <HAL_MspInit+0x54>)
 80050fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050fe:	4a11      	ldr	r2, [pc, #68]	@ (8005144 <HAL_MspInit+0x54>)
 8005100:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005104:	6453      	str	r3, [r2, #68]	@ 0x44
 8005106:	4b0f      	ldr	r3, [pc, #60]	@ (8005144 <HAL_MspInit+0x54>)
 8005108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800510a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800510e:	607b      	str	r3, [r7, #4]
 8005110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005112:	2300      	movs	r3, #0
 8005114:	603b      	str	r3, [r7, #0]
 8005116:	4b0b      	ldr	r3, [pc, #44]	@ (8005144 <HAL_MspInit+0x54>)
 8005118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511a:	4a0a      	ldr	r2, [pc, #40]	@ (8005144 <HAL_MspInit+0x54>)
 800511c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005120:	6413      	str	r3, [r2, #64]	@ 0x40
 8005122:	4b08      	ldr	r3, [pc, #32]	@ (8005144 <HAL_MspInit+0x54>)
 8005124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800512a:	603b      	str	r3, [r7, #0]
 800512c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800512e:	2200      	movs	r2, #0
 8005130:	210f      	movs	r1, #15
 8005132:	f06f 0001 	mvn.w	r0, #1
 8005136:	f001 f971 	bl	800641c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800513a:	bf00      	nop
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	40023800 	.word	0x40023800

08005148 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b08a      	sub	sp, #40	@ 0x28
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005150:	f107 0314 	add.w	r3, r7, #20
 8005154:	2200      	movs	r2, #0
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	605a      	str	r2, [r3, #4]
 800515a:	609a      	str	r2, [r3, #8]
 800515c:	60da      	str	r2, [r3, #12]
 800515e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a1b      	ldr	r2, [pc, #108]	@ (80051d4 <HAL_ADC_MspInit+0x8c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d12f      	bne.n	80051ca <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800516a:	2300      	movs	r3, #0
 800516c:	613b      	str	r3, [r7, #16]
 800516e:	4b1a      	ldr	r3, [pc, #104]	@ (80051d8 <HAL_ADC_MspInit+0x90>)
 8005170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005172:	4a19      	ldr	r2, [pc, #100]	@ (80051d8 <HAL_ADC_MspInit+0x90>)
 8005174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005178:	6453      	str	r3, [r2, #68]	@ 0x44
 800517a:	4b17      	ldr	r3, [pc, #92]	@ (80051d8 <HAL_ADC_MspInit+0x90>)
 800517c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800517e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005182:	613b      	str	r3, [r7, #16]
 8005184:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005186:	2300      	movs	r3, #0
 8005188:	60fb      	str	r3, [r7, #12]
 800518a:	4b13      	ldr	r3, [pc, #76]	@ (80051d8 <HAL_ADC_MspInit+0x90>)
 800518c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800518e:	4a12      	ldr	r2, [pc, #72]	@ (80051d8 <HAL_ADC_MspInit+0x90>)
 8005190:	f043 0301 	orr.w	r3, r3, #1
 8005194:	6313      	str	r3, [r2, #48]	@ 0x30
 8005196:	4b10      	ldr	r3, [pc, #64]	@ (80051d8 <HAL_ADC_MspInit+0x90>)
 8005198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = Sensor_Pin;
 80051a2:	2310      	movs	r3, #16
 80051a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80051a6:	2303      	movs	r3, #3
 80051a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051aa:	2300      	movs	r3, #0
 80051ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Sensor_GPIO_Port, &GPIO_InitStruct);
 80051ae:	f107 0314 	add.w	r3, r7, #20
 80051b2:	4619      	mov	r1, r3
 80051b4:	4809      	ldr	r0, [pc, #36]	@ (80051dc <HAL_ADC_MspInit+0x94>)
 80051b6:	f001 fd5d 	bl	8006c74 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80051ba:	2200      	movs	r2, #0
 80051bc:	2105      	movs	r1, #5
 80051be:	2012      	movs	r0, #18
 80051c0:	f001 f92c 	bl	800641c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80051c4:	2012      	movs	r0, #18
 80051c6:	f001 f945 	bl	8006454 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80051ca:	bf00      	nop
 80051cc:	3728      	adds	r7, #40	@ 0x28
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	40012000 	.word	0x40012000
 80051d8:	40023800 	.word	0x40023800
 80051dc:	40020000 	.word	0x40020000

080051e0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b08c      	sub	sp, #48	@ 0x30
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051e8:	f107 031c 	add.w	r3, r7, #28
 80051ec:	2200      	movs	r2, #0
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	605a      	str	r2, [r3, #4]
 80051f2:	609a      	str	r2, [r3, #8]
 80051f4:	60da      	str	r2, [r3, #12]
 80051f6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a42      	ldr	r2, [pc, #264]	@ (8005308 <HAL_TIM_Encoder_MspInit+0x128>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d145      	bne.n	800528e <HAL_TIM_Encoder_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005202:	2300      	movs	r3, #0
 8005204:	61bb      	str	r3, [r7, #24]
 8005206:	4b41      	ldr	r3, [pc, #260]	@ (800530c <HAL_TIM_Encoder_MspInit+0x12c>)
 8005208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800520a:	4a40      	ldr	r2, [pc, #256]	@ (800530c <HAL_TIM_Encoder_MspInit+0x12c>)
 800520c:	f043 0301 	orr.w	r3, r3, #1
 8005210:	6453      	str	r3, [r2, #68]	@ 0x44
 8005212:	4b3e      	ldr	r3, [pc, #248]	@ (800530c <HAL_TIM_Encoder_MspInit+0x12c>)
 8005214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	61bb      	str	r3, [r7, #24]
 800521c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800521e:	2300      	movs	r3, #0
 8005220:	617b      	str	r3, [r7, #20]
 8005222:	4b3a      	ldr	r3, [pc, #232]	@ (800530c <HAL_TIM_Encoder_MspInit+0x12c>)
 8005224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005226:	4a39      	ldr	r2, [pc, #228]	@ (800530c <HAL_TIM_Encoder_MspInit+0x12c>)
 8005228:	f043 0301 	orr.w	r3, r3, #1
 800522c:	6313      	str	r3, [r2, #48]	@ 0x30
 800522e:	4b37      	ldr	r3, [pc, #220]	@ (800530c <HAL_TIM_Encoder_MspInit+0x12c>)
 8005230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	617b      	str	r3, [r7, #20]
 8005238:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EncB_R_Pin|EncA_R_Pin;
 800523a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800523e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005240:	2302      	movs	r3, #2
 8005242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005244:	2300      	movs	r3, #0
 8005246:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005248:	2300      	movs	r3, #0
 800524a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800524c:	2301      	movs	r3, #1
 800524e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005250:	f107 031c 	add.w	r3, r7, #28
 8005254:	4619      	mov	r1, r3
 8005256:	482e      	ldr	r0, [pc, #184]	@ (8005310 <HAL_TIM_Encoder_MspInit+0x130>)
 8005258:	f001 fd0c 	bl	8006c74 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 800525c:	2200      	movs	r2, #0
 800525e:	2105      	movs	r1, #5
 8005260:	2018      	movs	r0, #24
 8005262:	f001 f8db 	bl	800641c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8005266:	2018      	movs	r0, #24
 8005268:	f001 f8f4 	bl	8006454 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800526c:	2200      	movs	r2, #0
 800526e:	2105      	movs	r1, #5
 8005270:	2019      	movs	r0, #25
 8005272:	f001 f8d3 	bl	800641c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005276:	2019      	movs	r0, #25
 8005278:	f001 f8ec 	bl	8006454 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 800527c:	2200      	movs	r2, #0
 800527e:	2105      	movs	r1, #5
 8005280:	201a      	movs	r0, #26
 8005282:	f001 f8cb 	bl	800641c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005286:	201a      	movs	r0, #26
 8005288:	f001 f8e4 	bl	8006454 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800528c:	e038      	b.n	8005300 <HAL_TIM_Encoder_MspInit+0x120>
  else if(htim_encoder->Instance==TIM3)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a20      	ldr	r2, [pc, #128]	@ (8005314 <HAL_TIM_Encoder_MspInit+0x134>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d133      	bne.n	8005300 <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005298:	2300      	movs	r3, #0
 800529a:	613b      	str	r3, [r7, #16]
 800529c:	4b1b      	ldr	r3, [pc, #108]	@ (800530c <HAL_TIM_Encoder_MspInit+0x12c>)
 800529e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a0:	4a1a      	ldr	r2, [pc, #104]	@ (800530c <HAL_TIM_Encoder_MspInit+0x12c>)
 80052a2:	f043 0302 	orr.w	r3, r3, #2
 80052a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80052a8:	4b18      	ldr	r3, [pc, #96]	@ (800530c <HAL_TIM_Encoder_MspInit+0x12c>)
 80052aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	613b      	str	r3, [r7, #16]
 80052b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052b4:	2300      	movs	r3, #0
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	4b14      	ldr	r3, [pc, #80]	@ (800530c <HAL_TIM_Encoder_MspInit+0x12c>)
 80052ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052bc:	4a13      	ldr	r2, [pc, #76]	@ (800530c <HAL_TIM_Encoder_MspInit+0x12c>)
 80052be:	f043 0301 	orr.w	r3, r3, #1
 80052c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80052c4:	4b11      	ldr	r3, [pc, #68]	@ (800530c <HAL_TIM_Encoder_MspInit+0x12c>)
 80052c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	60fb      	str	r3, [r7, #12]
 80052ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EncA_L_Pin|EncB_L_Pin;
 80052d0:	23c0      	movs	r3, #192	@ 0xc0
 80052d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052d4:	2302      	movs	r3, #2
 80052d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d8:	2300      	movs	r3, #0
 80052da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052dc:	2300      	movs	r3, #0
 80052de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80052e0:	2302      	movs	r3, #2
 80052e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052e4:	f107 031c 	add.w	r3, r7, #28
 80052e8:	4619      	mov	r1, r3
 80052ea:	4809      	ldr	r0, [pc, #36]	@ (8005310 <HAL_TIM_Encoder_MspInit+0x130>)
 80052ec:	f001 fcc2 	bl	8006c74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80052f0:	2200      	movs	r2, #0
 80052f2:	2105      	movs	r1, #5
 80052f4:	201d      	movs	r0, #29
 80052f6:	f001 f891 	bl	800641c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80052fa:	201d      	movs	r0, #29
 80052fc:	f001 f8aa 	bl	8006454 <HAL_NVIC_EnableIRQ>
}
 8005300:	bf00      	nop
 8005302:	3730      	adds	r7, #48	@ 0x30
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	40010000 	.word	0x40010000
 800530c:	40023800 	.word	0x40023800
 8005310:	40020000 	.word	0x40020000
 8005314:	40000400 	.word	0x40000400

08005318 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a0e      	ldr	r2, [pc, #56]	@ (8005360 <HAL_TIM_Base_MspInit+0x48>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d115      	bne.n	8005356 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800532a:	2300      	movs	r3, #0
 800532c:	60fb      	str	r3, [r7, #12]
 800532e:	4b0d      	ldr	r3, [pc, #52]	@ (8005364 <HAL_TIM_Base_MspInit+0x4c>)
 8005330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005332:	4a0c      	ldr	r2, [pc, #48]	@ (8005364 <HAL_TIM_Base_MspInit+0x4c>)
 8005334:	f043 0304 	orr.w	r3, r3, #4
 8005338:	6413      	str	r3, [r2, #64]	@ 0x40
 800533a:	4b0a      	ldr	r3, [pc, #40]	@ (8005364 <HAL_TIM_Base_MspInit+0x4c>)
 800533c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800533e:	f003 0304 	and.w	r3, r3, #4
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8005346:	2200      	movs	r2, #0
 8005348:	2105      	movs	r1, #5
 800534a:	201e      	movs	r0, #30
 800534c:	f001 f866 	bl	800641c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005350:	201e      	movs	r0, #30
 8005352:	f001 f87f 	bl	8006454 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005356:	bf00      	nop
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	40000800 	.word	0x40000800
 8005364:	40023800 	.word	0x40023800

08005368 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a0b      	ldr	r2, [pc, #44]	@ (80053a4 <HAL_TIM_PWM_MspInit+0x3c>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d10d      	bne.n	8005396 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800537a:	2300      	movs	r3, #0
 800537c:	60fb      	str	r3, [r7, #12]
 800537e:	4b0a      	ldr	r3, [pc, #40]	@ (80053a8 <HAL_TIM_PWM_MspInit+0x40>)
 8005380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005382:	4a09      	ldr	r2, [pc, #36]	@ (80053a8 <HAL_TIM_PWM_MspInit+0x40>)
 8005384:	f043 0308 	orr.w	r3, r3, #8
 8005388:	6413      	str	r3, [r2, #64]	@ 0x40
 800538a:	4b07      	ldr	r3, [pc, #28]	@ (80053a8 <HAL_TIM_PWM_MspInit+0x40>)
 800538c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800538e:	f003 0308 	and.w	r3, r3, #8
 8005392:	60fb      	str	r3, [r7, #12]
 8005394:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8005396:	bf00      	nop
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	40000c00 	.word	0x40000c00
 80053a8:	40023800 	.word	0x40023800

080053ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b088      	sub	sp, #32
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053b4:	f107 030c 	add.w	r3, r7, #12
 80053b8:	2200      	movs	r2, #0
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	605a      	str	r2, [r3, #4]
 80053be:	609a      	str	r2, [r3, #8]
 80053c0:	60da      	str	r2, [r3, #12]
 80053c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a12      	ldr	r2, [pc, #72]	@ (8005414 <HAL_TIM_MspPostInit+0x68>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d11d      	bne.n	800540a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053ce:	2300      	movs	r3, #0
 80053d0:	60bb      	str	r3, [r7, #8]
 80053d2:	4b11      	ldr	r3, [pc, #68]	@ (8005418 <HAL_TIM_MspPostInit+0x6c>)
 80053d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d6:	4a10      	ldr	r2, [pc, #64]	@ (8005418 <HAL_TIM_MspPostInit+0x6c>)
 80053d8:	f043 0301 	orr.w	r3, r3, #1
 80053dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80053de:	4b0e      	ldr	r3, [pc, #56]	@ (8005418 <HAL_TIM_MspPostInit+0x6c>)
 80053e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	60bb      	str	r3, [r7, #8]
 80053e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = PWM_L_Pin|PWM_R_Pin;
 80053ea:	2303      	movs	r3, #3
 80053ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ee:	2302      	movs	r3, #2
 80053f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053f2:	2300      	movs	r3, #0
 80053f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053f6:	2300      	movs	r3, #0
 80053f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80053fa:	2302      	movs	r3, #2
 80053fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053fe:	f107 030c 	add.w	r3, r7, #12
 8005402:	4619      	mov	r1, r3
 8005404:	4805      	ldr	r0, [pc, #20]	@ (800541c <HAL_TIM_MspPostInit+0x70>)
 8005406:	f001 fc35 	bl	8006c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800540a:	bf00      	nop
 800540c:	3720      	adds	r7, #32
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	40000c00 	.word	0x40000c00
 8005418:	40023800 	.word	0x40023800
 800541c:	40020000 	.word	0x40020000

08005420 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b08a      	sub	sp, #40	@ 0x28
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005428:	f107 0314 	add.w	r3, r7, #20
 800542c:	2200      	movs	r2, #0
 800542e:	601a      	str	r2, [r3, #0]
 8005430:	605a      	str	r2, [r3, #4]
 8005432:	609a      	str	r2, [r3, #8]
 8005434:	60da      	str	r2, [r3, #12]
 8005436:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a4d      	ldr	r2, [pc, #308]	@ (8005574 <HAL_UART_MspInit+0x154>)
 800543e:	4293      	cmp	r3, r2
 8005440:	f040 8093 	bne.w	800556a <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005444:	2300      	movs	r3, #0
 8005446:	613b      	str	r3, [r7, #16]
 8005448:	4b4b      	ldr	r3, [pc, #300]	@ (8005578 <HAL_UART_MspInit+0x158>)
 800544a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800544c:	4a4a      	ldr	r2, [pc, #296]	@ (8005578 <HAL_UART_MspInit+0x158>)
 800544e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005452:	6413      	str	r3, [r2, #64]	@ 0x40
 8005454:	4b48      	ldr	r3, [pc, #288]	@ (8005578 <HAL_UART_MspInit+0x158>)
 8005456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800545c:	613b      	str	r3, [r7, #16]
 800545e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005460:	2300      	movs	r3, #0
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	4b44      	ldr	r3, [pc, #272]	@ (8005578 <HAL_UART_MspInit+0x158>)
 8005466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005468:	4a43      	ldr	r2, [pc, #268]	@ (8005578 <HAL_UART_MspInit+0x158>)
 800546a:	f043 0301 	orr.w	r3, r3, #1
 800546e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005470:	4b41      	ldr	r3, [pc, #260]	@ (8005578 <HAL_UART_MspInit+0x158>)
 8005472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005474:	f003 0301 	and.w	r3, r3, #1
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800547c:	230c      	movs	r3, #12
 800547e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005480:	2302      	movs	r3, #2
 8005482:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005484:	2300      	movs	r3, #0
 8005486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005488:	2300      	movs	r3, #0
 800548a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800548c:	2307      	movs	r3, #7
 800548e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005490:	f107 0314 	add.w	r3, r7, #20
 8005494:	4619      	mov	r1, r3
 8005496:	4839      	ldr	r0, [pc, #228]	@ (800557c <HAL_UART_MspInit+0x15c>)
 8005498:	f001 fbec 	bl	8006c74 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800549c:	4b38      	ldr	r3, [pc, #224]	@ (8005580 <HAL_UART_MspInit+0x160>)
 800549e:	4a39      	ldr	r2, [pc, #228]	@ (8005584 <HAL_UART_MspInit+0x164>)
 80054a0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80054a2:	4b37      	ldr	r3, [pc, #220]	@ (8005580 <HAL_UART_MspInit+0x160>)
 80054a4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80054a8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80054aa:	4b35      	ldr	r3, [pc, #212]	@ (8005580 <HAL_UART_MspInit+0x160>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80054b0:	4b33      	ldr	r3, [pc, #204]	@ (8005580 <HAL_UART_MspInit+0x160>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80054b6:	4b32      	ldr	r3, [pc, #200]	@ (8005580 <HAL_UART_MspInit+0x160>)
 80054b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80054bc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80054be:	4b30      	ldr	r3, [pc, #192]	@ (8005580 <HAL_UART_MspInit+0x160>)
 80054c0:	2200      	movs	r2, #0
 80054c2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80054c4:	4b2e      	ldr	r3, [pc, #184]	@ (8005580 <HAL_UART_MspInit+0x160>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80054ca:	4b2d      	ldr	r3, [pc, #180]	@ (8005580 <HAL_UART_MspInit+0x160>)
 80054cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80054d0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80054d2:	4b2b      	ldr	r3, [pc, #172]	@ (8005580 <HAL_UART_MspInit+0x160>)
 80054d4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80054d8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80054da:	4b29      	ldr	r3, [pc, #164]	@ (8005580 <HAL_UART_MspInit+0x160>)
 80054dc:	2200      	movs	r2, #0
 80054de:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80054e0:	4827      	ldr	r0, [pc, #156]	@ (8005580 <HAL_UART_MspInit+0x160>)
 80054e2:	f000 ffc5 	bl	8006470 <HAL_DMA_Init>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80054ec:	f7ff fbb4 	bl	8004c58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a23      	ldr	r2, [pc, #140]	@ (8005580 <HAL_UART_MspInit+0x160>)
 80054f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80054f6:	4a22      	ldr	r2, [pc, #136]	@ (8005580 <HAL_UART_MspInit+0x160>)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80054fc:	4b22      	ldr	r3, [pc, #136]	@ (8005588 <HAL_UART_MspInit+0x168>)
 80054fe:	4a23      	ldr	r2, [pc, #140]	@ (800558c <HAL_UART_MspInit+0x16c>)
 8005500:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8005502:	4b21      	ldr	r3, [pc, #132]	@ (8005588 <HAL_UART_MspInit+0x168>)
 8005504:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005508:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800550a:	4b1f      	ldr	r3, [pc, #124]	@ (8005588 <HAL_UART_MspInit+0x168>)
 800550c:	2240      	movs	r2, #64	@ 0x40
 800550e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005510:	4b1d      	ldr	r3, [pc, #116]	@ (8005588 <HAL_UART_MspInit+0x168>)
 8005512:	2200      	movs	r2, #0
 8005514:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005516:	4b1c      	ldr	r3, [pc, #112]	@ (8005588 <HAL_UART_MspInit+0x168>)
 8005518:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800551c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800551e:	4b1a      	ldr	r3, [pc, #104]	@ (8005588 <HAL_UART_MspInit+0x168>)
 8005520:	2200      	movs	r2, #0
 8005522:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005524:	4b18      	ldr	r3, [pc, #96]	@ (8005588 <HAL_UART_MspInit+0x168>)
 8005526:	2200      	movs	r2, #0
 8005528:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800552a:	4b17      	ldr	r3, [pc, #92]	@ (8005588 <HAL_UART_MspInit+0x168>)
 800552c:	2200      	movs	r2, #0
 800552e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005530:	4b15      	ldr	r3, [pc, #84]	@ (8005588 <HAL_UART_MspInit+0x168>)
 8005532:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8005536:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005538:	4b13      	ldr	r3, [pc, #76]	@ (8005588 <HAL_UART_MspInit+0x168>)
 800553a:	2200      	movs	r2, #0
 800553c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800553e:	4812      	ldr	r0, [pc, #72]	@ (8005588 <HAL_UART_MspInit+0x168>)
 8005540:	f000 ff96 	bl	8006470 <HAL_DMA_Init>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d001      	beq.n	800554e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800554a:	f7ff fb85 	bl	8004c58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a0d      	ldr	r2, [pc, #52]	@ (8005588 <HAL_UART_MspInit+0x168>)
 8005552:	635a      	str	r2, [r3, #52]	@ 0x34
 8005554:	4a0c      	ldr	r2, [pc, #48]	@ (8005588 <HAL_UART_MspInit+0x168>)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800555a:	2200      	movs	r2, #0
 800555c:	2105      	movs	r1, #5
 800555e:	2026      	movs	r0, #38	@ 0x26
 8005560:	f000 ff5c 	bl	800641c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005564:	2026      	movs	r0, #38	@ 0x26
 8005566:	f000 ff75 	bl	8006454 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800556a:	bf00      	nop
 800556c:	3728      	adds	r7, #40	@ 0x28
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	40004400 	.word	0x40004400
 8005578:	40023800 	.word	0x40023800
 800557c:	40020000 	.word	0x40020000
 8005580:	20004880 	.word	0x20004880
 8005584:	40026088 	.word	0x40026088
 8005588:	200048e0 	.word	0x200048e0
 800558c:	400260a0 	.word	0x400260a0

08005590 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b08e      	sub	sp, #56	@ 0x38
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8005598:	2300      	movs	r3, #0
 800559a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800559c:	2300      	movs	r3, #0
 800559e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80055a0:	2300      	movs	r3, #0
 80055a2:	60fb      	str	r3, [r7, #12]
 80055a4:	4b34      	ldr	r3, [pc, #208]	@ (8005678 <HAL_InitTick+0xe8>)
 80055a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a8:	4a33      	ldr	r2, [pc, #204]	@ (8005678 <HAL_InitTick+0xe8>)
 80055aa:	f043 0301 	orr.w	r3, r3, #1
 80055ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80055b0:	4b31      	ldr	r3, [pc, #196]	@ (8005678 <HAL_InitTick+0xe8>)
 80055b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	60fb      	str	r3, [r7, #12]
 80055ba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80055bc:	f107 0210 	add.w	r2, r7, #16
 80055c0:	f107 0314 	add.w	r3, r7, #20
 80055c4:	4611      	mov	r1, r2
 80055c6:	4618      	mov	r0, r3
 80055c8:	f002 f98a 	bl	80078e0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80055d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d103      	bne.n	80055de <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80055d6:	f002 f95b 	bl	8007890 <HAL_RCC_GetPCLK1Freq>
 80055da:	6378      	str	r0, [r7, #52]	@ 0x34
 80055dc:	e004      	b.n	80055e8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80055de:	f002 f957 	bl	8007890 <HAL_RCC_GetPCLK1Freq>
 80055e2:	4603      	mov	r3, r0
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80055e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ea:	4a24      	ldr	r2, [pc, #144]	@ (800567c <HAL_InitTick+0xec>)
 80055ec:	fba2 2303 	umull	r2, r3, r2, r3
 80055f0:	0c9b      	lsrs	r3, r3, #18
 80055f2:	3b01      	subs	r3, #1
 80055f4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80055f6:	4b22      	ldr	r3, [pc, #136]	@ (8005680 <HAL_InitTick+0xf0>)
 80055f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80055fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80055fe:	4b20      	ldr	r3, [pc, #128]	@ (8005680 <HAL_InitTick+0xf0>)
 8005600:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005604:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8005606:	4a1e      	ldr	r2, [pc, #120]	@ (8005680 <HAL_InitTick+0xf0>)
 8005608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800560a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800560c:	4b1c      	ldr	r3, [pc, #112]	@ (8005680 <HAL_InitTick+0xf0>)
 800560e:	2200      	movs	r2, #0
 8005610:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005612:	4b1b      	ldr	r3, [pc, #108]	@ (8005680 <HAL_InitTick+0xf0>)
 8005614:	2200      	movs	r2, #0
 8005616:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005618:	4b19      	ldr	r3, [pc, #100]	@ (8005680 <HAL_InitTick+0xf0>)
 800561a:	2200      	movs	r2, #0
 800561c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800561e:	4818      	ldr	r0, [pc, #96]	@ (8005680 <HAL_InitTick+0xf0>)
 8005620:	f002 f990 	bl	8007944 <HAL_TIM_Base_Init>
 8005624:	4603      	mov	r3, r0
 8005626:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800562a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800562e:	2b00      	cmp	r3, #0
 8005630:	d11b      	bne.n	800566a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8005632:	4813      	ldr	r0, [pc, #76]	@ (8005680 <HAL_InitTick+0xf0>)
 8005634:	f002 f9d6 	bl	80079e4 <HAL_TIM_Base_Start_IT>
 8005638:	4603      	mov	r3, r0
 800563a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800563e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005642:	2b00      	cmp	r3, #0
 8005644:	d111      	bne.n	800566a <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005646:	201c      	movs	r0, #28
 8005648:	f000 ff04 	bl	8006454 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b0f      	cmp	r3, #15
 8005650:	d808      	bhi.n	8005664 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8005652:	2200      	movs	r2, #0
 8005654:	6879      	ldr	r1, [r7, #4]
 8005656:	201c      	movs	r0, #28
 8005658:	f000 fee0 	bl	800641c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800565c:	4a09      	ldr	r2, [pc, #36]	@ (8005684 <HAL_InitTick+0xf4>)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6013      	str	r3, [r2, #0]
 8005662:	e002      	b.n	800566a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800566a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800566e:	4618      	mov	r0, r3
 8005670:	3738      	adds	r7, #56	@ 0x38
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	40023800 	.word	0x40023800
 800567c:	431bde83 	.word	0x431bde83
 8005680:	200086cc 	.word	0x200086cc
 8005684:	20000010 	.word	0x20000010

08005688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005688:	b480      	push	{r7}
 800568a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800568c:	bf00      	nop
 800568e:	e7fd      	b.n	800568c <NMI_Handler+0x4>

08005690 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005690:	b480      	push	{r7}
 8005692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005694:	bf00      	nop
 8005696:	e7fd      	b.n	8005694 <HardFault_Handler+0x4>

08005698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005698:	b480      	push	{r7}
 800569a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800569c:	bf00      	nop
 800569e:	e7fd      	b.n	800569c <MemManage_Handler+0x4>

080056a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80056a0:	b480      	push	{r7}
 80056a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80056a4:	bf00      	nop
 80056a6:	e7fd      	b.n	80056a4 <BusFault_Handler+0x4>

080056a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80056a8:	b480      	push	{r7}
 80056aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80056ac:	bf00      	nop
 80056ae:	e7fd      	b.n	80056ac <UsageFault_Handler+0x4>

080056b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80056b4:	bf00      	nop
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
	...

080056c0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80056c4:	4802      	ldr	r0, [pc, #8]	@ (80056d0 <DMA1_Stream5_IRQHandler+0x10>)
 80056c6:	f001 f86b 	bl	80067a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80056ca:	bf00      	nop
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	20004880 	.word	0x20004880

080056d4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80056d8:	4802      	ldr	r0, [pc, #8]	@ (80056e4 <DMA1_Stream6_IRQHandler+0x10>)
 80056da:	f001 f861 	bl	80067a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80056de:	bf00      	nop
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	200048e0 	.word	0x200048e0

080056e8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80056ec:	4802      	ldr	r0, [pc, #8]	@ (80056f8 <ADC_IRQHandler+0x10>)
 80056ee:	f000 fa91 	bl	8005c14 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80056f2:	bf00      	nop
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	200046d4 	.word	0x200046d4

080056fc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005700:	4802      	ldr	r0, [pc, #8]	@ (800570c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8005702:	f002 fc05 	bl	8007f10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8005706:	bf00      	nop
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	2000471c 	.word	0x2000471c

08005710 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005714:	4802      	ldr	r0, [pc, #8]	@ (8005720 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005716:	f002 fbfb 	bl	8007f10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800571a:	bf00      	nop
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	2000471c 	.word	0x2000471c

08005724 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005728:	4802      	ldr	r0, [pc, #8]	@ (8005734 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800572a:	f002 fbf1 	bl	8007f10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800572e:	bf00      	nop
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	2000471c 	.word	0x2000471c

08005738 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800573c:	4802      	ldr	r0, [pc, #8]	@ (8005748 <TIM2_IRQHandler+0x10>)
 800573e:	f002 fbe7 	bl	8007f10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005742:	bf00      	nop
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	200086cc 	.word	0x200086cc

0800574c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005750:	4802      	ldr	r0, [pc, #8]	@ (800575c <TIM3_IRQHandler+0x10>)
 8005752:	f002 fbdd 	bl	8007f10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005756:	bf00      	nop
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	20004764 	.word	0x20004764

08005760 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005764:	4802      	ldr	r0, [pc, #8]	@ (8005770 <TIM4_IRQHandler+0x10>)
 8005766:	f002 fbd3 	bl	8007f10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800576a:	bf00      	nop
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	200047ac 	.word	0x200047ac

08005774 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005778:	4802      	ldr	r0, [pc, #8]	@ (8005784 <USART2_IRQHandler+0x10>)
 800577a:	f003 fb4d 	bl	8008e18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800577e:	bf00      	nop
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	2000483c 	.word	0x2000483c

08005788 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005788:	b480      	push	{r7}
 800578a:	af00      	add	r7, sp, #0
  return 1;
 800578c:	2301      	movs	r3, #1
}
 800578e:	4618      	mov	r0, r3
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <_kill>:

int _kill(int pid, int sig)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80057a2:	f015 fbf3 	bl	801af8c <__errno>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2216      	movs	r2, #22
 80057aa:	601a      	str	r2, [r3, #0]
  return -1;
 80057ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3708      	adds	r7, #8
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <_exit>:

void _exit (int status)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80057c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f7ff ffe7 	bl	8005798 <_kill>
  while (1) {}    /* Make sure we hang here */
 80057ca:	bf00      	nop
 80057cc:	e7fd      	b.n	80057ca <_exit+0x12>

080057ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b086      	sub	sp, #24
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	60f8      	str	r0, [r7, #12]
 80057d6:	60b9      	str	r1, [r7, #8]
 80057d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057da:	2300      	movs	r3, #0
 80057dc:	617b      	str	r3, [r7, #20]
 80057de:	e00a      	b.n	80057f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80057e0:	f3af 8000 	nop.w
 80057e4:	4601      	mov	r1, r0
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	1c5a      	adds	r2, r3, #1
 80057ea:	60ba      	str	r2, [r7, #8]
 80057ec:	b2ca      	uxtb	r2, r1
 80057ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	3301      	adds	r3, #1
 80057f4:	617b      	str	r3, [r7, #20]
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	dbf0      	blt.n	80057e0 <_read+0x12>
  }

  return len;
 80057fe:	687b      	ldr	r3, [r7, #4]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005814:	2300      	movs	r3, #0
 8005816:	617b      	str	r3, [r7, #20]
 8005818:	e009      	b.n	800582e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	60ba      	str	r2, [r7, #8]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	4618      	mov	r0, r3
 8005824:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	3301      	adds	r3, #1
 800582c:	617b      	str	r3, [r7, #20]
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	429a      	cmp	r2, r3
 8005834:	dbf1      	blt.n	800581a <_write+0x12>
  }
  return len;
 8005836:	687b      	ldr	r3, [r7, #4]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3718      	adds	r7, #24
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <_close>:

int _close(int file)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005848:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800584c:	4618      	mov	r0, r3
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005868:	605a      	str	r2, [r3, #4]
  return 0;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <_isatty>:

int _isatty(int file)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005880:	2301      	movs	r3, #1
}
 8005882:	4618      	mov	r0, r3
 8005884:	370c      	adds	r7, #12
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800588e:	b480      	push	{r7}
 8005890:	b085      	sub	sp, #20
 8005892:	af00      	add	r7, sp, #0
 8005894:	60f8      	str	r0, [r7, #12]
 8005896:	60b9      	str	r1, [r7, #8]
 8005898:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80058b0:	4a14      	ldr	r2, [pc, #80]	@ (8005904 <_sbrk+0x5c>)
 80058b2:	4b15      	ldr	r3, [pc, #84]	@ (8005908 <_sbrk+0x60>)
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80058bc:	4b13      	ldr	r3, [pc, #76]	@ (800590c <_sbrk+0x64>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d102      	bne.n	80058ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80058c4:	4b11      	ldr	r3, [pc, #68]	@ (800590c <_sbrk+0x64>)
 80058c6:	4a12      	ldr	r2, [pc, #72]	@ (8005910 <_sbrk+0x68>)
 80058c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80058ca:	4b10      	ldr	r3, [pc, #64]	@ (800590c <_sbrk+0x64>)
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4413      	add	r3, r2
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d207      	bcs.n	80058e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80058d8:	f015 fb58 	bl	801af8c <__errno>
 80058dc:	4603      	mov	r3, r0
 80058de:	220c      	movs	r2, #12
 80058e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80058e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80058e6:	e009      	b.n	80058fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80058e8:	4b08      	ldr	r3, [pc, #32]	@ (800590c <_sbrk+0x64>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80058ee:	4b07      	ldr	r3, [pc, #28]	@ (800590c <_sbrk+0x64>)
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4413      	add	r3, r2
 80058f6:	4a05      	ldr	r2, [pc, #20]	@ (800590c <_sbrk+0x64>)
 80058f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80058fa:	68fb      	ldr	r3, [r7, #12]
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3718      	adds	r7, #24
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	20018000 	.word	0x20018000
 8005908:	00000400 	.word	0x00000400
 800590c:	20008718 	.word	0x20008718
 8005910:	20011dd0 	.word	0x20011dd0

08005914 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005914:	b480      	push	{r7}
 8005916:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005918:	4b06      	ldr	r3, [pc, #24]	@ (8005934 <SystemInit+0x20>)
 800591a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800591e:	4a05      	ldr	r2, [pc, #20]	@ (8005934 <SystemInit+0x20>)
 8005920:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005924:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005928:	bf00      	nop
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	e000ed00 	.word	0xe000ed00

08005938 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005938:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005970 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800593c:	480d      	ldr	r0, [pc, #52]	@ (8005974 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800593e:	490e      	ldr	r1, [pc, #56]	@ (8005978 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005940:	4a0e      	ldr	r2, [pc, #56]	@ (800597c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005944:	e002      	b.n	800594c <LoopCopyDataInit>

08005946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800594a:	3304      	adds	r3, #4

0800594c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800594c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800594e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005950:	d3f9      	bcc.n	8005946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005952:	4a0b      	ldr	r2, [pc, #44]	@ (8005980 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005954:	4c0b      	ldr	r4, [pc, #44]	@ (8005984 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005958:	e001      	b.n	800595e <LoopFillZerobss>

0800595a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800595a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800595c:	3204      	adds	r2, #4

0800595e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800595e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005960:	d3fb      	bcc.n	800595a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005962:	f7ff ffd7 	bl	8005914 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005966:	f015 fb17 	bl	801af98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800596a:	f7fe f85d 	bl	8003a28 <main>
  bx  lr    
 800596e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005970:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8005974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005978:	20000298 	.word	0x20000298
  ldr r2, =_sidata
 800597c:	08020e9c 	.word	0x08020e9c
  ldr r2, =_sbss
 8005980:	20000298 	.word	0x20000298
  ldr r4, =_ebss
 8005984:	20011dcc 	.word	0x20011dcc

08005988 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005988:	e7fe      	b.n	8005988 <DMA1_Stream0_IRQHandler>
	...

0800598c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005990:	4b0e      	ldr	r3, [pc, #56]	@ (80059cc <HAL_Init+0x40>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a0d      	ldr	r2, [pc, #52]	@ (80059cc <HAL_Init+0x40>)
 8005996:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800599a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800599c:	4b0b      	ldr	r3, [pc, #44]	@ (80059cc <HAL_Init+0x40>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a0a      	ldr	r2, [pc, #40]	@ (80059cc <HAL_Init+0x40>)
 80059a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80059a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80059a8:	4b08      	ldr	r3, [pc, #32]	@ (80059cc <HAL_Init+0x40>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a07      	ldr	r2, [pc, #28]	@ (80059cc <HAL_Init+0x40>)
 80059ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80059b4:	2003      	movs	r0, #3
 80059b6:	f000 fd26 	bl	8006406 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80059ba:	200f      	movs	r0, #15
 80059bc:	f7ff fde8 	bl	8005590 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80059c0:	f7ff fb96 	bl	80050f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	40023c00 	.word	0x40023c00

080059d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059d0:	b480      	push	{r7}
 80059d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80059d4:	4b06      	ldr	r3, [pc, #24]	@ (80059f0 <HAL_IncTick+0x20>)
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	461a      	mov	r2, r3
 80059da:	4b06      	ldr	r3, [pc, #24]	@ (80059f4 <HAL_IncTick+0x24>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4413      	add	r3, r2
 80059e0:	4a04      	ldr	r2, [pc, #16]	@ (80059f4 <HAL_IncTick+0x24>)
 80059e2:	6013      	str	r3, [r2, #0]
}
 80059e4:	bf00      	nop
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	20000014 	.word	0x20000014
 80059f4:	2000871c 	.word	0x2000871c

080059f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059f8:	b480      	push	{r7}
 80059fa:	af00      	add	r7, sp, #0
  return uwTick;
 80059fc:	4b03      	ldr	r3, [pc, #12]	@ (8005a0c <HAL_GetTick+0x14>)
 80059fe:	681b      	ldr	r3, [r3, #0]
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	2000871c 	.word	0x2000871c

08005a10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e033      	b.n	8005a8e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d109      	bne.n	8005a42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f7ff fb8a 	bl	8005148 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a46:	f003 0310 	and.w	r3, r3, #16
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d118      	bne.n	8005a80 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a52:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005a56:	f023 0302 	bic.w	r3, r3, #2
 8005a5a:	f043 0202 	orr.w	r2, r3, #2
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 fb1c 	bl	80060a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a72:	f023 0303 	bic.w	r3, r3, #3
 8005a76:	f043 0201 	orr.w	r2, r3, #1
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	641a      	str	r2, [r3, #64]	@ 0x40
 8005a7e:	e001      	b.n	8005a84 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
	...

08005a98 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d101      	bne.n	8005ab2 <HAL_ADC_Start_IT+0x1a>
 8005aae:	2302      	movs	r3, #2
 8005ab0:	e0a1      	b.n	8005bf6 <HAL_ADC_Start_IT+0x15e>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d018      	beq.n	8005afa <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689a      	ldr	r2, [r3, #8]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f042 0201 	orr.w	r2, r2, #1
 8005ad6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005ad8:	4b4a      	ldr	r3, [pc, #296]	@ (8005c04 <HAL_ADC_Start_IT+0x16c>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a4a      	ldr	r2, [pc, #296]	@ (8005c08 <HAL_ADC_Start_IT+0x170>)
 8005ade:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae2:	0c9a      	lsrs	r2, r3, #18
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	005b      	lsls	r3, r3, #1
 8005ae8:	4413      	add	r3, r2
 8005aea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005aec:	e002      	b.n	8005af4 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	3b01      	subs	r3, #1
 8005af2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1f9      	bne.n	8005aee <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d169      	bne.n	8005bdc <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b0c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005b10:	f023 0301 	bic.w	r3, r3, #1
 8005b14:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d007      	beq.n	8005b3a <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b2e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005b32:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b46:	d106      	bne.n	8005b56 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b4c:	f023 0206 	bic.w	r2, r3, #6
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	645a      	str	r2, [r3, #68]	@ 0x44
 8005b54:	e002      	b.n	8005b5c <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b64:	4b29      	ldr	r3, [pc, #164]	@ (8005c0c <HAL_ADC_Start_IT+0x174>)
 8005b66:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005b70:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	6812      	ldr	r2, [r2, #0]
 8005b7c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b80:	f043 0320 	orr.w	r3, r3, #32
 8005b84:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f003 031f 	and.w	r3, r3, #31
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10f      	bne.n	8005bb2 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d129      	bne.n	8005bf4 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	689a      	ldr	r2, [r3, #8]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005bae:	609a      	str	r2, [r3, #8]
 8005bb0:	e020      	b.n	8005bf4 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a16      	ldr	r2, [pc, #88]	@ (8005c10 <HAL_ADC_Start_IT+0x178>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d11b      	bne.n	8005bf4 <HAL_ADC_Start_IT+0x15c>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d114      	bne.n	8005bf4 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005bd8:	609a      	str	r2, [r3, #8]
 8005bda:	e00b      	b.n	8005bf4 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be0:	f043 0210 	orr.w	r2, r3, #16
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bec:	f043 0201 	orr.w	r2, r3, #1
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	2000000c 	.word	0x2000000c
 8005c08:	431bde83 	.word	0x431bde83
 8005c0c:	40012300 	.word	0x40012300
 8005c10:	40012000 	.word	0x40012000

08005c14 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	617b      	str	r3, [r7, #20]
 8005c20:	2300      	movs	r3, #0
 8005c22:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	f003 0320 	and.w	r3, r3, #32
 8005c42:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d049      	beq.n	8005cde <HAL_ADC_IRQHandler+0xca>
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d046      	beq.n	8005cde <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c54:	f003 0310 	and.w	r3, r3, #16
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d105      	bne.n	8005c68 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c60:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d12b      	bne.n	8005cce <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d127      	bne.n	8005cce <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c84:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d006      	beq.n	8005c9a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d119      	bne.n	8005cce <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 0220 	bic.w	r2, r2, #32
 8005ca8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d105      	bne.n	8005cce <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc6:	f043 0201 	orr.w	r2, r3, #1
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7fd fe60 	bl	8003994 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f06f 0212 	mvn.w	r2, #18
 8005cdc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f003 0304 	and.w	r3, r3, #4
 8005ce4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cec:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d057      	beq.n	8005da4 <HAL_ADC_IRQHandler+0x190>
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d054      	beq.n	8005da4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cfe:	f003 0310 	and.w	r3, r3, #16
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d105      	bne.n	8005d12 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d0a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d139      	bne.n	8005d94 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d26:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d006      	beq.n	8005d3c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d12b      	bne.n	8005d94 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d124      	bne.n	8005d94 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d11d      	bne.n	8005d94 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d119      	bne.n	8005d94 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685a      	ldr	r2, [r3, #4]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005d6e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d74:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d105      	bne.n	8005d94 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d8c:	f043 0201 	orr.w	r2, r3, #1
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 fa7f 	bl	8006298 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f06f 020c 	mvn.w	r2, #12
 8005da2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005db2:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d017      	beq.n	8005dea <HAL_ADC_IRQHandler+0x1d6>
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d014      	beq.n	8005dea <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d10d      	bne.n	8005dea <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f82a 	bl	8005e34 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f06f 0201 	mvn.w	r2, #1
 8005de8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f003 0320 	and.w	r3, r3, #32
 8005df0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005df8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d015      	beq.n	8005e2c <HAL_ADC_IRQHandler+0x218>
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d012      	beq.n	8005e2c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e0a:	f043 0202 	orr.w	r2, r3, #2
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f06f 0220 	mvn.w	r2, #32
 8005e1a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f813 	bl	8005e48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f06f 0220 	mvn.w	r2, #32
 8005e2a:	601a      	str	r2, [r3, #0]
  }
}
 8005e2c:	bf00      	nop
 8005e2e:	3718      	adds	r7, #24
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005e66:	2300      	movs	r3, #0
 8005e68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d101      	bne.n	8005e78 <HAL_ADC_ConfigChannel+0x1c>
 8005e74:	2302      	movs	r3, #2
 8005e76:	e105      	b.n	8006084 <HAL_ADC_ConfigChannel+0x228>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2b09      	cmp	r3, #9
 8005e86:	d925      	bls.n	8005ed4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68d9      	ldr	r1, [r3, #12]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	461a      	mov	r2, r3
 8005e96:	4613      	mov	r3, r2
 8005e98:	005b      	lsls	r3, r3, #1
 8005e9a:	4413      	add	r3, r2
 8005e9c:	3b1e      	subs	r3, #30
 8005e9e:	2207      	movs	r2, #7
 8005ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea4:	43da      	mvns	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	400a      	ands	r2, r1
 8005eac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68d9      	ldr	r1, [r3, #12]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	689a      	ldr	r2, [r3, #8]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	005b      	lsls	r3, r3, #1
 8005ec4:	4403      	add	r3, r0
 8005ec6:	3b1e      	subs	r3, #30
 8005ec8:	409a      	lsls	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	60da      	str	r2, [r3, #12]
 8005ed2:	e022      	b.n	8005f1a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6919      	ldr	r1, [r3, #16]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	005b      	lsls	r3, r3, #1
 8005ee6:	4413      	add	r3, r2
 8005ee8:	2207      	movs	r2, #7
 8005eea:	fa02 f303 	lsl.w	r3, r2, r3
 8005eee:	43da      	mvns	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	400a      	ands	r2, r1
 8005ef6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6919      	ldr	r1, [r3, #16]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	689a      	ldr	r2, [r3, #8]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	4618      	mov	r0, r3
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	005b      	lsls	r3, r3, #1
 8005f0e:	4403      	add	r3, r0
 8005f10:	409a      	lsls	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	2b06      	cmp	r3, #6
 8005f20:	d824      	bhi.n	8005f6c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	685a      	ldr	r2, [r3, #4]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	3b05      	subs	r3, #5
 8005f34:	221f      	movs	r2, #31
 8005f36:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3a:	43da      	mvns	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	400a      	ands	r2, r1
 8005f42:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	4618      	mov	r0, r3
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	4613      	mov	r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4413      	add	r3, r2
 8005f5c:	3b05      	subs	r3, #5
 8005f5e:	fa00 f203 	lsl.w	r2, r0, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	430a      	orrs	r2, r1
 8005f68:	635a      	str	r2, [r3, #52]	@ 0x34
 8005f6a:	e04c      	b.n	8006006 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	2b0c      	cmp	r3, #12
 8005f72:	d824      	bhi.n	8005fbe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4413      	add	r3, r2
 8005f84:	3b23      	subs	r3, #35	@ 0x23
 8005f86:	221f      	movs	r2, #31
 8005f88:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8c:	43da      	mvns	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	400a      	ands	r2, r1
 8005f94:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	3b23      	subs	r3, #35	@ 0x23
 8005fb0:	fa00 f203 	lsl.w	r2, r0, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	631a      	str	r2, [r3, #48]	@ 0x30
 8005fbc:	e023      	b.n	8006006 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	3b41      	subs	r3, #65	@ 0x41
 8005fd0:	221f      	movs	r2, #31
 8005fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd6:	43da      	mvns	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	400a      	ands	r2, r1
 8005fde:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	4618      	mov	r0, r3
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	3b41      	subs	r3, #65	@ 0x41
 8005ffa:	fa00 f203 	lsl.w	r2, r0, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006006:	4b22      	ldr	r3, [pc, #136]	@ (8006090 <HAL_ADC_ConfigChannel+0x234>)
 8006008:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a21      	ldr	r2, [pc, #132]	@ (8006094 <HAL_ADC_ConfigChannel+0x238>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d109      	bne.n	8006028 <HAL_ADC_ConfigChannel+0x1cc>
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2b12      	cmp	r3, #18
 800601a:	d105      	bne.n	8006028 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a19      	ldr	r2, [pc, #100]	@ (8006094 <HAL_ADC_ConfigChannel+0x238>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d123      	bne.n	800607a <HAL_ADC_ConfigChannel+0x21e>
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2b10      	cmp	r3, #16
 8006038:	d003      	beq.n	8006042 <HAL_ADC_ConfigChannel+0x1e6>
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b11      	cmp	r3, #17
 8006040:	d11b      	bne.n	800607a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2b10      	cmp	r3, #16
 8006054:	d111      	bne.n	800607a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006056:	4b10      	ldr	r3, [pc, #64]	@ (8006098 <HAL_ADC_ConfigChannel+0x23c>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a10      	ldr	r2, [pc, #64]	@ (800609c <HAL_ADC_ConfigChannel+0x240>)
 800605c:	fba2 2303 	umull	r2, r3, r2, r3
 8006060:	0c9a      	lsrs	r2, r3, #18
 8006062:	4613      	mov	r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4413      	add	r3, r2
 8006068:	005b      	lsls	r3, r3, #1
 800606a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800606c:	e002      	b.n	8006074 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	3b01      	subs	r3, #1
 8006072:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1f9      	bne.n	800606e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3714      	adds	r7, #20
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr
 8006090:	40012300 	.word	0x40012300
 8006094:	40012000 	.word	0x40012000
 8006098:	2000000c 	.word	0x2000000c
 800609c:	431bde83 	.word	0x431bde83

080060a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80060a8:	4b79      	ldr	r3, [pc, #484]	@ (8006290 <ADC_Init+0x1f0>)
 80060aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	685a      	ldr	r2, [r3, #4]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	431a      	orrs	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80060d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6859      	ldr	r1, [r3, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	021a      	lsls	r2, r3, #8
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80060f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	6859      	ldr	r1, [r3, #4]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	689a      	ldr	r2, [r3, #8]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	430a      	orrs	r2, r1
 800610a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689a      	ldr	r2, [r3, #8]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800611a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6899      	ldr	r1, [r3, #8]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68da      	ldr	r2, [r3, #12]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	430a      	orrs	r2, r1
 800612c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006132:	4a58      	ldr	r2, [pc, #352]	@ (8006294 <ADC_Init+0x1f4>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d022      	beq.n	800617e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689a      	ldr	r2, [r3, #8]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006146:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6899      	ldr	r1, [r3, #8]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	430a      	orrs	r2, r1
 8006158:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	689a      	ldr	r2, [r3, #8]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006168:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6899      	ldr	r1, [r3, #8]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	430a      	orrs	r2, r1
 800617a:	609a      	str	r2, [r3, #8]
 800617c:	e00f      	b.n	800619e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	689a      	ldr	r2, [r3, #8]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800618c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	689a      	ldr	r2, [r3, #8]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800619c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	689a      	ldr	r2, [r3, #8]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 0202 	bic.w	r2, r2, #2
 80061ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	6899      	ldr	r1, [r3, #8]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	7e1b      	ldrb	r3, [r3, #24]
 80061b8:	005a      	lsls	r2, r3, #1
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	430a      	orrs	r2, r1
 80061c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d01b      	beq.n	8006204 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80061ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6859      	ldr	r1, [r3, #4]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f6:	3b01      	subs	r3, #1
 80061f8:	035a      	lsls	r2, r3, #13
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	430a      	orrs	r2, r1
 8006200:	605a      	str	r2, [r3, #4]
 8006202:	e007      	b.n	8006214 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006212:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006222:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	3b01      	subs	r3, #1
 8006230:	051a      	lsls	r2, r3, #20
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	430a      	orrs	r2, r1
 8006238:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	689a      	ldr	r2, [r3, #8]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006248:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6899      	ldr	r1, [r3, #8]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006256:	025a      	lsls	r2, r3, #9
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	430a      	orrs	r2, r1
 800625e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689a      	ldr	r2, [r3, #8]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800626e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6899      	ldr	r1, [r3, #8]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	029a      	lsls	r2, r3, #10
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	430a      	orrs	r2, r1
 8006282:	609a      	str	r2, [r3, #8]
}
 8006284:	bf00      	nop
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	40012300 	.word	0x40012300
 8006294:	0f000001 	.word	0x0f000001

08006298 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f003 0307 	and.w	r3, r3, #7
 80062ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80062bc:	4b0c      	ldr	r3, [pc, #48]	@ (80062f0 <__NVIC_SetPriorityGrouping+0x44>)
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80062c8:	4013      	ands	r3, r2
 80062ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80062d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80062d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80062de:	4a04      	ldr	r2, [pc, #16]	@ (80062f0 <__NVIC_SetPriorityGrouping+0x44>)
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	60d3      	str	r3, [r2, #12]
}
 80062e4:	bf00      	nop
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	e000ed00 	.word	0xe000ed00

080062f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80062f4:	b480      	push	{r7}
 80062f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062f8:	4b04      	ldr	r3, [pc, #16]	@ (800630c <__NVIC_GetPriorityGrouping+0x18>)
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	0a1b      	lsrs	r3, r3, #8
 80062fe:	f003 0307 	and.w	r3, r3, #7
}
 8006302:	4618      	mov	r0, r3
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	e000ed00 	.word	0xe000ed00

08006310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	4603      	mov	r3, r0
 8006318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800631a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800631e:	2b00      	cmp	r3, #0
 8006320:	db0b      	blt.n	800633a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006322:	79fb      	ldrb	r3, [r7, #7]
 8006324:	f003 021f 	and.w	r2, r3, #31
 8006328:	4907      	ldr	r1, [pc, #28]	@ (8006348 <__NVIC_EnableIRQ+0x38>)
 800632a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800632e:	095b      	lsrs	r3, r3, #5
 8006330:	2001      	movs	r0, #1
 8006332:	fa00 f202 	lsl.w	r2, r0, r2
 8006336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800633a:	bf00      	nop
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	e000e100 	.word	0xe000e100

0800634c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	4603      	mov	r3, r0
 8006354:	6039      	str	r1, [r7, #0]
 8006356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800635c:	2b00      	cmp	r3, #0
 800635e:	db0a      	blt.n	8006376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	b2da      	uxtb	r2, r3
 8006364:	490c      	ldr	r1, [pc, #48]	@ (8006398 <__NVIC_SetPriority+0x4c>)
 8006366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800636a:	0112      	lsls	r2, r2, #4
 800636c:	b2d2      	uxtb	r2, r2
 800636e:	440b      	add	r3, r1
 8006370:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006374:	e00a      	b.n	800638c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	b2da      	uxtb	r2, r3
 800637a:	4908      	ldr	r1, [pc, #32]	@ (800639c <__NVIC_SetPriority+0x50>)
 800637c:	79fb      	ldrb	r3, [r7, #7]
 800637e:	f003 030f 	and.w	r3, r3, #15
 8006382:	3b04      	subs	r3, #4
 8006384:	0112      	lsls	r2, r2, #4
 8006386:	b2d2      	uxtb	r2, r2
 8006388:	440b      	add	r3, r1
 800638a:	761a      	strb	r2, [r3, #24]
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr
 8006398:	e000e100 	.word	0xe000e100
 800639c:	e000ed00 	.word	0xe000ed00

080063a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b089      	sub	sp, #36	@ 0x24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f003 0307 	and.w	r3, r3, #7
 80063b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	f1c3 0307 	rsb	r3, r3, #7
 80063ba:	2b04      	cmp	r3, #4
 80063bc:	bf28      	it	cs
 80063be:	2304      	movcs	r3, #4
 80063c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	3304      	adds	r3, #4
 80063c6:	2b06      	cmp	r3, #6
 80063c8:	d902      	bls.n	80063d0 <NVIC_EncodePriority+0x30>
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	3b03      	subs	r3, #3
 80063ce:	e000      	b.n	80063d2 <NVIC_EncodePriority+0x32>
 80063d0:	2300      	movs	r3, #0
 80063d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	fa02 f303 	lsl.w	r3, r2, r3
 80063de:	43da      	mvns	r2, r3
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	401a      	ands	r2, r3
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80063e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	fa01 f303 	lsl.w	r3, r1, r3
 80063f2:	43d9      	mvns	r1, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063f8:	4313      	orrs	r3, r2
         );
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3724      	adds	r7, #36	@ 0x24
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b082      	sub	sp, #8
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f7ff ff4c 	bl	80062ac <__NVIC_SetPriorityGrouping>
}
 8006414:	bf00      	nop
 8006416:	3708      	adds	r7, #8
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af00      	add	r7, sp, #0
 8006422:	4603      	mov	r3, r0
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
 8006428:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800642a:	2300      	movs	r3, #0
 800642c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800642e:	f7ff ff61 	bl	80062f4 <__NVIC_GetPriorityGrouping>
 8006432:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	68b9      	ldr	r1, [r7, #8]
 8006438:	6978      	ldr	r0, [r7, #20]
 800643a:	f7ff ffb1 	bl	80063a0 <NVIC_EncodePriority>
 800643e:	4602      	mov	r2, r0
 8006440:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006444:	4611      	mov	r1, r2
 8006446:	4618      	mov	r0, r3
 8006448:	f7ff ff80 	bl	800634c <__NVIC_SetPriority>
}
 800644c:	bf00      	nop
 800644e:	3718      	adds	r7, #24
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	4603      	mov	r3, r0
 800645c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800645e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006462:	4618      	mov	r0, r3
 8006464:	f7ff ff54 	bl	8006310 <__NVIC_EnableIRQ>
}
 8006468:	bf00      	nop
 800646a:	3708      	adds	r7, #8
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006478:	2300      	movs	r3, #0
 800647a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800647c:	f7ff fabc 	bl	80059f8 <HAL_GetTick>
 8006480:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d101      	bne.n	800648c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e099      	b.n	80065c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2202      	movs	r2, #2
 8006490:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 0201 	bic.w	r2, r2, #1
 80064aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80064ac:	e00f      	b.n	80064ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80064ae:	f7ff faa3 	bl	80059f8 <HAL_GetTick>
 80064b2:	4602      	mov	r2, r0
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	2b05      	cmp	r3, #5
 80064ba:	d908      	bls.n	80064ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2220      	movs	r2, #32
 80064c0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2203      	movs	r2, #3
 80064c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e078      	b.n	80065c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0301 	and.w	r3, r3, #1
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1e8      	bne.n	80064ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	4b38      	ldr	r3, [pc, #224]	@ (80065c8 <HAL_DMA_Init+0x158>)
 80064e8:	4013      	ands	r3, r2
 80064ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685a      	ldr	r2, [r3, #4]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80064fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006506:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006512:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a1b      	ldr	r3, [r3, #32]
 8006518:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	4313      	orrs	r3, r2
 800651e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006524:	2b04      	cmp	r3, #4
 8006526:	d107      	bne.n	8006538 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006530:	4313      	orrs	r3, r2
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	4313      	orrs	r3, r2
 8006536:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	f023 0307 	bic.w	r3, r3, #7
 800654e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	4313      	orrs	r3, r2
 8006558:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800655e:	2b04      	cmp	r3, #4
 8006560:	d117      	bne.n	8006592 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	4313      	orrs	r3, r2
 800656a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00e      	beq.n	8006592 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 fb01 	bl	8006b7c <DMA_CheckFifoParam>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d008      	beq.n	8006592 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2240      	movs	r2, #64	@ 0x40
 8006584:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800658e:	2301      	movs	r3, #1
 8006590:	e016      	b.n	80065c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fab8 	bl	8006b10 <DMA_CalcBaseAndBitshift>
 80065a0:	4603      	mov	r3, r0
 80065a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065a8:	223f      	movs	r2, #63	@ 0x3f
 80065aa:	409a      	lsls	r2, r3
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3718      	adds	r7, #24
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	f010803f 	.word	0xf010803f

080065cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
 80065d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065da:	2300      	movs	r3, #0
 80065dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d101      	bne.n	80065f2 <HAL_DMA_Start_IT+0x26>
 80065ee:	2302      	movs	r3, #2
 80065f0:	e040      	b.n	8006674 <HAL_DMA_Start_IT+0xa8>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b01      	cmp	r3, #1
 8006604:	d12f      	bne.n	8006666 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2202      	movs	r2, #2
 800660a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	68b9      	ldr	r1, [r7, #8]
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f000 fa4a 	bl	8006ab4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006624:	223f      	movs	r2, #63	@ 0x3f
 8006626:	409a      	lsls	r2, r3
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f042 0216 	orr.w	r2, r2, #22
 800663a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006640:	2b00      	cmp	r3, #0
 8006642:	d007      	beq.n	8006654 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f042 0208 	orr.w	r2, r2, #8
 8006652:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f042 0201 	orr.w	r2, r2, #1
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	e005      	b.n	8006672 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800666e:	2302      	movs	r3, #2
 8006670:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006672:	7dfb      	ldrb	r3, [r7, #23]
}
 8006674:	4618      	mov	r0, r3
 8006676:	3718      	adds	r7, #24
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006688:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800668a:	f7ff f9b5 	bl	80059f8 <HAL_GetTick>
 800668e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006696:	b2db      	uxtb	r3, r3
 8006698:	2b02      	cmp	r3, #2
 800669a:	d008      	beq.n	80066ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2280      	movs	r2, #128	@ 0x80
 80066a0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e052      	b.n	8006754 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f022 0216 	bic.w	r2, r2, #22
 80066bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	695a      	ldr	r2, [r3, #20]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80066cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d103      	bne.n	80066de <HAL_DMA_Abort+0x62>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d007      	beq.n	80066ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 0208 	bic.w	r2, r2, #8
 80066ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 0201 	bic.w	r2, r2, #1
 80066fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80066fe:	e013      	b.n	8006728 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006700:	f7ff f97a 	bl	80059f8 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	2b05      	cmp	r3, #5
 800670c:	d90c      	bls.n	8006728 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2220      	movs	r2, #32
 8006712:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2203      	movs	r2, #3
 8006718:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e015      	b.n	8006754 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 0301 	and.w	r3, r3, #1
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1e4      	bne.n	8006700 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800673a:	223f      	movs	r2, #63	@ 0x3f
 800673c:	409a      	lsls	r2, r3
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2201      	movs	r2, #1
 8006746:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b02      	cmp	r3, #2
 800676e:	d004      	beq.n	800677a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2280      	movs	r2, #128	@ 0x80
 8006774:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e00c      	b.n	8006794 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2205      	movs	r2, #5
 800677e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f022 0201 	bic.w	r2, r2, #1
 8006790:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80067a8:	2300      	movs	r3, #0
 80067aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80067ac:	4b8e      	ldr	r3, [pc, #568]	@ (80069e8 <HAL_DMA_IRQHandler+0x248>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a8e      	ldr	r2, [pc, #568]	@ (80069ec <HAL_DMA_IRQHandler+0x24c>)
 80067b2:	fba2 2303 	umull	r2, r3, r2, r3
 80067b6:	0a9b      	lsrs	r3, r3, #10
 80067b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067ca:	2208      	movs	r2, #8
 80067cc:	409a      	lsls	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	4013      	ands	r3, r2
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d01a      	beq.n	800680c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0304 	and.w	r3, r3, #4
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d013      	beq.n	800680c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f022 0204 	bic.w	r2, r2, #4
 80067f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067f8:	2208      	movs	r2, #8
 80067fa:	409a      	lsls	r2, r3
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006804:	f043 0201 	orr.w	r2, r3, #1
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006810:	2201      	movs	r2, #1
 8006812:	409a      	lsls	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	4013      	ands	r3, r2
 8006818:	2b00      	cmp	r3, #0
 800681a:	d012      	beq.n	8006842 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00b      	beq.n	8006842 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800682e:	2201      	movs	r2, #1
 8006830:	409a      	lsls	r2, r3
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800683a:	f043 0202 	orr.w	r2, r3, #2
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006846:	2204      	movs	r2, #4
 8006848:	409a      	lsls	r2, r3
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	4013      	ands	r3, r2
 800684e:	2b00      	cmp	r3, #0
 8006850:	d012      	beq.n	8006878 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0302 	and.w	r3, r3, #2
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00b      	beq.n	8006878 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006864:	2204      	movs	r2, #4
 8006866:	409a      	lsls	r2, r3
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006870:	f043 0204 	orr.w	r2, r3, #4
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800687c:	2210      	movs	r2, #16
 800687e:	409a      	lsls	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	4013      	ands	r3, r2
 8006884:	2b00      	cmp	r3, #0
 8006886:	d043      	beq.n	8006910 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0308 	and.w	r3, r3, #8
 8006892:	2b00      	cmp	r3, #0
 8006894:	d03c      	beq.n	8006910 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800689a:	2210      	movs	r2, #16
 800689c:	409a      	lsls	r2, r3
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d018      	beq.n	80068e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d108      	bne.n	80068d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d024      	beq.n	8006910 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	4798      	blx	r3
 80068ce:	e01f      	b.n	8006910 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d01b      	beq.n	8006910 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	4798      	blx	r3
 80068e0:	e016      	b.n	8006910 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d107      	bne.n	8006900 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f022 0208 	bic.w	r2, r2, #8
 80068fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006904:	2b00      	cmp	r3, #0
 8006906:	d003      	beq.n	8006910 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006914:	2220      	movs	r2, #32
 8006916:	409a      	lsls	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	4013      	ands	r3, r2
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 808f 	beq.w	8006a40 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 0310 	and.w	r3, r3, #16
 800692c:	2b00      	cmp	r3, #0
 800692e:	f000 8087 	beq.w	8006a40 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006936:	2220      	movs	r2, #32
 8006938:	409a      	lsls	r2, r3
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b05      	cmp	r3, #5
 8006948:	d136      	bne.n	80069b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f022 0216 	bic.w	r2, r2, #22
 8006958:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	695a      	ldr	r2, [r3, #20]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006968:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800696e:	2b00      	cmp	r3, #0
 8006970:	d103      	bne.n	800697a <HAL_DMA_IRQHandler+0x1da>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006976:	2b00      	cmp	r3, #0
 8006978:	d007      	beq.n	800698a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f022 0208 	bic.w	r2, r2, #8
 8006988:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800698e:	223f      	movs	r2, #63	@ 0x3f
 8006990:	409a      	lsls	r2, r3
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d07e      	beq.n	8006aac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	4798      	blx	r3
        }
        return;
 80069b6:	e079      	b.n	8006aac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d01d      	beq.n	8006a02 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10d      	bne.n	80069f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d031      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	4798      	blx	r3
 80069e4:	e02c      	b.n	8006a40 <HAL_DMA_IRQHandler+0x2a0>
 80069e6:	bf00      	nop
 80069e8:	2000000c 	.word	0x2000000c
 80069ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d023      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	4798      	blx	r3
 8006a00:	e01e      	b.n	8006a40 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10f      	bne.n	8006a30 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f022 0210 	bic.w	r2, r2, #16
 8006a1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d003      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d032      	beq.n	8006aae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a4c:	f003 0301 	and.w	r3, r3, #1
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d022      	beq.n	8006a9a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2205      	movs	r2, #5
 8006a58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f022 0201 	bic.w	r2, r2, #1
 8006a6a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	60bb      	str	r3, [r7, #8]
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d307      	bcc.n	8006a88 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1f2      	bne.n	8006a6c <HAL_DMA_IRQHandler+0x2cc>
 8006a86:	e000      	b.n	8006a8a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006a88:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d005      	beq.n	8006aae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	4798      	blx	r3
 8006aaa:	e000      	b.n	8006aae <HAL_DMA_IRQHandler+0x30e>
        return;
 8006aac:	bf00      	nop
    }
  }
}
 8006aae:	3718      	adds	r7, #24
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]
 8006ac0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006ad0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	683a      	ldr	r2, [r7, #0]
 8006ad8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	2b40      	cmp	r3, #64	@ 0x40
 8006ae0:	d108      	bne.n	8006af4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006af2:	e007      	b.n	8006b04 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	60da      	str	r2, [r3, #12]
}
 8006b04:	bf00      	nop
 8006b06:	3714      	adds	r7, #20
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	3b10      	subs	r3, #16
 8006b20:	4a14      	ldr	r2, [pc, #80]	@ (8006b74 <DMA_CalcBaseAndBitshift+0x64>)
 8006b22:	fba2 2303 	umull	r2, r3, r2, r3
 8006b26:	091b      	lsrs	r3, r3, #4
 8006b28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006b2a:	4a13      	ldr	r2, [pc, #76]	@ (8006b78 <DMA_CalcBaseAndBitshift+0x68>)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	4413      	add	r3, r2
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2b03      	cmp	r3, #3
 8006b3c:	d909      	bls.n	8006b52 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006b46:	f023 0303 	bic.w	r3, r3, #3
 8006b4a:	1d1a      	adds	r2, r3, #4
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	659a      	str	r2, [r3, #88]	@ 0x58
 8006b50:	e007      	b.n	8006b62 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006b5a:	f023 0303 	bic.w	r3, r3, #3
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3714      	adds	r7, #20
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	aaaaaaab 	.word	0xaaaaaaab
 8006b78:	0801fd78 	.word	0x0801fd78

08006b7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b84:	2300      	movs	r3, #0
 8006b86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d11f      	bne.n	8006bd6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	2b03      	cmp	r3, #3
 8006b9a:	d856      	bhi.n	8006c4a <DMA_CheckFifoParam+0xce>
 8006b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8006ba4 <DMA_CheckFifoParam+0x28>)
 8006b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba2:	bf00      	nop
 8006ba4:	08006bb5 	.word	0x08006bb5
 8006ba8:	08006bc7 	.word	0x08006bc7
 8006bac:	08006bb5 	.word	0x08006bb5
 8006bb0:	08006c4b 	.word	0x08006c4b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d046      	beq.n	8006c4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bc4:	e043      	b.n	8006c4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006bce:	d140      	bne.n	8006c52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bd4:	e03d      	b.n	8006c52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bde:	d121      	bne.n	8006c24 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	2b03      	cmp	r3, #3
 8006be4:	d837      	bhi.n	8006c56 <DMA_CheckFifoParam+0xda>
 8006be6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bec <DMA_CheckFifoParam+0x70>)
 8006be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bec:	08006bfd 	.word	0x08006bfd
 8006bf0:	08006c03 	.word	0x08006c03
 8006bf4:	08006bfd 	.word	0x08006bfd
 8006bf8:	08006c15 	.word	0x08006c15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8006c00:	e030      	b.n	8006c64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d025      	beq.n	8006c5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c12:	e022      	b.n	8006c5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c18:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006c1c:	d11f      	bne.n	8006c5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006c22:	e01c      	b.n	8006c5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d903      	bls.n	8006c32 <DMA_CheckFifoParam+0xb6>
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2b03      	cmp	r3, #3
 8006c2e:	d003      	beq.n	8006c38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006c30:	e018      	b.n	8006c64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	73fb      	strb	r3, [r7, #15]
      break;
 8006c36:	e015      	b.n	8006c64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00e      	beq.n	8006c62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	73fb      	strb	r3, [r7, #15]
      break;
 8006c48:	e00b      	b.n	8006c62 <DMA_CheckFifoParam+0xe6>
      break;
 8006c4a:	bf00      	nop
 8006c4c:	e00a      	b.n	8006c64 <DMA_CheckFifoParam+0xe8>
      break;
 8006c4e:	bf00      	nop
 8006c50:	e008      	b.n	8006c64 <DMA_CheckFifoParam+0xe8>
      break;
 8006c52:	bf00      	nop
 8006c54:	e006      	b.n	8006c64 <DMA_CheckFifoParam+0xe8>
      break;
 8006c56:	bf00      	nop
 8006c58:	e004      	b.n	8006c64 <DMA_CheckFifoParam+0xe8>
      break;
 8006c5a:	bf00      	nop
 8006c5c:	e002      	b.n	8006c64 <DMA_CheckFifoParam+0xe8>
      break;   
 8006c5e:	bf00      	nop
 8006c60:	e000      	b.n	8006c64 <DMA_CheckFifoParam+0xe8>
      break;
 8006c62:	bf00      	nop
    }
  } 
  
  return status; 
 8006c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3714      	adds	r7, #20
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop

08006c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b089      	sub	sp, #36	@ 0x24
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006c82:	2300      	movs	r3, #0
 8006c84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006c86:	2300      	movs	r3, #0
 8006c88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	61fb      	str	r3, [r7, #28]
 8006c8e:	e159      	b.n	8006f44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006c90:	2201      	movs	r2, #1
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	fa02 f303 	lsl.w	r3, r2, r3
 8006c98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	f040 8148 	bne.w	8006f3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	f003 0303 	and.w	r3, r3, #3
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d005      	beq.n	8006cc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d130      	bne.n	8006d28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	005b      	lsls	r3, r3, #1
 8006cd0:	2203      	movs	r2, #3
 8006cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd6:	43db      	mvns	r3, r3
 8006cd8:	69ba      	ldr	r2, [r7, #24]
 8006cda:	4013      	ands	r3, r2
 8006cdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	68da      	ldr	r2, [r3, #12]
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	005b      	lsls	r3, r3, #1
 8006ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cea:	69ba      	ldr	r2, [r7, #24]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	69ba      	ldr	r2, [r7, #24]
 8006cf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	fa02 f303 	lsl.w	r3, r2, r3
 8006d04:	43db      	mvns	r3, r3
 8006d06:	69ba      	ldr	r2, [r7, #24]
 8006d08:	4013      	ands	r3, r2
 8006d0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	091b      	lsrs	r3, r3, #4
 8006d12:	f003 0201 	and.w	r2, r3, #1
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	fa02 f303 	lsl.w	r3, r2, r3
 8006d1c:	69ba      	ldr	r2, [r7, #24]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	69ba      	ldr	r2, [r7, #24]
 8006d26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	f003 0303 	and.w	r3, r3, #3
 8006d30:	2b03      	cmp	r3, #3
 8006d32:	d017      	beq.n	8006d64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	005b      	lsls	r3, r3, #1
 8006d3e:	2203      	movs	r2, #3
 8006d40:	fa02 f303 	lsl.w	r3, r2, r3
 8006d44:	43db      	mvns	r3, r3
 8006d46:	69ba      	ldr	r2, [r7, #24]
 8006d48:	4013      	ands	r3, r2
 8006d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	689a      	ldr	r2, [r3, #8]
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	005b      	lsls	r3, r3, #1
 8006d54:	fa02 f303 	lsl.w	r3, r2, r3
 8006d58:	69ba      	ldr	r2, [r7, #24]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	69ba      	ldr	r2, [r7, #24]
 8006d62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f003 0303 	and.w	r3, r3, #3
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d123      	bne.n	8006db8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	08da      	lsrs	r2, r3, #3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	3208      	adds	r2, #8
 8006d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	f003 0307 	and.w	r3, r3, #7
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	220f      	movs	r2, #15
 8006d88:	fa02 f303 	lsl.w	r3, r2, r3
 8006d8c:	43db      	mvns	r3, r3
 8006d8e:	69ba      	ldr	r2, [r7, #24]
 8006d90:	4013      	ands	r3, r2
 8006d92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	691a      	ldr	r2, [r3, #16]
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	f003 0307 	and.w	r3, r3, #7
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	fa02 f303 	lsl.w	r3, r2, r3
 8006da4:	69ba      	ldr	r2, [r7, #24]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	08da      	lsrs	r2, r3, #3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	3208      	adds	r2, #8
 8006db2:	69b9      	ldr	r1, [r7, #24]
 8006db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	005b      	lsls	r3, r3, #1
 8006dc2:	2203      	movs	r2, #3
 8006dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc8:	43db      	mvns	r3, r3
 8006dca:	69ba      	ldr	r2, [r7, #24]
 8006dcc:	4013      	ands	r3, r2
 8006dce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	f003 0203 	and.w	r2, r3, #3
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	005b      	lsls	r3, r3, #1
 8006ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8006de0:	69ba      	ldr	r2, [r7, #24]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	69ba      	ldr	r2, [r7, #24]
 8006dea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 80a2 	beq.w	8006f3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	60fb      	str	r3, [r7, #12]
 8006dfe:	4b57      	ldr	r3, [pc, #348]	@ (8006f5c <HAL_GPIO_Init+0x2e8>)
 8006e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e02:	4a56      	ldr	r2, [pc, #344]	@ (8006f5c <HAL_GPIO_Init+0x2e8>)
 8006e04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006e08:	6453      	str	r3, [r2, #68]	@ 0x44
 8006e0a:	4b54      	ldr	r3, [pc, #336]	@ (8006f5c <HAL_GPIO_Init+0x2e8>)
 8006e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e12:	60fb      	str	r3, [r7, #12]
 8006e14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006e16:	4a52      	ldr	r2, [pc, #328]	@ (8006f60 <HAL_GPIO_Init+0x2ec>)
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	089b      	lsrs	r3, r3, #2
 8006e1c:	3302      	adds	r3, #2
 8006e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	f003 0303 	and.w	r3, r3, #3
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	220f      	movs	r2, #15
 8006e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e32:	43db      	mvns	r3, r3
 8006e34:	69ba      	ldr	r2, [r7, #24]
 8006e36:	4013      	ands	r3, r2
 8006e38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a49      	ldr	r2, [pc, #292]	@ (8006f64 <HAL_GPIO_Init+0x2f0>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d019      	beq.n	8006e76 <HAL_GPIO_Init+0x202>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a48      	ldr	r2, [pc, #288]	@ (8006f68 <HAL_GPIO_Init+0x2f4>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d013      	beq.n	8006e72 <HAL_GPIO_Init+0x1fe>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a47      	ldr	r2, [pc, #284]	@ (8006f6c <HAL_GPIO_Init+0x2f8>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d00d      	beq.n	8006e6e <HAL_GPIO_Init+0x1fa>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a46      	ldr	r2, [pc, #280]	@ (8006f70 <HAL_GPIO_Init+0x2fc>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d007      	beq.n	8006e6a <HAL_GPIO_Init+0x1f6>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a45      	ldr	r2, [pc, #276]	@ (8006f74 <HAL_GPIO_Init+0x300>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d101      	bne.n	8006e66 <HAL_GPIO_Init+0x1f2>
 8006e62:	2304      	movs	r3, #4
 8006e64:	e008      	b.n	8006e78 <HAL_GPIO_Init+0x204>
 8006e66:	2307      	movs	r3, #7
 8006e68:	e006      	b.n	8006e78 <HAL_GPIO_Init+0x204>
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e004      	b.n	8006e78 <HAL_GPIO_Init+0x204>
 8006e6e:	2302      	movs	r3, #2
 8006e70:	e002      	b.n	8006e78 <HAL_GPIO_Init+0x204>
 8006e72:	2301      	movs	r3, #1
 8006e74:	e000      	b.n	8006e78 <HAL_GPIO_Init+0x204>
 8006e76:	2300      	movs	r3, #0
 8006e78:	69fa      	ldr	r2, [r7, #28]
 8006e7a:	f002 0203 	and.w	r2, r2, #3
 8006e7e:	0092      	lsls	r2, r2, #2
 8006e80:	4093      	lsls	r3, r2
 8006e82:	69ba      	ldr	r2, [r7, #24]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e88:	4935      	ldr	r1, [pc, #212]	@ (8006f60 <HAL_GPIO_Init+0x2ec>)
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	089b      	lsrs	r3, r3, #2
 8006e8e:	3302      	adds	r3, #2
 8006e90:	69ba      	ldr	r2, [r7, #24]
 8006e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006e96:	4b38      	ldr	r3, [pc, #224]	@ (8006f78 <HAL_GPIO_Init+0x304>)
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	43db      	mvns	r3, r3
 8006ea0:	69ba      	ldr	r2, [r7, #24]
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006eb2:	69ba      	ldr	r2, [r7, #24]
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006eba:	4a2f      	ldr	r2, [pc, #188]	@ (8006f78 <HAL_GPIO_Init+0x304>)
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006ec0:	4b2d      	ldr	r3, [pc, #180]	@ (8006f78 <HAL_GPIO_Init+0x304>)
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	43db      	mvns	r3, r3
 8006eca:	69ba      	ldr	r2, [r7, #24]
 8006ecc:	4013      	ands	r3, r2
 8006ece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d003      	beq.n	8006ee4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006edc:	69ba      	ldr	r2, [r7, #24]
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006ee4:	4a24      	ldr	r2, [pc, #144]	@ (8006f78 <HAL_GPIO_Init+0x304>)
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006eea:	4b23      	ldr	r3, [pc, #140]	@ (8006f78 <HAL_GPIO_Init+0x304>)
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	43db      	mvns	r3, r3
 8006ef4:	69ba      	ldr	r2, [r7, #24]
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d003      	beq.n	8006f0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006f06:	69ba      	ldr	r2, [r7, #24]
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006f0e:	4a1a      	ldr	r2, [pc, #104]	@ (8006f78 <HAL_GPIO_Init+0x304>)
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006f14:	4b18      	ldr	r3, [pc, #96]	@ (8006f78 <HAL_GPIO_Init+0x304>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	43db      	mvns	r3, r3
 8006f1e:	69ba      	ldr	r2, [r7, #24]
 8006f20:	4013      	ands	r3, r2
 8006f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d003      	beq.n	8006f38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006f30:	69ba      	ldr	r2, [r7, #24]
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006f38:	4a0f      	ldr	r2, [pc, #60]	@ (8006f78 <HAL_GPIO_Init+0x304>)
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	3301      	adds	r3, #1
 8006f42:	61fb      	str	r3, [r7, #28]
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	2b0f      	cmp	r3, #15
 8006f48:	f67f aea2 	bls.w	8006c90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006f4c:	bf00      	nop
 8006f4e:	bf00      	nop
 8006f50:	3724      	adds	r7, #36	@ 0x24
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	40023800 	.word	0x40023800
 8006f60:	40013800 	.word	0x40013800
 8006f64:	40020000 	.word	0x40020000
 8006f68:	40020400 	.word	0x40020400
 8006f6c:	40020800 	.word	0x40020800
 8006f70:	40020c00 	.word	0x40020c00
 8006f74:	40021000 	.word	0x40021000
 8006f78:	40013c00 	.word	0x40013c00

08006f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	460b      	mov	r3, r1
 8006f86:	807b      	strh	r3, [r7, #2]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006f8c:	787b      	ldrb	r3, [r7, #1]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d003      	beq.n	8006f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f92:	887a      	ldrh	r2, [r7, #2]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006f98:	e003      	b.n	8006fa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006f9a:	887b      	ldrh	r3, [r7, #2]
 8006f9c:	041a      	lsls	r2, r3, #16
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	619a      	str	r2, [r3, #24]
}
 8006fa2:	bf00      	nop
 8006fa4:	370c      	adds	r7, #12
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
	...

08006fb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d101      	bne.n	8006fc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e267      	b.n	8007492 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d075      	beq.n	80070ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006fce:	4b88      	ldr	r3, [pc, #544]	@ (80071f0 <HAL_RCC_OscConfig+0x240>)
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	f003 030c 	and.w	r3, r3, #12
 8006fd6:	2b04      	cmp	r3, #4
 8006fd8:	d00c      	beq.n	8006ff4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006fda:	4b85      	ldr	r3, [pc, #532]	@ (80071f0 <HAL_RCC_OscConfig+0x240>)
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006fe2:	2b08      	cmp	r3, #8
 8006fe4:	d112      	bne.n	800700c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006fe6:	4b82      	ldr	r3, [pc, #520]	@ (80071f0 <HAL_RCC_OscConfig+0x240>)
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ff2:	d10b      	bne.n	800700c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ff4:	4b7e      	ldr	r3, [pc, #504]	@ (80071f0 <HAL_RCC_OscConfig+0x240>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d05b      	beq.n	80070b8 <HAL_RCC_OscConfig+0x108>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d157      	bne.n	80070b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e242      	b.n	8007492 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007014:	d106      	bne.n	8007024 <HAL_RCC_OscConfig+0x74>
 8007016:	4b76      	ldr	r3, [pc, #472]	@ (80071f0 <HAL_RCC_OscConfig+0x240>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a75      	ldr	r2, [pc, #468]	@ (80071f0 <HAL_RCC_OscConfig+0x240>)
 800701c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007020:	6013      	str	r3, [r2, #0]
 8007022:	e01d      	b.n	8007060 <HAL_RCC_OscConfig+0xb0>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800702c:	d10c      	bne.n	8007048 <HAL_RCC_OscConfig+0x98>
 800702e:	4b70      	ldr	r3, [pc, #448]	@ (80071f0 <HAL_RCC_OscConfig+0x240>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a6f      	ldr	r2, [pc, #444]	@ (80071f0 <HAL_RCC_OscConfig+0x240>)
 8007034:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007038:	6013      	str	r3, [r2, #0]
 800703a:	4b6d      	ldr	r3, [pc, #436]	@ (80071f0 <HAL_RCC_OscConfig+0x240>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a6c      	ldr	r2, [pc, #432]	@ (80071f0 <HAL_RCC_OscConfig+0x240>)
 8007040:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007044:	6013      	str	r3, [r2, #0]
 8007046:	e00b      	b.n	8007060 <HAL_RCC_OscConfig+0xb0>
 8007048:	4b69      	ldr	r3, [pc, #420]	@ (80071f0 <HAL_RCC_OscConfig+0x240>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a68      	ldr	r2, [pc, #416]	@ (80071f0 <HAL_RCC_OscConfig+0x240>)
 800704e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007052:	6013      	str	r3, [r2, #0]
 8007054:	4b66      	ldr	r3, [pc, #408]	@ (80071f0 <HAL_RCC_OscConfig+0x240>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a65      	ldr	r2, [pc, #404]	@ (80071f0 <HAL_RCC_OscConfig+0x240>)
 800705a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800705e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d013      	beq.n	8007090 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007068:	f7fe fcc6 	bl	80059f8 <HAL_GetTick>
 800706c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800706e:	e008      	b.n	8007082 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007070:	f7fe fcc2 	bl	80059f8 <HAL_GetTick>
 8007074:	4602      	mov	r2, r0
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	2b64      	cmp	r3, #100	@ 0x64
 800707c:	d901      	bls.n	8007082 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e207      	b.n	8007492 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007082:	4b5b      	ldr	r3, [pc, #364]	@ (80071f0 <HAL_RCC_OscConfig+0x240>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800708a:	2b00      	cmp	r3, #0
 800708c:	d0f0      	beq.n	8007070 <HAL_RCC_OscConfig+0xc0>
 800708e:	e014      	b.n	80070ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007090:	f7fe fcb2 	bl	80059f8 <HAL_GetTick>
 8007094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007096:	e008      	b.n	80070aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007098:	f7fe fcae 	bl	80059f8 <HAL_GetTick>
 800709c:	4602      	mov	r2, r0
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	2b64      	cmp	r3, #100	@ 0x64
 80070a4:	d901      	bls.n	80070aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	e1f3      	b.n	8007492 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070aa:	4b51      	ldr	r3, [pc, #324]	@ (80071f0 <HAL_RCC_OscConfig+0x240>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1f0      	bne.n	8007098 <HAL_RCC_OscConfig+0xe8>
 80070b6:	e000      	b.n	80070ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0302 	and.w	r3, r3, #2
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d063      	beq.n	800718e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80070c6:	4b4a      	ldr	r3, [pc, #296]	@ (80071f0 <HAL_RCC_OscConfig+0x240>)
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f003 030c 	and.w	r3, r3, #12
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00b      	beq.n	80070ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80070d2:	4b47      	ldr	r3, [pc, #284]	@ (80071f0 <HAL_RCC_OscConfig+0x240>)
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80070da:	2b08      	cmp	r3, #8
 80070dc:	d11c      	bne.n	8007118 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80070de:	4b44      	ldr	r3, [pc, #272]	@ (80071f0 <HAL_RCC_OscConfig+0x240>)
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d116      	bne.n	8007118 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070ea:	4b41      	ldr	r3, [pc, #260]	@ (80071f0 <HAL_RCC_OscConfig+0x240>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 0302 	and.w	r3, r3, #2
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d005      	beq.n	8007102 <HAL_RCC_OscConfig+0x152>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d001      	beq.n	8007102 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e1c7      	b.n	8007492 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007102:	4b3b      	ldr	r3, [pc, #236]	@ (80071f0 <HAL_RCC_OscConfig+0x240>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	00db      	lsls	r3, r3, #3
 8007110:	4937      	ldr	r1, [pc, #220]	@ (80071f0 <HAL_RCC_OscConfig+0x240>)
 8007112:	4313      	orrs	r3, r2
 8007114:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007116:	e03a      	b.n	800718e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d020      	beq.n	8007162 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007120:	4b34      	ldr	r3, [pc, #208]	@ (80071f4 <HAL_RCC_OscConfig+0x244>)
 8007122:	2201      	movs	r2, #1
 8007124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007126:	f7fe fc67 	bl	80059f8 <HAL_GetTick>
 800712a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800712c:	e008      	b.n	8007140 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800712e:	f7fe fc63 	bl	80059f8 <HAL_GetTick>
 8007132:	4602      	mov	r2, r0
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	2b02      	cmp	r3, #2
 800713a:	d901      	bls.n	8007140 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800713c:	2303      	movs	r3, #3
 800713e:	e1a8      	b.n	8007492 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007140:	4b2b      	ldr	r3, [pc, #172]	@ (80071f0 <HAL_RCC_OscConfig+0x240>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 0302 	and.w	r3, r3, #2
 8007148:	2b00      	cmp	r3, #0
 800714a:	d0f0      	beq.n	800712e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800714c:	4b28      	ldr	r3, [pc, #160]	@ (80071f0 <HAL_RCC_OscConfig+0x240>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	00db      	lsls	r3, r3, #3
 800715a:	4925      	ldr	r1, [pc, #148]	@ (80071f0 <HAL_RCC_OscConfig+0x240>)
 800715c:	4313      	orrs	r3, r2
 800715e:	600b      	str	r3, [r1, #0]
 8007160:	e015      	b.n	800718e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007162:	4b24      	ldr	r3, [pc, #144]	@ (80071f4 <HAL_RCC_OscConfig+0x244>)
 8007164:	2200      	movs	r2, #0
 8007166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007168:	f7fe fc46 	bl	80059f8 <HAL_GetTick>
 800716c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800716e:	e008      	b.n	8007182 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007170:	f7fe fc42 	bl	80059f8 <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	2b02      	cmp	r3, #2
 800717c:	d901      	bls.n	8007182 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e187      	b.n	8007492 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007182:	4b1b      	ldr	r3, [pc, #108]	@ (80071f0 <HAL_RCC_OscConfig+0x240>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0302 	and.w	r3, r3, #2
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1f0      	bne.n	8007170 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0308 	and.w	r3, r3, #8
 8007196:	2b00      	cmp	r3, #0
 8007198:	d036      	beq.n	8007208 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	695b      	ldr	r3, [r3, #20]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d016      	beq.n	80071d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071a2:	4b15      	ldr	r3, [pc, #84]	@ (80071f8 <HAL_RCC_OscConfig+0x248>)
 80071a4:	2201      	movs	r2, #1
 80071a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071a8:	f7fe fc26 	bl	80059f8 <HAL_GetTick>
 80071ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071ae:	e008      	b.n	80071c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071b0:	f7fe fc22 	bl	80059f8 <HAL_GetTick>
 80071b4:	4602      	mov	r2, r0
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d901      	bls.n	80071c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e167      	b.n	8007492 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071c2:	4b0b      	ldr	r3, [pc, #44]	@ (80071f0 <HAL_RCC_OscConfig+0x240>)
 80071c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071c6:	f003 0302 	and.w	r3, r3, #2
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d0f0      	beq.n	80071b0 <HAL_RCC_OscConfig+0x200>
 80071ce:	e01b      	b.n	8007208 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071d0:	4b09      	ldr	r3, [pc, #36]	@ (80071f8 <HAL_RCC_OscConfig+0x248>)
 80071d2:	2200      	movs	r2, #0
 80071d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071d6:	f7fe fc0f 	bl	80059f8 <HAL_GetTick>
 80071da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071dc:	e00e      	b.n	80071fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071de:	f7fe fc0b 	bl	80059f8 <HAL_GetTick>
 80071e2:	4602      	mov	r2, r0
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	1ad3      	subs	r3, r2, r3
 80071e8:	2b02      	cmp	r3, #2
 80071ea:	d907      	bls.n	80071fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80071ec:	2303      	movs	r3, #3
 80071ee:	e150      	b.n	8007492 <HAL_RCC_OscConfig+0x4e2>
 80071f0:	40023800 	.word	0x40023800
 80071f4:	42470000 	.word	0x42470000
 80071f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071fc:	4b88      	ldr	r3, [pc, #544]	@ (8007420 <HAL_RCC_OscConfig+0x470>)
 80071fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007200:	f003 0302 	and.w	r3, r3, #2
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1ea      	bne.n	80071de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0304 	and.w	r3, r3, #4
 8007210:	2b00      	cmp	r3, #0
 8007212:	f000 8097 	beq.w	8007344 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007216:	2300      	movs	r3, #0
 8007218:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800721a:	4b81      	ldr	r3, [pc, #516]	@ (8007420 <HAL_RCC_OscConfig+0x470>)
 800721c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800721e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007222:	2b00      	cmp	r3, #0
 8007224:	d10f      	bne.n	8007246 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007226:	2300      	movs	r3, #0
 8007228:	60bb      	str	r3, [r7, #8]
 800722a:	4b7d      	ldr	r3, [pc, #500]	@ (8007420 <HAL_RCC_OscConfig+0x470>)
 800722c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800722e:	4a7c      	ldr	r2, [pc, #496]	@ (8007420 <HAL_RCC_OscConfig+0x470>)
 8007230:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007234:	6413      	str	r3, [r2, #64]	@ 0x40
 8007236:	4b7a      	ldr	r3, [pc, #488]	@ (8007420 <HAL_RCC_OscConfig+0x470>)
 8007238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800723a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800723e:	60bb      	str	r3, [r7, #8]
 8007240:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007242:	2301      	movs	r3, #1
 8007244:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007246:	4b77      	ldr	r3, [pc, #476]	@ (8007424 <HAL_RCC_OscConfig+0x474>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800724e:	2b00      	cmp	r3, #0
 8007250:	d118      	bne.n	8007284 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007252:	4b74      	ldr	r3, [pc, #464]	@ (8007424 <HAL_RCC_OscConfig+0x474>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a73      	ldr	r2, [pc, #460]	@ (8007424 <HAL_RCC_OscConfig+0x474>)
 8007258:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800725c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800725e:	f7fe fbcb 	bl	80059f8 <HAL_GetTick>
 8007262:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007264:	e008      	b.n	8007278 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007266:	f7fe fbc7 	bl	80059f8 <HAL_GetTick>
 800726a:	4602      	mov	r2, r0
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	2b02      	cmp	r3, #2
 8007272:	d901      	bls.n	8007278 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007274:	2303      	movs	r3, #3
 8007276:	e10c      	b.n	8007492 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007278:	4b6a      	ldr	r3, [pc, #424]	@ (8007424 <HAL_RCC_OscConfig+0x474>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007280:	2b00      	cmp	r3, #0
 8007282:	d0f0      	beq.n	8007266 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d106      	bne.n	800729a <HAL_RCC_OscConfig+0x2ea>
 800728c:	4b64      	ldr	r3, [pc, #400]	@ (8007420 <HAL_RCC_OscConfig+0x470>)
 800728e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007290:	4a63      	ldr	r2, [pc, #396]	@ (8007420 <HAL_RCC_OscConfig+0x470>)
 8007292:	f043 0301 	orr.w	r3, r3, #1
 8007296:	6713      	str	r3, [r2, #112]	@ 0x70
 8007298:	e01c      	b.n	80072d4 <HAL_RCC_OscConfig+0x324>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	2b05      	cmp	r3, #5
 80072a0:	d10c      	bne.n	80072bc <HAL_RCC_OscConfig+0x30c>
 80072a2:	4b5f      	ldr	r3, [pc, #380]	@ (8007420 <HAL_RCC_OscConfig+0x470>)
 80072a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072a6:	4a5e      	ldr	r2, [pc, #376]	@ (8007420 <HAL_RCC_OscConfig+0x470>)
 80072a8:	f043 0304 	orr.w	r3, r3, #4
 80072ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80072ae:	4b5c      	ldr	r3, [pc, #368]	@ (8007420 <HAL_RCC_OscConfig+0x470>)
 80072b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072b2:	4a5b      	ldr	r2, [pc, #364]	@ (8007420 <HAL_RCC_OscConfig+0x470>)
 80072b4:	f043 0301 	orr.w	r3, r3, #1
 80072b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80072ba:	e00b      	b.n	80072d4 <HAL_RCC_OscConfig+0x324>
 80072bc:	4b58      	ldr	r3, [pc, #352]	@ (8007420 <HAL_RCC_OscConfig+0x470>)
 80072be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072c0:	4a57      	ldr	r2, [pc, #348]	@ (8007420 <HAL_RCC_OscConfig+0x470>)
 80072c2:	f023 0301 	bic.w	r3, r3, #1
 80072c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80072c8:	4b55      	ldr	r3, [pc, #340]	@ (8007420 <HAL_RCC_OscConfig+0x470>)
 80072ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072cc:	4a54      	ldr	r2, [pc, #336]	@ (8007420 <HAL_RCC_OscConfig+0x470>)
 80072ce:	f023 0304 	bic.w	r3, r3, #4
 80072d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d015      	beq.n	8007308 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072dc:	f7fe fb8c 	bl	80059f8 <HAL_GetTick>
 80072e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072e2:	e00a      	b.n	80072fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072e4:	f7fe fb88 	bl	80059f8 <HAL_GetTick>
 80072e8:	4602      	mov	r2, r0
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d901      	bls.n	80072fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	e0cb      	b.n	8007492 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072fa:	4b49      	ldr	r3, [pc, #292]	@ (8007420 <HAL_RCC_OscConfig+0x470>)
 80072fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072fe:	f003 0302 	and.w	r3, r3, #2
 8007302:	2b00      	cmp	r3, #0
 8007304:	d0ee      	beq.n	80072e4 <HAL_RCC_OscConfig+0x334>
 8007306:	e014      	b.n	8007332 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007308:	f7fe fb76 	bl	80059f8 <HAL_GetTick>
 800730c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800730e:	e00a      	b.n	8007326 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007310:	f7fe fb72 	bl	80059f8 <HAL_GetTick>
 8007314:	4602      	mov	r2, r0
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800731e:	4293      	cmp	r3, r2
 8007320:	d901      	bls.n	8007326 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e0b5      	b.n	8007492 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007326:	4b3e      	ldr	r3, [pc, #248]	@ (8007420 <HAL_RCC_OscConfig+0x470>)
 8007328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800732a:	f003 0302 	and.w	r3, r3, #2
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1ee      	bne.n	8007310 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007332:	7dfb      	ldrb	r3, [r7, #23]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d105      	bne.n	8007344 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007338:	4b39      	ldr	r3, [pc, #228]	@ (8007420 <HAL_RCC_OscConfig+0x470>)
 800733a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800733c:	4a38      	ldr	r2, [pc, #224]	@ (8007420 <HAL_RCC_OscConfig+0x470>)
 800733e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007342:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	699b      	ldr	r3, [r3, #24]
 8007348:	2b00      	cmp	r3, #0
 800734a:	f000 80a1 	beq.w	8007490 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800734e:	4b34      	ldr	r3, [pc, #208]	@ (8007420 <HAL_RCC_OscConfig+0x470>)
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f003 030c 	and.w	r3, r3, #12
 8007356:	2b08      	cmp	r3, #8
 8007358:	d05c      	beq.n	8007414 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	2b02      	cmp	r3, #2
 8007360:	d141      	bne.n	80073e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007362:	4b31      	ldr	r3, [pc, #196]	@ (8007428 <HAL_RCC_OscConfig+0x478>)
 8007364:	2200      	movs	r2, #0
 8007366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007368:	f7fe fb46 	bl	80059f8 <HAL_GetTick>
 800736c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800736e:	e008      	b.n	8007382 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007370:	f7fe fb42 	bl	80059f8 <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	2b02      	cmp	r3, #2
 800737c:	d901      	bls.n	8007382 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e087      	b.n	8007492 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007382:	4b27      	ldr	r3, [pc, #156]	@ (8007420 <HAL_RCC_OscConfig+0x470>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1f0      	bne.n	8007370 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	69da      	ldr	r2, [r3, #28]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	431a      	orrs	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800739c:	019b      	lsls	r3, r3, #6
 800739e:	431a      	orrs	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a4:	085b      	lsrs	r3, r3, #1
 80073a6:	3b01      	subs	r3, #1
 80073a8:	041b      	lsls	r3, r3, #16
 80073aa:	431a      	orrs	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b0:	061b      	lsls	r3, r3, #24
 80073b2:	491b      	ldr	r1, [pc, #108]	@ (8007420 <HAL_RCC_OscConfig+0x470>)
 80073b4:	4313      	orrs	r3, r2
 80073b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073b8:	4b1b      	ldr	r3, [pc, #108]	@ (8007428 <HAL_RCC_OscConfig+0x478>)
 80073ba:	2201      	movs	r2, #1
 80073bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073be:	f7fe fb1b 	bl	80059f8 <HAL_GetTick>
 80073c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073c4:	e008      	b.n	80073d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073c6:	f7fe fb17 	bl	80059f8 <HAL_GetTick>
 80073ca:	4602      	mov	r2, r0
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d901      	bls.n	80073d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e05c      	b.n	8007492 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073d8:	4b11      	ldr	r3, [pc, #68]	@ (8007420 <HAL_RCC_OscConfig+0x470>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d0f0      	beq.n	80073c6 <HAL_RCC_OscConfig+0x416>
 80073e4:	e054      	b.n	8007490 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073e6:	4b10      	ldr	r3, [pc, #64]	@ (8007428 <HAL_RCC_OscConfig+0x478>)
 80073e8:	2200      	movs	r2, #0
 80073ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073ec:	f7fe fb04 	bl	80059f8 <HAL_GetTick>
 80073f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073f2:	e008      	b.n	8007406 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073f4:	f7fe fb00 	bl	80059f8 <HAL_GetTick>
 80073f8:	4602      	mov	r2, r0
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d901      	bls.n	8007406 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007402:	2303      	movs	r3, #3
 8007404:	e045      	b.n	8007492 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007406:	4b06      	ldr	r3, [pc, #24]	@ (8007420 <HAL_RCC_OscConfig+0x470>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1f0      	bne.n	80073f4 <HAL_RCC_OscConfig+0x444>
 8007412:	e03d      	b.n	8007490 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d107      	bne.n	800742c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	e038      	b.n	8007492 <HAL_RCC_OscConfig+0x4e2>
 8007420:	40023800 	.word	0x40023800
 8007424:	40007000 	.word	0x40007000
 8007428:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800742c:	4b1b      	ldr	r3, [pc, #108]	@ (800749c <HAL_RCC_OscConfig+0x4ec>)
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d028      	beq.n	800748c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007444:	429a      	cmp	r2, r3
 8007446:	d121      	bne.n	800748c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007452:	429a      	cmp	r2, r3
 8007454:	d11a      	bne.n	800748c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800745c:	4013      	ands	r3, r2
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007462:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007464:	4293      	cmp	r3, r2
 8007466:	d111      	bne.n	800748c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007472:	085b      	lsrs	r3, r3, #1
 8007474:	3b01      	subs	r3, #1
 8007476:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007478:	429a      	cmp	r2, r3
 800747a:	d107      	bne.n	800748c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007486:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007488:	429a      	cmp	r2, r3
 800748a:	d001      	beq.n	8007490 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e000      	b.n	8007492 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3718      	adds	r7, #24
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	40023800 	.word	0x40023800

080074a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d101      	bne.n	80074b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e0cc      	b.n	800764e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80074b4:	4b68      	ldr	r3, [pc, #416]	@ (8007658 <HAL_RCC_ClockConfig+0x1b8>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 0307 	and.w	r3, r3, #7
 80074bc:	683a      	ldr	r2, [r7, #0]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d90c      	bls.n	80074dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074c2:	4b65      	ldr	r3, [pc, #404]	@ (8007658 <HAL_RCC_ClockConfig+0x1b8>)
 80074c4:	683a      	ldr	r2, [r7, #0]
 80074c6:	b2d2      	uxtb	r2, r2
 80074c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074ca:	4b63      	ldr	r3, [pc, #396]	@ (8007658 <HAL_RCC_ClockConfig+0x1b8>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 0307 	and.w	r3, r3, #7
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d001      	beq.n	80074dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e0b8      	b.n	800764e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0302 	and.w	r3, r3, #2
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d020      	beq.n	800752a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0304 	and.w	r3, r3, #4
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d005      	beq.n	8007500 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80074f4:	4b59      	ldr	r3, [pc, #356]	@ (800765c <HAL_RCC_ClockConfig+0x1bc>)
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	4a58      	ldr	r2, [pc, #352]	@ (800765c <HAL_RCC_ClockConfig+0x1bc>)
 80074fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80074fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 0308 	and.w	r3, r3, #8
 8007508:	2b00      	cmp	r3, #0
 800750a:	d005      	beq.n	8007518 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800750c:	4b53      	ldr	r3, [pc, #332]	@ (800765c <HAL_RCC_ClockConfig+0x1bc>)
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	4a52      	ldr	r2, [pc, #328]	@ (800765c <HAL_RCC_ClockConfig+0x1bc>)
 8007512:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007516:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007518:	4b50      	ldr	r3, [pc, #320]	@ (800765c <HAL_RCC_ClockConfig+0x1bc>)
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	494d      	ldr	r1, [pc, #308]	@ (800765c <HAL_RCC_ClockConfig+0x1bc>)
 8007526:	4313      	orrs	r3, r2
 8007528:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0301 	and.w	r3, r3, #1
 8007532:	2b00      	cmp	r3, #0
 8007534:	d044      	beq.n	80075c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	2b01      	cmp	r3, #1
 800753c:	d107      	bne.n	800754e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800753e:	4b47      	ldr	r3, [pc, #284]	@ (800765c <HAL_RCC_ClockConfig+0x1bc>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007546:	2b00      	cmp	r3, #0
 8007548:	d119      	bne.n	800757e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e07f      	b.n	800764e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	2b02      	cmp	r3, #2
 8007554:	d003      	beq.n	800755e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800755a:	2b03      	cmp	r3, #3
 800755c:	d107      	bne.n	800756e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800755e:	4b3f      	ldr	r3, [pc, #252]	@ (800765c <HAL_RCC_ClockConfig+0x1bc>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d109      	bne.n	800757e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	e06f      	b.n	800764e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800756e:	4b3b      	ldr	r3, [pc, #236]	@ (800765c <HAL_RCC_ClockConfig+0x1bc>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0302 	and.w	r3, r3, #2
 8007576:	2b00      	cmp	r3, #0
 8007578:	d101      	bne.n	800757e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e067      	b.n	800764e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800757e:	4b37      	ldr	r3, [pc, #220]	@ (800765c <HAL_RCC_ClockConfig+0x1bc>)
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f023 0203 	bic.w	r2, r3, #3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	4934      	ldr	r1, [pc, #208]	@ (800765c <HAL_RCC_ClockConfig+0x1bc>)
 800758c:	4313      	orrs	r3, r2
 800758e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007590:	f7fe fa32 	bl	80059f8 <HAL_GetTick>
 8007594:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007596:	e00a      	b.n	80075ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007598:	f7fe fa2e 	bl	80059f8 <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d901      	bls.n	80075ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80075aa:	2303      	movs	r3, #3
 80075ac:	e04f      	b.n	800764e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075ae:	4b2b      	ldr	r3, [pc, #172]	@ (800765c <HAL_RCC_ClockConfig+0x1bc>)
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	f003 020c 	and.w	r2, r3, #12
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	429a      	cmp	r2, r3
 80075be:	d1eb      	bne.n	8007598 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80075c0:	4b25      	ldr	r3, [pc, #148]	@ (8007658 <HAL_RCC_ClockConfig+0x1b8>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0307 	and.w	r3, r3, #7
 80075c8:	683a      	ldr	r2, [r7, #0]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d20c      	bcs.n	80075e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075ce:	4b22      	ldr	r3, [pc, #136]	@ (8007658 <HAL_RCC_ClockConfig+0x1b8>)
 80075d0:	683a      	ldr	r2, [r7, #0]
 80075d2:	b2d2      	uxtb	r2, r2
 80075d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075d6:	4b20      	ldr	r3, [pc, #128]	@ (8007658 <HAL_RCC_ClockConfig+0x1b8>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f003 0307 	and.w	r3, r3, #7
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d001      	beq.n	80075e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e032      	b.n	800764e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0304 	and.w	r3, r3, #4
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d008      	beq.n	8007606 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075f4:	4b19      	ldr	r3, [pc, #100]	@ (800765c <HAL_RCC_ClockConfig+0x1bc>)
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	4916      	ldr	r1, [pc, #88]	@ (800765c <HAL_RCC_ClockConfig+0x1bc>)
 8007602:	4313      	orrs	r3, r2
 8007604:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 0308 	and.w	r3, r3, #8
 800760e:	2b00      	cmp	r3, #0
 8007610:	d009      	beq.n	8007626 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007612:	4b12      	ldr	r3, [pc, #72]	@ (800765c <HAL_RCC_ClockConfig+0x1bc>)
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	00db      	lsls	r3, r3, #3
 8007620:	490e      	ldr	r1, [pc, #56]	@ (800765c <HAL_RCC_ClockConfig+0x1bc>)
 8007622:	4313      	orrs	r3, r2
 8007624:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007626:	f000 f821 	bl	800766c <HAL_RCC_GetSysClockFreq>
 800762a:	4602      	mov	r2, r0
 800762c:	4b0b      	ldr	r3, [pc, #44]	@ (800765c <HAL_RCC_ClockConfig+0x1bc>)
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	091b      	lsrs	r3, r3, #4
 8007632:	f003 030f 	and.w	r3, r3, #15
 8007636:	490a      	ldr	r1, [pc, #40]	@ (8007660 <HAL_RCC_ClockConfig+0x1c0>)
 8007638:	5ccb      	ldrb	r3, [r1, r3]
 800763a:	fa22 f303 	lsr.w	r3, r2, r3
 800763e:	4a09      	ldr	r2, [pc, #36]	@ (8007664 <HAL_RCC_ClockConfig+0x1c4>)
 8007640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007642:	4b09      	ldr	r3, [pc, #36]	@ (8007668 <HAL_RCC_ClockConfig+0x1c8>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4618      	mov	r0, r3
 8007648:	f7fd ffa2 	bl	8005590 <HAL_InitTick>

  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	40023c00 	.word	0x40023c00
 800765c:	40023800 	.word	0x40023800
 8007660:	0801fd60 	.word	0x0801fd60
 8007664:	2000000c 	.word	0x2000000c
 8007668:	20000010 	.word	0x20000010

0800766c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800766c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007670:	b094      	sub	sp, #80	@ 0x50
 8007672:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007674:	2300      	movs	r3, #0
 8007676:	647b      	str	r3, [r7, #68]	@ 0x44
 8007678:	2300      	movs	r3, #0
 800767a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800767c:	2300      	movs	r3, #0
 800767e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007680:	2300      	movs	r3, #0
 8007682:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007684:	4b79      	ldr	r3, [pc, #484]	@ (800786c <HAL_RCC_GetSysClockFreq+0x200>)
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	f003 030c 	and.w	r3, r3, #12
 800768c:	2b08      	cmp	r3, #8
 800768e:	d00d      	beq.n	80076ac <HAL_RCC_GetSysClockFreq+0x40>
 8007690:	2b08      	cmp	r3, #8
 8007692:	f200 80e1 	bhi.w	8007858 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007696:	2b00      	cmp	r3, #0
 8007698:	d002      	beq.n	80076a0 <HAL_RCC_GetSysClockFreq+0x34>
 800769a:	2b04      	cmp	r3, #4
 800769c:	d003      	beq.n	80076a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800769e:	e0db      	b.n	8007858 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80076a0:	4b73      	ldr	r3, [pc, #460]	@ (8007870 <HAL_RCC_GetSysClockFreq+0x204>)
 80076a2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80076a4:	e0db      	b.n	800785e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80076a6:	4b73      	ldr	r3, [pc, #460]	@ (8007874 <HAL_RCC_GetSysClockFreq+0x208>)
 80076a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80076aa:	e0d8      	b.n	800785e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80076ac:	4b6f      	ldr	r3, [pc, #444]	@ (800786c <HAL_RCC_GetSysClockFreq+0x200>)
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076b4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80076b6:	4b6d      	ldr	r3, [pc, #436]	@ (800786c <HAL_RCC_GetSysClockFreq+0x200>)
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d063      	beq.n	800778a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076c2:	4b6a      	ldr	r3, [pc, #424]	@ (800786c <HAL_RCC_GetSysClockFreq+0x200>)
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	099b      	lsrs	r3, r3, #6
 80076c8:	2200      	movs	r2, #0
 80076ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80076cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80076ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80076d6:	2300      	movs	r3, #0
 80076d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80076da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80076de:	4622      	mov	r2, r4
 80076e0:	462b      	mov	r3, r5
 80076e2:	f04f 0000 	mov.w	r0, #0
 80076e6:	f04f 0100 	mov.w	r1, #0
 80076ea:	0159      	lsls	r1, r3, #5
 80076ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80076f0:	0150      	lsls	r0, r2, #5
 80076f2:	4602      	mov	r2, r0
 80076f4:	460b      	mov	r3, r1
 80076f6:	4621      	mov	r1, r4
 80076f8:	1a51      	subs	r1, r2, r1
 80076fa:	6139      	str	r1, [r7, #16]
 80076fc:	4629      	mov	r1, r5
 80076fe:	eb63 0301 	sbc.w	r3, r3, r1
 8007702:	617b      	str	r3, [r7, #20]
 8007704:	f04f 0200 	mov.w	r2, #0
 8007708:	f04f 0300 	mov.w	r3, #0
 800770c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007710:	4659      	mov	r1, fp
 8007712:	018b      	lsls	r3, r1, #6
 8007714:	4651      	mov	r1, sl
 8007716:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800771a:	4651      	mov	r1, sl
 800771c:	018a      	lsls	r2, r1, #6
 800771e:	4651      	mov	r1, sl
 8007720:	ebb2 0801 	subs.w	r8, r2, r1
 8007724:	4659      	mov	r1, fp
 8007726:	eb63 0901 	sbc.w	r9, r3, r1
 800772a:	f04f 0200 	mov.w	r2, #0
 800772e:	f04f 0300 	mov.w	r3, #0
 8007732:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007736:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800773a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800773e:	4690      	mov	r8, r2
 8007740:	4699      	mov	r9, r3
 8007742:	4623      	mov	r3, r4
 8007744:	eb18 0303 	adds.w	r3, r8, r3
 8007748:	60bb      	str	r3, [r7, #8]
 800774a:	462b      	mov	r3, r5
 800774c:	eb49 0303 	adc.w	r3, r9, r3
 8007750:	60fb      	str	r3, [r7, #12]
 8007752:	f04f 0200 	mov.w	r2, #0
 8007756:	f04f 0300 	mov.w	r3, #0
 800775a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800775e:	4629      	mov	r1, r5
 8007760:	024b      	lsls	r3, r1, #9
 8007762:	4621      	mov	r1, r4
 8007764:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007768:	4621      	mov	r1, r4
 800776a:	024a      	lsls	r2, r1, #9
 800776c:	4610      	mov	r0, r2
 800776e:	4619      	mov	r1, r3
 8007770:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007772:	2200      	movs	r2, #0
 8007774:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007776:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007778:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800777c:	f7f9 faec 	bl	8000d58 <__aeabi_uldivmod>
 8007780:	4602      	mov	r2, r0
 8007782:	460b      	mov	r3, r1
 8007784:	4613      	mov	r3, r2
 8007786:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007788:	e058      	b.n	800783c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800778a:	4b38      	ldr	r3, [pc, #224]	@ (800786c <HAL_RCC_GetSysClockFreq+0x200>)
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	099b      	lsrs	r3, r3, #6
 8007790:	2200      	movs	r2, #0
 8007792:	4618      	mov	r0, r3
 8007794:	4611      	mov	r1, r2
 8007796:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800779a:	623b      	str	r3, [r7, #32]
 800779c:	2300      	movs	r3, #0
 800779e:	627b      	str	r3, [r7, #36]	@ 0x24
 80077a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80077a4:	4642      	mov	r2, r8
 80077a6:	464b      	mov	r3, r9
 80077a8:	f04f 0000 	mov.w	r0, #0
 80077ac:	f04f 0100 	mov.w	r1, #0
 80077b0:	0159      	lsls	r1, r3, #5
 80077b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80077b6:	0150      	lsls	r0, r2, #5
 80077b8:	4602      	mov	r2, r0
 80077ba:	460b      	mov	r3, r1
 80077bc:	4641      	mov	r1, r8
 80077be:	ebb2 0a01 	subs.w	sl, r2, r1
 80077c2:	4649      	mov	r1, r9
 80077c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80077c8:	f04f 0200 	mov.w	r2, #0
 80077cc:	f04f 0300 	mov.w	r3, #0
 80077d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80077d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80077d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80077dc:	ebb2 040a 	subs.w	r4, r2, sl
 80077e0:	eb63 050b 	sbc.w	r5, r3, fp
 80077e4:	f04f 0200 	mov.w	r2, #0
 80077e8:	f04f 0300 	mov.w	r3, #0
 80077ec:	00eb      	lsls	r3, r5, #3
 80077ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077f2:	00e2      	lsls	r2, r4, #3
 80077f4:	4614      	mov	r4, r2
 80077f6:	461d      	mov	r5, r3
 80077f8:	4643      	mov	r3, r8
 80077fa:	18e3      	adds	r3, r4, r3
 80077fc:	603b      	str	r3, [r7, #0]
 80077fe:	464b      	mov	r3, r9
 8007800:	eb45 0303 	adc.w	r3, r5, r3
 8007804:	607b      	str	r3, [r7, #4]
 8007806:	f04f 0200 	mov.w	r2, #0
 800780a:	f04f 0300 	mov.w	r3, #0
 800780e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007812:	4629      	mov	r1, r5
 8007814:	028b      	lsls	r3, r1, #10
 8007816:	4621      	mov	r1, r4
 8007818:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800781c:	4621      	mov	r1, r4
 800781e:	028a      	lsls	r2, r1, #10
 8007820:	4610      	mov	r0, r2
 8007822:	4619      	mov	r1, r3
 8007824:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007826:	2200      	movs	r2, #0
 8007828:	61bb      	str	r3, [r7, #24]
 800782a:	61fa      	str	r2, [r7, #28]
 800782c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007830:	f7f9 fa92 	bl	8000d58 <__aeabi_uldivmod>
 8007834:	4602      	mov	r2, r0
 8007836:	460b      	mov	r3, r1
 8007838:	4613      	mov	r3, r2
 800783a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800783c:	4b0b      	ldr	r3, [pc, #44]	@ (800786c <HAL_RCC_GetSysClockFreq+0x200>)
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	0c1b      	lsrs	r3, r3, #16
 8007842:	f003 0303 	and.w	r3, r3, #3
 8007846:	3301      	adds	r3, #1
 8007848:	005b      	lsls	r3, r3, #1
 800784a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800784c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800784e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007850:	fbb2 f3f3 	udiv	r3, r2, r3
 8007854:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007856:	e002      	b.n	800785e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007858:	4b05      	ldr	r3, [pc, #20]	@ (8007870 <HAL_RCC_GetSysClockFreq+0x204>)
 800785a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800785c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800785e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007860:	4618      	mov	r0, r3
 8007862:	3750      	adds	r7, #80	@ 0x50
 8007864:	46bd      	mov	sp, r7
 8007866:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800786a:	bf00      	nop
 800786c:	40023800 	.word	0x40023800
 8007870:	00f42400 	.word	0x00f42400
 8007874:	007a1200 	.word	0x007a1200

08007878 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007878:	b480      	push	{r7}
 800787a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800787c:	4b03      	ldr	r3, [pc, #12]	@ (800788c <HAL_RCC_GetHCLKFreq+0x14>)
 800787e:	681b      	ldr	r3, [r3, #0]
}
 8007880:	4618      	mov	r0, r3
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	2000000c 	.word	0x2000000c

08007890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007894:	f7ff fff0 	bl	8007878 <HAL_RCC_GetHCLKFreq>
 8007898:	4602      	mov	r2, r0
 800789a:	4b05      	ldr	r3, [pc, #20]	@ (80078b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	0a9b      	lsrs	r3, r3, #10
 80078a0:	f003 0307 	and.w	r3, r3, #7
 80078a4:	4903      	ldr	r1, [pc, #12]	@ (80078b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80078a6:	5ccb      	ldrb	r3, [r1, r3]
 80078a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	40023800 	.word	0x40023800
 80078b4:	0801fd70 	.word	0x0801fd70

080078b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80078bc:	f7ff ffdc 	bl	8007878 <HAL_RCC_GetHCLKFreq>
 80078c0:	4602      	mov	r2, r0
 80078c2:	4b05      	ldr	r3, [pc, #20]	@ (80078d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	0b5b      	lsrs	r3, r3, #13
 80078c8:	f003 0307 	and.w	r3, r3, #7
 80078cc:	4903      	ldr	r1, [pc, #12]	@ (80078dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80078ce:	5ccb      	ldrb	r3, [r1, r3]
 80078d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	40023800 	.word	0x40023800
 80078dc:	0801fd70 	.word	0x0801fd70

080078e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	220f      	movs	r2, #15
 80078ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80078f0:	4b12      	ldr	r3, [pc, #72]	@ (800793c <HAL_RCC_GetClockConfig+0x5c>)
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	f003 0203 	and.w	r2, r3, #3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80078fc:	4b0f      	ldr	r3, [pc, #60]	@ (800793c <HAL_RCC_GetClockConfig+0x5c>)
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007908:	4b0c      	ldr	r3, [pc, #48]	@ (800793c <HAL_RCC_GetClockConfig+0x5c>)
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007914:	4b09      	ldr	r3, [pc, #36]	@ (800793c <HAL_RCC_GetClockConfig+0x5c>)
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	08db      	lsrs	r3, r3, #3
 800791a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007922:	4b07      	ldr	r3, [pc, #28]	@ (8007940 <HAL_RCC_GetClockConfig+0x60>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 0207 	and.w	r2, r3, #7
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	601a      	str	r2, [r3, #0]
}
 800792e:	bf00      	nop
 8007930:	370c      	adds	r7, #12
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	40023800 	.word	0x40023800
 8007940:	40023c00 	.word	0x40023c00

08007944 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d101      	bne.n	8007956 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e041      	b.n	80079da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800795c:	b2db      	uxtb	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	d106      	bne.n	8007970 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f7fd fcd4 	bl	8005318 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2202      	movs	r2, #2
 8007974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	3304      	adds	r3, #4
 8007980:	4619      	mov	r1, r3
 8007982:	4610      	mov	r0, r2
 8007984:	f000 fd7e 	bl	8008484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
	...

080079e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d001      	beq.n	80079fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	e044      	b.n	8007a86 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2202      	movs	r2, #2
 8007a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68da      	ldr	r2, [r3, #12]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f042 0201 	orr.w	r2, r2, #1
 8007a12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a1e      	ldr	r2, [pc, #120]	@ (8007a94 <HAL_TIM_Base_Start_IT+0xb0>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d018      	beq.n	8007a50 <HAL_TIM_Base_Start_IT+0x6c>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a26:	d013      	beq.n	8007a50 <HAL_TIM_Base_Start_IT+0x6c>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a1a      	ldr	r2, [pc, #104]	@ (8007a98 <HAL_TIM_Base_Start_IT+0xb4>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d00e      	beq.n	8007a50 <HAL_TIM_Base_Start_IT+0x6c>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a19      	ldr	r2, [pc, #100]	@ (8007a9c <HAL_TIM_Base_Start_IT+0xb8>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d009      	beq.n	8007a50 <HAL_TIM_Base_Start_IT+0x6c>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a17      	ldr	r2, [pc, #92]	@ (8007aa0 <HAL_TIM_Base_Start_IT+0xbc>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d004      	beq.n	8007a50 <HAL_TIM_Base_Start_IT+0x6c>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a16      	ldr	r2, [pc, #88]	@ (8007aa4 <HAL_TIM_Base_Start_IT+0xc0>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d111      	bne.n	8007a74 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	f003 0307 	and.w	r3, r3, #7
 8007a5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2b06      	cmp	r3, #6
 8007a60:	d010      	beq.n	8007a84 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f042 0201 	orr.w	r2, r2, #1
 8007a70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a72:	e007      	b.n	8007a84 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f042 0201 	orr.w	r2, r2, #1
 8007a82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3714      	adds	r7, #20
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	40010000 	.word	0x40010000
 8007a98:	40000400 	.word	0x40000400
 8007a9c:	40000800 	.word	0x40000800
 8007aa0:	40000c00 	.word	0x40000c00
 8007aa4:	40014000 	.word	0x40014000

08007aa8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d101      	bne.n	8007aba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e041      	b.n	8007b3e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d106      	bne.n	8007ad4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7fd fc4a 	bl	8005368 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	3304      	adds	r3, #4
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	4610      	mov	r0, r2
 8007ae8:	f000 fccc 	bl	8008484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3708      	adds	r7, #8
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
	...

08007b48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d109      	bne.n	8007b6c <HAL_TIM_PWM_Start+0x24>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	bf14      	ite	ne
 8007b64:	2301      	movne	r3, #1
 8007b66:	2300      	moveq	r3, #0
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	e022      	b.n	8007bb2 <HAL_TIM_PWM_Start+0x6a>
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	2b04      	cmp	r3, #4
 8007b70:	d109      	bne.n	8007b86 <HAL_TIM_PWM_Start+0x3e>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	bf14      	ite	ne
 8007b7e:	2301      	movne	r3, #1
 8007b80:	2300      	moveq	r3, #0
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	e015      	b.n	8007bb2 <HAL_TIM_PWM_Start+0x6a>
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	2b08      	cmp	r3, #8
 8007b8a:	d109      	bne.n	8007ba0 <HAL_TIM_PWM_Start+0x58>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	bf14      	ite	ne
 8007b98:	2301      	movne	r3, #1
 8007b9a:	2300      	moveq	r3, #0
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	e008      	b.n	8007bb2 <HAL_TIM_PWM_Start+0x6a>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	bf14      	ite	ne
 8007bac:	2301      	movne	r3, #1
 8007bae:	2300      	moveq	r3, #0
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d001      	beq.n	8007bba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e068      	b.n	8007c8c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d104      	bne.n	8007bca <HAL_TIM_PWM_Start+0x82>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2202      	movs	r2, #2
 8007bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bc8:	e013      	b.n	8007bf2 <HAL_TIM_PWM_Start+0xaa>
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	2b04      	cmp	r3, #4
 8007bce:	d104      	bne.n	8007bda <HAL_TIM_PWM_Start+0x92>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007bd8:	e00b      	b.n	8007bf2 <HAL_TIM_PWM_Start+0xaa>
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	2b08      	cmp	r3, #8
 8007bde:	d104      	bne.n	8007bea <HAL_TIM_PWM_Start+0xa2>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2202      	movs	r2, #2
 8007be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007be8:	e003      	b.n	8007bf2 <HAL_TIM_PWM_Start+0xaa>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2202      	movs	r2, #2
 8007bee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f000 fee8 	bl	80089d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a23      	ldr	r2, [pc, #140]	@ (8007c94 <HAL_TIM_PWM_Start+0x14c>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d107      	bne.n	8007c1a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c18:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a1d      	ldr	r2, [pc, #116]	@ (8007c94 <HAL_TIM_PWM_Start+0x14c>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d018      	beq.n	8007c56 <HAL_TIM_PWM_Start+0x10e>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c2c:	d013      	beq.n	8007c56 <HAL_TIM_PWM_Start+0x10e>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a19      	ldr	r2, [pc, #100]	@ (8007c98 <HAL_TIM_PWM_Start+0x150>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d00e      	beq.n	8007c56 <HAL_TIM_PWM_Start+0x10e>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a17      	ldr	r2, [pc, #92]	@ (8007c9c <HAL_TIM_PWM_Start+0x154>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d009      	beq.n	8007c56 <HAL_TIM_PWM_Start+0x10e>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a16      	ldr	r2, [pc, #88]	@ (8007ca0 <HAL_TIM_PWM_Start+0x158>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d004      	beq.n	8007c56 <HAL_TIM_PWM_Start+0x10e>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a14      	ldr	r2, [pc, #80]	@ (8007ca4 <HAL_TIM_PWM_Start+0x15c>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d111      	bne.n	8007c7a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	f003 0307 	and.w	r3, r3, #7
 8007c60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2b06      	cmp	r3, #6
 8007c66:	d010      	beq.n	8007c8a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f042 0201 	orr.w	r2, r2, #1
 8007c76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c78:	e007      	b.n	8007c8a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f042 0201 	orr.w	r2, r2, #1
 8007c88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	40010000 	.word	0x40010000
 8007c98:	40000400 	.word	0x40000400
 8007c9c:	40000800 	.word	0x40000800
 8007ca0:	40000c00 	.word	0x40000c00
 8007ca4:	40014000 	.word	0x40014000

08007ca8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b086      	sub	sp, #24
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d101      	bne.n	8007cbc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e097      	b.n	8007dec <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d106      	bne.n	8007cd6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f7fd fa85 	bl	80051e0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2202      	movs	r2, #2
 8007cda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	6812      	ldr	r2, [r2, #0]
 8007ce8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007cec:	f023 0307 	bic.w	r3, r3, #7
 8007cf0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	3304      	adds	r3, #4
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	4610      	mov	r0, r2
 8007cfe:	f000 fbc1 	bl	8008484 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	6a1b      	ldr	r3, [r3, #32]
 8007d18:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d2a:	f023 0303 	bic.w	r3, r3, #3
 8007d2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	689a      	ldr	r2, [r3, #8]
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	021b      	lsls	r3, r3, #8
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	693a      	ldr	r2, [r7, #16]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007d48:	f023 030c 	bic.w	r3, r3, #12
 8007d4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007d54:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007d58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	68da      	ldr	r2, [r3, #12]
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	69db      	ldr	r3, [r3, #28]
 8007d62:	021b      	lsls	r3, r3, #8
 8007d64:	4313      	orrs	r3, r2
 8007d66:	693a      	ldr	r2, [r7, #16]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	011a      	lsls	r2, r3, #4
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	6a1b      	ldr	r3, [r3, #32]
 8007d76:	031b      	lsls	r3, r3, #12
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	693a      	ldr	r2, [r7, #16]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007d86:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007d8e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	685a      	ldr	r2, [r3, #4]
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	695b      	ldr	r3, [r3, #20]
 8007d98:	011b      	lsls	r3, r3, #4
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	697a      	ldr	r2, [r7, #20]
 8007da8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	693a      	ldr	r2, [r7, #16]
 8007db0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3718      	adds	r7, #24
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e04:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007e0c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e14:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007e1c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d110      	bne.n	8007e46 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e24:	7bfb      	ldrb	r3, [r7, #15]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d102      	bne.n	8007e30 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e2a:	7b7b      	ldrb	r3, [r7, #13]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d001      	beq.n	8007e34 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	e069      	b.n	8007f08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2202      	movs	r2, #2
 8007e38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2202      	movs	r2, #2
 8007e40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e44:	e031      	b.n	8007eaa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	2b04      	cmp	r3, #4
 8007e4a:	d110      	bne.n	8007e6e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e4c:	7bbb      	ldrb	r3, [r7, #14]
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d102      	bne.n	8007e58 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e52:	7b3b      	ldrb	r3, [r7, #12]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d001      	beq.n	8007e5c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e055      	b.n	8007f08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2202      	movs	r2, #2
 8007e60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2202      	movs	r2, #2
 8007e68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e6c:	e01d      	b.n	8007eaa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e6e:	7bfb      	ldrb	r3, [r7, #15]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d108      	bne.n	8007e86 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e74:	7bbb      	ldrb	r3, [r7, #14]
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d105      	bne.n	8007e86 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e7a:	7b7b      	ldrb	r3, [r7, #13]
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d102      	bne.n	8007e86 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e80:	7b3b      	ldrb	r3, [r7, #12]
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d001      	beq.n	8007e8a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e03e      	b.n	8007f08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2202      	movs	r2, #2
 8007e8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2202      	movs	r2, #2
 8007e96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2202      	movs	r2, #2
 8007e9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2202      	movs	r2, #2
 8007ea6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d003      	beq.n	8007eb8 <HAL_TIM_Encoder_Start+0xc4>
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	2b04      	cmp	r3, #4
 8007eb4:	d008      	beq.n	8007ec8 <HAL_TIM_Encoder_Start+0xd4>
 8007eb6:	e00f      	b.n	8007ed8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	2100      	movs	r1, #0
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f000 fd85 	bl	80089d0 <TIM_CCxChannelCmd>
      break;
 8007ec6:	e016      	b.n	8007ef6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	2104      	movs	r1, #4
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f000 fd7d 	bl	80089d0 <TIM_CCxChannelCmd>
      break;
 8007ed6:	e00e      	b.n	8007ef6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2201      	movs	r2, #1
 8007ede:	2100      	movs	r1, #0
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f000 fd75 	bl	80089d0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2201      	movs	r2, #1
 8007eec:	2104      	movs	r1, #4
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f000 fd6e 	bl	80089d0 <TIM_CCxChannelCmd>
      break;
 8007ef4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f042 0201 	orr.w	r2, r2, #1
 8007f04:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	f003 0302 	and.w	r3, r3, #2
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d122      	bne.n	8007f6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	f003 0302 	and.w	r3, r3, #2
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	d11b      	bne.n	8007f6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f06f 0202 	mvn.w	r2, #2
 8007f3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	699b      	ldr	r3, [r3, #24]
 8007f4a:	f003 0303 	and.w	r3, r3, #3
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d003      	beq.n	8007f5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 fa77 	bl	8008446 <HAL_TIM_IC_CaptureCallback>
 8007f58:	e005      	b.n	8007f66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 fa69 	bl	8008432 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 fa7a 	bl	800845a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	f003 0304 	and.w	r3, r3, #4
 8007f76:	2b04      	cmp	r3, #4
 8007f78:	d122      	bne.n	8007fc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	f003 0304 	and.w	r3, r3, #4
 8007f84:	2b04      	cmp	r3, #4
 8007f86:	d11b      	bne.n	8007fc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f06f 0204 	mvn.w	r2, #4
 8007f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2202      	movs	r2, #2
 8007f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d003      	beq.n	8007fae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 fa4d 	bl	8008446 <HAL_TIM_IC_CaptureCallback>
 8007fac:	e005      	b.n	8007fba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 fa3f 	bl	8008432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 fa50 	bl	800845a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	691b      	ldr	r3, [r3, #16]
 8007fc6:	f003 0308 	and.w	r3, r3, #8
 8007fca:	2b08      	cmp	r3, #8
 8007fcc:	d122      	bne.n	8008014 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	f003 0308 	and.w	r3, r3, #8
 8007fd8:	2b08      	cmp	r3, #8
 8007fda:	d11b      	bne.n	8008014 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f06f 0208 	mvn.w	r2, #8
 8007fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2204      	movs	r2, #4
 8007fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	69db      	ldr	r3, [r3, #28]
 8007ff2:	f003 0303 	and.w	r3, r3, #3
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d003      	beq.n	8008002 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 fa23 	bl	8008446 <HAL_TIM_IC_CaptureCallback>
 8008000:	e005      	b.n	800800e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 fa15 	bl	8008432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 fa26 	bl	800845a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	f003 0310 	and.w	r3, r3, #16
 800801e:	2b10      	cmp	r3, #16
 8008020:	d122      	bne.n	8008068 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	f003 0310 	and.w	r3, r3, #16
 800802c:	2b10      	cmp	r3, #16
 800802e:	d11b      	bne.n	8008068 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f06f 0210 	mvn.w	r2, #16
 8008038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2208      	movs	r2, #8
 800803e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	69db      	ldr	r3, [r3, #28]
 8008046:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800804a:	2b00      	cmp	r3, #0
 800804c:	d003      	beq.n	8008056 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 f9f9 	bl	8008446 <HAL_TIM_IC_CaptureCallback>
 8008054:	e005      	b.n	8008062 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 f9eb 	bl	8008432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 f9fc 	bl	800845a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	f003 0301 	and.w	r3, r3, #1
 8008072:	2b01      	cmp	r3, #1
 8008074:	d10e      	bne.n	8008094 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	f003 0301 	and.w	r3, r3, #1
 8008080:	2b01      	cmp	r3, #1
 8008082:	d107      	bne.n	8008094 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f06f 0201 	mvn.w	r2, #1
 800808c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f7fb fb3c 	bl	800370c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800809e:	2b80      	cmp	r3, #128	@ 0x80
 80080a0:	d10e      	bne.n	80080c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080ac:	2b80      	cmp	r3, #128	@ 0x80
 80080ae:	d107      	bne.n	80080c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80080b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 fd26 	bl	8008b0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080ca:	2b40      	cmp	r3, #64	@ 0x40
 80080cc:	d10e      	bne.n	80080ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080d8:	2b40      	cmp	r3, #64	@ 0x40
 80080da:	d107      	bne.n	80080ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80080e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f9c1 	bl	800846e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	f003 0320 	and.w	r3, r3, #32
 80080f6:	2b20      	cmp	r3, #32
 80080f8:	d10e      	bne.n	8008118 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	f003 0320 	and.w	r3, r3, #32
 8008104:	2b20      	cmp	r3, #32
 8008106:	d107      	bne.n	8008118 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f06f 0220 	mvn.w	r2, #32
 8008110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fcf0 	bl	8008af8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008118:	bf00      	nop
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800812c:	2300      	movs	r3, #0
 800812e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008136:	2b01      	cmp	r3, #1
 8008138:	d101      	bne.n	800813e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800813a:	2302      	movs	r3, #2
 800813c:	e0ae      	b.n	800829c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2b0c      	cmp	r3, #12
 800814a:	f200 809f 	bhi.w	800828c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800814e:	a201      	add	r2, pc, #4	@ (adr r2, 8008154 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008154:	08008189 	.word	0x08008189
 8008158:	0800828d 	.word	0x0800828d
 800815c:	0800828d 	.word	0x0800828d
 8008160:	0800828d 	.word	0x0800828d
 8008164:	080081c9 	.word	0x080081c9
 8008168:	0800828d 	.word	0x0800828d
 800816c:	0800828d 	.word	0x0800828d
 8008170:	0800828d 	.word	0x0800828d
 8008174:	0800820b 	.word	0x0800820b
 8008178:	0800828d 	.word	0x0800828d
 800817c:	0800828d 	.word	0x0800828d
 8008180:	0800828d 	.word	0x0800828d
 8008184:	0800824b 	.word	0x0800824b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	68b9      	ldr	r1, [r7, #8]
 800818e:	4618      	mov	r0, r3
 8008190:	f000 f9f8 	bl	8008584 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	699a      	ldr	r2, [r3, #24]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f042 0208 	orr.w	r2, r2, #8
 80081a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	699a      	ldr	r2, [r3, #24]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f022 0204 	bic.w	r2, r2, #4
 80081b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	6999      	ldr	r1, [r3, #24]
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	691a      	ldr	r2, [r3, #16]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	430a      	orrs	r2, r1
 80081c4:	619a      	str	r2, [r3, #24]
      break;
 80081c6:	e064      	b.n	8008292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68b9      	ldr	r1, [r7, #8]
 80081ce:	4618      	mov	r0, r3
 80081d0:	f000 fa3e 	bl	8008650 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	699a      	ldr	r2, [r3, #24]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80081e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	699a      	ldr	r2, [r3, #24]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80081f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	6999      	ldr	r1, [r3, #24]
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	021a      	lsls	r2, r3, #8
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	430a      	orrs	r2, r1
 8008206:	619a      	str	r2, [r3, #24]
      break;
 8008208:	e043      	b.n	8008292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	68b9      	ldr	r1, [r7, #8]
 8008210:	4618      	mov	r0, r3
 8008212:	f000 fa89 	bl	8008728 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	69da      	ldr	r2, [r3, #28]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f042 0208 	orr.w	r2, r2, #8
 8008224:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	69da      	ldr	r2, [r3, #28]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f022 0204 	bic.w	r2, r2, #4
 8008234:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	69d9      	ldr	r1, [r3, #28]
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	691a      	ldr	r2, [r3, #16]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	430a      	orrs	r2, r1
 8008246:	61da      	str	r2, [r3, #28]
      break;
 8008248:	e023      	b.n	8008292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68b9      	ldr	r1, [r7, #8]
 8008250:	4618      	mov	r0, r3
 8008252:	f000 fad3 	bl	80087fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	69da      	ldr	r2, [r3, #28]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008264:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	69da      	ldr	r2, [r3, #28]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008274:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	69d9      	ldr	r1, [r3, #28]
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	021a      	lsls	r2, r3, #8
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	430a      	orrs	r2, r1
 8008288:	61da      	str	r2, [r3, #28]
      break;
 800828a:	e002      	b.n	8008292 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	75fb      	strb	r3, [r7, #23]
      break;
 8008290:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800829a:	7dfb      	ldrb	r3, [r7, #23]
}
 800829c:	4618      	mov	r0, r3
 800829e:	3718      	adds	r7, #24
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082ae:	2300      	movs	r3, #0
 80082b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d101      	bne.n	80082c0 <HAL_TIM_ConfigClockSource+0x1c>
 80082bc:	2302      	movs	r3, #2
 80082be:	e0b4      	b.n	800842a <HAL_TIM_ConfigClockSource+0x186>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2202      	movs	r2, #2
 80082cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80082de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80082e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68ba      	ldr	r2, [r7, #8]
 80082ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082f8:	d03e      	beq.n	8008378 <HAL_TIM_ConfigClockSource+0xd4>
 80082fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082fe:	f200 8087 	bhi.w	8008410 <HAL_TIM_ConfigClockSource+0x16c>
 8008302:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008306:	f000 8086 	beq.w	8008416 <HAL_TIM_ConfigClockSource+0x172>
 800830a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800830e:	d87f      	bhi.n	8008410 <HAL_TIM_ConfigClockSource+0x16c>
 8008310:	2b70      	cmp	r3, #112	@ 0x70
 8008312:	d01a      	beq.n	800834a <HAL_TIM_ConfigClockSource+0xa6>
 8008314:	2b70      	cmp	r3, #112	@ 0x70
 8008316:	d87b      	bhi.n	8008410 <HAL_TIM_ConfigClockSource+0x16c>
 8008318:	2b60      	cmp	r3, #96	@ 0x60
 800831a:	d050      	beq.n	80083be <HAL_TIM_ConfigClockSource+0x11a>
 800831c:	2b60      	cmp	r3, #96	@ 0x60
 800831e:	d877      	bhi.n	8008410 <HAL_TIM_ConfigClockSource+0x16c>
 8008320:	2b50      	cmp	r3, #80	@ 0x50
 8008322:	d03c      	beq.n	800839e <HAL_TIM_ConfigClockSource+0xfa>
 8008324:	2b50      	cmp	r3, #80	@ 0x50
 8008326:	d873      	bhi.n	8008410 <HAL_TIM_ConfigClockSource+0x16c>
 8008328:	2b40      	cmp	r3, #64	@ 0x40
 800832a:	d058      	beq.n	80083de <HAL_TIM_ConfigClockSource+0x13a>
 800832c:	2b40      	cmp	r3, #64	@ 0x40
 800832e:	d86f      	bhi.n	8008410 <HAL_TIM_ConfigClockSource+0x16c>
 8008330:	2b30      	cmp	r3, #48	@ 0x30
 8008332:	d064      	beq.n	80083fe <HAL_TIM_ConfigClockSource+0x15a>
 8008334:	2b30      	cmp	r3, #48	@ 0x30
 8008336:	d86b      	bhi.n	8008410 <HAL_TIM_ConfigClockSource+0x16c>
 8008338:	2b20      	cmp	r3, #32
 800833a:	d060      	beq.n	80083fe <HAL_TIM_ConfigClockSource+0x15a>
 800833c:	2b20      	cmp	r3, #32
 800833e:	d867      	bhi.n	8008410 <HAL_TIM_ConfigClockSource+0x16c>
 8008340:	2b00      	cmp	r3, #0
 8008342:	d05c      	beq.n	80083fe <HAL_TIM_ConfigClockSource+0x15a>
 8008344:	2b10      	cmp	r3, #16
 8008346:	d05a      	beq.n	80083fe <HAL_TIM_ConfigClockSource+0x15a>
 8008348:	e062      	b.n	8008410 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6818      	ldr	r0, [r3, #0]
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	6899      	ldr	r1, [r3, #8]
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	685a      	ldr	r2, [r3, #4]
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	f000 fb19 	bl	8008990 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800836c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	68ba      	ldr	r2, [r7, #8]
 8008374:	609a      	str	r2, [r3, #8]
      break;
 8008376:	e04f      	b.n	8008418 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6818      	ldr	r0, [r3, #0]
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	6899      	ldr	r1, [r3, #8]
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	685a      	ldr	r2, [r3, #4]
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	f000 fb02 	bl	8008990 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	689a      	ldr	r2, [r3, #8]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800839a:	609a      	str	r2, [r3, #8]
      break;
 800839c:	e03c      	b.n	8008418 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6818      	ldr	r0, [r3, #0]
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	6859      	ldr	r1, [r3, #4]
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	461a      	mov	r2, r3
 80083ac:	f000 fa76 	bl	800889c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2150      	movs	r1, #80	@ 0x50
 80083b6:	4618      	mov	r0, r3
 80083b8:	f000 facf 	bl	800895a <TIM_ITRx_SetConfig>
      break;
 80083bc:	e02c      	b.n	8008418 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6818      	ldr	r0, [r3, #0]
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	6859      	ldr	r1, [r3, #4]
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	461a      	mov	r2, r3
 80083cc:	f000 fa95 	bl	80088fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2160      	movs	r1, #96	@ 0x60
 80083d6:	4618      	mov	r0, r3
 80083d8:	f000 fabf 	bl	800895a <TIM_ITRx_SetConfig>
      break;
 80083dc:	e01c      	b.n	8008418 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6818      	ldr	r0, [r3, #0]
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	6859      	ldr	r1, [r3, #4]
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	461a      	mov	r2, r3
 80083ec:	f000 fa56 	bl	800889c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2140      	movs	r1, #64	@ 0x40
 80083f6:	4618      	mov	r0, r3
 80083f8:	f000 faaf 	bl	800895a <TIM_ITRx_SetConfig>
      break;
 80083fc:	e00c      	b.n	8008418 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4619      	mov	r1, r3
 8008408:	4610      	mov	r0, r2
 800840a:	f000 faa6 	bl	800895a <TIM_ITRx_SetConfig>
      break;
 800840e:	e003      	b.n	8008418 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	73fb      	strb	r3, [r7, #15]
      break;
 8008414:	e000      	b.n	8008418 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008416:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008428:	7bfb      	ldrb	r3, [r7, #15]
}
 800842a:	4618      	mov	r0, r3
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008432:	b480      	push	{r7}
 8008434:	b083      	sub	sp, #12
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800843a:	bf00      	nop
 800843c:	370c      	adds	r7, #12
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr

08008446 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008446:	b480      	push	{r7}
 8008448:	b083      	sub	sp, #12
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800844e:	bf00      	nop
 8008450:	370c      	adds	r7, #12
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr

0800845a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800845a:	b480      	push	{r7}
 800845c:	b083      	sub	sp, #12
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008462:	bf00      	nop
 8008464:	370c      	adds	r7, #12
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr

0800846e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800846e:	b480      	push	{r7}
 8008470:	b083      	sub	sp, #12
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008476:	bf00      	nop
 8008478:	370c      	adds	r7, #12
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr
	...

08008484 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a34      	ldr	r2, [pc, #208]	@ (8008568 <TIM_Base_SetConfig+0xe4>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d00f      	beq.n	80084bc <TIM_Base_SetConfig+0x38>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084a2:	d00b      	beq.n	80084bc <TIM_Base_SetConfig+0x38>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4a31      	ldr	r2, [pc, #196]	@ (800856c <TIM_Base_SetConfig+0xe8>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d007      	beq.n	80084bc <TIM_Base_SetConfig+0x38>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a30      	ldr	r2, [pc, #192]	@ (8008570 <TIM_Base_SetConfig+0xec>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d003      	beq.n	80084bc <TIM_Base_SetConfig+0x38>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a2f      	ldr	r2, [pc, #188]	@ (8008574 <TIM_Base_SetConfig+0xf0>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d108      	bne.n	80084ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a25      	ldr	r2, [pc, #148]	@ (8008568 <TIM_Base_SetConfig+0xe4>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d01b      	beq.n	800850e <TIM_Base_SetConfig+0x8a>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084dc:	d017      	beq.n	800850e <TIM_Base_SetConfig+0x8a>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a22      	ldr	r2, [pc, #136]	@ (800856c <TIM_Base_SetConfig+0xe8>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d013      	beq.n	800850e <TIM_Base_SetConfig+0x8a>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a21      	ldr	r2, [pc, #132]	@ (8008570 <TIM_Base_SetConfig+0xec>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d00f      	beq.n	800850e <TIM_Base_SetConfig+0x8a>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a20      	ldr	r2, [pc, #128]	@ (8008574 <TIM_Base_SetConfig+0xf0>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d00b      	beq.n	800850e <TIM_Base_SetConfig+0x8a>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a1f      	ldr	r2, [pc, #124]	@ (8008578 <TIM_Base_SetConfig+0xf4>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d007      	beq.n	800850e <TIM_Base_SetConfig+0x8a>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a1e      	ldr	r2, [pc, #120]	@ (800857c <TIM_Base_SetConfig+0xf8>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d003      	beq.n	800850e <TIM_Base_SetConfig+0x8a>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a1d      	ldr	r2, [pc, #116]	@ (8008580 <TIM_Base_SetConfig+0xfc>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d108      	bne.n	8008520 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	68fa      	ldr	r2, [r7, #12]
 800851c:	4313      	orrs	r3, r2
 800851e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	695b      	ldr	r3, [r3, #20]
 800852a:	4313      	orrs	r3, r2
 800852c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	689a      	ldr	r2, [r3, #8]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4a08      	ldr	r2, [pc, #32]	@ (8008568 <TIM_Base_SetConfig+0xe4>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d103      	bne.n	8008554 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	691a      	ldr	r2, [r3, #16]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	615a      	str	r2, [r3, #20]
}
 800855a:	bf00      	nop
 800855c:	3714      	adds	r7, #20
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr
 8008566:	bf00      	nop
 8008568:	40010000 	.word	0x40010000
 800856c:	40000400 	.word	0x40000400
 8008570:	40000800 	.word	0x40000800
 8008574:	40000c00 	.word	0x40000c00
 8008578:	40014000 	.word	0x40014000
 800857c:	40014400 	.word	0x40014400
 8008580:	40014800 	.word	0x40014800

08008584 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008584:	b480      	push	{r7}
 8008586:	b087      	sub	sp, #28
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6a1b      	ldr	r3, [r3, #32]
 8008592:	f023 0201 	bic.w	r2, r3, #1
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6a1b      	ldr	r3, [r3, #32]
 800859e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	699b      	ldr	r3, [r3, #24]
 80085aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f023 0303 	bic.w	r3, r3, #3
 80085ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	f023 0302 	bic.w	r3, r3, #2
 80085cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	697a      	ldr	r2, [r7, #20]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a1c      	ldr	r2, [pc, #112]	@ (800864c <TIM_OC1_SetConfig+0xc8>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d10c      	bne.n	80085fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	f023 0308 	bic.w	r3, r3, #8
 80085e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	697a      	ldr	r2, [r7, #20]
 80085ee:	4313      	orrs	r3, r2
 80085f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	f023 0304 	bic.w	r3, r3, #4
 80085f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4a13      	ldr	r2, [pc, #76]	@ (800864c <TIM_OC1_SetConfig+0xc8>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d111      	bne.n	8008626 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008608:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008610:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	695b      	ldr	r3, [r3, #20]
 8008616:	693a      	ldr	r2, [r7, #16]
 8008618:	4313      	orrs	r3, r2
 800861a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	699b      	ldr	r3, [r3, #24]
 8008620:	693a      	ldr	r2, [r7, #16]
 8008622:	4313      	orrs	r3, r2
 8008624:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	693a      	ldr	r2, [r7, #16]
 800862a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	685a      	ldr	r2, [r3, #4]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	697a      	ldr	r2, [r7, #20]
 800863e:	621a      	str	r2, [r3, #32]
}
 8008640:	bf00      	nop
 8008642:	371c      	adds	r7, #28
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr
 800864c:	40010000 	.word	0x40010000

08008650 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008650:	b480      	push	{r7}
 8008652:	b087      	sub	sp, #28
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a1b      	ldr	r3, [r3, #32]
 800865e:	f023 0210 	bic.w	r2, r3, #16
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a1b      	ldr	r3, [r3, #32]
 800866a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800867e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008686:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	021b      	lsls	r3, r3, #8
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	4313      	orrs	r3, r2
 8008692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	f023 0320 	bic.w	r3, r3, #32
 800869a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	011b      	lsls	r3, r3, #4
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a1e      	ldr	r2, [pc, #120]	@ (8008724 <TIM_OC2_SetConfig+0xd4>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d10d      	bne.n	80086cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	011b      	lsls	r3, r3, #4
 80086be:	697a      	ldr	r2, [r7, #20]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a15      	ldr	r2, [pc, #84]	@ (8008724 <TIM_OC2_SetConfig+0xd4>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d113      	bne.n	80086fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80086da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80086e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	695b      	ldr	r3, [r3, #20]
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	693a      	ldr	r2, [r7, #16]
 80086ec:	4313      	orrs	r3, r2
 80086ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	699b      	ldr	r3, [r3, #24]
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	693a      	ldr	r2, [r7, #16]
 80086f8:	4313      	orrs	r3, r2
 80086fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	693a      	ldr	r2, [r7, #16]
 8008700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	685a      	ldr	r2, [r3, #4]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	697a      	ldr	r2, [r7, #20]
 8008714:	621a      	str	r2, [r3, #32]
}
 8008716:	bf00      	nop
 8008718:	371c      	adds	r7, #28
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	40010000 	.word	0x40010000

08008728 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008728:	b480      	push	{r7}
 800872a:	b087      	sub	sp, #28
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6a1b      	ldr	r3, [r3, #32]
 8008736:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6a1b      	ldr	r3, [r3, #32]
 8008742:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	69db      	ldr	r3, [r3, #28]
 800874e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f023 0303 	bic.w	r3, r3, #3
 800875e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	4313      	orrs	r3, r2
 8008768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008770:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	021b      	lsls	r3, r3, #8
 8008778:	697a      	ldr	r2, [r7, #20]
 800877a:	4313      	orrs	r3, r2
 800877c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a1d      	ldr	r2, [pc, #116]	@ (80087f8 <TIM_OC3_SetConfig+0xd0>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d10d      	bne.n	80087a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800878c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	021b      	lsls	r3, r3, #8
 8008794:	697a      	ldr	r2, [r7, #20]
 8008796:	4313      	orrs	r3, r2
 8008798:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80087a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a14      	ldr	r2, [pc, #80]	@ (80087f8 <TIM_OC3_SetConfig+0xd0>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d113      	bne.n	80087d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80087b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80087b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	695b      	ldr	r3, [r3, #20]
 80087be:	011b      	lsls	r3, r3, #4
 80087c0:	693a      	ldr	r2, [r7, #16]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	699b      	ldr	r3, [r3, #24]
 80087ca:	011b      	lsls	r3, r3, #4
 80087cc:	693a      	ldr	r2, [r7, #16]
 80087ce:	4313      	orrs	r3, r2
 80087d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	693a      	ldr	r2, [r7, #16]
 80087d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	68fa      	ldr	r2, [r7, #12]
 80087dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	685a      	ldr	r2, [r3, #4]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	697a      	ldr	r2, [r7, #20]
 80087ea:	621a      	str	r2, [r3, #32]
}
 80087ec:	bf00      	nop
 80087ee:	371c      	adds	r7, #28
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr
 80087f8:	40010000 	.word	0x40010000

080087fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b087      	sub	sp, #28
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a1b      	ldr	r3, [r3, #32]
 800880a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6a1b      	ldr	r3, [r3, #32]
 8008816:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	69db      	ldr	r3, [r3, #28]
 8008822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800882a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	021b      	lsls	r3, r3, #8
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	4313      	orrs	r3, r2
 800883e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008846:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	031b      	lsls	r3, r3, #12
 800884e:	693a      	ldr	r2, [r7, #16]
 8008850:	4313      	orrs	r3, r2
 8008852:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a10      	ldr	r2, [pc, #64]	@ (8008898 <TIM_OC4_SetConfig+0x9c>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d109      	bne.n	8008870 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008862:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	695b      	ldr	r3, [r3, #20]
 8008868:	019b      	lsls	r3, r3, #6
 800886a:	697a      	ldr	r2, [r7, #20]
 800886c:	4313      	orrs	r3, r2
 800886e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	697a      	ldr	r2, [r7, #20]
 8008874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	68fa      	ldr	r2, [r7, #12]
 800887a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	685a      	ldr	r2, [r3, #4]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	693a      	ldr	r2, [r7, #16]
 8008888:	621a      	str	r2, [r3, #32]
}
 800888a:	bf00      	nop
 800888c:	371c      	adds	r7, #28
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	40010000 	.word	0x40010000

0800889c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800889c:	b480      	push	{r7}
 800889e:	b087      	sub	sp, #28
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6a1b      	ldr	r3, [r3, #32]
 80088ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6a1b      	ldr	r3, [r3, #32]
 80088b2:	f023 0201 	bic.w	r2, r3, #1
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	699b      	ldr	r3, [r3, #24]
 80088be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80088c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	011b      	lsls	r3, r3, #4
 80088cc:	693a      	ldr	r2, [r7, #16]
 80088ce:	4313      	orrs	r3, r2
 80088d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	f023 030a 	bic.w	r3, r3, #10
 80088d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80088da:	697a      	ldr	r2, [r7, #20]
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	4313      	orrs	r3, r2
 80088e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	693a      	ldr	r2, [r7, #16]
 80088e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	697a      	ldr	r2, [r7, #20]
 80088ec:	621a      	str	r2, [r3, #32]
}
 80088ee:	bf00      	nop
 80088f0:	371c      	adds	r7, #28
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr

080088fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088fa:	b480      	push	{r7}
 80088fc:	b087      	sub	sp, #28
 80088fe:	af00      	add	r7, sp, #0
 8008900:	60f8      	str	r0, [r7, #12]
 8008902:	60b9      	str	r1, [r7, #8]
 8008904:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6a1b      	ldr	r3, [r3, #32]
 800890a:	f023 0210 	bic.w	r2, r3, #16
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6a1b      	ldr	r3, [r3, #32]
 800891c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008924:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	031b      	lsls	r3, r3, #12
 800892a:	697a      	ldr	r2, [r7, #20]
 800892c:	4313      	orrs	r3, r2
 800892e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008936:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	011b      	lsls	r3, r3, #4
 800893c:	693a      	ldr	r2, [r7, #16]
 800893e:	4313      	orrs	r3, r2
 8008940:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	697a      	ldr	r2, [r7, #20]
 8008946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	693a      	ldr	r2, [r7, #16]
 800894c:	621a      	str	r2, [r3, #32]
}
 800894e:	bf00      	nop
 8008950:	371c      	adds	r7, #28
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr

0800895a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800895a:	b480      	push	{r7}
 800895c:	b085      	sub	sp, #20
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
 8008962:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008970:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008972:	683a      	ldr	r2, [r7, #0]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	4313      	orrs	r3, r2
 8008978:	f043 0307 	orr.w	r3, r3, #7
 800897c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	609a      	str	r2, [r3, #8]
}
 8008984:	bf00      	nop
 8008986:	3714      	adds	r7, #20
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008990:	b480      	push	{r7}
 8008992:	b087      	sub	sp, #28
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	607a      	str	r2, [r7, #4]
 800899c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80089aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	021a      	lsls	r2, r3, #8
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	431a      	orrs	r2, r3
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	697a      	ldr	r2, [r7, #20]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	697a      	ldr	r2, [r7, #20]
 80089c2:	609a      	str	r2, [r3, #8]
}
 80089c4:	bf00      	nop
 80089c6:	371c      	adds	r7, #28
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b087      	sub	sp, #28
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	60b9      	str	r1, [r7, #8]
 80089da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	f003 031f 	and.w	r3, r3, #31
 80089e2:	2201      	movs	r2, #1
 80089e4:	fa02 f303 	lsl.w	r3, r2, r3
 80089e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6a1a      	ldr	r2, [r3, #32]
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	43db      	mvns	r3, r3
 80089f2:	401a      	ands	r2, r3
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6a1a      	ldr	r2, [r3, #32]
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	f003 031f 	and.w	r3, r3, #31
 8008a02:	6879      	ldr	r1, [r7, #4]
 8008a04:	fa01 f303 	lsl.w	r3, r1, r3
 8008a08:	431a      	orrs	r2, r3
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	621a      	str	r2, [r3, #32]
}
 8008a0e:	bf00      	nop
 8008a10:	371c      	adds	r7, #28
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr
	...

08008a1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b085      	sub	sp, #20
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d101      	bne.n	8008a34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a30:	2302      	movs	r3, #2
 8008a32:	e050      	b.n	8008ad6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2202      	movs	r2, #2
 8008a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	68fa      	ldr	r2, [r7, #12]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a1c      	ldr	r2, [pc, #112]	@ (8008ae4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d018      	beq.n	8008aaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a80:	d013      	beq.n	8008aaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a18      	ldr	r2, [pc, #96]	@ (8008ae8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d00e      	beq.n	8008aaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a16      	ldr	r2, [pc, #88]	@ (8008aec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d009      	beq.n	8008aaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a15      	ldr	r2, [pc, #84]	@ (8008af0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d004      	beq.n	8008aaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a13      	ldr	r2, [pc, #76]	@ (8008af4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d10c      	bne.n	8008ac4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ab0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	68ba      	ldr	r2, [r7, #8]
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68ba      	ldr	r2, [r7, #8]
 8008ac2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3714      	adds	r7, #20
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop
 8008ae4:	40010000 	.word	0x40010000
 8008ae8:	40000400 	.word	0x40000400
 8008aec:	40000800 	.word	0x40000800
 8008af0:	40000c00 	.word	0x40000c00
 8008af4:	40014000 	.word	0x40014000

08008af8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b00:	bf00      	nop
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b14:	bf00      	nop
 8008b16:	370c      	adds	r7, #12
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d101      	bne.n	8008b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e03f      	b.n	8008bb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d106      	bne.n	8008b4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2200      	movs	r2, #0
 8008b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f7fc fc6a 	bl	8005420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2224      	movs	r2, #36	@ 0x24
 8008b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	68da      	ldr	r2, [r3, #12]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008b62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 ffcd 	bl	8009b04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	691a      	ldr	r2, [r3, #16]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008b78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	695a      	ldr	r2, [r3, #20]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008b88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68da      	ldr	r2, [r3, #12]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008b98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2220      	movs	r2, #32
 8008ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2220      	movs	r2, #32
 8008bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
	...

08008bbc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b08c      	sub	sp, #48	@ 0x30
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	2b20      	cmp	r3, #32
 8008bd4:	d165      	bne.n	8008ca2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d002      	beq.n	8008be2 <HAL_UART_Transmit_DMA+0x26>
 8008bdc:	88fb      	ldrh	r3, [r7, #6]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d101      	bne.n	8008be6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e05e      	b.n	8008ca4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d101      	bne.n	8008bf4 <HAL_UART_Transmit_DMA+0x38>
 8008bf0:	2302      	movs	r3, #2
 8008bf2:	e057      	b.n	8008ca4 <HAL_UART_Transmit_DMA+0xe8>
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 8008bfc:	68ba      	ldr	r2, [r7, #8]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	88fa      	ldrh	r2, [r7, #6]
 8008c06:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	88fa      	ldrh	r2, [r7, #6]
 8008c0c:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2200      	movs	r2, #0
 8008c12:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2221      	movs	r2, #33	@ 0x21
 8008c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c20:	4a22      	ldr	r2, [pc, #136]	@ (8008cac <HAL_UART_Transmit_DMA+0xf0>)
 8008c22:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c28:	4a21      	ldr	r2, [pc, #132]	@ (8008cb0 <HAL_UART_Transmit_DMA+0xf4>)
 8008c2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c30:	4a20      	ldr	r2, [pc, #128]	@ (8008cb4 <HAL_UART_Transmit_DMA+0xf8>)
 8008c32:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c38:	2200      	movs	r2, #0
 8008c3a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008c3c:	f107 0308 	add.w	r3, r7, #8
 8008c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8008c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c48:	6819      	ldr	r1, [r3, #0]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	3304      	adds	r3, #4
 8008c50:	461a      	mov	r2, r3
 8008c52:	88fb      	ldrh	r3, [r7, #6]
 8008c54:	f7fd fcba 	bl	80065cc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008c60:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2200      	movs	r2, #0
 8008c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	3314      	adds	r3, #20
 8008c70:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	e853 3f00 	ldrex	r3, [r3]
 8008c78:	617b      	str	r3, [r7, #20]
   return(result);
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	3314      	adds	r3, #20
 8008c88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c8a:	627a      	str	r2, [r7, #36]	@ 0x24
 8008c8c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c8e:	6a39      	ldr	r1, [r7, #32]
 8008c90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c92:	e841 2300 	strex	r3, r2, [r1]
 8008c96:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c98:	69fb      	ldr	r3, [r7, #28]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d1e5      	bne.n	8008c6a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	e000      	b.n	8008ca4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008ca2:	2302      	movs	r3, #2
  }
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3730      	adds	r7, #48	@ 0x30
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	0800939d 	.word	0x0800939d
 8008cb0:	08009437 	.word	0x08009437
 8008cb4:	080095af 	.word	0x080095af

08008cb8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	2b20      	cmp	r3, #32
 8008cd0:	d11d      	bne.n	8008d0e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d002      	beq.n	8008cde <HAL_UART_Receive_DMA+0x26>
 8008cd8:	88fb      	ldrh	r3, [r7, #6]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d101      	bne.n	8008ce2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e016      	b.n	8008d10 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d101      	bne.n	8008cf0 <HAL_UART_Receive_DMA+0x38>
 8008cec:	2302      	movs	r3, #2
 8008cee:	e00f      	b.n	8008d10 <HAL_UART_Receive_DMA+0x58>
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008cfe:	88fb      	ldrh	r3, [r7, #6]
 8008d00:	461a      	mov	r2, r3
 8008d02:	68b9      	ldr	r1, [r7, #8]
 8008d04:	68f8      	ldr	r0, [r7, #12]
 8008d06:	f000 fc9d 	bl	8009644 <UART_Start_Receive_DMA>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	e000      	b.n	8008d10 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008d0e:	2302      	movs	r3, #2
  }
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b090      	sub	sp, #64	@ 0x40
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008d20:	2300      	movs	r3, #0
 8008d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	695b      	ldr	r3, [r3, #20]
 8008d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d2e:	2b80      	cmp	r3, #128	@ 0x80
 8008d30:	bf0c      	ite	eq
 8008d32:	2301      	moveq	r3, #1
 8008d34:	2300      	movne	r3, #0
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	2b21      	cmp	r3, #33	@ 0x21
 8008d44:	d128      	bne.n	8008d98 <HAL_UART_DMAStop+0x80>
 8008d46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d025      	beq.n	8008d98 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	3314      	adds	r3, #20
 8008d52:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d56:	e853 3f00 	ldrex	r3, [r3]
 8008d5a:	623b      	str	r3, [r7, #32]
   return(result);
 8008d5c:	6a3b      	ldr	r3, [r7, #32]
 8008d5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	3314      	adds	r3, #20
 8008d6a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008d6c:	633a      	str	r2, [r7, #48]	@ 0x30
 8008d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d74:	e841 2300 	strex	r3, r2, [r1]
 8008d78:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1e5      	bne.n	8008d4c <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d004      	beq.n	8008d92 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f7fd fc75 	bl	800667c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fcf4 	bl	8009780 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	695b      	ldr	r3, [r3, #20]
 8008d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008da2:	2b40      	cmp	r3, #64	@ 0x40
 8008da4:	bf0c      	ite	eq
 8008da6:	2301      	moveq	r3, #1
 8008da8:	2300      	movne	r3, #0
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	2b22      	cmp	r3, #34	@ 0x22
 8008db8:	d128      	bne.n	8008e0c <HAL_UART_DMAStop+0xf4>
 8008dba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d025      	beq.n	8008e0c <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	3314      	adds	r3, #20
 8008dc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	e853 3f00 	ldrex	r3, [r3]
 8008dce:	60fb      	str	r3, [r7, #12]
   return(result);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008dd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	3314      	adds	r3, #20
 8008dde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008de0:	61fa      	str	r2, [r7, #28]
 8008de2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de4:	69b9      	ldr	r1, [r7, #24]
 8008de6:	69fa      	ldr	r2, [r7, #28]
 8008de8:	e841 2300 	strex	r3, r2, [r1]
 8008dec:	617b      	str	r3, [r7, #20]
   return(result);
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d1e5      	bne.n	8008dc0 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d004      	beq.n	8008e06 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7fd fc3b 	bl	800667c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 fce2 	bl	80097d0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3740      	adds	r7, #64	@ 0x40
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
	...

08008e18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b0ba      	sub	sp, #232	@ 0xe8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	695b      	ldr	r3, [r3, #20]
 8008e3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008e44:	2300      	movs	r3, #0
 8008e46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e4e:	f003 030f 	and.w	r3, r3, #15
 8008e52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008e56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d10f      	bne.n	8008e7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e62:	f003 0320 	and.w	r3, r3, #32
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d009      	beq.n	8008e7e <HAL_UART_IRQHandler+0x66>
 8008e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e6e:	f003 0320 	and.w	r3, r3, #32
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d003      	beq.n	8008e7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 fd89 	bl	800998e <UART_Receive_IT>
      return;
 8008e7c:	e256      	b.n	800932c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008e7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	f000 80de 	beq.w	8009044 <HAL_UART_IRQHandler+0x22c>
 8008e88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e8c:	f003 0301 	and.w	r3, r3, #1
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d106      	bne.n	8008ea2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e98:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f000 80d1 	beq.w	8009044 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ea6:	f003 0301 	and.w	r3, r3, #1
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d00b      	beq.n	8008ec6 <HAL_UART_IRQHandler+0xae>
 8008eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d005      	beq.n	8008ec6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ebe:	f043 0201 	orr.w	r2, r3, #1
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008eca:	f003 0304 	and.w	r3, r3, #4
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d00b      	beq.n	8008eea <HAL_UART_IRQHandler+0xd2>
 8008ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ed6:	f003 0301 	and.w	r3, r3, #1
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d005      	beq.n	8008eea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ee2:	f043 0202 	orr.w	r2, r3, #2
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008eee:	f003 0302 	and.w	r3, r3, #2
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00b      	beq.n	8008f0e <HAL_UART_IRQHandler+0xf6>
 8008ef6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008efa:	f003 0301 	and.w	r3, r3, #1
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d005      	beq.n	8008f0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f06:	f043 0204 	orr.w	r2, r3, #4
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f12:	f003 0308 	and.w	r3, r3, #8
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d011      	beq.n	8008f3e <HAL_UART_IRQHandler+0x126>
 8008f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f1e:	f003 0320 	and.w	r3, r3, #32
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d105      	bne.n	8008f32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008f26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f2a:	f003 0301 	and.w	r3, r3, #1
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d005      	beq.n	8008f3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f36:	f043 0208 	orr.w	r2, r3, #8
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	f000 81ed 	beq.w	8009322 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f4c:	f003 0320 	and.w	r3, r3, #32
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d008      	beq.n	8008f66 <HAL_UART_IRQHandler+0x14e>
 8008f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f58:	f003 0320 	and.w	r3, r3, #32
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d002      	beq.n	8008f66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 fd14 	bl	800998e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	695b      	ldr	r3, [r3, #20]
 8008f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f70:	2b40      	cmp	r3, #64	@ 0x40
 8008f72:	bf0c      	ite	eq
 8008f74:	2301      	moveq	r3, #1
 8008f76:	2300      	movne	r3, #0
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f82:	f003 0308 	and.w	r3, r3, #8
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d103      	bne.n	8008f92 <HAL_UART_IRQHandler+0x17a>
 8008f8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d04f      	beq.n	8009032 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 fc1c 	bl	80097d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	695b      	ldr	r3, [r3, #20]
 8008f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fa2:	2b40      	cmp	r3, #64	@ 0x40
 8008fa4:	d141      	bne.n	800902a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	3314      	adds	r3, #20
 8008fac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008fb4:	e853 3f00 	ldrex	r3, [r3]
 8008fb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008fbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008fc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	3314      	adds	r3, #20
 8008fce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008fd2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008fd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008fde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008fe2:	e841 2300 	strex	r3, r2, [r1]
 8008fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008fea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d1d9      	bne.n	8008fa6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d013      	beq.n	8009022 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ffe:	4a7d      	ldr	r2, [pc, #500]	@ (80091f4 <HAL_UART_IRQHandler+0x3dc>)
 8009000:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009006:	4618      	mov	r0, r3
 8009008:	f7fd fba8 	bl	800675c <HAL_DMA_Abort_IT>
 800900c:	4603      	mov	r3, r0
 800900e:	2b00      	cmp	r3, #0
 8009010:	d016      	beq.n	8009040 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009016:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800901c:	4610      	mov	r0, r2
 800901e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009020:	e00e      	b.n	8009040 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 f9a4 	bl	8009370 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009028:	e00a      	b.n	8009040 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 f9a0 	bl	8009370 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009030:	e006      	b.n	8009040 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 f99c 	bl	8009370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800903e:	e170      	b.n	8009322 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009040:	bf00      	nop
    return;
 8009042:	e16e      	b.n	8009322 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009048:	2b01      	cmp	r3, #1
 800904a:	f040 814a 	bne.w	80092e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800904e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009052:	f003 0310 	and.w	r3, r3, #16
 8009056:	2b00      	cmp	r3, #0
 8009058:	f000 8143 	beq.w	80092e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800905c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009060:	f003 0310 	and.w	r3, r3, #16
 8009064:	2b00      	cmp	r3, #0
 8009066:	f000 813c 	beq.w	80092e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800906a:	2300      	movs	r3, #0
 800906c:	60bb      	str	r3, [r7, #8]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	60bb      	str	r3, [r7, #8]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	60bb      	str	r3, [r7, #8]
 800907e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	695b      	ldr	r3, [r3, #20]
 8009086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800908a:	2b40      	cmp	r3, #64	@ 0x40
 800908c:	f040 80b4 	bne.w	80091f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800909c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	f000 8140 	beq.w	8009326 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80090aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80090ae:	429a      	cmp	r2, r3
 80090b0:	f080 8139 	bcs.w	8009326 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80090ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090c0:	69db      	ldr	r3, [r3, #28]
 80090c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090c6:	f000 8088 	beq.w	80091da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	330c      	adds	r3, #12
 80090d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80090d8:	e853 3f00 	ldrex	r3, [r3]
 80090dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80090e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80090e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	330c      	adds	r3, #12
 80090f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80090f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80090fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009102:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009106:	e841 2300 	strex	r3, r2, [r1]
 800910a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800910e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1d9      	bne.n	80090ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	3314      	adds	r3, #20
 800911c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800911e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009120:	e853 3f00 	ldrex	r3, [r3]
 8009124:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009126:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009128:	f023 0301 	bic.w	r3, r3, #1
 800912c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	3314      	adds	r3, #20
 8009136:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800913a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800913e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009140:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009142:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009146:	e841 2300 	strex	r3, r2, [r1]
 800914a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800914c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800914e:	2b00      	cmp	r3, #0
 8009150:	d1e1      	bne.n	8009116 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	3314      	adds	r3, #20
 8009158:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800915c:	e853 3f00 	ldrex	r3, [r3]
 8009160:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009162:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009164:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009168:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	3314      	adds	r3, #20
 8009172:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009176:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009178:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800917c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800917e:	e841 2300 	strex	r3, r2, [r1]
 8009182:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009184:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009186:	2b00      	cmp	r3, #0
 8009188:	d1e3      	bne.n	8009152 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2220      	movs	r2, #32
 800918e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	330c      	adds	r3, #12
 800919e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091a2:	e853 3f00 	ldrex	r3, [r3]
 80091a6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80091a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091aa:	f023 0310 	bic.w	r3, r3, #16
 80091ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	330c      	adds	r3, #12
 80091b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80091bc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80091be:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80091c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80091c4:	e841 2300 	strex	r3, r2, [r1]
 80091c8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80091ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d1e3      	bne.n	8009198 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7fd fa51 	bl	800667c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	1ad3      	subs	r3, r2, r3
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	4619      	mov	r1, r3
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 f8ca 	bl	8009384 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80091f0:	e099      	b.n	8009326 <HAL_UART_IRQHandler+0x50e>
 80091f2:	bf00      	nop
 80091f4:	08009897 	.word	0x08009897
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009200:	b29b      	uxth	r3, r3
 8009202:	1ad3      	subs	r3, r2, r3
 8009204:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800920c:	b29b      	uxth	r3, r3
 800920e:	2b00      	cmp	r3, #0
 8009210:	f000 808b 	beq.w	800932a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009214:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009218:	2b00      	cmp	r3, #0
 800921a:	f000 8086 	beq.w	800932a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	330c      	adds	r3, #12
 8009224:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009228:	e853 3f00 	ldrex	r3, [r3]
 800922c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800922e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009230:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009234:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	330c      	adds	r3, #12
 800923e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009242:	647a      	str	r2, [r7, #68]	@ 0x44
 8009244:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009246:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009248:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800924a:	e841 2300 	strex	r3, r2, [r1]
 800924e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009250:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009252:	2b00      	cmp	r3, #0
 8009254:	d1e3      	bne.n	800921e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	3314      	adds	r3, #20
 800925c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800925e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009260:	e853 3f00 	ldrex	r3, [r3]
 8009264:	623b      	str	r3, [r7, #32]
   return(result);
 8009266:	6a3b      	ldr	r3, [r7, #32]
 8009268:	f023 0301 	bic.w	r3, r3, #1
 800926c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	3314      	adds	r3, #20
 8009276:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800927a:	633a      	str	r2, [r7, #48]	@ 0x30
 800927c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800927e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009280:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009282:	e841 2300 	strex	r3, r2, [r1]
 8009286:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800928a:	2b00      	cmp	r3, #0
 800928c:	d1e3      	bne.n	8009256 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2220      	movs	r2, #32
 8009292:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	330c      	adds	r3, #12
 80092a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	e853 3f00 	ldrex	r3, [r3]
 80092aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f023 0310 	bic.w	r3, r3, #16
 80092b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	330c      	adds	r3, #12
 80092bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80092c0:	61fa      	str	r2, [r7, #28]
 80092c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c4:	69b9      	ldr	r1, [r7, #24]
 80092c6:	69fa      	ldr	r2, [r7, #28]
 80092c8:	e841 2300 	strex	r3, r2, [r1]
 80092cc:	617b      	str	r3, [r7, #20]
   return(result);
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d1e3      	bne.n	800929c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80092d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80092d8:	4619      	mov	r1, r3
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 f852 	bl	8009384 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80092e0:	e023      	b.n	800932a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80092e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d009      	beq.n	8009302 <HAL_UART_IRQHandler+0x4ea>
 80092ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d003      	beq.n	8009302 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 fadf 	bl	80098be <UART_Transmit_IT>
    return;
 8009300:	e014      	b.n	800932c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800930a:	2b00      	cmp	r3, #0
 800930c:	d00e      	beq.n	800932c <HAL_UART_IRQHandler+0x514>
 800930e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009316:	2b00      	cmp	r3, #0
 8009318:	d008      	beq.n	800932c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 fb1f 	bl	800995e <UART_EndTransmit_IT>
    return;
 8009320:	e004      	b.n	800932c <HAL_UART_IRQHandler+0x514>
    return;
 8009322:	bf00      	nop
 8009324:	e002      	b.n	800932c <HAL_UART_IRQHandler+0x514>
      return;
 8009326:	bf00      	nop
 8009328:	e000      	b.n	800932c <HAL_UART_IRQHandler+0x514>
      return;
 800932a:	bf00      	nop
  }
}
 800932c:	37e8      	adds	r7, #232	@ 0xe8
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop

08009334 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800933c:	bf00      	nop
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009350:	bf00      	nop
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009364:	bf00      	nop
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009378:	bf00      	nop
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	460b      	mov	r3, r1
 800938e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009390:	bf00      	nop
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr

0800939c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b090      	sub	sp, #64	@ 0x40
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d137      	bne.n	8009428 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80093b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093ba:	2200      	movs	r2, #0
 80093bc:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80093be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	3314      	adds	r3, #20
 80093c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c8:	e853 3f00 	ldrex	r3, [r3]
 80093cc:	623b      	str	r3, [r7, #32]
   return(result);
 80093ce:	6a3b      	ldr	r3, [r7, #32]
 80093d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80093d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80093d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	3314      	adds	r3, #20
 80093dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80093de:	633a      	str	r2, [r7, #48]	@ 0x30
 80093e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093e6:	e841 2300 	strex	r3, r2, [r1]
 80093ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80093ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d1e5      	bne.n	80093be <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	330c      	adds	r3, #12
 80093f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	e853 3f00 	ldrex	r3, [r3]
 8009400:	60fb      	str	r3, [r7, #12]
   return(result);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009408:	637b      	str	r3, [r7, #52]	@ 0x34
 800940a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	330c      	adds	r3, #12
 8009410:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009412:	61fa      	str	r2, [r7, #28]
 8009414:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009416:	69b9      	ldr	r1, [r7, #24]
 8009418:	69fa      	ldr	r2, [r7, #28]
 800941a:	e841 2300 	strex	r3, r2, [r1]
 800941e:	617b      	str	r3, [r7, #20]
   return(result);
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d1e5      	bne.n	80093f2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009426:	e002      	b.n	800942e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009428:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800942a:	f7ff ff83 	bl	8009334 <HAL_UART_TxCpltCallback>
}
 800942e:	bf00      	nop
 8009430:	3740      	adds	r7, #64	@ 0x40
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b084      	sub	sp, #16
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009442:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f7ff ff7f 	bl	8009348 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800944a:	bf00      	nop
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009452:	b580      	push	{r7, lr}
 8009454:	b09c      	sub	sp, #112	@ 0x70
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800945e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800946a:	2b00      	cmp	r3, #0
 800946c:	d172      	bne.n	8009554 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800946e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009470:	2200      	movs	r2, #0
 8009472:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009474:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	330c      	adds	r3, #12
 800947a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800947e:	e853 3f00 	ldrex	r3, [r3]
 8009482:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009484:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009486:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800948a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800948c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	330c      	adds	r3, #12
 8009492:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009494:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009496:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009498:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800949a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800949c:	e841 2300 	strex	r3, r2, [r1]
 80094a0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80094a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d1e5      	bne.n	8009474 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	3314      	adds	r3, #20
 80094ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094b2:	e853 3f00 	ldrex	r3, [r3]
 80094b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094ba:	f023 0301 	bic.w	r3, r3, #1
 80094be:	667b      	str	r3, [r7, #100]	@ 0x64
 80094c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	3314      	adds	r3, #20
 80094c6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80094c8:	647a      	str	r2, [r7, #68]	@ 0x44
 80094ca:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094d0:	e841 2300 	strex	r3, r2, [r1]
 80094d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d1e5      	bne.n	80094a8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	3314      	adds	r3, #20
 80094e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e6:	e853 3f00 	ldrex	r3, [r3]
 80094ea:	623b      	str	r3, [r7, #32]
   return(result);
 80094ec:	6a3b      	ldr	r3, [r7, #32]
 80094ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80094f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	3314      	adds	r3, #20
 80094fa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80094fc:	633a      	str	r2, [r7, #48]	@ 0x30
 80094fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009500:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009502:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009504:	e841 2300 	strex	r3, r2, [r1]
 8009508:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800950a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800950c:	2b00      	cmp	r3, #0
 800950e:	d1e5      	bne.n	80094dc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009510:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009512:	2220      	movs	r2, #32
 8009514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009518:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800951a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800951c:	2b01      	cmp	r3, #1
 800951e:	d119      	bne.n	8009554 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009520:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	330c      	adds	r3, #12
 8009526:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	e853 3f00 	ldrex	r3, [r3]
 800952e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f023 0310 	bic.w	r3, r3, #16
 8009536:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009538:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	330c      	adds	r3, #12
 800953e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009540:	61fa      	str	r2, [r7, #28]
 8009542:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009544:	69b9      	ldr	r1, [r7, #24]
 8009546:	69fa      	ldr	r2, [r7, #28]
 8009548:	e841 2300 	strex	r3, r2, [r1]
 800954c:	617b      	str	r3, [r7, #20]
   return(result);
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d1e5      	bne.n	8009520 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009554:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009558:	2b01      	cmp	r3, #1
 800955a:	d106      	bne.n	800956a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800955c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800955e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009560:	4619      	mov	r1, r3
 8009562:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009564:	f7ff ff0e 	bl	8009384 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009568:	e002      	b.n	8009570 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800956a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800956c:	f7fa f9f0 	bl	8003950 <HAL_UART_RxCpltCallback>
}
 8009570:	bf00      	nop
 8009572:	3770      	adds	r7, #112	@ 0x70
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009584:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800958a:	2b01      	cmp	r3, #1
 800958c:	d108      	bne.n	80095a0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009592:	085b      	lsrs	r3, r3, #1
 8009594:	b29b      	uxth	r3, r3
 8009596:	4619      	mov	r1, r3
 8009598:	68f8      	ldr	r0, [r7, #12]
 800959a:	f7ff fef3 	bl	8009384 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800959e:	e002      	b.n	80095a6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80095a0:	68f8      	ldr	r0, [r7, #12]
 80095a2:	f7ff fedb 	bl	800935c <HAL_UART_RxHalfCpltCallback>
}
 80095a6:	bf00      	nop
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b084      	sub	sp, #16
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80095b6:	2300      	movs	r3, #0
 80095b8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095be:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	695b      	ldr	r3, [r3, #20]
 80095c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095ca:	2b80      	cmp	r3, #128	@ 0x80
 80095cc:	bf0c      	ite	eq
 80095ce:	2301      	moveq	r3, #1
 80095d0:	2300      	movne	r3, #0
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	2b21      	cmp	r3, #33	@ 0x21
 80095e0:	d108      	bne.n	80095f4 <UART_DMAError+0x46>
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d005      	beq.n	80095f4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	2200      	movs	r2, #0
 80095ec:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80095ee:	68b8      	ldr	r0, [r7, #8]
 80095f0:	f000 f8c6 	bl	8009780 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	695b      	ldr	r3, [r3, #20]
 80095fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095fe:	2b40      	cmp	r3, #64	@ 0x40
 8009600:	bf0c      	ite	eq
 8009602:	2301      	moveq	r3, #1
 8009604:	2300      	movne	r3, #0
 8009606:	b2db      	uxtb	r3, r3
 8009608:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009610:	b2db      	uxtb	r3, r3
 8009612:	2b22      	cmp	r3, #34	@ 0x22
 8009614:	d108      	bne.n	8009628 <UART_DMAError+0x7a>
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d005      	beq.n	8009628 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	2200      	movs	r2, #0
 8009620:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8009622:	68b8      	ldr	r0, [r7, #8]
 8009624:	f000 f8d4 	bl	80097d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800962c:	f043 0210 	orr.w	r2, r3, #16
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009634:	68b8      	ldr	r0, [r7, #8]
 8009636:	f7ff fe9b 	bl	8009370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800963a:	bf00      	nop
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
	...

08009644 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b098      	sub	sp, #96	@ 0x60
 8009648:	af00      	add	r7, sp, #0
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	60b9      	str	r1, [r7, #8]
 800964e:	4613      	mov	r3, r2
 8009650:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009652:	68ba      	ldr	r2, [r7, #8]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	88fa      	ldrh	r2, [r7, #6]
 800965c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2200      	movs	r2, #0
 8009662:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2222      	movs	r2, #34	@ 0x22
 8009668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009670:	4a40      	ldr	r2, [pc, #256]	@ (8009774 <UART_Start_Receive_DMA+0x130>)
 8009672:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009678:	4a3f      	ldr	r2, [pc, #252]	@ (8009778 <UART_Start_Receive_DMA+0x134>)
 800967a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009680:	4a3e      	ldr	r2, [pc, #248]	@ (800977c <UART_Start_Receive_DMA+0x138>)
 8009682:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009688:	2200      	movs	r2, #0
 800968a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800968c:	f107 0308 	add.w	r3, r7, #8
 8009690:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	3304      	adds	r3, #4
 800969c:	4619      	mov	r1, r3
 800969e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	88fb      	ldrh	r3, [r7, #6]
 80096a4:	f7fc ff92 	bl	80065cc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80096a8:	2300      	movs	r3, #0
 80096aa:	613b      	str	r3, [r7, #16]
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	613b      	str	r3, [r7, #16]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	613b      	str	r3, [r7, #16]
 80096bc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	691b      	ldr	r3, [r3, #16]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d019      	beq.n	8009702 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	330c      	adds	r3, #12
 80096d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096d8:	e853 3f00 	ldrex	r3, [r3]
 80096dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80096de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80096e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	330c      	adds	r3, #12
 80096ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80096ee:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80096f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80096f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80096f6:	e841 2300 	strex	r3, r2, [r1]
 80096fa:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80096fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d1e5      	bne.n	80096ce <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	3314      	adds	r3, #20
 8009708:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800970a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800970c:	e853 3f00 	ldrex	r3, [r3]
 8009710:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009714:	f043 0301 	orr.w	r3, r3, #1
 8009718:	657b      	str	r3, [r7, #84]	@ 0x54
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	3314      	adds	r3, #20
 8009720:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009722:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009724:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009726:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009728:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800972a:	e841 2300 	strex	r3, r2, [r1]
 800972e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009732:	2b00      	cmp	r3, #0
 8009734:	d1e5      	bne.n	8009702 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	3314      	adds	r3, #20
 800973c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800973e:	69bb      	ldr	r3, [r7, #24]
 8009740:	e853 3f00 	ldrex	r3, [r3]
 8009744:	617b      	str	r3, [r7, #20]
   return(result);
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800974c:	653b      	str	r3, [r7, #80]	@ 0x50
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	3314      	adds	r3, #20
 8009754:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009756:	627a      	str	r2, [r7, #36]	@ 0x24
 8009758:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800975a:	6a39      	ldr	r1, [r7, #32]
 800975c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800975e:	e841 2300 	strex	r3, r2, [r1]
 8009762:	61fb      	str	r3, [r7, #28]
   return(result);
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d1e5      	bne.n	8009736 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800976a:	2300      	movs	r3, #0
}
 800976c:	4618      	mov	r0, r3
 800976e:	3760      	adds	r7, #96	@ 0x60
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}
 8009774:	08009453 	.word	0x08009453
 8009778:	08009579 	.word	0x08009579
 800977c:	080095af 	.word	0x080095af

08009780 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009780:	b480      	push	{r7}
 8009782:	b089      	sub	sp, #36	@ 0x24
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	330c      	adds	r3, #12
 800978e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	e853 3f00 	ldrex	r3, [r3]
 8009796:	60bb      	str	r3, [r7, #8]
   return(result);
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800979e:	61fb      	str	r3, [r7, #28]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	330c      	adds	r3, #12
 80097a6:	69fa      	ldr	r2, [r7, #28]
 80097a8:	61ba      	str	r2, [r7, #24]
 80097aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ac:	6979      	ldr	r1, [r7, #20]
 80097ae:	69ba      	ldr	r2, [r7, #24]
 80097b0:	e841 2300 	strex	r3, r2, [r1]
 80097b4:	613b      	str	r3, [r7, #16]
   return(result);
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d1e5      	bne.n	8009788 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2220      	movs	r2, #32
 80097c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 80097c4:	bf00      	nop
 80097c6:	3724      	adds	r7, #36	@ 0x24
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b095      	sub	sp, #84	@ 0x54
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	330c      	adds	r3, #12
 80097de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097e2:	e853 3f00 	ldrex	r3, [r3]
 80097e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80097e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	330c      	adds	r3, #12
 80097f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80097f8:	643a      	str	r2, [r7, #64]	@ 0x40
 80097fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80097fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009800:	e841 2300 	strex	r3, r2, [r1]
 8009804:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009808:	2b00      	cmp	r3, #0
 800980a:	d1e5      	bne.n	80097d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	3314      	adds	r3, #20
 8009812:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009814:	6a3b      	ldr	r3, [r7, #32]
 8009816:	e853 3f00 	ldrex	r3, [r3]
 800981a:	61fb      	str	r3, [r7, #28]
   return(result);
 800981c:	69fb      	ldr	r3, [r7, #28]
 800981e:	f023 0301 	bic.w	r3, r3, #1
 8009822:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	3314      	adds	r3, #20
 800982a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800982c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800982e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009830:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009832:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009834:	e841 2300 	strex	r3, r2, [r1]
 8009838:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800983a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800983c:	2b00      	cmp	r3, #0
 800983e:	d1e5      	bne.n	800980c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009844:	2b01      	cmp	r3, #1
 8009846:	d119      	bne.n	800987c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	330c      	adds	r3, #12
 800984e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	e853 3f00 	ldrex	r3, [r3]
 8009856:	60bb      	str	r3, [r7, #8]
   return(result);
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	f023 0310 	bic.w	r3, r3, #16
 800985e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	330c      	adds	r3, #12
 8009866:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009868:	61ba      	str	r2, [r7, #24]
 800986a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986c:	6979      	ldr	r1, [r7, #20]
 800986e:	69ba      	ldr	r2, [r7, #24]
 8009870:	e841 2300 	strex	r3, r2, [r1]
 8009874:	613b      	str	r3, [r7, #16]
   return(result);
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d1e5      	bne.n	8009848 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2220      	movs	r2, #32
 8009880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800988a:	bf00      	nop
 800988c:	3754      	adds	r7, #84	@ 0x54
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr

08009896 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b084      	sub	sp, #16
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2200      	movs	r2, #0
 80098a8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2200      	movs	r2, #0
 80098ae:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80098b0:	68f8      	ldr	r0, [r7, #12]
 80098b2:	f7ff fd5d 	bl	8009370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098b6:	bf00      	nop
 80098b8:	3710      	adds	r7, #16
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}

080098be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80098be:	b480      	push	{r7}
 80098c0:	b085      	sub	sp, #20
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	2b21      	cmp	r3, #33	@ 0x21
 80098d0:	d13e      	bne.n	8009950 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098da:	d114      	bne.n	8009906 <UART_Transmit_IT+0x48>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d110      	bne.n	8009906 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6a1b      	ldr	r3, [r3, #32]
 80098e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	881b      	ldrh	r3, [r3, #0]
 80098ee:	461a      	mov	r2, r3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6a1b      	ldr	r3, [r3, #32]
 80098fe:	1c9a      	adds	r2, r3, #2
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	621a      	str	r2, [r3, #32]
 8009904:	e008      	b.n	8009918 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6a1b      	ldr	r3, [r3, #32]
 800990a:	1c59      	adds	r1, r3, #1
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	6211      	str	r1, [r2, #32]
 8009910:	781a      	ldrb	r2, [r3, #0]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800991c:	b29b      	uxth	r3, r3
 800991e:	3b01      	subs	r3, #1
 8009920:	b29b      	uxth	r3, r3
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	4619      	mov	r1, r3
 8009926:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009928:	2b00      	cmp	r3, #0
 800992a:	d10f      	bne.n	800994c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	68da      	ldr	r2, [r3, #12]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800993a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	68da      	ldr	r2, [r3, #12]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800994a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800994c:	2300      	movs	r3, #0
 800994e:	e000      	b.n	8009952 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009950:	2302      	movs	r3, #2
  }
}
 8009952:	4618      	mov	r0, r3
 8009954:	3714      	adds	r7, #20
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr

0800995e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800995e:	b580      	push	{r7, lr}
 8009960:	b082      	sub	sp, #8
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	68da      	ldr	r2, [r3, #12]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009974:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2220      	movs	r2, #32
 800997a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f7ff fcd8 	bl	8009334 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009984:	2300      	movs	r3, #0
}
 8009986:	4618      	mov	r0, r3
 8009988:	3708      	adds	r7, #8
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b08c      	sub	sp, #48	@ 0x30
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800999c:	b2db      	uxtb	r3, r3
 800999e:	2b22      	cmp	r3, #34	@ 0x22
 80099a0:	f040 80ab 	bne.w	8009afa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099ac:	d117      	bne.n	80099de <UART_Receive_IT+0x50>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	691b      	ldr	r3, [r3, #16]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d113      	bne.n	80099de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80099b6:	2300      	movs	r3, #0
 80099b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099be:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099cc:	b29a      	uxth	r2, r3
 80099ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099d6:	1c9a      	adds	r2, r3, #2
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	629a      	str	r2, [r3, #40]	@ 0x28
 80099dc:	e026      	b.n	8009a2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80099e4:	2300      	movs	r3, #0
 80099e6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099f0:	d007      	beq.n	8009a02 <UART_Receive_IT+0x74>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d10a      	bne.n	8009a10 <UART_Receive_IT+0x82>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	691b      	ldr	r3, [r3, #16]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d106      	bne.n	8009a10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	b2da      	uxtb	r2, r3
 8009a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a0c:	701a      	strb	r2, [r3, #0]
 8009a0e:	e008      	b.n	8009a22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a1c:	b2da      	uxtb	r2, r3
 8009a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a26:	1c5a      	adds	r2, r3, #1
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	3b01      	subs	r3, #1
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	4619      	mov	r1, r3
 8009a3a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d15a      	bne.n	8009af6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	68da      	ldr	r2, [r3, #12]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f022 0220 	bic.w	r2, r2, #32
 8009a4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	68da      	ldr	r2, [r3, #12]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009a5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	695a      	ldr	r2, [r3, #20]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f022 0201 	bic.w	r2, r2, #1
 8009a6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2220      	movs	r2, #32
 8009a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d135      	bne.n	8009aec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	330c      	adds	r3, #12
 8009a8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	e853 3f00 	ldrex	r3, [r3]
 8009a94:	613b      	str	r3, [r7, #16]
   return(result);
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	f023 0310 	bic.w	r3, r3, #16
 8009a9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	330c      	adds	r3, #12
 8009aa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009aa6:	623a      	str	r2, [r7, #32]
 8009aa8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aaa:	69f9      	ldr	r1, [r7, #28]
 8009aac:	6a3a      	ldr	r2, [r7, #32]
 8009aae:	e841 2300 	strex	r3, r2, [r1]
 8009ab2:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d1e5      	bne.n	8009a86 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f003 0310 	and.w	r3, r3, #16
 8009ac4:	2b10      	cmp	r3, #16
 8009ac6:	d10a      	bne.n	8009ade <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009ac8:	2300      	movs	r3, #0
 8009aca:	60fb      	str	r3, [r7, #12]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	60fb      	str	r3, [r7, #12]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	60fb      	str	r3, [r7, #12]
 8009adc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f7ff fc4d 	bl	8009384 <HAL_UARTEx_RxEventCallback>
 8009aea:	e002      	b.n	8009af2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f7f9 ff2f 	bl	8003950 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009af2:	2300      	movs	r3, #0
 8009af4:	e002      	b.n	8009afc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009af6:	2300      	movs	r3, #0
 8009af8:	e000      	b.n	8009afc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009afa:	2302      	movs	r3, #2
  }
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3730      	adds	r7, #48	@ 0x30
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b08:	b0c0      	sub	sp, #256	@ 0x100
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b20:	68d9      	ldr	r1, [r3, #12]
 8009b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b26:	681a      	ldr	r2, [r3, #0]
 8009b28:	ea40 0301 	orr.w	r3, r0, r1
 8009b2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b32:	689a      	ldr	r2, [r3, #8]
 8009b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b38:	691b      	ldr	r3, [r3, #16]
 8009b3a:	431a      	orrs	r2, r3
 8009b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b40:	695b      	ldr	r3, [r3, #20]
 8009b42:	431a      	orrs	r2, r3
 8009b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b48:	69db      	ldr	r3, [r3, #28]
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	68db      	ldr	r3, [r3, #12]
 8009b58:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009b5c:	f021 010c 	bic.w	r1, r1, #12
 8009b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009b6a:	430b      	orrs	r3, r1
 8009b6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	695b      	ldr	r3, [r3, #20]
 8009b76:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b7e:	6999      	ldr	r1, [r3, #24]
 8009b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	ea40 0301 	orr.w	r3, r0, r1
 8009b8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	4b8f      	ldr	r3, [pc, #572]	@ (8009dd0 <UART_SetConfig+0x2cc>)
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d005      	beq.n	8009ba4 <UART_SetConfig+0xa0>
 8009b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	4b8d      	ldr	r3, [pc, #564]	@ (8009dd4 <UART_SetConfig+0x2d0>)
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d104      	bne.n	8009bae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009ba4:	f7fd fe88 	bl	80078b8 <HAL_RCC_GetPCLK2Freq>
 8009ba8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009bac:	e003      	b.n	8009bb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009bae:	f7fd fe6f 	bl	8007890 <HAL_RCC_GetPCLK1Freq>
 8009bb2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bba:	69db      	ldr	r3, [r3, #28]
 8009bbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bc0:	f040 810c 	bne.w	8009ddc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009bc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009bce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009bd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009bd6:	4622      	mov	r2, r4
 8009bd8:	462b      	mov	r3, r5
 8009bda:	1891      	adds	r1, r2, r2
 8009bdc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009bde:	415b      	adcs	r3, r3
 8009be0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009be2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009be6:	4621      	mov	r1, r4
 8009be8:	eb12 0801 	adds.w	r8, r2, r1
 8009bec:	4629      	mov	r1, r5
 8009bee:	eb43 0901 	adc.w	r9, r3, r1
 8009bf2:	f04f 0200 	mov.w	r2, #0
 8009bf6:	f04f 0300 	mov.w	r3, #0
 8009bfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009bfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009c02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009c06:	4690      	mov	r8, r2
 8009c08:	4699      	mov	r9, r3
 8009c0a:	4623      	mov	r3, r4
 8009c0c:	eb18 0303 	adds.w	r3, r8, r3
 8009c10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009c14:	462b      	mov	r3, r5
 8009c16:	eb49 0303 	adc.w	r3, r9, r3
 8009c1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009c2a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009c2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009c32:	460b      	mov	r3, r1
 8009c34:	18db      	adds	r3, r3, r3
 8009c36:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c38:	4613      	mov	r3, r2
 8009c3a:	eb42 0303 	adc.w	r3, r2, r3
 8009c3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009c44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009c48:	f7f7 f886 	bl	8000d58 <__aeabi_uldivmod>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	460b      	mov	r3, r1
 8009c50:	4b61      	ldr	r3, [pc, #388]	@ (8009dd8 <UART_SetConfig+0x2d4>)
 8009c52:	fba3 2302 	umull	r2, r3, r3, r2
 8009c56:	095b      	lsrs	r3, r3, #5
 8009c58:	011c      	lsls	r4, r3, #4
 8009c5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009c64:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009c68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009c6c:	4642      	mov	r2, r8
 8009c6e:	464b      	mov	r3, r9
 8009c70:	1891      	adds	r1, r2, r2
 8009c72:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009c74:	415b      	adcs	r3, r3
 8009c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009c7c:	4641      	mov	r1, r8
 8009c7e:	eb12 0a01 	adds.w	sl, r2, r1
 8009c82:	4649      	mov	r1, r9
 8009c84:	eb43 0b01 	adc.w	fp, r3, r1
 8009c88:	f04f 0200 	mov.w	r2, #0
 8009c8c:	f04f 0300 	mov.w	r3, #0
 8009c90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009c94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009c98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009c9c:	4692      	mov	sl, r2
 8009c9e:	469b      	mov	fp, r3
 8009ca0:	4643      	mov	r3, r8
 8009ca2:	eb1a 0303 	adds.w	r3, sl, r3
 8009ca6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009caa:	464b      	mov	r3, r9
 8009cac:	eb4b 0303 	adc.w	r3, fp, r3
 8009cb0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009cc0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009cc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009cc8:	460b      	mov	r3, r1
 8009cca:	18db      	adds	r3, r3, r3
 8009ccc:	643b      	str	r3, [r7, #64]	@ 0x40
 8009cce:	4613      	mov	r3, r2
 8009cd0:	eb42 0303 	adc.w	r3, r2, r3
 8009cd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009cda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009cde:	f7f7 f83b 	bl	8000d58 <__aeabi_uldivmod>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	4611      	mov	r1, r2
 8009ce8:	4b3b      	ldr	r3, [pc, #236]	@ (8009dd8 <UART_SetConfig+0x2d4>)
 8009cea:	fba3 2301 	umull	r2, r3, r3, r1
 8009cee:	095b      	lsrs	r3, r3, #5
 8009cf0:	2264      	movs	r2, #100	@ 0x64
 8009cf2:	fb02 f303 	mul.w	r3, r2, r3
 8009cf6:	1acb      	subs	r3, r1, r3
 8009cf8:	00db      	lsls	r3, r3, #3
 8009cfa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009cfe:	4b36      	ldr	r3, [pc, #216]	@ (8009dd8 <UART_SetConfig+0x2d4>)
 8009d00:	fba3 2302 	umull	r2, r3, r3, r2
 8009d04:	095b      	lsrs	r3, r3, #5
 8009d06:	005b      	lsls	r3, r3, #1
 8009d08:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009d0c:	441c      	add	r4, r3
 8009d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d12:	2200      	movs	r2, #0
 8009d14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009d18:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009d1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009d20:	4642      	mov	r2, r8
 8009d22:	464b      	mov	r3, r9
 8009d24:	1891      	adds	r1, r2, r2
 8009d26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009d28:	415b      	adcs	r3, r3
 8009d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009d30:	4641      	mov	r1, r8
 8009d32:	1851      	adds	r1, r2, r1
 8009d34:	6339      	str	r1, [r7, #48]	@ 0x30
 8009d36:	4649      	mov	r1, r9
 8009d38:	414b      	adcs	r3, r1
 8009d3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d3c:	f04f 0200 	mov.w	r2, #0
 8009d40:	f04f 0300 	mov.w	r3, #0
 8009d44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009d48:	4659      	mov	r1, fp
 8009d4a:	00cb      	lsls	r3, r1, #3
 8009d4c:	4651      	mov	r1, sl
 8009d4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d52:	4651      	mov	r1, sl
 8009d54:	00ca      	lsls	r2, r1, #3
 8009d56:	4610      	mov	r0, r2
 8009d58:	4619      	mov	r1, r3
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	4642      	mov	r2, r8
 8009d5e:	189b      	adds	r3, r3, r2
 8009d60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009d64:	464b      	mov	r3, r9
 8009d66:	460a      	mov	r2, r1
 8009d68:	eb42 0303 	adc.w	r3, r2, r3
 8009d6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009d7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009d80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009d84:	460b      	mov	r3, r1
 8009d86:	18db      	adds	r3, r3, r3
 8009d88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009d8a:	4613      	mov	r3, r2
 8009d8c:	eb42 0303 	adc.w	r3, r2, r3
 8009d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009d96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009d9a:	f7f6 ffdd 	bl	8000d58 <__aeabi_uldivmod>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	460b      	mov	r3, r1
 8009da2:	4b0d      	ldr	r3, [pc, #52]	@ (8009dd8 <UART_SetConfig+0x2d4>)
 8009da4:	fba3 1302 	umull	r1, r3, r3, r2
 8009da8:	095b      	lsrs	r3, r3, #5
 8009daa:	2164      	movs	r1, #100	@ 0x64
 8009dac:	fb01 f303 	mul.w	r3, r1, r3
 8009db0:	1ad3      	subs	r3, r2, r3
 8009db2:	00db      	lsls	r3, r3, #3
 8009db4:	3332      	adds	r3, #50	@ 0x32
 8009db6:	4a08      	ldr	r2, [pc, #32]	@ (8009dd8 <UART_SetConfig+0x2d4>)
 8009db8:	fba2 2303 	umull	r2, r3, r2, r3
 8009dbc:	095b      	lsrs	r3, r3, #5
 8009dbe:	f003 0207 	and.w	r2, r3, #7
 8009dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4422      	add	r2, r4
 8009dca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009dcc:	e106      	b.n	8009fdc <UART_SetConfig+0x4d8>
 8009dce:	bf00      	nop
 8009dd0:	40011000 	.word	0x40011000
 8009dd4:	40011400 	.word	0x40011400
 8009dd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009ddc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009de0:	2200      	movs	r2, #0
 8009de2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009de6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009dea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009dee:	4642      	mov	r2, r8
 8009df0:	464b      	mov	r3, r9
 8009df2:	1891      	adds	r1, r2, r2
 8009df4:	6239      	str	r1, [r7, #32]
 8009df6:	415b      	adcs	r3, r3
 8009df8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009dfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009dfe:	4641      	mov	r1, r8
 8009e00:	1854      	adds	r4, r2, r1
 8009e02:	4649      	mov	r1, r9
 8009e04:	eb43 0501 	adc.w	r5, r3, r1
 8009e08:	f04f 0200 	mov.w	r2, #0
 8009e0c:	f04f 0300 	mov.w	r3, #0
 8009e10:	00eb      	lsls	r3, r5, #3
 8009e12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009e16:	00e2      	lsls	r2, r4, #3
 8009e18:	4614      	mov	r4, r2
 8009e1a:	461d      	mov	r5, r3
 8009e1c:	4643      	mov	r3, r8
 8009e1e:	18e3      	adds	r3, r4, r3
 8009e20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009e24:	464b      	mov	r3, r9
 8009e26:	eb45 0303 	adc.w	r3, r5, r3
 8009e2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	2200      	movs	r2, #0
 8009e36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009e3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009e3e:	f04f 0200 	mov.w	r2, #0
 8009e42:	f04f 0300 	mov.w	r3, #0
 8009e46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009e4a:	4629      	mov	r1, r5
 8009e4c:	008b      	lsls	r3, r1, #2
 8009e4e:	4621      	mov	r1, r4
 8009e50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e54:	4621      	mov	r1, r4
 8009e56:	008a      	lsls	r2, r1, #2
 8009e58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009e5c:	f7f6 ff7c 	bl	8000d58 <__aeabi_uldivmod>
 8009e60:	4602      	mov	r2, r0
 8009e62:	460b      	mov	r3, r1
 8009e64:	4b60      	ldr	r3, [pc, #384]	@ (8009fe8 <UART_SetConfig+0x4e4>)
 8009e66:	fba3 2302 	umull	r2, r3, r3, r2
 8009e6a:	095b      	lsrs	r3, r3, #5
 8009e6c:	011c      	lsls	r4, r3, #4
 8009e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e72:	2200      	movs	r2, #0
 8009e74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009e78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009e7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009e80:	4642      	mov	r2, r8
 8009e82:	464b      	mov	r3, r9
 8009e84:	1891      	adds	r1, r2, r2
 8009e86:	61b9      	str	r1, [r7, #24]
 8009e88:	415b      	adcs	r3, r3
 8009e8a:	61fb      	str	r3, [r7, #28]
 8009e8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009e90:	4641      	mov	r1, r8
 8009e92:	1851      	adds	r1, r2, r1
 8009e94:	6139      	str	r1, [r7, #16]
 8009e96:	4649      	mov	r1, r9
 8009e98:	414b      	adcs	r3, r1
 8009e9a:	617b      	str	r3, [r7, #20]
 8009e9c:	f04f 0200 	mov.w	r2, #0
 8009ea0:	f04f 0300 	mov.w	r3, #0
 8009ea4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009ea8:	4659      	mov	r1, fp
 8009eaa:	00cb      	lsls	r3, r1, #3
 8009eac:	4651      	mov	r1, sl
 8009eae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009eb2:	4651      	mov	r1, sl
 8009eb4:	00ca      	lsls	r2, r1, #3
 8009eb6:	4610      	mov	r0, r2
 8009eb8:	4619      	mov	r1, r3
 8009eba:	4603      	mov	r3, r0
 8009ebc:	4642      	mov	r2, r8
 8009ebe:	189b      	adds	r3, r3, r2
 8009ec0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009ec4:	464b      	mov	r3, r9
 8009ec6:	460a      	mov	r2, r1
 8009ec8:	eb42 0303 	adc.w	r3, r2, r3
 8009ecc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009eda:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009edc:	f04f 0200 	mov.w	r2, #0
 8009ee0:	f04f 0300 	mov.w	r3, #0
 8009ee4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009ee8:	4649      	mov	r1, r9
 8009eea:	008b      	lsls	r3, r1, #2
 8009eec:	4641      	mov	r1, r8
 8009eee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ef2:	4641      	mov	r1, r8
 8009ef4:	008a      	lsls	r2, r1, #2
 8009ef6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009efa:	f7f6 ff2d 	bl	8000d58 <__aeabi_uldivmod>
 8009efe:	4602      	mov	r2, r0
 8009f00:	460b      	mov	r3, r1
 8009f02:	4611      	mov	r1, r2
 8009f04:	4b38      	ldr	r3, [pc, #224]	@ (8009fe8 <UART_SetConfig+0x4e4>)
 8009f06:	fba3 2301 	umull	r2, r3, r3, r1
 8009f0a:	095b      	lsrs	r3, r3, #5
 8009f0c:	2264      	movs	r2, #100	@ 0x64
 8009f0e:	fb02 f303 	mul.w	r3, r2, r3
 8009f12:	1acb      	subs	r3, r1, r3
 8009f14:	011b      	lsls	r3, r3, #4
 8009f16:	3332      	adds	r3, #50	@ 0x32
 8009f18:	4a33      	ldr	r2, [pc, #204]	@ (8009fe8 <UART_SetConfig+0x4e4>)
 8009f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f1e:	095b      	lsrs	r3, r3, #5
 8009f20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009f24:	441c      	add	r4, r3
 8009f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8009f2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8009f30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009f34:	4642      	mov	r2, r8
 8009f36:	464b      	mov	r3, r9
 8009f38:	1891      	adds	r1, r2, r2
 8009f3a:	60b9      	str	r1, [r7, #8]
 8009f3c:	415b      	adcs	r3, r3
 8009f3e:	60fb      	str	r3, [r7, #12]
 8009f40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009f44:	4641      	mov	r1, r8
 8009f46:	1851      	adds	r1, r2, r1
 8009f48:	6039      	str	r1, [r7, #0]
 8009f4a:	4649      	mov	r1, r9
 8009f4c:	414b      	adcs	r3, r1
 8009f4e:	607b      	str	r3, [r7, #4]
 8009f50:	f04f 0200 	mov.w	r2, #0
 8009f54:	f04f 0300 	mov.w	r3, #0
 8009f58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009f5c:	4659      	mov	r1, fp
 8009f5e:	00cb      	lsls	r3, r1, #3
 8009f60:	4651      	mov	r1, sl
 8009f62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f66:	4651      	mov	r1, sl
 8009f68:	00ca      	lsls	r2, r1, #3
 8009f6a:	4610      	mov	r0, r2
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	4603      	mov	r3, r0
 8009f70:	4642      	mov	r2, r8
 8009f72:	189b      	adds	r3, r3, r2
 8009f74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f76:	464b      	mov	r3, r9
 8009f78:	460a      	mov	r2, r1
 8009f7a:	eb42 0303 	adc.w	r3, r2, r3
 8009f7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	2200      	movs	r2, #0
 8009f88:	663b      	str	r3, [r7, #96]	@ 0x60
 8009f8a:	667a      	str	r2, [r7, #100]	@ 0x64
 8009f8c:	f04f 0200 	mov.w	r2, #0
 8009f90:	f04f 0300 	mov.w	r3, #0
 8009f94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009f98:	4649      	mov	r1, r9
 8009f9a:	008b      	lsls	r3, r1, #2
 8009f9c:	4641      	mov	r1, r8
 8009f9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009fa2:	4641      	mov	r1, r8
 8009fa4:	008a      	lsls	r2, r1, #2
 8009fa6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009faa:	f7f6 fed5 	bl	8000d58 <__aeabi_uldivmod>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8009fe8 <UART_SetConfig+0x4e4>)
 8009fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8009fb8:	095b      	lsrs	r3, r3, #5
 8009fba:	2164      	movs	r1, #100	@ 0x64
 8009fbc:	fb01 f303 	mul.w	r3, r1, r3
 8009fc0:	1ad3      	subs	r3, r2, r3
 8009fc2:	011b      	lsls	r3, r3, #4
 8009fc4:	3332      	adds	r3, #50	@ 0x32
 8009fc6:	4a08      	ldr	r2, [pc, #32]	@ (8009fe8 <UART_SetConfig+0x4e4>)
 8009fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8009fcc:	095b      	lsrs	r3, r3, #5
 8009fce:	f003 020f 	and.w	r2, r3, #15
 8009fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4422      	add	r2, r4
 8009fda:	609a      	str	r2, [r3, #8]
}
 8009fdc:	bf00      	nop
 8009fde:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009fe8:	51eb851f 	.word	0x51eb851f

08009fec <__NVIC_SetPriority>:
{
 8009fec:	b480      	push	{r7}
 8009fee:	b083      	sub	sp, #12
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	6039      	str	r1, [r7, #0]
 8009ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	db0a      	blt.n	800a016 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	b2da      	uxtb	r2, r3
 800a004:	490c      	ldr	r1, [pc, #48]	@ (800a038 <__NVIC_SetPriority+0x4c>)
 800a006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a00a:	0112      	lsls	r2, r2, #4
 800a00c:	b2d2      	uxtb	r2, r2
 800a00e:	440b      	add	r3, r1
 800a010:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a014:	e00a      	b.n	800a02c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	b2da      	uxtb	r2, r3
 800a01a:	4908      	ldr	r1, [pc, #32]	@ (800a03c <__NVIC_SetPriority+0x50>)
 800a01c:	79fb      	ldrb	r3, [r7, #7]
 800a01e:	f003 030f 	and.w	r3, r3, #15
 800a022:	3b04      	subs	r3, #4
 800a024:	0112      	lsls	r2, r2, #4
 800a026:	b2d2      	uxtb	r2, r2
 800a028:	440b      	add	r3, r1
 800a02a:	761a      	strb	r2, [r3, #24]
}
 800a02c:	bf00      	nop
 800a02e:	370c      	adds	r7, #12
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr
 800a038:	e000e100 	.word	0xe000e100
 800a03c:	e000ed00 	.word	0xe000ed00

0800a040 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a040:	b580      	push	{r7, lr}
 800a042:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a044:	4b05      	ldr	r3, [pc, #20]	@ (800a05c <SysTick_Handler+0x1c>)
 800a046:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a048:	f001 fd6e 	bl	800bb28 <xTaskGetSchedulerState>
 800a04c:	4603      	mov	r3, r0
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d001      	beq.n	800a056 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a052:	f002 fb69 	bl	800c728 <xPortSysTickHandler>
  }
}
 800a056:	bf00      	nop
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	e000e010 	.word	0xe000e010

0800a060 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a060:	b580      	push	{r7, lr}
 800a062:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a064:	2100      	movs	r1, #0
 800a066:	f06f 0004 	mvn.w	r0, #4
 800a06a:	f7ff ffbf 	bl	8009fec <__NVIC_SetPriority>
#endif
}
 800a06e:	bf00      	nop
 800a070:	bd80      	pop	{r7, pc}
	...

0800a074 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a074:	b480      	push	{r7}
 800a076:	b083      	sub	sp, #12
 800a078:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a07a:	f3ef 8305 	mrs	r3, IPSR
 800a07e:	603b      	str	r3, [r7, #0]
  return(result);
 800a080:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a082:	2b00      	cmp	r3, #0
 800a084:	d003      	beq.n	800a08e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a086:	f06f 0305 	mvn.w	r3, #5
 800a08a:	607b      	str	r3, [r7, #4]
 800a08c:	e00c      	b.n	800a0a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a08e:	4b0a      	ldr	r3, [pc, #40]	@ (800a0b8 <osKernelInitialize+0x44>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d105      	bne.n	800a0a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a096:	4b08      	ldr	r3, [pc, #32]	@ (800a0b8 <osKernelInitialize+0x44>)
 800a098:	2201      	movs	r2, #1
 800a09a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a09c:	2300      	movs	r3, #0
 800a09e:	607b      	str	r3, [r7, #4]
 800a0a0:	e002      	b.n	800a0a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a0a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a0a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a0a8:	687b      	ldr	r3, [r7, #4]
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	370c      	adds	r7, #12
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop
 800a0b8:	20008720 	.word	0x20008720

0800a0bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0c2:	f3ef 8305 	mrs	r3, IPSR
 800a0c6:	603b      	str	r3, [r7, #0]
  return(result);
 800a0c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d003      	beq.n	800a0d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a0ce:	f06f 0305 	mvn.w	r3, #5
 800a0d2:	607b      	str	r3, [r7, #4]
 800a0d4:	e010      	b.n	800a0f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a0d6:	4b0b      	ldr	r3, [pc, #44]	@ (800a104 <osKernelStart+0x48>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d109      	bne.n	800a0f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a0de:	f7ff ffbf 	bl	800a060 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a0e2:	4b08      	ldr	r3, [pc, #32]	@ (800a104 <osKernelStart+0x48>)
 800a0e4:	2202      	movs	r2, #2
 800a0e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a0e8:	f001 f892 	bl	800b210 <vTaskStartScheduler>
      stat = osOK;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	607b      	str	r3, [r7, #4]
 800a0f0:	e002      	b.n	800a0f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a0f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a0f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a0f8:	687b      	ldr	r3, [r7, #4]
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3708      	adds	r7, #8
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop
 800a104:	20008720 	.word	0x20008720

0800a108 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a108:	b580      	push	{r7, lr}
 800a10a:	b08e      	sub	sp, #56	@ 0x38
 800a10c:	af04      	add	r7, sp, #16
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a114:	2300      	movs	r3, #0
 800a116:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a118:	f3ef 8305 	mrs	r3, IPSR
 800a11c:	617b      	str	r3, [r7, #20]
  return(result);
 800a11e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a120:	2b00      	cmp	r3, #0
 800a122:	d17e      	bne.n	800a222 <osThreadNew+0x11a>
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d07b      	beq.n	800a222 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a12a:	2380      	movs	r3, #128	@ 0x80
 800a12c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a12e:	2318      	movs	r3, #24
 800a130:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a132:	2300      	movs	r3, #0
 800a134:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a136:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a13a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d045      	beq.n	800a1ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d002      	beq.n	800a150 <osThreadNew+0x48>
        name = attr->name;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	699b      	ldr	r3, [r3, #24]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d002      	beq.n	800a15e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	699b      	ldr	r3, [r3, #24]
 800a15c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a15e:	69fb      	ldr	r3, [r7, #28]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d008      	beq.n	800a176 <osThreadNew+0x6e>
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	2b38      	cmp	r3, #56	@ 0x38
 800a168:	d805      	bhi.n	800a176 <osThreadNew+0x6e>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	f003 0301 	and.w	r3, r3, #1
 800a172:	2b00      	cmp	r3, #0
 800a174:	d001      	beq.n	800a17a <osThreadNew+0x72>
        return (NULL);
 800a176:	2300      	movs	r3, #0
 800a178:	e054      	b.n	800a224 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	695b      	ldr	r3, [r3, #20]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d003      	beq.n	800a18a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	695b      	ldr	r3, [r3, #20]
 800a186:	089b      	lsrs	r3, r3, #2
 800a188:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d00e      	beq.n	800a1b0 <osThreadNew+0xa8>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	2ba7      	cmp	r3, #167	@ 0xa7
 800a198:	d90a      	bls.n	800a1b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d006      	beq.n	800a1b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	695b      	ldr	r3, [r3, #20]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d002      	beq.n	800a1b0 <osThreadNew+0xa8>
        mem = 1;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	61bb      	str	r3, [r7, #24]
 800a1ae:	e010      	b.n	800a1d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d10c      	bne.n	800a1d2 <osThreadNew+0xca>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	68db      	ldr	r3, [r3, #12]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d108      	bne.n	800a1d2 <osThreadNew+0xca>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	691b      	ldr	r3, [r3, #16]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d104      	bne.n	800a1d2 <osThreadNew+0xca>
          mem = 0;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	61bb      	str	r3, [r7, #24]
 800a1cc:	e001      	b.n	800a1d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d110      	bne.n	800a1fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a1e0:	9202      	str	r2, [sp, #8]
 800a1e2:	9301      	str	r3, [sp, #4]
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	9300      	str	r3, [sp, #0]
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	6a3a      	ldr	r2, [r7, #32]
 800a1ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a1ee:	68f8      	ldr	r0, [r7, #12]
 800a1f0:	f000 fe1a 	bl	800ae28 <xTaskCreateStatic>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	613b      	str	r3, [r7, #16]
 800a1f8:	e013      	b.n	800a222 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a1fa:	69bb      	ldr	r3, [r7, #24]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d110      	bne.n	800a222 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a200:	6a3b      	ldr	r3, [r7, #32]
 800a202:	b29a      	uxth	r2, r3
 800a204:	f107 0310 	add.w	r3, r7, #16
 800a208:	9301      	str	r3, [sp, #4]
 800a20a:	69fb      	ldr	r3, [r7, #28]
 800a20c:	9300      	str	r3, [sp, #0]
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a212:	68f8      	ldr	r0, [r7, #12]
 800a214:	f000 fe68 	bl	800aee8 <xTaskCreate>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d001      	beq.n	800a222 <osThreadNew+0x11a>
            hTask = NULL;
 800a21e:	2300      	movs	r3, #0
 800a220:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a222:	693b      	ldr	r3, [r7, #16]
}
 800a224:	4618      	mov	r0, r3
 800a226:	3728      	adds	r7, #40	@ 0x28
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a234:	f3ef 8305 	mrs	r3, IPSR
 800a238:	60bb      	str	r3, [r7, #8]
  return(result);
 800a23a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d003      	beq.n	800a248 <osDelay+0x1c>
    stat = osErrorISR;
 800a240:	f06f 0305 	mvn.w	r3, #5
 800a244:	60fb      	str	r3, [r7, #12]
 800a246:	e007      	b.n	800a258 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a248:	2300      	movs	r3, #0
 800a24a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d002      	beq.n	800a258 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 ffa6 	bl	800b1a4 <vTaskDelay>
    }
  }

  return (stat);
 800a258:	68fb      	ldr	r3, [r7, #12]
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3710      	adds	r7, #16
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
	...

0800a264 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a264:	b480      	push	{r7}
 800a266:	b085      	sub	sp, #20
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	4a07      	ldr	r2, [pc, #28]	@ (800a290 <vApplicationGetIdleTaskMemory+0x2c>)
 800a274:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	4a06      	ldr	r2, [pc, #24]	@ (800a294 <vApplicationGetIdleTaskMemory+0x30>)
 800a27a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2280      	movs	r2, #128	@ 0x80
 800a280:	601a      	str	r2, [r3, #0]
}
 800a282:	bf00      	nop
 800a284:	3714      	adds	r7, #20
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr
 800a28e:	bf00      	nop
 800a290:	20008724 	.word	0x20008724
 800a294:	200087cc 	.word	0x200087cc

0800a298 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a298:	b480      	push	{r7}
 800a29a:	b085      	sub	sp, #20
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	4a07      	ldr	r2, [pc, #28]	@ (800a2c4 <vApplicationGetTimerTaskMemory+0x2c>)
 800a2a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	4a06      	ldr	r2, [pc, #24]	@ (800a2c8 <vApplicationGetTimerTaskMemory+0x30>)
 800a2ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a2b6:	601a      	str	r2, [r3, #0]
}
 800a2b8:	bf00      	nop
 800a2ba:	3714      	adds	r7, #20
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr
 800a2c4:	200089cc 	.word	0x200089cc
 800a2c8:	20008a74 	.word	0x20008a74

0800a2cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f103 0208 	add.w	r2, r3, #8
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a2e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f103 0208 	add.w	r2, r3, #8
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f103 0208 	add.w	r2, r3, #8
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a300:	bf00      	nop
 800a302:	370c      	adds	r7, #12
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr

0800a30c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a30c:	b480      	push	{r7}
 800a30e:	b083      	sub	sp, #12
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a31a:	bf00      	nop
 800a31c:	370c      	adds	r7, #12
 800a31e:	46bd      	mov	sp, r7
 800a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a324:	4770      	bx	lr

0800a326 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a326:	b480      	push	{r7}
 800a328:	b085      	sub	sp, #20
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
 800a32e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	68fa      	ldr	r2, [r7, #12]
 800a33a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	689a      	ldr	r2, [r3, #8]
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	683a      	ldr	r2, [r7, #0]
 800a34a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	683a      	ldr	r2, [r7, #0]
 800a350:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	1c5a      	adds	r2, r3, #1
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	601a      	str	r2, [r3, #0]
}
 800a362:	bf00      	nop
 800a364:	3714      	adds	r7, #20
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr

0800a36e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a36e:	b480      	push	{r7}
 800a370:	b085      	sub	sp, #20
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
 800a376:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a384:	d103      	bne.n	800a38e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	691b      	ldr	r3, [r3, #16]
 800a38a:	60fb      	str	r3, [r7, #12]
 800a38c:	e00c      	b.n	800a3a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	3308      	adds	r3, #8
 800a392:	60fb      	str	r3, [r7, #12]
 800a394:	e002      	b.n	800a39c <vListInsert+0x2e>
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	60fb      	str	r3, [r7, #12]
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	68ba      	ldr	r2, [r7, #8]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d2f6      	bcs.n	800a396 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	685a      	ldr	r2, [r3, #4]
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	683a      	ldr	r2, [r7, #0]
 800a3b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	68fa      	ldr	r2, [r7, #12]
 800a3bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	683a      	ldr	r2, [r7, #0]
 800a3c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	1c5a      	adds	r2, r3, #1
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	601a      	str	r2, [r3, #0]
}
 800a3d4:	bf00      	nop
 800a3d6:	3714      	adds	r7, #20
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr

0800a3e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b085      	sub	sp, #20
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	691b      	ldr	r3, [r3, #16]
 800a3ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	6892      	ldr	r2, [r2, #8]
 800a3f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	689b      	ldr	r3, [r3, #8]
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	6852      	ldr	r2, [r2, #4]
 800a400:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	687a      	ldr	r2, [r7, #4]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d103      	bne.n	800a414 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	689a      	ldr	r2, [r3, #8]
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	1e5a      	subs	r2, r3, #1
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3714      	adds	r7, #20
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr

0800a434 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d10b      	bne.n	800a460 <xQueueGenericReset+0x2c>
	__asm volatile
 800a448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a44c:	f383 8811 	msr	BASEPRI, r3
 800a450:	f3bf 8f6f 	isb	sy
 800a454:	f3bf 8f4f 	dsb	sy
 800a458:	60bb      	str	r3, [r7, #8]
}
 800a45a:	bf00      	nop
 800a45c:	bf00      	nop
 800a45e:	e7fd      	b.n	800a45c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a460:	f002 f8d2 	bl	800c608 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681a      	ldr	r2, [r3, #0]
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a46c:	68f9      	ldr	r1, [r7, #12]
 800a46e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a470:	fb01 f303 	mul.w	r3, r1, r3
 800a474:	441a      	add	r2, r3
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2200      	movs	r2, #0
 800a47e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a490:	3b01      	subs	r3, #1
 800a492:	68f9      	ldr	r1, [r7, #12]
 800a494:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a496:	fb01 f303 	mul.w	r3, r1, r3
 800a49a:	441a      	add	r2, r3
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	22ff      	movs	r2, #255	@ 0xff
 800a4a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	22ff      	movs	r2, #255	@ 0xff
 800a4ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d114      	bne.n	800a4e0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	691b      	ldr	r3, [r3, #16]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d01a      	beq.n	800a4f4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	3310      	adds	r3, #16
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f001 f942 	bl	800b74c <xTaskRemoveFromEventList>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d012      	beq.n	800a4f4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a4ce:	4b0d      	ldr	r3, [pc, #52]	@ (800a504 <xQueueGenericReset+0xd0>)
 800a4d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4d4:	601a      	str	r2, [r3, #0]
 800a4d6:	f3bf 8f4f 	dsb	sy
 800a4da:	f3bf 8f6f 	isb	sy
 800a4de:	e009      	b.n	800a4f4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	3310      	adds	r3, #16
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f7ff fef1 	bl	800a2cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	3324      	adds	r3, #36	@ 0x24
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7ff feec 	bl	800a2cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a4f4:	f002 f8ba 	bl	800c66c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a4f8:	2301      	movs	r3, #1
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3710      	adds	r7, #16
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop
 800a504:	e000ed04 	.word	0xe000ed04

0800a508 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b08e      	sub	sp, #56	@ 0x38
 800a50c:	af02      	add	r7, sp, #8
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	607a      	str	r2, [r7, #4]
 800a514:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d10b      	bne.n	800a534 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a51c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a520:	f383 8811 	msr	BASEPRI, r3
 800a524:	f3bf 8f6f 	isb	sy
 800a528:	f3bf 8f4f 	dsb	sy
 800a52c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a52e:	bf00      	nop
 800a530:	bf00      	nop
 800a532:	e7fd      	b.n	800a530 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d10b      	bne.n	800a552 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a53a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a53e:	f383 8811 	msr	BASEPRI, r3
 800a542:	f3bf 8f6f 	isb	sy
 800a546:	f3bf 8f4f 	dsb	sy
 800a54a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a54c:	bf00      	nop
 800a54e:	bf00      	nop
 800a550:	e7fd      	b.n	800a54e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d002      	beq.n	800a55e <xQueueGenericCreateStatic+0x56>
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d001      	beq.n	800a562 <xQueueGenericCreateStatic+0x5a>
 800a55e:	2301      	movs	r3, #1
 800a560:	e000      	b.n	800a564 <xQueueGenericCreateStatic+0x5c>
 800a562:	2300      	movs	r3, #0
 800a564:	2b00      	cmp	r3, #0
 800a566:	d10b      	bne.n	800a580 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a56c:	f383 8811 	msr	BASEPRI, r3
 800a570:	f3bf 8f6f 	isb	sy
 800a574:	f3bf 8f4f 	dsb	sy
 800a578:	623b      	str	r3, [r7, #32]
}
 800a57a:	bf00      	nop
 800a57c:	bf00      	nop
 800a57e:	e7fd      	b.n	800a57c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d102      	bne.n	800a58c <xQueueGenericCreateStatic+0x84>
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d101      	bne.n	800a590 <xQueueGenericCreateStatic+0x88>
 800a58c:	2301      	movs	r3, #1
 800a58e:	e000      	b.n	800a592 <xQueueGenericCreateStatic+0x8a>
 800a590:	2300      	movs	r3, #0
 800a592:	2b00      	cmp	r3, #0
 800a594:	d10b      	bne.n	800a5ae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a59a:	f383 8811 	msr	BASEPRI, r3
 800a59e:	f3bf 8f6f 	isb	sy
 800a5a2:	f3bf 8f4f 	dsb	sy
 800a5a6:	61fb      	str	r3, [r7, #28]
}
 800a5a8:	bf00      	nop
 800a5aa:	bf00      	nop
 800a5ac:	e7fd      	b.n	800a5aa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a5ae:	2350      	movs	r3, #80	@ 0x50
 800a5b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	2b50      	cmp	r3, #80	@ 0x50
 800a5b6:	d00b      	beq.n	800a5d0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a5b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5bc:	f383 8811 	msr	BASEPRI, r3
 800a5c0:	f3bf 8f6f 	isb	sy
 800a5c4:	f3bf 8f4f 	dsb	sy
 800a5c8:	61bb      	str	r3, [r7, #24]
}
 800a5ca:	bf00      	nop
 800a5cc:	bf00      	nop
 800a5ce:	e7fd      	b.n	800a5cc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a5d0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a5d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d00d      	beq.n	800a5f8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a5dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a5e4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a5e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ea:	9300      	str	r3, [sp, #0]
 800a5ec:	4613      	mov	r3, r2
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	68b9      	ldr	r1, [r7, #8]
 800a5f2:	68f8      	ldr	r0, [r7, #12]
 800a5f4:	f000 f805 	bl	800a602 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a5f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3730      	adds	r7, #48	@ 0x30
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}

0800a602 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a602:	b580      	push	{r7, lr}
 800a604:	b084      	sub	sp, #16
 800a606:	af00      	add	r7, sp, #0
 800a608:	60f8      	str	r0, [r7, #12]
 800a60a:	60b9      	str	r1, [r7, #8]
 800a60c:	607a      	str	r2, [r7, #4]
 800a60e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d103      	bne.n	800a61e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a616:	69bb      	ldr	r3, [r7, #24]
 800a618:	69ba      	ldr	r2, [r7, #24]
 800a61a:	601a      	str	r2, [r3, #0]
 800a61c:	e002      	b.n	800a624 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a61e:	69bb      	ldr	r3, [r7, #24]
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a624:	69bb      	ldr	r3, [r7, #24]
 800a626:	68fa      	ldr	r2, [r7, #12]
 800a628:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a62a:	69bb      	ldr	r3, [r7, #24]
 800a62c:	68ba      	ldr	r2, [r7, #8]
 800a62e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a630:	2101      	movs	r1, #1
 800a632:	69b8      	ldr	r0, [r7, #24]
 800a634:	f7ff fefe 	bl	800a434 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a638:	69bb      	ldr	r3, [r7, #24]
 800a63a:	78fa      	ldrb	r2, [r7, #3]
 800a63c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a640:	bf00      	nop
 800a642:	3710      	adds	r7, #16
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b08e      	sub	sp, #56	@ 0x38
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	607a      	str	r2, [r7, #4]
 800a654:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a656:	2300      	movs	r3, #0
 800a658:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a65e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a660:	2b00      	cmp	r3, #0
 800a662:	d10b      	bne.n	800a67c <xQueueGenericSend+0x34>
	__asm volatile
 800a664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a668:	f383 8811 	msr	BASEPRI, r3
 800a66c:	f3bf 8f6f 	isb	sy
 800a670:	f3bf 8f4f 	dsb	sy
 800a674:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a676:	bf00      	nop
 800a678:	bf00      	nop
 800a67a:	e7fd      	b.n	800a678 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d103      	bne.n	800a68a <xQueueGenericSend+0x42>
 800a682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a686:	2b00      	cmp	r3, #0
 800a688:	d101      	bne.n	800a68e <xQueueGenericSend+0x46>
 800a68a:	2301      	movs	r3, #1
 800a68c:	e000      	b.n	800a690 <xQueueGenericSend+0x48>
 800a68e:	2300      	movs	r3, #0
 800a690:	2b00      	cmp	r3, #0
 800a692:	d10b      	bne.n	800a6ac <xQueueGenericSend+0x64>
	__asm volatile
 800a694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a698:	f383 8811 	msr	BASEPRI, r3
 800a69c:	f3bf 8f6f 	isb	sy
 800a6a0:	f3bf 8f4f 	dsb	sy
 800a6a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a6a6:	bf00      	nop
 800a6a8:	bf00      	nop
 800a6aa:	e7fd      	b.n	800a6a8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	2b02      	cmp	r3, #2
 800a6b0:	d103      	bne.n	800a6ba <xQueueGenericSend+0x72>
 800a6b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d101      	bne.n	800a6be <xQueueGenericSend+0x76>
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	e000      	b.n	800a6c0 <xQueueGenericSend+0x78>
 800a6be:	2300      	movs	r3, #0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d10b      	bne.n	800a6dc <xQueueGenericSend+0x94>
	__asm volatile
 800a6c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6c8:	f383 8811 	msr	BASEPRI, r3
 800a6cc:	f3bf 8f6f 	isb	sy
 800a6d0:	f3bf 8f4f 	dsb	sy
 800a6d4:	623b      	str	r3, [r7, #32]
}
 800a6d6:	bf00      	nop
 800a6d8:	bf00      	nop
 800a6da:	e7fd      	b.n	800a6d8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a6dc:	f001 fa24 	bl	800bb28 <xTaskGetSchedulerState>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d102      	bne.n	800a6ec <xQueueGenericSend+0xa4>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d101      	bne.n	800a6f0 <xQueueGenericSend+0xa8>
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	e000      	b.n	800a6f2 <xQueueGenericSend+0xaa>
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d10b      	bne.n	800a70e <xQueueGenericSend+0xc6>
	__asm volatile
 800a6f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6fa:	f383 8811 	msr	BASEPRI, r3
 800a6fe:	f3bf 8f6f 	isb	sy
 800a702:	f3bf 8f4f 	dsb	sy
 800a706:	61fb      	str	r3, [r7, #28]
}
 800a708:	bf00      	nop
 800a70a:	bf00      	nop
 800a70c:	e7fd      	b.n	800a70a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a70e:	f001 ff7b 	bl	800c608 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a714:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d302      	bcc.n	800a724 <xQueueGenericSend+0xdc>
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	2b02      	cmp	r3, #2
 800a722:	d129      	bne.n	800a778 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a724:	683a      	ldr	r2, [r7, #0]
 800a726:	68b9      	ldr	r1, [r7, #8]
 800a728:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a72a:	f000 fa0f 	bl	800ab4c <prvCopyDataToQueue>
 800a72e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a734:	2b00      	cmp	r3, #0
 800a736:	d010      	beq.n	800a75a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a73a:	3324      	adds	r3, #36	@ 0x24
 800a73c:	4618      	mov	r0, r3
 800a73e:	f001 f805 	bl	800b74c <xTaskRemoveFromEventList>
 800a742:	4603      	mov	r3, r0
 800a744:	2b00      	cmp	r3, #0
 800a746:	d013      	beq.n	800a770 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a748:	4b3f      	ldr	r3, [pc, #252]	@ (800a848 <xQueueGenericSend+0x200>)
 800a74a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a74e:	601a      	str	r2, [r3, #0]
 800a750:	f3bf 8f4f 	dsb	sy
 800a754:	f3bf 8f6f 	isb	sy
 800a758:	e00a      	b.n	800a770 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a75a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d007      	beq.n	800a770 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a760:	4b39      	ldr	r3, [pc, #228]	@ (800a848 <xQueueGenericSend+0x200>)
 800a762:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a766:	601a      	str	r2, [r3, #0]
 800a768:	f3bf 8f4f 	dsb	sy
 800a76c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a770:	f001 ff7c 	bl	800c66c <vPortExitCritical>
				return pdPASS;
 800a774:	2301      	movs	r3, #1
 800a776:	e063      	b.n	800a840 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d103      	bne.n	800a786 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a77e:	f001 ff75 	bl	800c66c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a782:	2300      	movs	r3, #0
 800a784:	e05c      	b.n	800a840 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d106      	bne.n	800a79a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a78c:	f107 0314 	add.w	r3, r7, #20
 800a790:	4618      	mov	r0, r3
 800a792:	f001 f867 	bl	800b864 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a796:	2301      	movs	r3, #1
 800a798:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a79a:	f001 ff67 	bl	800c66c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a79e:	f000 fda7 	bl	800b2f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a7a2:	f001 ff31 	bl	800c608 <vPortEnterCritical>
 800a7a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a7ac:	b25b      	sxtb	r3, r3
 800a7ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a7b2:	d103      	bne.n	800a7bc <xQueueGenericSend+0x174>
 800a7b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a7bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a7c2:	b25b      	sxtb	r3, r3
 800a7c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a7c8:	d103      	bne.n	800a7d2 <xQueueGenericSend+0x18a>
 800a7ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a7d2:	f001 ff4b 	bl	800c66c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a7d6:	1d3a      	adds	r2, r7, #4
 800a7d8:	f107 0314 	add.w	r3, r7, #20
 800a7dc:	4611      	mov	r1, r2
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f001 f856 	bl	800b890 <xTaskCheckForTimeOut>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d124      	bne.n	800a834 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a7ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a7ec:	f000 faa6 	bl	800ad3c <prvIsQueueFull>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d018      	beq.n	800a828 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a7f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7f8:	3310      	adds	r3, #16
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	4611      	mov	r1, r2
 800a7fe:	4618      	mov	r0, r3
 800a800:	f000 ff52 	bl	800b6a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a804:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a806:	f000 fa31 	bl	800ac6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a80a:	f000 fd7f 	bl	800b30c <xTaskResumeAll>
 800a80e:	4603      	mov	r3, r0
 800a810:	2b00      	cmp	r3, #0
 800a812:	f47f af7c 	bne.w	800a70e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a816:	4b0c      	ldr	r3, [pc, #48]	@ (800a848 <xQueueGenericSend+0x200>)
 800a818:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a81c:	601a      	str	r2, [r3, #0]
 800a81e:	f3bf 8f4f 	dsb	sy
 800a822:	f3bf 8f6f 	isb	sy
 800a826:	e772      	b.n	800a70e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a828:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a82a:	f000 fa1f 	bl	800ac6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a82e:	f000 fd6d 	bl	800b30c <xTaskResumeAll>
 800a832:	e76c      	b.n	800a70e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a834:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a836:	f000 fa19 	bl	800ac6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a83a:	f000 fd67 	bl	800b30c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a83e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a840:	4618      	mov	r0, r3
 800a842:	3738      	adds	r7, #56	@ 0x38
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	e000ed04 	.word	0xe000ed04

0800a84c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b090      	sub	sp, #64	@ 0x40
 800a850:	af00      	add	r7, sp, #0
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	60b9      	str	r1, [r7, #8]
 800a856:	607a      	str	r2, [r7, #4]
 800a858:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a85e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a860:	2b00      	cmp	r3, #0
 800a862:	d10b      	bne.n	800a87c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a868:	f383 8811 	msr	BASEPRI, r3
 800a86c:	f3bf 8f6f 	isb	sy
 800a870:	f3bf 8f4f 	dsb	sy
 800a874:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a876:	bf00      	nop
 800a878:	bf00      	nop
 800a87a:	e7fd      	b.n	800a878 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d103      	bne.n	800a88a <xQueueGenericSendFromISR+0x3e>
 800a882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a886:	2b00      	cmp	r3, #0
 800a888:	d101      	bne.n	800a88e <xQueueGenericSendFromISR+0x42>
 800a88a:	2301      	movs	r3, #1
 800a88c:	e000      	b.n	800a890 <xQueueGenericSendFromISR+0x44>
 800a88e:	2300      	movs	r3, #0
 800a890:	2b00      	cmp	r3, #0
 800a892:	d10b      	bne.n	800a8ac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a898:	f383 8811 	msr	BASEPRI, r3
 800a89c:	f3bf 8f6f 	isb	sy
 800a8a0:	f3bf 8f4f 	dsb	sy
 800a8a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a8a6:	bf00      	nop
 800a8a8:	bf00      	nop
 800a8aa:	e7fd      	b.n	800a8a8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	2b02      	cmp	r3, #2
 800a8b0:	d103      	bne.n	800a8ba <xQueueGenericSendFromISR+0x6e>
 800a8b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d101      	bne.n	800a8be <xQueueGenericSendFromISR+0x72>
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	e000      	b.n	800a8c0 <xQueueGenericSendFromISR+0x74>
 800a8be:	2300      	movs	r3, #0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d10b      	bne.n	800a8dc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a8c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8c8:	f383 8811 	msr	BASEPRI, r3
 800a8cc:	f3bf 8f6f 	isb	sy
 800a8d0:	f3bf 8f4f 	dsb	sy
 800a8d4:	623b      	str	r3, [r7, #32]
}
 800a8d6:	bf00      	nop
 800a8d8:	bf00      	nop
 800a8da:	e7fd      	b.n	800a8d8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a8dc:	f001 ff74 	bl	800c7c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a8e0:	f3ef 8211 	mrs	r2, BASEPRI
 800a8e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8e8:	f383 8811 	msr	BASEPRI, r3
 800a8ec:	f3bf 8f6f 	isb	sy
 800a8f0:	f3bf 8f4f 	dsb	sy
 800a8f4:	61fa      	str	r2, [r7, #28]
 800a8f6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a8f8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a8fa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a8fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a904:	429a      	cmp	r2, r3
 800a906:	d302      	bcc.n	800a90e <xQueueGenericSendFromISR+0xc2>
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	2b02      	cmp	r3, #2
 800a90c:	d12f      	bne.n	800a96e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a90e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a910:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a914:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a91a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a91c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a91e:	683a      	ldr	r2, [r7, #0]
 800a920:	68b9      	ldr	r1, [r7, #8]
 800a922:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a924:	f000 f912 	bl	800ab4c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a928:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a92c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a930:	d112      	bne.n	800a958 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a936:	2b00      	cmp	r3, #0
 800a938:	d016      	beq.n	800a968 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a93a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a93c:	3324      	adds	r3, #36	@ 0x24
 800a93e:	4618      	mov	r0, r3
 800a940:	f000 ff04 	bl	800b74c <xTaskRemoveFromEventList>
 800a944:	4603      	mov	r3, r0
 800a946:	2b00      	cmp	r3, #0
 800a948:	d00e      	beq.n	800a968 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d00b      	beq.n	800a968 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2201      	movs	r2, #1
 800a954:	601a      	str	r2, [r3, #0]
 800a956:	e007      	b.n	800a968 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a958:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a95c:	3301      	adds	r3, #1
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	b25a      	sxtb	r2, r3
 800a962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a964:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a968:	2301      	movs	r3, #1
 800a96a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a96c:	e001      	b.n	800a972 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a96e:	2300      	movs	r3, #0
 800a970:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a974:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a97c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a97e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a980:	4618      	mov	r0, r3
 800a982:	3740      	adds	r7, #64	@ 0x40
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b08c      	sub	sp, #48	@ 0x30
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	60f8      	str	r0, [r7, #12]
 800a990:	60b9      	str	r1, [r7, #8]
 800a992:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a994:	2300      	movs	r3, #0
 800a996:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a99c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d10b      	bne.n	800a9ba <xQueueReceive+0x32>
	__asm volatile
 800a9a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9a6:	f383 8811 	msr	BASEPRI, r3
 800a9aa:	f3bf 8f6f 	isb	sy
 800a9ae:	f3bf 8f4f 	dsb	sy
 800a9b2:	623b      	str	r3, [r7, #32]
}
 800a9b4:	bf00      	nop
 800a9b6:	bf00      	nop
 800a9b8:	e7fd      	b.n	800a9b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d103      	bne.n	800a9c8 <xQueueReceive+0x40>
 800a9c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d101      	bne.n	800a9cc <xQueueReceive+0x44>
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	e000      	b.n	800a9ce <xQueueReceive+0x46>
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d10b      	bne.n	800a9ea <xQueueReceive+0x62>
	__asm volatile
 800a9d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9d6:	f383 8811 	msr	BASEPRI, r3
 800a9da:	f3bf 8f6f 	isb	sy
 800a9de:	f3bf 8f4f 	dsb	sy
 800a9e2:	61fb      	str	r3, [r7, #28]
}
 800a9e4:	bf00      	nop
 800a9e6:	bf00      	nop
 800a9e8:	e7fd      	b.n	800a9e6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a9ea:	f001 f89d 	bl	800bb28 <xTaskGetSchedulerState>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d102      	bne.n	800a9fa <xQueueReceive+0x72>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d101      	bne.n	800a9fe <xQueueReceive+0x76>
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	e000      	b.n	800aa00 <xQueueReceive+0x78>
 800a9fe:	2300      	movs	r3, #0
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d10b      	bne.n	800aa1c <xQueueReceive+0x94>
	__asm volatile
 800aa04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa08:	f383 8811 	msr	BASEPRI, r3
 800aa0c:	f3bf 8f6f 	isb	sy
 800aa10:	f3bf 8f4f 	dsb	sy
 800aa14:	61bb      	str	r3, [r7, #24]
}
 800aa16:	bf00      	nop
 800aa18:	bf00      	nop
 800aa1a:	e7fd      	b.n	800aa18 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa1c:	f001 fdf4 	bl	800c608 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa24:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d01f      	beq.n	800aa6c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aa2c:	68b9      	ldr	r1, [r7, #8]
 800aa2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa30:	f000 f8f6 	bl	800ac20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aa34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa36:	1e5a      	subs	r2, r3, #1
 800aa38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa3a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa3e:	691b      	ldr	r3, [r3, #16]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d00f      	beq.n	800aa64 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa46:	3310      	adds	r3, #16
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f000 fe7f 	bl	800b74c <xTaskRemoveFromEventList>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d007      	beq.n	800aa64 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aa54:	4b3c      	ldr	r3, [pc, #240]	@ (800ab48 <xQueueReceive+0x1c0>)
 800aa56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa5a:	601a      	str	r2, [r3, #0]
 800aa5c:	f3bf 8f4f 	dsb	sy
 800aa60:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aa64:	f001 fe02 	bl	800c66c <vPortExitCritical>
				return pdPASS;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	e069      	b.n	800ab40 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d103      	bne.n	800aa7a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aa72:	f001 fdfb 	bl	800c66c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aa76:	2300      	movs	r3, #0
 800aa78:	e062      	b.n	800ab40 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d106      	bne.n	800aa8e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa80:	f107 0310 	add.w	r3, r7, #16
 800aa84:	4618      	mov	r0, r3
 800aa86:	f000 feed 	bl	800b864 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa8e:	f001 fded 	bl	800c66c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa92:	f000 fc2d 	bl	800b2f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa96:	f001 fdb7 	bl	800c608 <vPortEnterCritical>
 800aa9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aaa0:	b25b      	sxtb	r3, r3
 800aaa2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aaa6:	d103      	bne.n	800aab0 <xQueueReceive+0x128>
 800aaa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aab2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aab6:	b25b      	sxtb	r3, r3
 800aab8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aabc:	d103      	bne.n	800aac6 <xQueueReceive+0x13e>
 800aabe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aac0:	2200      	movs	r2, #0
 800aac2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aac6:	f001 fdd1 	bl	800c66c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aaca:	1d3a      	adds	r2, r7, #4
 800aacc:	f107 0310 	add.w	r3, r7, #16
 800aad0:	4611      	mov	r1, r2
 800aad2:	4618      	mov	r0, r3
 800aad4:	f000 fedc 	bl	800b890 <xTaskCheckForTimeOut>
 800aad8:	4603      	mov	r3, r0
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d123      	bne.n	800ab26 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aade:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aae0:	f000 f916 	bl	800ad10 <prvIsQueueEmpty>
 800aae4:	4603      	mov	r3, r0
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d017      	beq.n	800ab1a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aaea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaec:	3324      	adds	r3, #36	@ 0x24
 800aaee:	687a      	ldr	r2, [r7, #4]
 800aaf0:	4611      	mov	r1, r2
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f000 fdd8 	bl	800b6a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aaf8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aafa:	f000 f8b7 	bl	800ac6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aafe:	f000 fc05 	bl	800b30c <xTaskResumeAll>
 800ab02:	4603      	mov	r3, r0
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d189      	bne.n	800aa1c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ab08:	4b0f      	ldr	r3, [pc, #60]	@ (800ab48 <xQueueReceive+0x1c0>)
 800ab0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab0e:	601a      	str	r2, [r3, #0]
 800ab10:	f3bf 8f4f 	dsb	sy
 800ab14:	f3bf 8f6f 	isb	sy
 800ab18:	e780      	b.n	800aa1c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ab1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab1c:	f000 f8a6 	bl	800ac6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab20:	f000 fbf4 	bl	800b30c <xTaskResumeAll>
 800ab24:	e77a      	b.n	800aa1c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ab26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab28:	f000 f8a0 	bl	800ac6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab2c:	f000 fbee 	bl	800b30c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab32:	f000 f8ed 	bl	800ad10 <prvIsQueueEmpty>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	f43f af6f 	beq.w	800aa1c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ab3e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3730      	adds	r7, #48	@ 0x30
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}
 800ab48:	e000ed04 	.word	0xe000ed04

0800ab4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b086      	sub	sp, #24
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	60b9      	str	r1, [r7, #8]
 800ab56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d10d      	bne.n	800ab86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d14d      	bne.n	800ac0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	689b      	ldr	r3, [r3, #8]
 800ab76:	4618      	mov	r0, r3
 800ab78:	f000 fff4 	bl	800bb64 <xTaskPriorityDisinherit>
 800ab7c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2200      	movs	r2, #0
 800ab82:	609a      	str	r2, [r3, #8]
 800ab84:	e043      	b.n	800ac0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d119      	bne.n	800abc0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	6858      	ldr	r0, [r3, #4]
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab94:	461a      	mov	r2, r3
 800ab96:	68b9      	ldr	r1, [r7, #8]
 800ab98:	f010 fa2d 	bl	801aff6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	685a      	ldr	r2, [r3, #4]
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aba4:	441a      	add	r2, r3
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	685a      	ldr	r2, [r3, #4]
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	689b      	ldr	r3, [r3, #8]
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d32b      	bcc.n	800ac0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	605a      	str	r2, [r3, #4]
 800abbe:	e026      	b.n	800ac0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	68d8      	ldr	r0, [r3, #12]
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abc8:	461a      	mov	r2, r3
 800abca:	68b9      	ldr	r1, [r7, #8]
 800abcc:	f010 fa13 	bl	801aff6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	68da      	ldr	r2, [r3, #12]
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abd8:	425b      	negs	r3, r3
 800abda:	441a      	add	r2, r3
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	68da      	ldr	r2, [r3, #12]
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	429a      	cmp	r2, r3
 800abea:	d207      	bcs.n	800abfc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	689a      	ldr	r2, [r3, #8]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abf4:	425b      	negs	r3, r3
 800abf6:	441a      	add	r2, r3
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2b02      	cmp	r3, #2
 800ac00:	d105      	bne.n	800ac0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d002      	beq.n	800ac0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	3b01      	subs	r3, #1
 800ac0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	1c5a      	adds	r2, r3, #1
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ac16:	697b      	ldr	r3, [r7, #20]
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3718      	adds	r7, #24
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d018      	beq.n	800ac64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	68da      	ldr	r2, [r3, #12]
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac3a:	441a      	add	r2, r3
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	68da      	ldr	r2, [r3, #12]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	689b      	ldr	r3, [r3, #8]
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d303      	bcc.n	800ac54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681a      	ldr	r2, [r3, #0]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	68d9      	ldr	r1, [r3, #12]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	6838      	ldr	r0, [r7, #0]
 800ac60:	f010 f9c9 	bl	801aff6 <memcpy>
	}
}
 800ac64:	bf00      	nop
 800ac66:	3708      	adds	r7, #8
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b084      	sub	sp, #16
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ac74:	f001 fcc8 	bl	800c608 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac80:	e011      	b.n	800aca6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d012      	beq.n	800acb0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	3324      	adds	r3, #36	@ 0x24
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f000 fd5c 	bl	800b74c <xTaskRemoveFromEventList>
 800ac94:	4603      	mov	r3, r0
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d001      	beq.n	800ac9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ac9a:	f000 fe5d 	bl	800b958 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ac9e:	7bfb      	ldrb	r3, [r7, #15]
 800aca0:	3b01      	subs	r3, #1
 800aca2:	b2db      	uxtb	r3, r3
 800aca4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	dce9      	bgt.n	800ac82 <prvUnlockQueue+0x16>
 800acae:	e000      	b.n	800acb2 <prvUnlockQueue+0x46>
					break;
 800acb0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	22ff      	movs	r2, #255	@ 0xff
 800acb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800acba:	f001 fcd7 	bl	800c66c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800acbe:	f001 fca3 	bl	800c608 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800acc8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800acca:	e011      	b.n	800acf0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	691b      	ldr	r3, [r3, #16]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d012      	beq.n	800acfa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	3310      	adds	r3, #16
 800acd8:	4618      	mov	r0, r3
 800acda:	f000 fd37 	bl	800b74c <xTaskRemoveFromEventList>
 800acde:	4603      	mov	r3, r0
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d001      	beq.n	800ace8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ace4:	f000 fe38 	bl	800b958 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ace8:	7bbb      	ldrb	r3, [r7, #14]
 800acea:	3b01      	subs	r3, #1
 800acec:	b2db      	uxtb	r3, r3
 800acee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800acf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	dce9      	bgt.n	800accc <prvUnlockQueue+0x60>
 800acf8:	e000      	b.n	800acfc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800acfa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	22ff      	movs	r2, #255	@ 0xff
 800ad00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ad04:	f001 fcb2 	bl	800c66c <vPortExitCritical>
}
 800ad08:	bf00      	nop
 800ad0a:	3710      	adds	r7, #16
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad18:	f001 fc76 	bl	800c608 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d102      	bne.n	800ad2a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ad24:	2301      	movs	r3, #1
 800ad26:	60fb      	str	r3, [r7, #12]
 800ad28:	e001      	b.n	800ad2e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad2e:	f001 fc9d 	bl	800c66c <vPortExitCritical>

	return xReturn;
 800ad32:	68fb      	ldr	r3, [r7, #12]
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3710      	adds	r7, #16
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad44:	f001 fc60 	bl	800c608 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d102      	bne.n	800ad5a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ad54:	2301      	movs	r3, #1
 800ad56:	60fb      	str	r3, [r7, #12]
 800ad58:	e001      	b.n	800ad5e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad5e:	f001 fc85 	bl	800c66c <vPortExitCritical>

	return xReturn;
 800ad62:	68fb      	ldr	r3, [r7, #12]
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3710      	adds	r7, #16
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b085      	sub	sp, #20
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad76:	2300      	movs	r3, #0
 800ad78:	60fb      	str	r3, [r7, #12]
 800ad7a:	e014      	b.n	800ada6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ad7c:	4a0f      	ldr	r2, [pc, #60]	@ (800adbc <vQueueAddToRegistry+0x50>)
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d10b      	bne.n	800ada0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ad88:	490c      	ldr	r1, [pc, #48]	@ (800adbc <vQueueAddToRegistry+0x50>)
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	683a      	ldr	r2, [r7, #0]
 800ad8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ad92:	4a0a      	ldr	r2, [pc, #40]	@ (800adbc <vQueueAddToRegistry+0x50>)
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	00db      	lsls	r3, r3, #3
 800ad98:	4413      	add	r3, r2
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ad9e:	e006      	b.n	800adae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	3301      	adds	r3, #1
 800ada4:	60fb      	str	r3, [r7, #12]
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2b07      	cmp	r3, #7
 800adaa:	d9e7      	bls.n	800ad7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800adac:	bf00      	nop
 800adae:	bf00      	nop
 800adb0:	3714      	adds	r7, #20
 800adb2:	46bd      	mov	sp, r7
 800adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb8:	4770      	bx	lr
 800adba:	bf00      	nop
 800adbc:	20008e74 	.word	0x20008e74

0800adc0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b086      	sub	sp, #24
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800add0:	f001 fc1a 	bl	800c608 <vPortEnterCritical>
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800adda:	b25b      	sxtb	r3, r3
 800addc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ade0:	d103      	bne.n	800adea <vQueueWaitForMessageRestricted+0x2a>
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	2200      	movs	r2, #0
 800ade6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800adf0:	b25b      	sxtb	r3, r3
 800adf2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800adf6:	d103      	bne.n	800ae00 <vQueueWaitForMessageRestricted+0x40>
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	2200      	movs	r2, #0
 800adfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ae00:	f001 fc34 	bl	800c66c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d106      	bne.n	800ae1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	3324      	adds	r3, #36	@ 0x24
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	68b9      	ldr	r1, [r7, #8]
 800ae14:	4618      	mov	r0, r3
 800ae16:	f000 fc6d 	bl	800b6f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ae1a:	6978      	ldr	r0, [r7, #20]
 800ae1c:	f7ff ff26 	bl	800ac6c <prvUnlockQueue>
	}
 800ae20:	bf00      	nop
 800ae22:	3718      	adds	r7, #24
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b08e      	sub	sp, #56	@ 0x38
 800ae2c:	af04      	add	r7, sp, #16
 800ae2e:	60f8      	str	r0, [r7, #12]
 800ae30:	60b9      	str	r1, [r7, #8]
 800ae32:	607a      	str	r2, [r7, #4]
 800ae34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ae36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d10b      	bne.n	800ae54 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ae3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae40:	f383 8811 	msr	BASEPRI, r3
 800ae44:	f3bf 8f6f 	isb	sy
 800ae48:	f3bf 8f4f 	dsb	sy
 800ae4c:	623b      	str	r3, [r7, #32]
}
 800ae4e:	bf00      	nop
 800ae50:	bf00      	nop
 800ae52:	e7fd      	b.n	800ae50 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ae54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d10b      	bne.n	800ae72 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ae5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae5e:	f383 8811 	msr	BASEPRI, r3
 800ae62:	f3bf 8f6f 	isb	sy
 800ae66:	f3bf 8f4f 	dsb	sy
 800ae6a:	61fb      	str	r3, [r7, #28]
}
 800ae6c:	bf00      	nop
 800ae6e:	bf00      	nop
 800ae70:	e7fd      	b.n	800ae6e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ae72:	23a8      	movs	r3, #168	@ 0xa8
 800ae74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	2ba8      	cmp	r3, #168	@ 0xa8
 800ae7a:	d00b      	beq.n	800ae94 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ae7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae80:	f383 8811 	msr	BASEPRI, r3
 800ae84:	f3bf 8f6f 	isb	sy
 800ae88:	f3bf 8f4f 	dsb	sy
 800ae8c:	61bb      	str	r3, [r7, #24]
}
 800ae8e:	bf00      	nop
 800ae90:	bf00      	nop
 800ae92:	e7fd      	b.n	800ae90 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ae94:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ae96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d01e      	beq.n	800aeda <xTaskCreateStatic+0xb2>
 800ae9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d01b      	beq.n	800aeda <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aea4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aeaa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aeac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeae:	2202      	movs	r2, #2
 800aeb0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	9303      	str	r3, [sp, #12]
 800aeb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeba:	9302      	str	r3, [sp, #8]
 800aebc:	f107 0314 	add.w	r3, r7, #20
 800aec0:	9301      	str	r3, [sp, #4]
 800aec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aec4:	9300      	str	r3, [sp, #0]
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	68b9      	ldr	r1, [r7, #8]
 800aecc:	68f8      	ldr	r0, [r7, #12]
 800aece:	f000 f851 	bl	800af74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aed2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aed4:	f000 f8f6 	bl	800b0c4 <prvAddNewTaskToReadyList>
 800aed8:	e001      	b.n	800aede <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800aeda:	2300      	movs	r3, #0
 800aedc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aede:	697b      	ldr	r3, [r7, #20]
	}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3728      	adds	r7, #40	@ 0x28
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b08c      	sub	sp, #48	@ 0x30
 800aeec:	af04      	add	r7, sp, #16
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	60b9      	str	r1, [r7, #8]
 800aef2:	603b      	str	r3, [r7, #0]
 800aef4:	4613      	mov	r3, r2
 800aef6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aef8:	88fb      	ldrh	r3, [r7, #6]
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	4618      	mov	r0, r3
 800aefe:	f001 fca5 	bl	800c84c <pvPortMalloc>
 800af02:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d00e      	beq.n	800af28 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800af0a:	20a8      	movs	r0, #168	@ 0xa8
 800af0c:	f001 fc9e 	bl	800c84c <pvPortMalloc>
 800af10:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800af12:	69fb      	ldr	r3, [r7, #28]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d003      	beq.n	800af20 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800af18:	69fb      	ldr	r3, [r7, #28]
 800af1a:	697a      	ldr	r2, [r7, #20]
 800af1c:	631a      	str	r2, [r3, #48]	@ 0x30
 800af1e:	e005      	b.n	800af2c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800af20:	6978      	ldr	r0, [r7, #20]
 800af22:	f001 fd61 	bl	800c9e8 <vPortFree>
 800af26:	e001      	b.n	800af2c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800af28:	2300      	movs	r3, #0
 800af2a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800af2c:	69fb      	ldr	r3, [r7, #28]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d017      	beq.n	800af62 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800af32:	69fb      	ldr	r3, [r7, #28]
 800af34:	2200      	movs	r2, #0
 800af36:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800af3a:	88fa      	ldrh	r2, [r7, #6]
 800af3c:	2300      	movs	r3, #0
 800af3e:	9303      	str	r3, [sp, #12]
 800af40:	69fb      	ldr	r3, [r7, #28]
 800af42:	9302      	str	r3, [sp, #8]
 800af44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af46:	9301      	str	r3, [sp, #4]
 800af48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af4a:	9300      	str	r3, [sp, #0]
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	68b9      	ldr	r1, [r7, #8]
 800af50:	68f8      	ldr	r0, [r7, #12]
 800af52:	f000 f80f 	bl	800af74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af56:	69f8      	ldr	r0, [r7, #28]
 800af58:	f000 f8b4 	bl	800b0c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800af5c:	2301      	movs	r3, #1
 800af5e:	61bb      	str	r3, [r7, #24]
 800af60:	e002      	b.n	800af68 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800af62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800af66:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800af68:	69bb      	ldr	r3, [r7, #24]
	}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3720      	adds	r7, #32
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
	...

0800af74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b088      	sub	sp, #32
 800af78:	af00      	add	r7, sp, #0
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	60b9      	str	r1, [r7, #8]
 800af7e:	607a      	str	r2, [r7, #4]
 800af80:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800af82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af84:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	461a      	mov	r2, r3
 800af8c:	21a5      	movs	r1, #165	@ 0xa5
 800af8e:	f00f ff0f 	bl	801adb0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800af92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800af9c:	3b01      	subs	r3, #1
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	4413      	add	r3, r2
 800afa2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800afa4:	69bb      	ldr	r3, [r7, #24]
 800afa6:	f023 0307 	bic.w	r3, r3, #7
 800afaa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800afac:	69bb      	ldr	r3, [r7, #24]
 800afae:	f003 0307 	and.w	r3, r3, #7
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d00b      	beq.n	800afce <prvInitialiseNewTask+0x5a>
	__asm volatile
 800afb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afba:	f383 8811 	msr	BASEPRI, r3
 800afbe:	f3bf 8f6f 	isb	sy
 800afc2:	f3bf 8f4f 	dsb	sy
 800afc6:	617b      	str	r3, [r7, #20]
}
 800afc8:	bf00      	nop
 800afca:	bf00      	nop
 800afcc:	e7fd      	b.n	800afca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d01f      	beq.n	800b014 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800afd4:	2300      	movs	r3, #0
 800afd6:	61fb      	str	r3, [r7, #28]
 800afd8:	e012      	b.n	800b000 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800afda:	68ba      	ldr	r2, [r7, #8]
 800afdc:	69fb      	ldr	r3, [r7, #28]
 800afde:	4413      	add	r3, r2
 800afe0:	7819      	ldrb	r1, [r3, #0]
 800afe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	4413      	add	r3, r2
 800afe8:	3334      	adds	r3, #52	@ 0x34
 800afea:	460a      	mov	r2, r1
 800afec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800afee:	68ba      	ldr	r2, [r7, #8]
 800aff0:	69fb      	ldr	r3, [r7, #28]
 800aff2:	4413      	add	r3, r2
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d006      	beq.n	800b008 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800affa:	69fb      	ldr	r3, [r7, #28]
 800affc:	3301      	adds	r3, #1
 800affe:	61fb      	str	r3, [r7, #28]
 800b000:	69fb      	ldr	r3, [r7, #28]
 800b002:	2b0f      	cmp	r3, #15
 800b004:	d9e9      	bls.n	800afda <prvInitialiseNewTask+0x66>
 800b006:	e000      	b.n	800b00a <prvInitialiseNewTask+0x96>
			{
				break;
 800b008:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b00c:	2200      	movs	r2, #0
 800b00e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b012:	e003      	b.n	800b01c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b016:	2200      	movs	r2, #0
 800b018:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b01c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b01e:	2b37      	cmp	r3, #55	@ 0x37
 800b020:	d901      	bls.n	800b026 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b022:	2337      	movs	r3, #55	@ 0x37
 800b024:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b028:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b02a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b02c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b02e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b030:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b034:	2200      	movs	r2, #0
 800b036:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b03a:	3304      	adds	r3, #4
 800b03c:	4618      	mov	r0, r3
 800b03e:	f7ff f965 	bl	800a30c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b044:	3318      	adds	r3, #24
 800b046:	4618      	mov	r0, r3
 800b048:	f7ff f960 	bl	800a30c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b04c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b04e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b050:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b054:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b05a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b05c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b05e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b060:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b064:	2200      	movs	r2, #0
 800b066:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b06c:	2200      	movs	r2, #0
 800b06e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b074:	3354      	adds	r3, #84	@ 0x54
 800b076:	224c      	movs	r2, #76	@ 0x4c
 800b078:	2100      	movs	r1, #0
 800b07a:	4618      	mov	r0, r3
 800b07c:	f00f fe98 	bl	801adb0 <memset>
 800b080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b082:	4a0d      	ldr	r2, [pc, #52]	@ (800b0b8 <prvInitialiseNewTask+0x144>)
 800b084:	659a      	str	r2, [r3, #88]	@ 0x58
 800b086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b088:	4a0c      	ldr	r2, [pc, #48]	@ (800b0bc <prvInitialiseNewTask+0x148>)
 800b08a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b08c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b08e:	4a0c      	ldr	r2, [pc, #48]	@ (800b0c0 <prvInitialiseNewTask+0x14c>)
 800b090:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b092:	683a      	ldr	r2, [r7, #0]
 800b094:	68f9      	ldr	r1, [r7, #12]
 800b096:	69b8      	ldr	r0, [r7, #24]
 800b098:	f001 f982 	bl	800c3a0 <pxPortInitialiseStack>
 800b09c:	4602      	mov	r2, r0
 800b09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b0a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d002      	beq.n	800b0ae <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b0a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0ae:	bf00      	nop
 800b0b0:	3720      	adds	r7, #32
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	20011c88 	.word	0x20011c88
 800b0bc:	20011cf0 	.word	0x20011cf0
 800b0c0:	20011d58 	.word	0x20011d58

0800b0c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b0cc:	f001 fa9c 	bl	800c608 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b0d0:	4b2d      	ldr	r3, [pc, #180]	@ (800b188 <prvAddNewTaskToReadyList+0xc4>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	4a2c      	ldr	r2, [pc, #176]	@ (800b188 <prvAddNewTaskToReadyList+0xc4>)
 800b0d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b0da:	4b2c      	ldr	r3, [pc, #176]	@ (800b18c <prvAddNewTaskToReadyList+0xc8>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d109      	bne.n	800b0f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b0e2:	4a2a      	ldr	r2, [pc, #168]	@ (800b18c <prvAddNewTaskToReadyList+0xc8>)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b0e8:	4b27      	ldr	r3, [pc, #156]	@ (800b188 <prvAddNewTaskToReadyList+0xc4>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	d110      	bne.n	800b112 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b0f0:	f000 fc56 	bl	800b9a0 <prvInitialiseTaskLists>
 800b0f4:	e00d      	b.n	800b112 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b0f6:	4b26      	ldr	r3, [pc, #152]	@ (800b190 <prvAddNewTaskToReadyList+0xcc>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d109      	bne.n	800b112 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b0fe:	4b23      	ldr	r3, [pc, #140]	@ (800b18c <prvAddNewTaskToReadyList+0xc8>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b108:	429a      	cmp	r2, r3
 800b10a:	d802      	bhi.n	800b112 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b10c:	4a1f      	ldr	r2, [pc, #124]	@ (800b18c <prvAddNewTaskToReadyList+0xc8>)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b112:	4b20      	ldr	r3, [pc, #128]	@ (800b194 <prvAddNewTaskToReadyList+0xd0>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	3301      	adds	r3, #1
 800b118:	4a1e      	ldr	r2, [pc, #120]	@ (800b194 <prvAddNewTaskToReadyList+0xd0>)
 800b11a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b11c:	4b1d      	ldr	r3, [pc, #116]	@ (800b194 <prvAddNewTaskToReadyList+0xd0>)
 800b11e:	681a      	ldr	r2, [r3, #0]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b128:	4b1b      	ldr	r3, [pc, #108]	@ (800b198 <prvAddNewTaskToReadyList+0xd4>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d903      	bls.n	800b138 <prvAddNewTaskToReadyList+0x74>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b134:	4a18      	ldr	r2, [pc, #96]	@ (800b198 <prvAddNewTaskToReadyList+0xd4>)
 800b136:	6013      	str	r3, [r2, #0]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b13c:	4613      	mov	r3, r2
 800b13e:	009b      	lsls	r3, r3, #2
 800b140:	4413      	add	r3, r2
 800b142:	009b      	lsls	r3, r3, #2
 800b144:	4a15      	ldr	r2, [pc, #84]	@ (800b19c <prvAddNewTaskToReadyList+0xd8>)
 800b146:	441a      	add	r2, r3
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	3304      	adds	r3, #4
 800b14c:	4619      	mov	r1, r3
 800b14e:	4610      	mov	r0, r2
 800b150:	f7ff f8e9 	bl	800a326 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b154:	f001 fa8a 	bl	800c66c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b158:	4b0d      	ldr	r3, [pc, #52]	@ (800b190 <prvAddNewTaskToReadyList+0xcc>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d00e      	beq.n	800b17e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b160:	4b0a      	ldr	r3, [pc, #40]	@ (800b18c <prvAddNewTaskToReadyList+0xc8>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d207      	bcs.n	800b17e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b16e:	4b0c      	ldr	r3, [pc, #48]	@ (800b1a0 <prvAddNewTaskToReadyList+0xdc>)
 800b170:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b174:	601a      	str	r2, [r3, #0]
 800b176:	f3bf 8f4f 	dsb	sy
 800b17a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b17e:	bf00      	nop
 800b180:	3708      	adds	r7, #8
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}
 800b186:	bf00      	nop
 800b188:	20009388 	.word	0x20009388
 800b18c:	20008eb4 	.word	0x20008eb4
 800b190:	20009394 	.word	0x20009394
 800b194:	200093a4 	.word	0x200093a4
 800b198:	20009390 	.word	0x20009390
 800b19c:	20008eb8 	.word	0x20008eb8
 800b1a0:	e000ed04 	.word	0xe000ed04

0800b1a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b084      	sub	sp, #16
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d018      	beq.n	800b1e8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b1b6:	4b14      	ldr	r3, [pc, #80]	@ (800b208 <vTaskDelay+0x64>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d00b      	beq.n	800b1d6 <vTaskDelay+0x32>
	__asm volatile
 800b1be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1c2:	f383 8811 	msr	BASEPRI, r3
 800b1c6:	f3bf 8f6f 	isb	sy
 800b1ca:	f3bf 8f4f 	dsb	sy
 800b1ce:	60bb      	str	r3, [r7, #8]
}
 800b1d0:	bf00      	nop
 800b1d2:	bf00      	nop
 800b1d4:	e7fd      	b.n	800b1d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b1d6:	f000 f88b 	bl	800b2f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b1da:	2100      	movs	r1, #0
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f000 fd31 	bl	800bc44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b1e2:	f000 f893 	bl	800b30c <xTaskResumeAll>
 800b1e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d107      	bne.n	800b1fe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b1ee:	4b07      	ldr	r3, [pc, #28]	@ (800b20c <vTaskDelay+0x68>)
 800b1f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1f4:	601a      	str	r2, [r3, #0]
 800b1f6:	f3bf 8f4f 	dsb	sy
 800b1fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b1fe:	bf00      	nop
 800b200:	3710      	adds	r7, #16
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	200093b0 	.word	0x200093b0
 800b20c:	e000ed04 	.word	0xe000ed04

0800b210 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b08a      	sub	sp, #40	@ 0x28
 800b214:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b216:	2300      	movs	r3, #0
 800b218:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b21a:	2300      	movs	r3, #0
 800b21c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b21e:	463a      	mov	r2, r7
 800b220:	1d39      	adds	r1, r7, #4
 800b222:	f107 0308 	add.w	r3, r7, #8
 800b226:	4618      	mov	r0, r3
 800b228:	f7ff f81c 	bl	800a264 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b22c:	6839      	ldr	r1, [r7, #0]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	68ba      	ldr	r2, [r7, #8]
 800b232:	9202      	str	r2, [sp, #8]
 800b234:	9301      	str	r3, [sp, #4]
 800b236:	2300      	movs	r3, #0
 800b238:	9300      	str	r3, [sp, #0]
 800b23a:	2300      	movs	r3, #0
 800b23c:	460a      	mov	r2, r1
 800b23e:	4924      	ldr	r1, [pc, #144]	@ (800b2d0 <vTaskStartScheduler+0xc0>)
 800b240:	4824      	ldr	r0, [pc, #144]	@ (800b2d4 <vTaskStartScheduler+0xc4>)
 800b242:	f7ff fdf1 	bl	800ae28 <xTaskCreateStatic>
 800b246:	4603      	mov	r3, r0
 800b248:	4a23      	ldr	r2, [pc, #140]	@ (800b2d8 <vTaskStartScheduler+0xc8>)
 800b24a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b24c:	4b22      	ldr	r3, [pc, #136]	@ (800b2d8 <vTaskStartScheduler+0xc8>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d002      	beq.n	800b25a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b254:	2301      	movs	r3, #1
 800b256:	617b      	str	r3, [r7, #20]
 800b258:	e001      	b.n	800b25e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b25a:	2300      	movs	r3, #0
 800b25c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	2b01      	cmp	r3, #1
 800b262:	d102      	bne.n	800b26a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b264:	f000 fd42 	bl	800bcec <xTimerCreateTimerTask>
 800b268:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	d11b      	bne.n	800b2a8 <vTaskStartScheduler+0x98>
	__asm volatile
 800b270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b274:	f383 8811 	msr	BASEPRI, r3
 800b278:	f3bf 8f6f 	isb	sy
 800b27c:	f3bf 8f4f 	dsb	sy
 800b280:	613b      	str	r3, [r7, #16]
}
 800b282:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b284:	4b15      	ldr	r3, [pc, #84]	@ (800b2dc <vTaskStartScheduler+0xcc>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	3354      	adds	r3, #84	@ 0x54
 800b28a:	4a15      	ldr	r2, [pc, #84]	@ (800b2e0 <vTaskStartScheduler+0xd0>)
 800b28c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b28e:	4b15      	ldr	r3, [pc, #84]	@ (800b2e4 <vTaskStartScheduler+0xd4>)
 800b290:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b294:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b296:	4b14      	ldr	r3, [pc, #80]	@ (800b2e8 <vTaskStartScheduler+0xd8>)
 800b298:	2201      	movs	r2, #1
 800b29a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b29c:	4b13      	ldr	r3, [pc, #76]	@ (800b2ec <vTaskStartScheduler+0xdc>)
 800b29e:	2200      	movs	r2, #0
 800b2a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b2a2:	f001 f90d 	bl	800c4c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b2a6:	e00f      	b.n	800b2c8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b2ae:	d10b      	bne.n	800b2c8 <vTaskStartScheduler+0xb8>
	__asm volatile
 800b2b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2b4:	f383 8811 	msr	BASEPRI, r3
 800b2b8:	f3bf 8f6f 	isb	sy
 800b2bc:	f3bf 8f4f 	dsb	sy
 800b2c0:	60fb      	str	r3, [r7, #12]
}
 800b2c2:	bf00      	nop
 800b2c4:	bf00      	nop
 800b2c6:	e7fd      	b.n	800b2c4 <vTaskStartScheduler+0xb4>
}
 800b2c8:	bf00      	nop
 800b2ca:	3718      	adds	r7, #24
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	0801fcf8 	.word	0x0801fcf8
 800b2d4:	0800b971 	.word	0x0800b971
 800b2d8:	200093ac 	.word	0x200093ac
 800b2dc:	20008eb4 	.word	0x20008eb4
 800b2e0:	200000c8 	.word	0x200000c8
 800b2e4:	200093a8 	.word	0x200093a8
 800b2e8:	20009394 	.word	0x20009394
 800b2ec:	2000938c 	.word	0x2000938c

0800b2f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b2f4:	4b04      	ldr	r3, [pc, #16]	@ (800b308 <vTaskSuspendAll+0x18>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	4a03      	ldr	r2, [pc, #12]	@ (800b308 <vTaskSuspendAll+0x18>)
 800b2fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b2fe:	bf00      	nop
 800b300:	46bd      	mov	sp, r7
 800b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b306:	4770      	bx	lr
 800b308:	200093b0 	.word	0x200093b0

0800b30c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b084      	sub	sp, #16
 800b310:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b312:	2300      	movs	r3, #0
 800b314:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b316:	2300      	movs	r3, #0
 800b318:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b31a:	4b42      	ldr	r3, [pc, #264]	@ (800b424 <xTaskResumeAll+0x118>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d10b      	bne.n	800b33a <xTaskResumeAll+0x2e>
	__asm volatile
 800b322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b326:	f383 8811 	msr	BASEPRI, r3
 800b32a:	f3bf 8f6f 	isb	sy
 800b32e:	f3bf 8f4f 	dsb	sy
 800b332:	603b      	str	r3, [r7, #0]
}
 800b334:	bf00      	nop
 800b336:	bf00      	nop
 800b338:	e7fd      	b.n	800b336 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b33a:	f001 f965 	bl	800c608 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b33e:	4b39      	ldr	r3, [pc, #228]	@ (800b424 <xTaskResumeAll+0x118>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	3b01      	subs	r3, #1
 800b344:	4a37      	ldr	r2, [pc, #220]	@ (800b424 <xTaskResumeAll+0x118>)
 800b346:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b348:	4b36      	ldr	r3, [pc, #216]	@ (800b424 <xTaskResumeAll+0x118>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d162      	bne.n	800b416 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b350:	4b35      	ldr	r3, [pc, #212]	@ (800b428 <xTaskResumeAll+0x11c>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d05e      	beq.n	800b416 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b358:	e02f      	b.n	800b3ba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b35a:	4b34      	ldr	r3, [pc, #208]	@ (800b42c <xTaskResumeAll+0x120>)
 800b35c:	68db      	ldr	r3, [r3, #12]
 800b35e:	68db      	ldr	r3, [r3, #12]
 800b360:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	3318      	adds	r3, #24
 800b366:	4618      	mov	r0, r3
 800b368:	f7ff f83a 	bl	800a3e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	3304      	adds	r3, #4
 800b370:	4618      	mov	r0, r3
 800b372:	f7ff f835 	bl	800a3e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b37a:	4b2d      	ldr	r3, [pc, #180]	@ (800b430 <xTaskResumeAll+0x124>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	429a      	cmp	r2, r3
 800b380:	d903      	bls.n	800b38a <xTaskResumeAll+0x7e>
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b386:	4a2a      	ldr	r2, [pc, #168]	@ (800b430 <xTaskResumeAll+0x124>)
 800b388:	6013      	str	r3, [r2, #0]
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b38e:	4613      	mov	r3, r2
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	4413      	add	r3, r2
 800b394:	009b      	lsls	r3, r3, #2
 800b396:	4a27      	ldr	r2, [pc, #156]	@ (800b434 <xTaskResumeAll+0x128>)
 800b398:	441a      	add	r2, r3
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	3304      	adds	r3, #4
 800b39e:	4619      	mov	r1, r3
 800b3a0:	4610      	mov	r0, r2
 800b3a2:	f7fe ffc0 	bl	800a326 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3aa:	4b23      	ldr	r3, [pc, #140]	@ (800b438 <xTaskResumeAll+0x12c>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d302      	bcc.n	800b3ba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b3b4:	4b21      	ldr	r3, [pc, #132]	@ (800b43c <xTaskResumeAll+0x130>)
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b3ba:	4b1c      	ldr	r3, [pc, #112]	@ (800b42c <xTaskResumeAll+0x120>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d1cb      	bne.n	800b35a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d001      	beq.n	800b3cc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b3c8:	f000 fb8e 	bl	800bae8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b3cc:	4b1c      	ldr	r3, [pc, #112]	@ (800b440 <xTaskResumeAll+0x134>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d010      	beq.n	800b3fa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b3d8:	f000 f846 	bl	800b468 <xTaskIncrementTick>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d002      	beq.n	800b3e8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b3e2:	4b16      	ldr	r3, [pc, #88]	@ (800b43c <xTaskResumeAll+0x130>)
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	3b01      	subs	r3, #1
 800b3ec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d1f1      	bne.n	800b3d8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b3f4:	4b12      	ldr	r3, [pc, #72]	@ (800b440 <xTaskResumeAll+0x134>)
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b3fa:	4b10      	ldr	r3, [pc, #64]	@ (800b43c <xTaskResumeAll+0x130>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d009      	beq.n	800b416 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b402:	2301      	movs	r3, #1
 800b404:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b406:	4b0f      	ldr	r3, [pc, #60]	@ (800b444 <xTaskResumeAll+0x138>)
 800b408:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b40c:	601a      	str	r2, [r3, #0]
 800b40e:	f3bf 8f4f 	dsb	sy
 800b412:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b416:	f001 f929 	bl	800c66c <vPortExitCritical>

	return xAlreadyYielded;
 800b41a:	68bb      	ldr	r3, [r7, #8]
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3710      	adds	r7, #16
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}
 800b424:	200093b0 	.word	0x200093b0
 800b428:	20009388 	.word	0x20009388
 800b42c:	20009348 	.word	0x20009348
 800b430:	20009390 	.word	0x20009390
 800b434:	20008eb8 	.word	0x20008eb8
 800b438:	20008eb4 	.word	0x20008eb4
 800b43c:	2000939c 	.word	0x2000939c
 800b440:	20009398 	.word	0x20009398
 800b444:	e000ed04 	.word	0xe000ed04

0800b448 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b448:	b480      	push	{r7}
 800b44a:	b083      	sub	sp, #12
 800b44c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b44e:	4b05      	ldr	r3, [pc, #20]	@ (800b464 <xTaskGetTickCount+0x1c>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b454:	687b      	ldr	r3, [r7, #4]
}
 800b456:	4618      	mov	r0, r3
 800b458:	370c      	adds	r7, #12
 800b45a:	46bd      	mov	sp, r7
 800b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b460:	4770      	bx	lr
 800b462:	bf00      	nop
 800b464:	2000938c 	.word	0x2000938c

0800b468 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b086      	sub	sp, #24
 800b46c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b46e:	2300      	movs	r3, #0
 800b470:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b472:	4b4f      	ldr	r3, [pc, #316]	@ (800b5b0 <xTaskIncrementTick+0x148>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	f040 8090 	bne.w	800b59c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b47c:	4b4d      	ldr	r3, [pc, #308]	@ (800b5b4 <xTaskIncrementTick+0x14c>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	3301      	adds	r3, #1
 800b482:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b484:	4a4b      	ldr	r2, [pc, #300]	@ (800b5b4 <xTaskIncrementTick+0x14c>)
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d121      	bne.n	800b4d4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b490:	4b49      	ldr	r3, [pc, #292]	@ (800b5b8 <xTaskIncrementTick+0x150>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d00b      	beq.n	800b4b2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b49a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b49e:	f383 8811 	msr	BASEPRI, r3
 800b4a2:	f3bf 8f6f 	isb	sy
 800b4a6:	f3bf 8f4f 	dsb	sy
 800b4aa:	603b      	str	r3, [r7, #0]
}
 800b4ac:	bf00      	nop
 800b4ae:	bf00      	nop
 800b4b0:	e7fd      	b.n	800b4ae <xTaskIncrementTick+0x46>
 800b4b2:	4b41      	ldr	r3, [pc, #260]	@ (800b5b8 <xTaskIncrementTick+0x150>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	60fb      	str	r3, [r7, #12]
 800b4b8:	4b40      	ldr	r3, [pc, #256]	@ (800b5bc <xTaskIncrementTick+0x154>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	4a3e      	ldr	r2, [pc, #248]	@ (800b5b8 <xTaskIncrementTick+0x150>)
 800b4be:	6013      	str	r3, [r2, #0]
 800b4c0:	4a3e      	ldr	r2, [pc, #248]	@ (800b5bc <xTaskIncrementTick+0x154>)
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	6013      	str	r3, [r2, #0]
 800b4c6:	4b3e      	ldr	r3, [pc, #248]	@ (800b5c0 <xTaskIncrementTick+0x158>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	4a3c      	ldr	r2, [pc, #240]	@ (800b5c0 <xTaskIncrementTick+0x158>)
 800b4ce:	6013      	str	r3, [r2, #0]
 800b4d0:	f000 fb0a 	bl	800bae8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b4d4:	4b3b      	ldr	r3, [pc, #236]	@ (800b5c4 <xTaskIncrementTick+0x15c>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	693a      	ldr	r2, [r7, #16]
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d349      	bcc.n	800b572 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4de:	4b36      	ldr	r3, [pc, #216]	@ (800b5b8 <xTaskIncrementTick+0x150>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d104      	bne.n	800b4f2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4e8:	4b36      	ldr	r3, [pc, #216]	@ (800b5c4 <xTaskIncrementTick+0x15c>)
 800b4ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b4ee:	601a      	str	r2, [r3, #0]
					break;
 800b4f0:	e03f      	b.n	800b572 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4f2:	4b31      	ldr	r3, [pc, #196]	@ (800b5b8 <xTaskIncrementTick+0x150>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	68db      	ldr	r3, [r3, #12]
 800b4f8:	68db      	ldr	r3, [r3, #12]
 800b4fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b502:	693a      	ldr	r2, [r7, #16]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	429a      	cmp	r2, r3
 800b508:	d203      	bcs.n	800b512 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b50a:	4a2e      	ldr	r2, [pc, #184]	@ (800b5c4 <xTaskIncrementTick+0x15c>)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b510:	e02f      	b.n	800b572 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	3304      	adds	r3, #4
 800b516:	4618      	mov	r0, r3
 800b518:	f7fe ff62 	bl	800a3e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b520:	2b00      	cmp	r3, #0
 800b522:	d004      	beq.n	800b52e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	3318      	adds	r3, #24
 800b528:	4618      	mov	r0, r3
 800b52a:	f7fe ff59 	bl	800a3e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b532:	4b25      	ldr	r3, [pc, #148]	@ (800b5c8 <xTaskIncrementTick+0x160>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	429a      	cmp	r2, r3
 800b538:	d903      	bls.n	800b542 <xTaskIncrementTick+0xda>
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b53e:	4a22      	ldr	r2, [pc, #136]	@ (800b5c8 <xTaskIncrementTick+0x160>)
 800b540:	6013      	str	r3, [r2, #0]
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b546:	4613      	mov	r3, r2
 800b548:	009b      	lsls	r3, r3, #2
 800b54a:	4413      	add	r3, r2
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	4a1f      	ldr	r2, [pc, #124]	@ (800b5cc <xTaskIncrementTick+0x164>)
 800b550:	441a      	add	r2, r3
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	3304      	adds	r3, #4
 800b556:	4619      	mov	r1, r3
 800b558:	4610      	mov	r0, r2
 800b55a:	f7fe fee4 	bl	800a326 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b562:	4b1b      	ldr	r3, [pc, #108]	@ (800b5d0 <xTaskIncrementTick+0x168>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b568:	429a      	cmp	r2, r3
 800b56a:	d3b8      	bcc.n	800b4de <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b56c:	2301      	movs	r3, #1
 800b56e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b570:	e7b5      	b.n	800b4de <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b572:	4b17      	ldr	r3, [pc, #92]	@ (800b5d0 <xTaskIncrementTick+0x168>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b578:	4914      	ldr	r1, [pc, #80]	@ (800b5cc <xTaskIncrementTick+0x164>)
 800b57a:	4613      	mov	r3, r2
 800b57c:	009b      	lsls	r3, r3, #2
 800b57e:	4413      	add	r3, r2
 800b580:	009b      	lsls	r3, r3, #2
 800b582:	440b      	add	r3, r1
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	2b01      	cmp	r3, #1
 800b588:	d901      	bls.n	800b58e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b58a:	2301      	movs	r3, #1
 800b58c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b58e:	4b11      	ldr	r3, [pc, #68]	@ (800b5d4 <xTaskIncrementTick+0x16c>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d007      	beq.n	800b5a6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b596:	2301      	movs	r3, #1
 800b598:	617b      	str	r3, [r7, #20]
 800b59a:	e004      	b.n	800b5a6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b59c:	4b0e      	ldr	r3, [pc, #56]	@ (800b5d8 <xTaskIncrementTick+0x170>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	4a0d      	ldr	r2, [pc, #52]	@ (800b5d8 <xTaskIncrementTick+0x170>)
 800b5a4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b5a6:	697b      	ldr	r3, [r7, #20]
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3718      	adds	r7, #24
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}
 800b5b0:	200093b0 	.word	0x200093b0
 800b5b4:	2000938c 	.word	0x2000938c
 800b5b8:	20009340 	.word	0x20009340
 800b5bc:	20009344 	.word	0x20009344
 800b5c0:	200093a0 	.word	0x200093a0
 800b5c4:	200093a8 	.word	0x200093a8
 800b5c8:	20009390 	.word	0x20009390
 800b5cc:	20008eb8 	.word	0x20008eb8
 800b5d0:	20008eb4 	.word	0x20008eb4
 800b5d4:	2000939c 	.word	0x2000939c
 800b5d8:	20009398 	.word	0x20009398

0800b5dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b085      	sub	sp, #20
 800b5e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b5e2:	4b2b      	ldr	r3, [pc, #172]	@ (800b690 <vTaskSwitchContext+0xb4>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d003      	beq.n	800b5f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b5ea:	4b2a      	ldr	r3, [pc, #168]	@ (800b694 <vTaskSwitchContext+0xb8>)
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b5f0:	e047      	b.n	800b682 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b5f2:	4b28      	ldr	r3, [pc, #160]	@ (800b694 <vTaskSwitchContext+0xb8>)
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5f8:	4b27      	ldr	r3, [pc, #156]	@ (800b698 <vTaskSwitchContext+0xbc>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	60fb      	str	r3, [r7, #12]
 800b5fe:	e011      	b.n	800b624 <vTaskSwitchContext+0x48>
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d10b      	bne.n	800b61e <vTaskSwitchContext+0x42>
	__asm volatile
 800b606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b60a:	f383 8811 	msr	BASEPRI, r3
 800b60e:	f3bf 8f6f 	isb	sy
 800b612:	f3bf 8f4f 	dsb	sy
 800b616:	607b      	str	r3, [r7, #4]
}
 800b618:	bf00      	nop
 800b61a:	bf00      	nop
 800b61c:	e7fd      	b.n	800b61a <vTaskSwitchContext+0x3e>
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	3b01      	subs	r3, #1
 800b622:	60fb      	str	r3, [r7, #12]
 800b624:	491d      	ldr	r1, [pc, #116]	@ (800b69c <vTaskSwitchContext+0xc0>)
 800b626:	68fa      	ldr	r2, [r7, #12]
 800b628:	4613      	mov	r3, r2
 800b62a:	009b      	lsls	r3, r3, #2
 800b62c:	4413      	add	r3, r2
 800b62e:	009b      	lsls	r3, r3, #2
 800b630:	440b      	add	r3, r1
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d0e3      	beq.n	800b600 <vTaskSwitchContext+0x24>
 800b638:	68fa      	ldr	r2, [r7, #12]
 800b63a:	4613      	mov	r3, r2
 800b63c:	009b      	lsls	r3, r3, #2
 800b63e:	4413      	add	r3, r2
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	4a16      	ldr	r2, [pc, #88]	@ (800b69c <vTaskSwitchContext+0xc0>)
 800b644:	4413      	add	r3, r2
 800b646:	60bb      	str	r3, [r7, #8]
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	685b      	ldr	r3, [r3, #4]
 800b64c:	685a      	ldr	r2, [r3, #4]
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	605a      	str	r2, [r3, #4]
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	685a      	ldr	r2, [r3, #4]
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	3308      	adds	r3, #8
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d104      	bne.n	800b668 <vTaskSwitchContext+0x8c>
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	685a      	ldr	r2, [r3, #4]
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	605a      	str	r2, [r3, #4]
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	68db      	ldr	r3, [r3, #12]
 800b66e:	4a0c      	ldr	r2, [pc, #48]	@ (800b6a0 <vTaskSwitchContext+0xc4>)
 800b670:	6013      	str	r3, [r2, #0]
 800b672:	4a09      	ldr	r2, [pc, #36]	@ (800b698 <vTaskSwitchContext+0xbc>)
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b678:	4b09      	ldr	r3, [pc, #36]	@ (800b6a0 <vTaskSwitchContext+0xc4>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	3354      	adds	r3, #84	@ 0x54
 800b67e:	4a09      	ldr	r2, [pc, #36]	@ (800b6a4 <vTaskSwitchContext+0xc8>)
 800b680:	6013      	str	r3, [r2, #0]
}
 800b682:	bf00      	nop
 800b684:	3714      	adds	r7, #20
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr
 800b68e:	bf00      	nop
 800b690:	200093b0 	.word	0x200093b0
 800b694:	2000939c 	.word	0x2000939c
 800b698:	20009390 	.word	0x20009390
 800b69c:	20008eb8 	.word	0x20008eb8
 800b6a0:	20008eb4 	.word	0x20008eb4
 800b6a4:	200000c8 	.word	0x200000c8

0800b6a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b084      	sub	sp, #16
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d10b      	bne.n	800b6d0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b6b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6bc:	f383 8811 	msr	BASEPRI, r3
 800b6c0:	f3bf 8f6f 	isb	sy
 800b6c4:	f3bf 8f4f 	dsb	sy
 800b6c8:	60fb      	str	r3, [r7, #12]
}
 800b6ca:	bf00      	nop
 800b6cc:	bf00      	nop
 800b6ce:	e7fd      	b.n	800b6cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b6d0:	4b07      	ldr	r3, [pc, #28]	@ (800b6f0 <vTaskPlaceOnEventList+0x48>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	3318      	adds	r3, #24
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f7fe fe48 	bl	800a36e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b6de:	2101      	movs	r1, #1
 800b6e0:	6838      	ldr	r0, [r7, #0]
 800b6e2:	f000 faaf 	bl	800bc44 <prvAddCurrentTaskToDelayedList>
}
 800b6e6:	bf00      	nop
 800b6e8:	3710      	adds	r7, #16
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	20008eb4 	.word	0x20008eb4

0800b6f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b086      	sub	sp, #24
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d10b      	bne.n	800b71e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b70a:	f383 8811 	msr	BASEPRI, r3
 800b70e:	f3bf 8f6f 	isb	sy
 800b712:	f3bf 8f4f 	dsb	sy
 800b716:	617b      	str	r3, [r7, #20]
}
 800b718:	bf00      	nop
 800b71a:	bf00      	nop
 800b71c:	e7fd      	b.n	800b71a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b71e:	4b0a      	ldr	r3, [pc, #40]	@ (800b748 <vTaskPlaceOnEventListRestricted+0x54>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	3318      	adds	r3, #24
 800b724:	4619      	mov	r1, r3
 800b726:	68f8      	ldr	r0, [r7, #12]
 800b728:	f7fe fdfd 	bl	800a326 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d002      	beq.n	800b738 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b732:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b736:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b738:	6879      	ldr	r1, [r7, #4]
 800b73a:	68b8      	ldr	r0, [r7, #8]
 800b73c:	f000 fa82 	bl	800bc44 <prvAddCurrentTaskToDelayedList>
	}
 800b740:	bf00      	nop
 800b742:	3718      	adds	r7, #24
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}
 800b748:	20008eb4 	.word	0x20008eb4

0800b74c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b086      	sub	sp, #24
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	68db      	ldr	r3, [r3, #12]
 800b758:	68db      	ldr	r3, [r3, #12]
 800b75a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d10b      	bne.n	800b77a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b766:	f383 8811 	msr	BASEPRI, r3
 800b76a:	f3bf 8f6f 	isb	sy
 800b76e:	f3bf 8f4f 	dsb	sy
 800b772:	60fb      	str	r3, [r7, #12]
}
 800b774:	bf00      	nop
 800b776:	bf00      	nop
 800b778:	e7fd      	b.n	800b776 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b77a:	693b      	ldr	r3, [r7, #16]
 800b77c:	3318      	adds	r3, #24
 800b77e:	4618      	mov	r0, r3
 800b780:	f7fe fe2e 	bl	800a3e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b784:	4b1d      	ldr	r3, [pc, #116]	@ (800b7fc <xTaskRemoveFromEventList+0xb0>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d11d      	bne.n	800b7c8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	3304      	adds	r3, #4
 800b790:	4618      	mov	r0, r3
 800b792:	f7fe fe25 	bl	800a3e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b79a:	4b19      	ldr	r3, [pc, #100]	@ (800b800 <xTaskRemoveFromEventList+0xb4>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d903      	bls.n	800b7aa <xTaskRemoveFromEventList+0x5e>
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7a6:	4a16      	ldr	r2, [pc, #88]	@ (800b800 <xTaskRemoveFromEventList+0xb4>)
 800b7a8:	6013      	str	r3, [r2, #0]
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7ae:	4613      	mov	r3, r2
 800b7b0:	009b      	lsls	r3, r3, #2
 800b7b2:	4413      	add	r3, r2
 800b7b4:	009b      	lsls	r3, r3, #2
 800b7b6:	4a13      	ldr	r2, [pc, #76]	@ (800b804 <xTaskRemoveFromEventList+0xb8>)
 800b7b8:	441a      	add	r2, r3
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	3304      	adds	r3, #4
 800b7be:	4619      	mov	r1, r3
 800b7c0:	4610      	mov	r0, r2
 800b7c2:	f7fe fdb0 	bl	800a326 <vListInsertEnd>
 800b7c6:	e005      	b.n	800b7d4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	3318      	adds	r3, #24
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	480e      	ldr	r0, [pc, #56]	@ (800b808 <xTaskRemoveFromEventList+0xbc>)
 800b7d0:	f7fe fda9 	bl	800a326 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7d8:	4b0c      	ldr	r3, [pc, #48]	@ (800b80c <xTaskRemoveFromEventList+0xc0>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d905      	bls.n	800b7ee <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b7e6:	4b0a      	ldr	r3, [pc, #40]	@ (800b810 <xTaskRemoveFromEventList+0xc4>)
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	601a      	str	r2, [r3, #0]
 800b7ec:	e001      	b.n	800b7f2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b7f2:	697b      	ldr	r3, [r7, #20]
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3718      	adds	r7, #24
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}
 800b7fc:	200093b0 	.word	0x200093b0
 800b800:	20009390 	.word	0x20009390
 800b804:	20008eb8 	.word	0x20008eb8
 800b808:	20009348 	.word	0x20009348
 800b80c:	20008eb4 	.word	0x20008eb4
 800b810:	2000939c 	.word	0x2000939c

0800b814 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d10b      	bne.n	800b83a <vTaskSetTimeOutState+0x26>
	__asm volatile
 800b822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b826:	f383 8811 	msr	BASEPRI, r3
 800b82a:	f3bf 8f6f 	isb	sy
 800b82e:	f3bf 8f4f 	dsb	sy
 800b832:	60fb      	str	r3, [r7, #12]
}
 800b834:	bf00      	nop
 800b836:	bf00      	nop
 800b838:	e7fd      	b.n	800b836 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800b83a:	f000 fee5 	bl	800c608 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b83e:	4b07      	ldr	r3, [pc, #28]	@ (800b85c <vTaskSetTimeOutState+0x48>)
 800b840:	681a      	ldr	r2, [r3, #0]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800b846:	4b06      	ldr	r3, [pc, #24]	@ (800b860 <vTaskSetTimeOutState+0x4c>)
 800b848:	681a      	ldr	r2, [r3, #0]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800b84e:	f000 ff0d 	bl	800c66c <vPortExitCritical>
}
 800b852:	bf00      	nop
 800b854:	3710      	adds	r7, #16
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}
 800b85a:	bf00      	nop
 800b85c:	200093a0 	.word	0x200093a0
 800b860:	2000938c 	.word	0x2000938c

0800b864 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b864:	b480      	push	{r7}
 800b866:	b083      	sub	sp, #12
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b86c:	4b06      	ldr	r3, [pc, #24]	@ (800b888 <vTaskInternalSetTimeOutState+0x24>)
 800b86e:	681a      	ldr	r2, [r3, #0]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b874:	4b05      	ldr	r3, [pc, #20]	@ (800b88c <vTaskInternalSetTimeOutState+0x28>)
 800b876:	681a      	ldr	r2, [r3, #0]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	605a      	str	r2, [r3, #4]
}
 800b87c:	bf00      	nop
 800b87e:	370c      	adds	r7, #12
 800b880:	46bd      	mov	sp, r7
 800b882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b886:	4770      	bx	lr
 800b888:	200093a0 	.word	0x200093a0
 800b88c:	2000938c 	.word	0x2000938c

0800b890 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b088      	sub	sp, #32
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d10b      	bne.n	800b8b8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b8a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8a4:	f383 8811 	msr	BASEPRI, r3
 800b8a8:	f3bf 8f6f 	isb	sy
 800b8ac:	f3bf 8f4f 	dsb	sy
 800b8b0:	613b      	str	r3, [r7, #16]
}
 800b8b2:	bf00      	nop
 800b8b4:	bf00      	nop
 800b8b6:	e7fd      	b.n	800b8b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d10b      	bne.n	800b8d6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b8be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8c2:	f383 8811 	msr	BASEPRI, r3
 800b8c6:	f3bf 8f6f 	isb	sy
 800b8ca:	f3bf 8f4f 	dsb	sy
 800b8ce:	60fb      	str	r3, [r7, #12]
}
 800b8d0:	bf00      	nop
 800b8d2:	bf00      	nop
 800b8d4:	e7fd      	b.n	800b8d2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b8d6:	f000 fe97 	bl	800c608 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b8da:	4b1d      	ldr	r3, [pc, #116]	@ (800b950 <xTaskCheckForTimeOut+0xc0>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	685b      	ldr	r3, [r3, #4]
 800b8e4:	69ba      	ldr	r2, [r7, #24]
 800b8e6:	1ad3      	subs	r3, r2, r3
 800b8e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b8f2:	d102      	bne.n	800b8fa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	61fb      	str	r3, [r7, #28]
 800b8f8:	e023      	b.n	800b942 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681a      	ldr	r2, [r3, #0]
 800b8fe:	4b15      	ldr	r3, [pc, #84]	@ (800b954 <xTaskCheckForTimeOut+0xc4>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	429a      	cmp	r2, r3
 800b904:	d007      	beq.n	800b916 <xTaskCheckForTimeOut+0x86>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	69ba      	ldr	r2, [r7, #24]
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d302      	bcc.n	800b916 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b910:	2301      	movs	r3, #1
 800b912:	61fb      	str	r3, [r7, #28]
 800b914:	e015      	b.n	800b942 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	697a      	ldr	r2, [r7, #20]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d20b      	bcs.n	800b938 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	681a      	ldr	r2, [r3, #0]
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	1ad2      	subs	r2, r2, r3
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f7ff ff99 	bl	800b864 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b932:	2300      	movs	r3, #0
 800b934:	61fb      	str	r3, [r7, #28]
 800b936:	e004      	b.n	800b942 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	2200      	movs	r2, #0
 800b93c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b93e:	2301      	movs	r3, #1
 800b940:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b942:	f000 fe93 	bl	800c66c <vPortExitCritical>

	return xReturn;
 800b946:	69fb      	ldr	r3, [r7, #28]
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3720      	adds	r7, #32
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}
 800b950:	2000938c 	.word	0x2000938c
 800b954:	200093a0 	.word	0x200093a0

0800b958 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b958:	b480      	push	{r7}
 800b95a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b95c:	4b03      	ldr	r3, [pc, #12]	@ (800b96c <vTaskMissedYield+0x14>)
 800b95e:	2201      	movs	r2, #1
 800b960:	601a      	str	r2, [r3, #0]
}
 800b962:	bf00      	nop
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr
 800b96c:	2000939c 	.word	0x2000939c

0800b970 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b082      	sub	sp, #8
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b978:	f000 f852 	bl	800ba20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b97c:	4b06      	ldr	r3, [pc, #24]	@ (800b998 <prvIdleTask+0x28>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	2b01      	cmp	r3, #1
 800b982:	d9f9      	bls.n	800b978 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b984:	4b05      	ldr	r3, [pc, #20]	@ (800b99c <prvIdleTask+0x2c>)
 800b986:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b98a:	601a      	str	r2, [r3, #0]
 800b98c:	f3bf 8f4f 	dsb	sy
 800b990:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b994:	e7f0      	b.n	800b978 <prvIdleTask+0x8>
 800b996:	bf00      	nop
 800b998:	20008eb8 	.word	0x20008eb8
 800b99c:	e000ed04 	.word	0xe000ed04

0800b9a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	607b      	str	r3, [r7, #4]
 800b9aa:	e00c      	b.n	800b9c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b9ac:	687a      	ldr	r2, [r7, #4]
 800b9ae:	4613      	mov	r3, r2
 800b9b0:	009b      	lsls	r3, r3, #2
 800b9b2:	4413      	add	r3, r2
 800b9b4:	009b      	lsls	r3, r3, #2
 800b9b6:	4a12      	ldr	r2, [pc, #72]	@ (800ba00 <prvInitialiseTaskLists+0x60>)
 800b9b8:	4413      	add	r3, r2
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7fe fc86 	bl	800a2cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	607b      	str	r3, [r7, #4]
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2b37      	cmp	r3, #55	@ 0x37
 800b9ca:	d9ef      	bls.n	800b9ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b9cc:	480d      	ldr	r0, [pc, #52]	@ (800ba04 <prvInitialiseTaskLists+0x64>)
 800b9ce:	f7fe fc7d 	bl	800a2cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b9d2:	480d      	ldr	r0, [pc, #52]	@ (800ba08 <prvInitialiseTaskLists+0x68>)
 800b9d4:	f7fe fc7a 	bl	800a2cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b9d8:	480c      	ldr	r0, [pc, #48]	@ (800ba0c <prvInitialiseTaskLists+0x6c>)
 800b9da:	f7fe fc77 	bl	800a2cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b9de:	480c      	ldr	r0, [pc, #48]	@ (800ba10 <prvInitialiseTaskLists+0x70>)
 800b9e0:	f7fe fc74 	bl	800a2cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b9e4:	480b      	ldr	r0, [pc, #44]	@ (800ba14 <prvInitialiseTaskLists+0x74>)
 800b9e6:	f7fe fc71 	bl	800a2cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b9ea:	4b0b      	ldr	r3, [pc, #44]	@ (800ba18 <prvInitialiseTaskLists+0x78>)
 800b9ec:	4a05      	ldr	r2, [pc, #20]	@ (800ba04 <prvInitialiseTaskLists+0x64>)
 800b9ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b9f0:	4b0a      	ldr	r3, [pc, #40]	@ (800ba1c <prvInitialiseTaskLists+0x7c>)
 800b9f2:	4a05      	ldr	r2, [pc, #20]	@ (800ba08 <prvInitialiseTaskLists+0x68>)
 800b9f4:	601a      	str	r2, [r3, #0]
}
 800b9f6:	bf00      	nop
 800b9f8:	3708      	adds	r7, #8
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	20008eb8 	.word	0x20008eb8
 800ba04:	20009318 	.word	0x20009318
 800ba08:	2000932c 	.word	0x2000932c
 800ba0c:	20009348 	.word	0x20009348
 800ba10:	2000935c 	.word	0x2000935c
 800ba14:	20009374 	.word	0x20009374
 800ba18:	20009340 	.word	0x20009340
 800ba1c:	20009344 	.word	0x20009344

0800ba20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b082      	sub	sp, #8
 800ba24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba26:	e019      	b.n	800ba5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ba28:	f000 fdee 	bl	800c608 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba2c:	4b10      	ldr	r3, [pc, #64]	@ (800ba70 <prvCheckTasksWaitingTermination+0x50>)
 800ba2e:	68db      	ldr	r3, [r3, #12]
 800ba30:	68db      	ldr	r3, [r3, #12]
 800ba32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	3304      	adds	r3, #4
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f7fe fcd1 	bl	800a3e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ba3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ba74 <prvCheckTasksWaitingTermination+0x54>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	3b01      	subs	r3, #1
 800ba44:	4a0b      	ldr	r2, [pc, #44]	@ (800ba74 <prvCheckTasksWaitingTermination+0x54>)
 800ba46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ba48:	4b0b      	ldr	r3, [pc, #44]	@ (800ba78 <prvCheckTasksWaitingTermination+0x58>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	3b01      	subs	r3, #1
 800ba4e:	4a0a      	ldr	r2, [pc, #40]	@ (800ba78 <prvCheckTasksWaitingTermination+0x58>)
 800ba50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ba52:	f000 fe0b 	bl	800c66c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f000 f810 	bl	800ba7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba5c:	4b06      	ldr	r3, [pc, #24]	@ (800ba78 <prvCheckTasksWaitingTermination+0x58>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d1e1      	bne.n	800ba28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ba64:	bf00      	nop
 800ba66:	bf00      	nop
 800ba68:	3708      	adds	r7, #8
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
 800ba6e:	bf00      	nop
 800ba70:	2000935c 	.word	0x2000935c
 800ba74:	20009388 	.word	0x20009388
 800ba78:	20009370 	.word	0x20009370

0800ba7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	3354      	adds	r3, #84	@ 0x54
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f00f f9e3 	bl	801ae54 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d108      	bne.n	800baaa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f000 ffa3 	bl	800c9e8 <vPortFree>
				vPortFree( pxTCB );
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f000 ffa0 	bl	800c9e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800baa8:	e019      	b.n	800bade <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	d103      	bne.n	800babc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f000 ff97 	bl	800c9e8 <vPortFree>
	}
 800baba:	e010      	b.n	800bade <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bac2:	2b02      	cmp	r3, #2
 800bac4:	d00b      	beq.n	800bade <prvDeleteTCB+0x62>
	__asm volatile
 800bac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baca:	f383 8811 	msr	BASEPRI, r3
 800bace:	f3bf 8f6f 	isb	sy
 800bad2:	f3bf 8f4f 	dsb	sy
 800bad6:	60fb      	str	r3, [r7, #12]
}
 800bad8:	bf00      	nop
 800bada:	bf00      	nop
 800badc:	e7fd      	b.n	800bada <prvDeleteTCB+0x5e>
	}
 800bade:	bf00      	nop
 800bae0:	3710      	adds	r7, #16
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
	...

0800bae8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bae8:	b480      	push	{r7}
 800baea:	b083      	sub	sp, #12
 800baec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800baee:	4b0c      	ldr	r3, [pc, #48]	@ (800bb20 <prvResetNextTaskUnblockTime+0x38>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d104      	bne.n	800bb02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800baf8:	4b0a      	ldr	r3, [pc, #40]	@ (800bb24 <prvResetNextTaskUnblockTime+0x3c>)
 800bafa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bafe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bb00:	e008      	b.n	800bb14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb02:	4b07      	ldr	r3, [pc, #28]	@ (800bb20 <prvResetNextTaskUnblockTime+0x38>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	68db      	ldr	r3, [r3, #12]
 800bb08:	68db      	ldr	r3, [r3, #12]
 800bb0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	685b      	ldr	r3, [r3, #4]
 800bb10:	4a04      	ldr	r2, [pc, #16]	@ (800bb24 <prvResetNextTaskUnblockTime+0x3c>)
 800bb12:	6013      	str	r3, [r2, #0]
}
 800bb14:	bf00      	nop
 800bb16:	370c      	adds	r7, #12
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr
 800bb20:	20009340 	.word	0x20009340
 800bb24:	200093a8 	.word	0x200093a8

0800bb28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bb28:	b480      	push	{r7}
 800bb2a:	b083      	sub	sp, #12
 800bb2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bb2e:	4b0b      	ldr	r3, [pc, #44]	@ (800bb5c <xTaskGetSchedulerState+0x34>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d102      	bne.n	800bb3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bb36:	2301      	movs	r3, #1
 800bb38:	607b      	str	r3, [r7, #4]
 800bb3a:	e008      	b.n	800bb4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb3c:	4b08      	ldr	r3, [pc, #32]	@ (800bb60 <xTaskGetSchedulerState+0x38>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d102      	bne.n	800bb4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bb44:	2302      	movs	r3, #2
 800bb46:	607b      	str	r3, [r7, #4]
 800bb48:	e001      	b.n	800bb4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bb4e:	687b      	ldr	r3, [r7, #4]
	}
 800bb50:	4618      	mov	r0, r3
 800bb52:	370c      	adds	r7, #12
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr
 800bb5c:	20009394 	.word	0x20009394
 800bb60:	200093b0 	.word	0x200093b0

0800bb64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b086      	sub	sp, #24
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bb70:	2300      	movs	r3, #0
 800bb72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d058      	beq.n	800bc2c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bb7a:	4b2f      	ldr	r3, [pc, #188]	@ (800bc38 <xTaskPriorityDisinherit+0xd4>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	693a      	ldr	r2, [r7, #16]
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d00b      	beq.n	800bb9c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bb84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb88:	f383 8811 	msr	BASEPRI, r3
 800bb8c:	f3bf 8f6f 	isb	sy
 800bb90:	f3bf 8f4f 	dsb	sy
 800bb94:	60fb      	str	r3, [r7, #12]
}
 800bb96:	bf00      	nop
 800bb98:	bf00      	nop
 800bb9a:	e7fd      	b.n	800bb98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d10b      	bne.n	800bbbc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bba8:	f383 8811 	msr	BASEPRI, r3
 800bbac:	f3bf 8f6f 	isb	sy
 800bbb0:	f3bf 8f4f 	dsb	sy
 800bbb4:	60bb      	str	r3, [r7, #8]
}
 800bbb6:	bf00      	nop
 800bbb8:	bf00      	nop
 800bbba:	e7fd      	b.n	800bbb8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbc0:	1e5a      	subs	r2, r3, #1
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d02c      	beq.n	800bc2c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d128      	bne.n	800bc2c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	3304      	adds	r3, #4
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7fe fbfe 	bl	800a3e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbf0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbfc:	4b0f      	ldr	r3, [pc, #60]	@ (800bc3c <xTaskPriorityDisinherit+0xd8>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d903      	bls.n	800bc0c <xTaskPriorityDisinherit+0xa8>
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc08:	4a0c      	ldr	r2, [pc, #48]	@ (800bc3c <xTaskPriorityDisinherit+0xd8>)
 800bc0a:	6013      	str	r3, [r2, #0]
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc10:	4613      	mov	r3, r2
 800bc12:	009b      	lsls	r3, r3, #2
 800bc14:	4413      	add	r3, r2
 800bc16:	009b      	lsls	r3, r3, #2
 800bc18:	4a09      	ldr	r2, [pc, #36]	@ (800bc40 <xTaskPriorityDisinherit+0xdc>)
 800bc1a:	441a      	add	r2, r3
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	3304      	adds	r3, #4
 800bc20:	4619      	mov	r1, r3
 800bc22:	4610      	mov	r0, r2
 800bc24:	f7fe fb7f 	bl	800a326 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc2c:	697b      	ldr	r3, [r7, #20]
	}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3718      	adds	r7, #24
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}
 800bc36:	bf00      	nop
 800bc38:	20008eb4 	.word	0x20008eb4
 800bc3c:	20009390 	.word	0x20009390
 800bc40:	20008eb8 	.word	0x20008eb8

0800bc44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b084      	sub	sp, #16
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bc4e:	4b21      	ldr	r3, [pc, #132]	@ (800bcd4 <prvAddCurrentTaskToDelayedList+0x90>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc54:	4b20      	ldr	r3, [pc, #128]	@ (800bcd8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	3304      	adds	r3, #4
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7fe fbc0 	bl	800a3e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bc66:	d10a      	bne.n	800bc7e <prvAddCurrentTaskToDelayedList+0x3a>
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d007      	beq.n	800bc7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc6e:	4b1a      	ldr	r3, [pc, #104]	@ (800bcd8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	3304      	adds	r3, #4
 800bc74:	4619      	mov	r1, r3
 800bc76:	4819      	ldr	r0, [pc, #100]	@ (800bcdc <prvAddCurrentTaskToDelayedList+0x98>)
 800bc78:	f7fe fb55 	bl	800a326 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bc7c:	e026      	b.n	800bccc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bc7e:	68fa      	ldr	r2, [r7, #12]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	4413      	add	r3, r2
 800bc84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bc86:	4b14      	ldr	r3, [pc, #80]	@ (800bcd8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	68ba      	ldr	r2, [r7, #8]
 800bc8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bc8e:	68ba      	ldr	r2, [r7, #8]
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d209      	bcs.n	800bcaa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc96:	4b12      	ldr	r3, [pc, #72]	@ (800bce0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bc98:	681a      	ldr	r2, [r3, #0]
 800bc9a:	4b0f      	ldr	r3, [pc, #60]	@ (800bcd8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	3304      	adds	r3, #4
 800bca0:	4619      	mov	r1, r3
 800bca2:	4610      	mov	r0, r2
 800bca4:	f7fe fb63 	bl	800a36e <vListInsert>
}
 800bca8:	e010      	b.n	800bccc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bcaa:	4b0e      	ldr	r3, [pc, #56]	@ (800bce4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bcac:	681a      	ldr	r2, [r3, #0]
 800bcae:	4b0a      	ldr	r3, [pc, #40]	@ (800bcd8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	3304      	adds	r3, #4
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	4610      	mov	r0, r2
 800bcb8:	f7fe fb59 	bl	800a36e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bcbc:	4b0a      	ldr	r3, [pc, #40]	@ (800bce8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	68ba      	ldr	r2, [r7, #8]
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d202      	bcs.n	800bccc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bcc6:	4a08      	ldr	r2, [pc, #32]	@ (800bce8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	6013      	str	r3, [r2, #0]
}
 800bccc:	bf00      	nop
 800bcce:	3710      	adds	r7, #16
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	2000938c 	.word	0x2000938c
 800bcd8:	20008eb4 	.word	0x20008eb4
 800bcdc:	20009374 	.word	0x20009374
 800bce0:	20009344 	.word	0x20009344
 800bce4:	20009340 	.word	0x20009340
 800bce8:	200093a8 	.word	0x200093a8

0800bcec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b08a      	sub	sp, #40	@ 0x28
 800bcf0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bcf6:	f000 fb13 	bl	800c320 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bcfa:	4b1d      	ldr	r3, [pc, #116]	@ (800bd70 <xTimerCreateTimerTask+0x84>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d021      	beq.n	800bd46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bd02:	2300      	movs	r3, #0
 800bd04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bd06:	2300      	movs	r3, #0
 800bd08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bd0a:	1d3a      	adds	r2, r7, #4
 800bd0c:	f107 0108 	add.w	r1, r7, #8
 800bd10:	f107 030c 	add.w	r3, r7, #12
 800bd14:	4618      	mov	r0, r3
 800bd16:	f7fe fabf 	bl	800a298 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bd1a:	6879      	ldr	r1, [r7, #4]
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	68fa      	ldr	r2, [r7, #12]
 800bd20:	9202      	str	r2, [sp, #8]
 800bd22:	9301      	str	r3, [sp, #4]
 800bd24:	2302      	movs	r3, #2
 800bd26:	9300      	str	r3, [sp, #0]
 800bd28:	2300      	movs	r3, #0
 800bd2a:	460a      	mov	r2, r1
 800bd2c:	4911      	ldr	r1, [pc, #68]	@ (800bd74 <xTimerCreateTimerTask+0x88>)
 800bd2e:	4812      	ldr	r0, [pc, #72]	@ (800bd78 <xTimerCreateTimerTask+0x8c>)
 800bd30:	f7ff f87a 	bl	800ae28 <xTaskCreateStatic>
 800bd34:	4603      	mov	r3, r0
 800bd36:	4a11      	ldr	r2, [pc, #68]	@ (800bd7c <xTimerCreateTimerTask+0x90>)
 800bd38:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bd3a:	4b10      	ldr	r3, [pc, #64]	@ (800bd7c <xTimerCreateTimerTask+0x90>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d001      	beq.n	800bd46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bd42:	2301      	movs	r3, #1
 800bd44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d10b      	bne.n	800bd64 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bd4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd50:	f383 8811 	msr	BASEPRI, r3
 800bd54:	f3bf 8f6f 	isb	sy
 800bd58:	f3bf 8f4f 	dsb	sy
 800bd5c:	613b      	str	r3, [r7, #16]
}
 800bd5e:	bf00      	nop
 800bd60:	bf00      	nop
 800bd62:	e7fd      	b.n	800bd60 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bd64:	697b      	ldr	r3, [r7, #20]
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3718      	adds	r7, #24
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	200093e4 	.word	0x200093e4
 800bd74:	0801fd00 	.word	0x0801fd00
 800bd78:	0800beb9 	.word	0x0800beb9
 800bd7c:	200093e8 	.word	0x200093e8

0800bd80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b08a      	sub	sp, #40	@ 0x28
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	60b9      	str	r1, [r7, #8]
 800bd8a:	607a      	str	r2, [r7, #4]
 800bd8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d10b      	bne.n	800bdb0 <xTimerGenericCommand+0x30>
	__asm volatile
 800bd98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd9c:	f383 8811 	msr	BASEPRI, r3
 800bda0:	f3bf 8f6f 	isb	sy
 800bda4:	f3bf 8f4f 	dsb	sy
 800bda8:	623b      	str	r3, [r7, #32]
}
 800bdaa:	bf00      	nop
 800bdac:	bf00      	nop
 800bdae:	e7fd      	b.n	800bdac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bdb0:	4b19      	ldr	r3, [pc, #100]	@ (800be18 <xTimerGenericCommand+0x98>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d02a      	beq.n	800be0e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	2b05      	cmp	r3, #5
 800bdc8:	dc18      	bgt.n	800bdfc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bdca:	f7ff fead 	bl	800bb28 <xTaskGetSchedulerState>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	2b02      	cmp	r3, #2
 800bdd2:	d109      	bne.n	800bde8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bdd4:	4b10      	ldr	r3, [pc, #64]	@ (800be18 <xTimerGenericCommand+0x98>)
 800bdd6:	6818      	ldr	r0, [r3, #0]
 800bdd8:	f107 0110 	add.w	r1, r7, #16
 800bddc:	2300      	movs	r3, #0
 800bdde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bde0:	f7fe fc32 	bl	800a648 <xQueueGenericSend>
 800bde4:	6278      	str	r0, [r7, #36]	@ 0x24
 800bde6:	e012      	b.n	800be0e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bde8:	4b0b      	ldr	r3, [pc, #44]	@ (800be18 <xTimerGenericCommand+0x98>)
 800bdea:	6818      	ldr	r0, [r3, #0]
 800bdec:	f107 0110 	add.w	r1, r7, #16
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	f7fe fc28 	bl	800a648 <xQueueGenericSend>
 800bdf8:	6278      	str	r0, [r7, #36]	@ 0x24
 800bdfa:	e008      	b.n	800be0e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bdfc:	4b06      	ldr	r3, [pc, #24]	@ (800be18 <xTimerGenericCommand+0x98>)
 800bdfe:	6818      	ldr	r0, [r3, #0]
 800be00:	f107 0110 	add.w	r1, r7, #16
 800be04:	2300      	movs	r3, #0
 800be06:	683a      	ldr	r2, [r7, #0]
 800be08:	f7fe fd20 	bl	800a84c <xQueueGenericSendFromISR>
 800be0c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800be0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800be10:	4618      	mov	r0, r3
 800be12:	3728      	adds	r7, #40	@ 0x28
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}
 800be18:	200093e4 	.word	0x200093e4

0800be1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b088      	sub	sp, #32
 800be20:	af02      	add	r7, sp, #8
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be26:	4b23      	ldr	r3, [pc, #140]	@ (800beb4 <prvProcessExpiredTimer+0x98>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	68db      	ldr	r3, [r3, #12]
 800be2c:	68db      	ldr	r3, [r3, #12]
 800be2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	3304      	adds	r3, #4
 800be34:	4618      	mov	r0, r3
 800be36:	f7fe fad3 	bl	800a3e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be40:	f003 0304 	and.w	r3, r3, #4
 800be44:	2b00      	cmp	r3, #0
 800be46:	d023      	beq.n	800be90 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	699a      	ldr	r2, [r3, #24]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	18d1      	adds	r1, r2, r3
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	683a      	ldr	r2, [r7, #0]
 800be54:	6978      	ldr	r0, [r7, #20]
 800be56:	f000 f8d5 	bl	800c004 <prvInsertTimerInActiveList>
 800be5a:	4603      	mov	r3, r0
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d020      	beq.n	800bea2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be60:	2300      	movs	r3, #0
 800be62:	9300      	str	r3, [sp, #0]
 800be64:	2300      	movs	r3, #0
 800be66:	687a      	ldr	r2, [r7, #4]
 800be68:	2100      	movs	r1, #0
 800be6a:	6978      	ldr	r0, [r7, #20]
 800be6c:	f7ff ff88 	bl	800bd80 <xTimerGenericCommand>
 800be70:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d114      	bne.n	800bea2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800be78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be7c:	f383 8811 	msr	BASEPRI, r3
 800be80:	f3bf 8f6f 	isb	sy
 800be84:	f3bf 8f4f 	dsb	sy
 800be88:	60fb      	str	r3, [r7, #12]
}
 800be8a:	bf00      	nop
 800be8c:	bf00      	nop
 800be8e:	e7fd      	b.n	800be8c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be96:	f023 0301 	bic.w	r3, r3, #1
 800be9a:	b2da      	uxtb	r2, r3
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	6a1b      	ldr	r3, [r3, #32]
 800bea6:	6978      	ldr	r0, [r7, #20]
 800bea8:	4798      	blx	r3
}
 800beaa:	bf00      	nop
 800beac:	3718      	adds	r7, #24
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}
 800beb2:	bf00      	nop
 800beb4:	200093dc 	.word	0x200093dc

0800beb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bec0:	f107 0308 	add.w	r3, r7, #8
 800bec4:	4618      	mov	r0, r3
 800bec6:	f000 f859 	bl	800bf7c <prvGetNextExpireTime>
 800beca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	4619      	mov	r1, r3
 800bed0:	68f8      	ldr	r0, [r7, #12]
 800bed2:	f000 f805 	bl	800bee0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bed6:	f000 f8d7 	bl	800c088 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800beda:	bf00      	nop
 800bedc:	e7f0      	b.n	800bec0 <prvTimerTask+0x8>
	...

0800bee0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800beea:	f7ff fa01 	bl	800b2f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800beee:	f107 0308 	add.w	r3, r7, #8
 800bef2:	4618      	mov	r0, r3
 800bef4:	f000 f866 	bl	800bfc4 <prvSampleTimeNow>
 800bef8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d130      	bne.n	800bf62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d10a      	bne.n	800bf1c <prvProcessTimerOrBlockTask+0x3c>
 800bf06:	687a      	ldr	r2, [r7, #4]
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d806      	bhi.n	800bf1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bf0e:	f7ff f9fd 	bl	800b30c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bf12:	68f9      	ldr	r1, [r7, #12]
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f7ff ff81 	bl	800be1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bf1a:	e024      	b.n	800bf66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d008      	beq.n	800bf34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bf22:	4b13      	ldr	r3, [pc, #76]	@ (800bf70 <prvProcessTimerOrBlockTask+0x90>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d101      	bne.n	800bf30 <prvProcessTimerOrBlockTask+0x50>
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	e000      	b.n	800bf32 <prvProcessTimerOrBlockTask+0x52>
 800bf30:	2300      	movs	r3, #0
 800bf32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bf34:	4b0f      	ldr	r3, [pc, #60]	@ (800bf74 <prvProcessTimerOrBlockTask+0x94>)
 800bf36:	6818      	ldr	r0, [r3, #0]
 800bf38:	687a      	ldr	r2, [r7, #4]
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	1ad3      	subs	r3, r2, r3
 800bf3e:	683a      	ldr	r2, [r7, #0]
 800bf40:	4619      	mov	r1, r3
 800bf42:	f7fe ff3d 	bl	800adc0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bf46:	f7ff f9e1 	bl	800b30c <xTaskResumeAll>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d10a      	bne.n	800bf66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bf50:	4b09      	ldr	r3, [pc, #36]	@ (800bf78 <prvProcessTimerOrBlockTask+0x98>)
 800bf52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf56:	601a      	str	r2, [r3, #0]
 800bf58:	f3bf 8f4f 	dsb	sy
 800bf5c:	f3bf 8f6f 	isb	sy
}
 800bf60:	e001      	b.n	800bf66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bf62:	f7ff f9d3 	bl	800b30c <xTaskResumeAll>
}
 800bf66:	bf00      	nop
 800bf68:	3710      	adds	r7, #16
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}
 800bf6e:	bf00      	nop
 800bf70:	200093e0 	.word	0x200093e0
 800bf74:	200093e4 	.word	0x200093e4
 800bf78:	e000ed04 	.word	0xe000ed04

0800bf7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b085      	sub	sp, #20
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bf84:	4b0e      	ldr	r3, [pc, #56]	@ (800bfc0 <prvGetNextExpireTime+0x44>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d101      	bne.n	800bf92 <prvGetNextExpireTime+0x16>
 800bf8e:	2201      	movs	r2, #1
 800bf90:	e000      	b.n	800bf94 <prvGetNextExpireTime+0x18>
 800bf92:	2200      	movs	r2, #0
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d105      	bne.n	800bfac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bfa0:	4b07      	ldr	r3, [pc, #28]	@ (800bfc0 <prvGetNextExpireTime+0x44>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	68db      	ldr	r3, [r3, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	60fb      	str	r3, [r7, #12]
 800bfaa:	e001      	b.n	800bfb0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bfac:	2300      	movs	r3, #0
 800bfae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3714      	adds	r7, #20
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbc:	4770      	bx	lr
 800bfbe:	bf00      	nop
 800bfc0:	200093dc 	.word	0x200093dc

0800bfc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b084      	sub	sp, #16
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bfcc:	f7ff fa3c 	bl	800b448 <xTaskGetTickCount>
 800bfd0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bfd2:	4b0b      	ldr	r3, [pc, #44]	@ (800c000 <prvSampleTimeNow+0x3c>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	68fa      	ldr	r2, [r7, #12]
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d205      	bcs.n	800bfe8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bfdc:	f000 f93a 	bl	800c254 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	601a      	str	r2, [r3, #0]
 800bfe6:	e002      	b.n	800bfee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2200      	movs	r2, #0
 800bfec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bfee:	4a04      	ldr	r2, [pc, #16]	@ (800c000 <prvSampleTimeNow+0x3c>)
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bff4:	68fb      	ldr	r3, [r7, #12]
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3710      	adds	r7, #16
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
 800bffe:	bf00      	nop
 800c000:	200093ec 	.word	0x200093ec

0800c004 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b086      	sub	sp, #24
 800c008:	af00      	add	r7, sp, #0
 800c00a:	60f8      	str	r0, [r7, #12]
 800c00c:	60b9      	str	r1, [r7, #8]
 800c00e:	607a      	str	r2, [r7, #4]
 800c010:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c012:	2300      	movs	r3, #0
 800c014:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	68ba      	ldr	r2, [r7, #8]
 800c01a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	68fa      	ldr	r2, [r7, #12]
 800c020:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c022:	68ba      	ldr	r2, [r7, #8]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	429a      	cmp	r2, r3
 800c028:	d812      	bhi.n	800c050 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	1ad2      	subs	r2, r2, r3
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	699b      	ldr	r3, [r3, #24]
 800c034:	429a      	cmp	r2, r3
 800c036:	d302      	bcc.n	800c03e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c038:	2301      	movs	r3, #1
 800c03a:	617b      	str	r3, [r7, #20]
 800c03c:	e01b      	b.n	800c076 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c03e:	4b10      	ldr	r3, [pc, #64]	@ (800c080 <prvInsertTimerInActiveList+0x7c>)
 800c040:	681a      	ldr	r2, [r3, #0]
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	3304      	adds	r3, #4
 800c046:	4619      	mov	r1, r3
 800c048:	4610      	mov	r0, r2
 800c04a:	f7fe f990 	bl	800a36e <vListInsert>
 800c04e:	e012      	b.n	800c076 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	429a      	cmp	r2, r3
 800c056:	d206      	bcs.n	800c066 <prvInsertTimerInActiveList+0x62>
 800c058:	68ba      	ldr	r2, [r7, #8]
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d302      	bcc.n	800c066 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c060:	2301      	movs	r3, #1
 800c062:	617b      	str	r3, [r7, #20]
 800c064:	e007      	b.n	800c076 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c066:	4b07      	ldr	r3, [pc, #28]	@ (800c084 <prvInsertTimerInActiveList+0x80>)
 800c068:	681a      	ldr	r2, [r3, #0]
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	3304      	adds	r3, #4
 800c06e:	4619      	mov	r1, r3
 800c070:	4610      	mov	r0, r2
 800c072:	f7fe f97c 	bl	800a36e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c076:	697b      	ldr	r3, [r7, #20]
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3718      	adds	r7, #24
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}
 800c080:	200093e0 	.word	0x200093e0
 800c084:	200093dc 	.word	0x200093dc

0800c088 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b08e      	sub	sp, #56	@ 0x38
 800c08c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c08e:	e0ce      	b.n	800c22e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2b00      	cmp	r3, #0
 800c094:	da19      	bge.n	800c0ca <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c096:	1d3b      	adds	r3, r7, #4
 800c098:	3304      	adds	r3, #4
 800c09a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c09c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d10b      	bne.n	800c0ba <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c0a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0a6:	f383 8811 	msr	BASEPRI, r3
 800c0aa:	f3bf 8f6f 	isb	sy
 800c0ae:	f3bf 8f4f 	dsb	sy
 800c0b2:	61fb      	str	r3, [r7, #28]
}
 800c0b4:	bf00      	nop
 800c0b6:	bf00      	nop
 800c0b8:	e7fd      	b.n	800c0b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c0ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c0c0:	6850      	ldr	r0, [r2, #4]
 800c0c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c0c4:	6892      	ldr	r2, [r2, #8]
 800c0c6:	4611      	mov	r1, r2
 800c0c8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	f2c0 80ae 	blt.w	800c22e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c0d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0d8:	695b      	ldr	r3, [r3, #20]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d004      	beq.n	800c0e8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0e0:	3304      	adds	r3, #4
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f7fe f97c 	bl	800a3e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c0e8:	463b      	mov	r3, r7
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f7ff ff6a 	bl	800bfc4 <prvSampleTimeNow>
 800c0f0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2b09      	cmp	r3, #9
 800c0f6:	f200 8097 	bhi.w	800c228 <prvProcessReceivedCommands+0x1a0>
 800c0fa:	a201      	add	r2, pc, #4	@ (adr r2, 800c100 <prvProcessReceivedCommands+0x78>)
 800c0fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c100:	0800c129 	.word	0x0800c129
 800c104:	0800c129 	.word	0x0800c129
 800c108:	0800c129 	.word	0x0800c129
 800c10c:	0800c19f 	.word	0x0800c19f
 800c110:	0800c1b3 	.word	0x0800c1b3
 800c114:	0800c1ff 	.word	0x0800c1ff
 800c118:	0800c129 	.word	0x0800c129
 800c11c:	0800c129 	.word	0x0800c129
 800c120:	0800c19f 	.word	0x0800c19f
 800c124:	0800c1b3 	.word	0x0800c1b3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c12a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c12e:	f043 0301 	orr.w	r3, r3, #1
 800c132:	b2da      	uxtb	r2, r3
 800c134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c136:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c13a:	68ba      	ldr	r2, [r7, #8]
 800c13c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c13e:	699b      	ldr	r3, [r3, #24]
 800c140:	18d1      	adds	r1, r2, r3
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c146:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c148:	f7ff ff5c 	bl	800c004 <prvInsertTimerInActiveList>
 800c14c:	4603      	mov	r3, r0
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d06c      	beq.n	800c22c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c154:	6a1b      	ldr	r3, [r3, #32]
 800c156:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c158:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c15a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c15c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c160:	f003 0304 	and.w	r3, r3, #4
 800c164:	2b00      	cmp	r3, #0
 800c166:	d061      	beq.n	800c22c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c168:	68ba      	ldr	r2, [r7, #8]
 800c16a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c16c:	699b      	ldr	r3, [r3, #24]
 800c16e:	441a      	add	r2, r3
 800c170:	2300      	movs	r3, #0
 800c172:	9300      	str	r3, [sp, #0]
 800c174:	2300      	movs	r3, #0
 800c176:	2100      	movs	r1, #0
 800c178:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c17a:	f7ff fe01 	bl	800bd80 <xTimerGenericCommand>
 800c17e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c180:	6a3b      	ldr	r3, [r7, #32]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d152      	bne.n	800c22c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c18a:	f383 8811 	msr	BASEPRI, r3
 800c18e:	f3bf 8f6f 	isb	sy
 800c192:	f3bf 8f4f 	dsb	sy
 800c196:	61bb      	str	r3, [r7, #24]
}
 800c198:	bf00      	nop
 800c19a:	bf00      	nop
 800c19c:	e7fd      	b.n	800c19a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c19e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c1a4:	f023 0301 	bic.w	r3, r3, #1
 800c1a8:	b2da      	uxtb	r2, r3
 800c1aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c1b0:	e03d      	b.n	800c22e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c1b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c1b8:	f043 0301 	orr.w	r3, r3, #1
 800c1bc:	b2da      	uxtb	r2, r3
 800c1be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c1c4:	68ba      	ldr	r2, [r7, #8]
 800c1c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1c8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c1ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1cc:	699b      	ldr	r3, [r3, #24]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d10b      	bne.n	800c1ea <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c1d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1d6:	f383 8811 	msr	BASEPRI, r3
 800c1da:	f3bf 8f6f 	isb	sy
 800c1de:	f3bf 8f4f 	dsb	sy
 800c1e2:	617b      	str	r3, [r7, #20]
}
 800c1e4:	bf00      	nop
 800c1e6:	bf00      	nop
 800c1e8:	e7fd      	b.n	800c1e6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c1ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ec:	699a      	ldr	r2, [r3, #24]
 800c1ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f0:	18d1      	adds	r1, r2, r3
 800c1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1f8:	f7ff ff04 	bl	800c004 <prvInsertTimerInActiveList>
					break;
 800c1fc:	e017      	b.n	800c22e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c1fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c200:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c204:	f003 0302 	and.w	r3, r3, #2
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d103      	bne.n	800c214 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c20c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c20e:	f000 fbeb 	bl	800c9e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c212:	e00c      	b.n	800c22e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c216:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c21a:	f023 0301 	bic.w	r3, r3, #1
 800c21e:	b2da      	uxtb	r2, r3
 800c220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c222:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c226:	e002      	b.n	800c22e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c228:	bf00      	nop
 800c22a:	e000      	b.n	800c22e <prvProcessReceivedCommands+0x1a6>
					break;
 800c22c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c22e:	4b08      	ldr	r3, [pc, #32]	@ (800c250 <prvProcessReceivedCommands+0x1c8>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	1d39      	adds	r1, r7, #4
 800c234:	2200      	movs	r2, #0
 800c236:	4618      	mov	r0, r3
 800c238:	f7fe fba6 	bl	800a988 <xQueueReceive>
 800c23c:	4603      	mov	r3, r0
 800c23e:	2b00      	cmp	r3, #0
 800c240:	f47f af26 	bne.w	800c090 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c244:	bf00      	nop
 800c246:	bf00      	nop
 800c248:	3730      	adds	r7, #48	@ 0x30
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	200093e4 	.word	0x200093e4

0800c254 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b088      	sub	sp, #32
 800c258:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c25a:	e049      	b.n	800c2f0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c25c:	4b2e      	ldr	r3, [pc, #184]	@ (800c318 <prvSwitchTimerLists+0xc4>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	68db      	ldr	r3, [r3, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c266:	4b2c      	ldr	r3, [pc, #176]	@ (800c318 <prvSwitchTimerLists+0xc4>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	68db      	ldr	r3, [r3, #12]
 800c26c:	68db      	ldr	r3, [r3, #12]
 800c26e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	3304      	adds	r3, #4
 800c274:	4618      	mov	r0, r3
 800c276:	f7fe f8b3 	bl	800a3e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	6a1b      	ldr	r3, [r3, #32]
 800c27e:	68f8      	ldr	r0, [r7, #12]
 800c280:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c288:	f003 0304 	and.w	r3, r3, #4
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d02f      	beq.n	800c2f0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	699b      	ldr	r3, [r3, #24]
 800c294:	693a      	ldr	r2, [r7, #16]
 800c296:	4413      	add	r3, r2
 800c298:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c29a:	68ba      	ldr	r2, [r7, #8]
 800c29c:	693b      	ldr	r3, [r7, #16]
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d90e      	bls.n	800c2c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	68ba      	ldr	r2, [r7, #8]
 800c2a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	68fa      	ldr	r2, [r7, #12]
 800c2ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c2ae:	4b1a      	ldr	r3, [pc, #104]	@ (800c318 <prvSwitchTimerLists+0xc4>)
 800c2b0:	681a      	ldr	r2, [r3, #0]
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	3304      	adds	r3, #4
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	4610      	mov	r0, r2
 800c2ba:	f7fe f858 	bl	800a36e <vListInsert>
 800c2be:	e017      	b.n	800c2f0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	9300      	str	r3, [sp, #0]
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	693a      	ldr	r2, [r7, #16]
 800c2c8:	2100      	movs	r1, #0
 800c2ca:	68f8      	ldr	r0, [r7, #12]
 800c2cc:	f7ff fd58 	bl	800bd80 <xTimerGenericCommand>
 800c2d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d10b      	bne.n	800c2f0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c2d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2dc:	f383 8811 	msr	BASEPRI, r3
 800c2e0:	f3bf 8f6f 	isb	sy
 800c2e4:	f3bf 8f4f 	dsb	sy
 800c2e8:	603b      	str	r3, [r7, #0]
}
 800c2ea:	bf00      	nop
 800c2ec:	bf00      	nop
 800c2ee:	e7fd      	b.n	800c2ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c2f0:	4b09      	ldr	r3, [pc, #36]	@ (800c318 <prvSwitchTimerLists+0xc4>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d1b0      	bne.n	800c25c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c2fa:	4b07      	ldr	r3, [pc, #28]	@ (800c318 <prvSwitchTimerLists+0xc4>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c300:	4b06      	ldr	r3, [pc, #24]	@ (800c31c <prvSwitchTimerLists+0xc8>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	4a04      	ldr	r2, [pc, #16]	@ (800c318 <prvSwitchTimerLists+0xc4>)
 800c306:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c308:	4a04      	ldr	r2, [pc, #16]	@ (800c31c <prvSwitchTimerLists+0xc8>)
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	6013      	str	r3, [r2, #0]
}
 800c30e:	bf00      	nop
 800c310:	3718      	adds	r7, #24
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	200093dc 	.word	0x200093dc
 800c31c:	200093e0 	.word	0x200093e0

0800c320 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b082      	sub	sp, #8
 800c324:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c326:	f000 f96f 	bl	800c608 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c32a:	4b15      	ldr	r3, [pc, #84]	@ (800c380 <prvCheckForValidListAndQueue+0x60>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d120      	bne.n	800c374 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c332:	4814      	ldr	r0, [pc, #80]	@ (800c384 <prvCheckForValidListAndQueue+0x64>)
 800c334:	f7fd ffca 	bl	800a2cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c338:	4813      	ldr	r0, [pc, #76]	@ (800c388 <prvCheckForValidListAndQueue+0x68>)
 800c33a:	f7fd ffc7 	bl	800a2cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c33e:	4b13      	ldr	r3, [pc, #76]	@ (800c38c <prvCheckForValidListAndQueue+0x6c>)
 800c340:	4a10      	ldr	r2, [pc, #64]	@ (800c384 <prvCheckForValidListAndQueue+0x64>)
 800c342:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c344:	4b12      	ldr	r3, [pc, #72]	@ (800c390 <prvCheckForValidListAndQueue+0x70>)
 800c346:	4a10      	ldr	r2, [pc, #64]	@ (800c388 <prvCheckForValidListAndQueue+0x68>)
 800c348:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c34a:	2300      	movs	r3, #0
 800c34c:	9300      	str	r3, [sp, #0]
 800c34e:	4b11      	ldr	r3, [pc, #68]	@ (800c394 <prvCheckForValidListAndQueue+0x74>)
 800c350:	4a11      	ldr	r2, [pc, #68]	@ (800c398 <prvCheckForValidListAndQueue+0x78>)
 800c352:	2110      	movs	r1, #16
 800c354:	200a      	movs	r0, #10
 800c356:	f7fe f8d7 	bl	800a508 <xQueueGenericCreateStatic>
 800c35a:	4603      	mov	r3, r0
 800c35c:	4a08      	ldr	r2, [pc, #32]	@ (800c380 <prvCheckForValidListAndQueue+0x60>)
 800c35e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c360:	4b07      	ldr	r3, [pc, #28]	@ (800c380 <prvCheckForValidListAndQueue+0x60>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d005      	beq.n	800c374 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c368:	4b05      	ldr	r3, [pc, #20]	@ (800c380 <prvCheckForValidListAndQueue+0x60>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	490b      	ldr	r1, [pc, #44]	@ (800c39c <prvCheckForValidListAndQueue+0x7c>)
 800c36e:	4618      	mov	r0, r3
 800c370:	f7fe fcfc 	bl	800ad6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c374:	f000 f97a 	bl	800c66c <vPortExitCritical>
}
 800c378:	bf00      	nop
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}
 800c37e:	bf00      	nop
 800c380:	200093e4 	.word	0x200093e4
 800c384:	200093b4 	.word	0x200093b4
 800c388:	200093c8 	.word	0x200093c8
 800c38c:	200093dc 	.word	0x200093dc
 800c390:	200093e0 	.word	0x200093e0
 800c394:	20009490 	.word	0x20009490
 800c398:	200093f0 	.word	0x200093f0
 800c39c:	0801fd08 	.word	0x0801fd08

0800c3a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b085      	sub	sp, #20
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	60f8      	str	r0, [r7, #12]
 800c3a8:	60b9      	str	r1, [r7, #8]
 800c3aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	3b04      	subs	r3, #4
 800c3b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c3b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	3b04      	subs	r3, #4
 800c3be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	f023 0201 	bic.w	r2, r3, #1
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	3b04      	subs	r3, #4
 800c3ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c3d0:	4a0c      	ldr	r2, [pc, #48]	@ (800c404 <pxPortInitialiseStack+0x64>)
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	3b14      	subs	r3, #20
 800c3da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c3dc:	687a      	ldr	r2, [r7, #4]
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	3b04      	subs	r3, #4
 800c3e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	f06f 0202 	mvn.w	r2, #2
 800c3ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	3b20      	subs	r3, #32
 800c3f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3714      	adds	r7, #20
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr
 800c404:	0800c409 	.word	0x0800c409

0800c408 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c408:	b480      	push	{r7}
 800c40a:	b085      	sub	sp, #20
 800c40c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c40e:	2300      	movs	r3, #0
 800c410:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c412:	4b13      	ldr	r3, [pc, #76]	@ (800c460 <prvTaskExitError+0x58>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c41a:	d00b      	beq.n	800c434 <prvTaskExitError+0x2c>
	__asm volatile
 800c41c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c420:	f383 8811 	msr	BASEPRI, r3
 800c424:	f3bf 8f6f 	isb	sy
 800c428:	f3bf 8f4f 	dsb	sy
 800c42c:	60fb      	str	r3, [r7, #12]
}
 800c42e:	bf00      	nop
 800c430:	bf00      	nop
 800c432:	e7fd      	b.n	800c430 <prvTaskExitError+0x28>
	__asm volatile
 800c434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c438:	f383 8811 	msr	BASEPRI, r3
 800c43c:	f3bf 8f6f 	isb	sy
 800c440:	f3bf 8f4f 	dsb	sy
 800c444:	60bb      	str	r3, [r7, #8]
}
 800c446:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c448:	bf00      	nop
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d0fc      	beq.n	800c44a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c450:	bf00      	nop
 800c452:	bf00      	nop
 800c454:	3714      	adds	r7, #20
 800c456:	46bd      	mov	sp, r7
 800c458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45c:	4770      	bx	lr
 800c45e:	bf00      	nop
 800c460:	20000018 	.word	0x20000018
	...

0800c470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c470:	4b07      	ldr	r3, [pc, #28]	@ (800c490 <pxCurrentTCBConst2>)
 800c472:	6819      	ldr	r1, [r3, #0]
 800c474:	6808      	ldr	r0, [r1, #0]
 800c476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c47a:	f380 8809 	msr	PSP, r0
 800c47e:	f3bf 8f6f 	isb	sy
 800c482:	f04f 0000 	mov.w	r0, #0
 800c486:	f380 8811 	msr	BASEPRI, r0
 800c48a:	4770      	bx	lr
 800c48c:	f3af 8000 	nop.w

0800c490 <pxCurrentTCBConst2>:
 800c490:	20008eb4 	.word	0x20008eb4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c494:	bf00      	nop
 800c496:	bf00      	nop

0800c498 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c498:	4808      	ldr	r0, [pc, #32]	@ (800c4bc <prvPortStartFirstTask+0x24>)
 800c49a:	6800      	ldr	r0, [r0, #0]
 800c49c:	6800      	ldr	r0, [r0, #0]
 800c49e:	f380 8808 	msr	MSP, r0
 800c4a2:	f04f 0000 	mov.w	r0, #0
 800c4a6:	f380 8814 	msr	CONTROL, r0
 800c4aa:	b662      	cpsie	i
 800c4ac:	b661      	cpsie	f
 800c4ae:	f3bf 8f4f 	dsb	sy
 800c4b2:	f3bf 8f6f 	isb	sy
 800c4b6:	df00      	svc	0
 800c4b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c4ba:	bf00      	nop
 800c4bc:	e000ed08 	.word	0xe000ed08

0800c4c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b086      	sub	sp, #24
 800c4c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c4c6:	4b47      	ldr	r3, [pc, #284]	@ (800c5e4 <xPortStartScheduler+0x124>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	4a47      	ldr	r2, [pc, #284]	@ (800c5e8 <xPortStartScheduler+0x128>)
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d10b      	bne.n	800c4e8 <xPortStartScheduler+0x28>
	__asm volatile
 800c4d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4d4:	f383 8811 	msr	BASEPRI, r3
 800c4d8:	f3bf 8f6f 	isb	sy
 800c4dc:	f3bf 8f4f 	dsb	sy
 800c4e0:	613b      	str	r3, [r7, #16]
}
 800c4e2:	bf00      	nop
 800c4e4:	bf00      	nop
 800c4e6:	e7fd      	b.n	800c4e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c4e8:	4b3e      	ldr	r3, [pc, #248]	@ (800c5e4 <xPortStartScheduler+0x124>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	4a3f      	ldr	r2, [pc, #252]	@ (800c5ec <xPortStartScheduler+0x12c>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d10b      	bne.n	800c50a <xPortStartScheduler+0x4a>
	__asm volatile
 800c4f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4f6:	f383 8811 	msr	BASEPRI, r3
 800c4fa:	f3bf 8f6f 	isb	sy
 800c4fe:	f3bf 8f4f 	dsb	sy
 800c502:	60fb      	str	r3, [r7, #12]
}
 800c504:	bf00      	nop
 800c506:	bf00      	nop
 800c508:	e7fd      	b.n	800c506 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c50a:	4b39      	ldr	r3, [pc, #228]	@ (800c5f0 <xPortStartScheduler+0x130>)
 800c50c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	781b      	ldrb	r3, [r3, #0]
 800c512:	b2db      	uxtb	r3, r3
 800c514:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	22ff      	movs	r2, #255	@ 0xff
 800c51a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	781b      	ldrb	r3, [r3, #0]
 800c520:	b2db      	uxtb	r3, r3
 800c522:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c524:	78fb      	ldrb	r3, [r7, #3]
 800c526:	b2db      	uxtb	r3, r3
 800c528:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c52c:	b2da      	uxtb	r2, r3
 800c52e:	4b31      	ldr	r3, [pc, #196]	@ (800c5f4 <xPortStartScheduler+0x134>)
 800c530:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c532:	4b31      	ldr	r3, [pc, #196]	@ (800c5f8 <xPortStartScheduler+0x138>)
 800c534:	2207      	movs	r2, #7
 800c536:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c538:	e009      	b.n	800c54e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c53a:	4b2f      	ldr	r3, [pc, #188]	@ (800c5f8 <xPortStartScheduler+0x138>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	3b01      	subs	r3, #1
 800c540:	4a2d      	ldr	r2, [pc, #180]	@ (800c5f8 <xPortStartScheduler+0x138>)
 800c542:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c544:	78fb      	ldrb	r3, [r7, #3]
 800c546:	b2db      	uxtb	r3, r3
 800c548:	005b      	lsls	r3, r3, #1
 800c54a:	b2db      	uxtb	r3, r3
 800c54c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c54e:	78fb      	ldrb	r3, [r7, #3]
 800c550:	b2db      	uxtb	r3, r3
 800c552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c556:	2b80      	cmp	r3, #128	@ 0x80
 800c558:	d0ef      	beq.n	800c53a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c55a:	4b27      	ldr	r3, [pc, #156]	@ (800c5f8 <xPortStartScheduler+0x138>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f1c3 0307 	rsb	r3, r3, #7
 800c562:	2b04      	cmp	r3, #4
 800c564:	d00b      	beq.n	800c57e <xPortStartScheduler+0xbe>
	__asm volatile
 800c566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c56a:	f383 8811 	msr	BASEPRI, r3
 800c56e:	f3bf 8f6f 	isb	sy
 800c572:	f3bf 8f4f 	dsb	sy
 800c576:	60bb      	str	r3, [r7, #8]
}
 800c578:	bf00      	nop
 800c57a:	bf00      	nop
 800c57c:	e7fd      	b.n	800c57a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c57e:	4b1e      	ldr	r3, [pc, #120]	@ (800c5f8 <xPortStartScheduler+0x138>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	021b      	lsls	r3, r3, #8
 800c584:	4a1c      	ldr	r2, [pc, #112]	@ (800c5f8 <xPortStartScheduler+0x138>)
 800c586:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c588:	4b1b      	ldr	r3, [pc, #108]	@ (800c5f8 <xPortStartScheduler+0x138>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c590:	4a19      	ldr	r2, [pc, #100]	@ (800c5f8 <xPortStartScheduler+0x138>)
 800c592:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	b2da      	uxtb	r2, r3
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c59c:	4b17      	ldr	r3, [pc, #92]	@ (800c5fc <xPortStartScheduler+0x13c>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4a16      	ldr	r2, [pc, #88]	@ (800c5fc <xPortStartScheduler+0x13c>)
 800c5a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c5a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c5a8:	4b14      	ldr	r3, [pc, #80]	@ (800c5fc <xPortStartScheduler+0x13c>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4a13      	ldr	r2, [pc, #76]	@ (800c5fc <xPortStartScheduler+0x13c>)
 800c5ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c5b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c5b4:	f000 f8da 	bl	800c76c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c5b8:	4b11      	ldr	r3, [pc, #68]	@ (800c600 <xPortStartScheduler+0x140>)
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c5be:	f000 f8f9 	bl	800c7b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c5c2:	4b10      	ldr	r3, [pc, #64]	@ (800c604 <xPortStartScheduler+0x144>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	4a0f      	ldr	r2, [pc, #60]	@ (800c604 <xPortStartScheduler+0x144>)
 800c5c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c5cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c5ce:	f7ff ff63 	bl	800c498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c5d2:	f7ff f803 	bl	800b5dc <vTaskSwitchContext>
	prvTaskExitError();
 800c5d6:	f7ff ff17 	bl	800c408 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c5da:	2300      	movs	r3, #0
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3718      	adds	r7, #24
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}
 800c5e4:	e000ed00 	.word	0xe000ed00
 800c5e8:	410fc271 	.word	0x410fc271
 800c5ec:	410fc270 	.word	0x410fc270
 800c5f0:	e000e400 	.word	0xe000e400
 800c5f4:	200094e0 	.word	0x200094e0
 800c5f8:	200094e4 	.word	0x200094e4
 800c5fc:	e000ed20 	.word	0xe000ed20
 800c600:	20000018 	.word	0x20000018
 800c604:	e000ef34 	.word	0xe000ef34

0800c608 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c608:	b480      	push	{r7}
 800c60a:	b083      	sub	sp, #12
 800c60c:	af00      	add	r7, sp, #0
	__asm volatile
 800c60e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c612:	f383 8811 	msr	BASEPRI, r3
 800c616:	f3bf 8f6f 	isb	sy
 800c61a:	f3bf 8f4f 	dsb	sy
 800c61e:	607b      	str	r3, [r7, #4]
}
 800c620:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c622:	4b10      	ldr	r3, [pc, #64]	@ (800c664 <vPortEnterCritical+0x5c>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	3301      	adds	r3, #1
 800c628:	4a0e      	ldr	r2, [pc, #56]	@ (800c664 <vPortEnterCritical+0x5c>)
 800c62a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c62c:	4b0d      	ldr	r3, [pc, #52]	@ (800c664 <vPortEnterCritical+0x5c>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	2b01      	cmp	r3, #1
 800c632:	d110      	bne.n	800c656 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c634:	4b0c      	ldr	r3, [pc, #48]	@ (800c668 <vPortEnterCritical+0x60>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	b2db      	uxtb	r3, r3
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d00b      	beq.n	800c656 <vPortEnterCritical+0x4e>
	__asm volatile
 800c63e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c642:	f383 8811 	msr	BASEPRI, r3
 800c646:	f3bf 8f6f 	isb	sy
 800c64a:	f3bf 8f4f 	dsb	sy
 800c64e:	603b      	str	r3, [r7, #0]
}
 800c650:	bf00      	nop
 800c652:	bf00      	nop
 800c654:	e7fd      	b.n	800c652 <vPortEnterCritical+0x4a>
	}
}
 800c656:	bf00      	nop
 800c658:	370c      	adds	r7, #12
 800c65a:	46bd      	mov	sp, r7
 800c65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c660:	4770      	bx	lr
 800c662:	bf00      	nop
 800c664:	20000018 	.word	0x20000018
 800c668:	e000ed04 	.word	0xe000ed04

0800c66c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c66c:	b480      	push	{r7}
 800c66e:	b083      	sub	sp, #12
 800c670:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c672:	4b12      	ldr	r3, [pc, #72]	@ (800c6bc <vPortExitCritical+0x50>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d10b      	bne.n	800c692 <vPortExitCritical+0x26>
	__asm volatile
 800c67a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c67e:	f383 8811 	msr	BASEPRI, r3
 800c682:	f3bf 8f6f 	isb	sy
 800c686:	f3bf 8f4f 	dsb	sy
 800c68a:	607b      	str	r3, [r7, #4]
}
 800c68c:	bf00      	nop
 800c68e:	bf00      	nop
 800c690:	e7fd      	b.n	800c68e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c692:	4b0a      	ldr	r3, [pc, #40]	@ (800c6bc <vPortExitCritical+0x50>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	3b01      	subs	r3, #1
 800c698:	4a08      	ldr	r2, [pc, #32]	@ (800c6bc <vPortExitCritical+0x50>)
 800c69a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c69c:	4b07      	ldr	r3, [pc, #28]	@ (800c6bc <vPortExitCritical+0x50>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d105      	bne.n	800c6b0 <vPortExitCritical+0x44>
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	f383 8811 	msr	BASEPRI, r3
}
 800c6ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c6b0:	bf00      	nop
 800c6b2:	370c      	adds	r7, #12
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr
 800c6bc:	20000018 	.word	0x20000018

0800c6c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c6c0:	f3ef 8009 	mrs	r0, PSP
 800c6c4:	f3bf 8f6f 	isb	sy
 800c6c8:	4b15      	ldr	r3, [pc, #84]	@ (800c720 <pxCurrentTCBConst>)
 800c6ca:	681a      	ldr	r2, [r3, #0]
 800c6cc:	f01e 0f10 	tst.w	lr, #16
 800c6d0:	bf08      	it	eq
 800c6d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c6d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6da:	6010      	str	r0, [r2, #0]
 800c6dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c6e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c6e4:	f380 8811 	msr	BASEPRI, r0
 800c6e8:	f3bf 8f4f 	dsb	sy
 800c6ec:	f3bf 8f6f 	isb	sy
 800c6f0:	f7fe ff74 	bl	800b5dc <vTaskSwitchContext>
 800c6f4:	f04f 0000 	mov.w	r0, #0
 800c6f8:	f380 8811 	msr	BASEPRI, r0
 800c6fc:	bc09      	pop	{r0, r3}
 800c6fe:	6819      	ldr	r1, [r3, #0]
 800c700:	6808      	ldr	r0, [r1, #0]
 800c702:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c706:	f01e 0f10 	tst.w	lr, #16
 800c70a:	bf08      	it	eq
 800c70c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c710:	f380 8809 	msr	PSP, r0
 800c714:	f3bf 8f6f 	isb	sy
 800c718:	4770      	bx	lr
 800c71a:	bf00      	nop
 800c71c:	f3af 8000 	nop.w

0800c720 <pxCurrentTCBConst>:
 800c720:	20008eb4 	.word	0x20008eb4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c724:	bf00      	nop
 800c726:	bf00      	nop

0800c728 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b082      	sub	sp, #8
 800c72c:	af00      	add	r7, sp, #0
	__asm volatile
 800c72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c732:	f383 8811 	msr	BASEPRI, r3
 800c736:	f3bf 8f6f 	isb	sy
 800c73a:	f3bf 8f4f 	dsb	sy
 800c73e:	607b      	str	r3, [r7, #4]
}
 800c740:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c742:	f7fe fe91 	bl	800b468 <xTaskIncrementTick>
 800c746:	4603      	mov	r3, r0
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d003      	beq.n	800c754 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c74c:	4b06      	ldr	r3, [pc, #24]	@ (800c768 <xPortSysTickHandler+0x40>)
 800c74e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c752:	601a      	str	r2, [r3, #0]
 800c754:	2300      	movs	r3, #0
 800c756:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	f383 8811 	msr	BASEPRI, r3
}
 800c75e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c760:	bf00      	nop
 800c762:	3708      	adds	r7, #8
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}
 800c768:	e000ed04 	.word	0xe000ed04

0800c76c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c76c:	b480      	push	{r7}
 800c76e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c770:	4b0b      	ldr	r3, [pc, #44]	@ (800c7a0 <vPortSetupTimerInterrupt+0x34>)
 800c772:	2200      	movs	r2, #0
 800c774:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c776:	4b0b      	ldr	r3, [pc, #44]	@ (800c7a4 <vPortSetupTimerInterrupt+0x38>)
 800c778:	2200      	movs	r2, #0
 800c77a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c77c:	4b0a      	ldr	r3, [pc, #40]	@ (800c7a8 <vPortSetupTimerInterrupt+0x3c>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4a0a      	ldr	r2, [pc, #40]	@ (800c7ac <vPortSetupTimerInterrupt+0x40>)
 800c782:	fba2 2303 	umull	r2, r3, r2, r3
 800c786:	099b      	lsrs	r3, r3, #6
 800c788:	4a09      	ldr	r2, [pc, #36]	@ (800c7b0 <vPortSetupTimerInterrupt+0x44>)
 800c78a:	3b01      	subs	r3, #1
 800c78c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c78e:	4b04      	ldr	r3, [pc, #16]	@ (800c7a0 <vPortSetupTimerInterrupt+0x34>)
 800c790:	2207      	movs	r2, #7
 800c792:	601a      	str	r2, [r3, #0]
}
 800c794:	bf00      	nop
 800c796:	46bd      	mov	sp, r7
 800c798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79c:	4770      	bx	lr
 800c79e:	bf00      	nop
 800c7a0:	e000e010 	.word	0xe000e010
 800c7a4:	e000e018 	.word	0xe000e018
 800c7a8:	2000000c 	.word	0x2000000c
 800c7ac:	10624dd3 	.word	0x10624dd3
 800c7b0:	e000e014 	.word	0xe000e014

0800c7b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c7b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c7c4 <vPortEnableVFP+0x10>
 800c7b8:	6801      	ldr	r1, [r0, #0]
 800c7ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c7be:	6001      	str	r1, [r0, #0]
 800c7c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c7c2:	bf00      	nop
 800c7c4:	e000ed88 	.word	0xe000ed88

0800c7c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b085      	sub	sp, #20
 800c7cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c7ce:	f3ef 8305 	mrs	r3, IPSR
 800c7d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2b0f      	cmp	r3, #15
 800c7d8:	d915      	bls.n	800c806 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c7da:	4a18      	ldr	r2, [pc, #96]	@ (800c83c <vPortValidateInterruptPriority+0x74>)
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	4413      	add	r3, r2
 800c7e0:	781b      	ldrb	r3, [r3, #0]
 800c7e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c7e4:	4b16      	ldr	r3, [pc, #88]	@ (800c840 <vPortValidateInterruptPriority+0x78>)
 800c7e6:	781b      	ldrb	r3, [r3, #0]
 800c7e8:	7afa      	ldrb	r2, [r7, #11]
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	d20b      	bcs.n	800c806 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c7ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7f2:	f383 8811 	msr	BASEPRI, r3
 800c7f6:	f3bf 8f6f 	isb	sy
 800c7fa:	f3bf 8f4f 	dsb	sy
 800c7fe:	607b      	str	r3, [r7, #4]
}
 800c800:	bf00      	nop
 800c802:	bf00      	nop
 800c804:	e7fd      	b.n	800c802 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c806:	4b0f      	ldr	r3, [pc, #60]	@ (800c844 <vPortValidateInterruptPriority+0x7c>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c80e:	4b0e      	ldr	r3, [pc, #56]	@ (800c848 <vPortValidateInterruptPriority+0x80>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	429a      	cmp	r2, r3
 800c814:	d90b      	bls.n	800c82e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c81a:	f383 8811 	msr	BASEPRI, r3
 800c81e:	f3bf 8f6f 	isb	sy
 800c822:	f3bf 8f4f 	dsb	sy
 800c826:	603b      	str	r3, [r7, #0]
}
 800c828:	bf00      	nop
 800c82a:	bf00      	nop
 800c82c:	e7fd      	b.n	800c82a <vPortValidateInterruptPriority+0x62>
	}
 800c82e:	bf00      	nop
 800c830:	3714      	adds	r7, #20
 800c832:	46bd      	mov	sp, r7
 800c834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c838:	4770      	bx	lr
 800c83a:	bf00      	nop
 800c83c:	e000e3f0 	.word	0xe000e3f0
 800c840:	200094e0 	.word	0x200094e0
 800c844:	e000ed0c 	.word	0xe000ed0c
 800c848:	200094e4 	.word	0x200094e4

0800c84c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b08a      	sub	sp, #40	@ 0x28
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c854:	2300      	movs	r3, #0
 800c856:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c858:	f7fe fd4a 	bl	800b2f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c85c:	4b5c      	ldr	r3, [pc, #368]	@ (800c9d0 <pvPortMalloc+0x184>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d101      	bne.n	800c868 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c864:	f000 f924 	bl	800cab0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c868:	4b5a      	ldr	r3, [pc, #360]	@ (800c9d4 <pvPortMalloc+0x188>)
 800c86a:	681a      	ldr	r2, [r3, #0]
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	4013      	ands	r3, r2
 800c870:	2b00      	cmp	r3, #0
 800c872:	f040 8095 	bne.w	800c9a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d01e      	beq.n	800c8ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c87c:	2208      	movs	r2, #8
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	4413      	add	r3, r2
 800c882:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f003 0307 	and.w	r3, r3, #7
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d015      	beq.n	800c8ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f023 0307 	bic.w	r3, r3, #7
 800c894:	3308      	adds	r3, #8
 800c896:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f003 0307 	and.w	r3, r3, #7
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d00b      	beq.n	800c8ba <pvPortMalloc+0x6e>
	__asm volatile
 800c8a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8a6:	f383 8811 	msr	BASEPRI, r3
 800c8aa:	f3bf 8f6f 	isb	sy
 800c8ae:	f3bf 8f4f 	dsb	sy
 800c8b2:	617b      	str	r3, [r7, #20]
}
 800c8b4:	bf00      	nop
 800c8b6:	bf00      	nop
 800c8b8:	e7fd      	b.n	800c8b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d06f      	beq.n	800c9a0 <pvPortMalloc+0x154>
 800c8c0:	4b45      	ldr	r3, [pc, #276]	@ (800c9d8 <pvPortMalloc+0x18c>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	687a      	ldr	r2, [r7, #4]
 800c8c6:	429a      	cmp	r2, r3
 800c8c8:	d86a      	bhi.n	800c9a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c8ca:	4b44      	ldr	r3, [pc, #272]	@ (800c9dc <pvPortMalloc+0x190>)
 800c8cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c8ce:	4b43      	ldr	r3, [pc, #268]	@ (800c9dc <pvPortMalloc+0x190>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8d4:	e004      	b.n	800c8e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c8d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8e2:	685b      	ldr	r3, [r3, #4]
 800c8e4:	687a      	ldr	r2, [r7, #4]
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d903      	bls.n	800c8f2 <pvPortMalloc+0xa6>
 800c8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d1f1      	bne.n	800c8d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c8f2:	4b37      	ldr	r3, [pc, #220]	@ (800c9d0 <pvPortMalloc+0x184>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d051      	beq.n	800c9a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c8fc:	6a3b      	ldr	r3, [r7, #32]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	2208      	movs	r2, #8
 800c902:	4413      	add	r3, r2
 800c904:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c908:	681a      	ldr	r2, [r3, #0]
 800c90a:	6a3b      	ldr	r3, [r7, #32]
 800c90c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c90e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c910:	685a      	ldr	r2, [r3, #4]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	1ad2      	subs	r2, r2, r3
 800c916:	2308      	movs	r3, #8
 800c918:	005b      	lsls	r3, r3, #1
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d920      	bls.n	800c960 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c91e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	4413      	add	r3, r2
 800c924:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c926:	69bb      	ldr	r3, [r7, #24]
 800c928:	f003 0307 	and.w	r3, r3, #7
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d00b      	beq.n	800c948 <pvPortMalloc+0xfc>
	__asm volatile
 800c930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c934:	f383 8811 	msr	BASEPRI, r3
 800c938:	f3bf 8f6f 	isb	sy
 800c93c:	f3bf 8f4f 	dsb	sy
 800c940:	613b      	str	r3, [r7, #16]
}
 800c942:	bf00      	nop
 800c944:	bf00      	nop
 800c946:	e7fd      	b.n	800c944 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c94a:	685a      	ldr	r2, [r3, #4]
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	1ad2      	subs	r2, r2, r3
 800c950:	69bb      	ldr	r3, [r7, #24]
 800c952:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c956:	687a      	ldr	r2, [r7, #4]
 800c958:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c95a:	69b8      	ldr	r0, [r7, #24]
 800c95c:	f000 f90a 	bl	800cb74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c960:	4b1d      	ldr	r3, [pc, #116]	@ (800c9d8 <pvPortMalloc+0x18c>)
 800c962:	681a      	ldr	r2, [r3, #0]
 800c964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c966:	685b      	ldr	r3, [r3, #4]
 800c968:	1ad3      	subs	r3, r2, r3
 800c96a:	4a1b      	ldr	r2, [pc, #108]	@ (800c9d8 <pvPortMalloc+0x18c>)
 800c96c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c96e:	4b1a      	ldr	r3, [pc, #104]	@ (800c9d8 <pvPortMalloc+0x18c>)
 800c970:	681a      	ldr	r2, [r3, #0]
 800c972:	4b1b      	ldr	r3, [pc, #108]	@ (800c9e0 <pvPortMalloc+0x194>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	429a      	cmp	r2, r3
 800c978:	d203      	bcs.n	800c982 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c97a:	4b17      	ldr	r3, [pc, #92]	@ (800c9d8 <pvPortMalloc+0x18c>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	4a18      	ldr	r2, [pc, #96]	@ (800c9e0 <pvPortMalloc+0x194>)
 800c980:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c984:	685a      	ldr	r2, [r3, #4]
 800c986:	4b13      	ldr	r3, [pc, #76]	@ (800c9d4 <pvPortMalloc+0x188>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	431a      	orrs	r2, r3
 800c98c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c98e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c992:	2200      	movs	r2, #0
 800c994:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c996:	4b13      	ldr	r3, [pc, #76]	@ (800c9e4 <pvPortMalloc+0x198>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	3301      	adds	r3, #1
 800c99c:	4a11      	ldr	r2, [pc, #68]	@ (800c9e4 <pvPortMalloc+0x198>)
 800c99e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c9a0:	f7fe fcb4 	bl	800b30c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9a4:	69fb      	ldr	r3, [r7, #28]
 800c9a6:	f003 0307 	and.w	r3, r3, #7
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d00b      	beq.n	800c9c6 <pvPortMalloc+0x17a>
	__asm volatile
 800c9ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9b2:	f383 8811 	msr	BASEPRI, r3
 800c9b6:	f3bf 8f6f 	isb	sy
 800c9ba:	f3bf 8f4f 	dsb	sy
 800c9be:	60fb      	str	r3, [r7, #12]
}
 800c9c0:	bf00      	nop
 800c9c2:	bf00      	nop
 800c9c4:	e7fd      	b.n	800c9c2 <pvPortMalloc+0x176>
	return pvReturn;
 800c9c6:	69fb      	ldr	r3, [r7, #28]
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3728      	adds	r7, #40	@ 0x28
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}
 800c9d0:	2000d0f0 	.word	0x2000d0f0
 800c9d4:	2000d104 	.word	0x2000d104
 800c9d8:	2000d0f4 	.word	0x2000d0f4
 800c9dc:	2000d0e8 	.word	0x2000d0e8
 800c9e0:	2000d0f8 	.word	0x2000d0f8
 800c9e4:	2000d0fc 	.word	0x2000d0fc

0800c9e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b086      	sub	sp, #24
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d04f      	beq.n	800ca9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c9fa:	2308      	movs	r3, #8
 800c9fc:	425b      	negs	r3, r3
 800c9fe:	697a      	ldr	r2, [r7, #20]
 800ca00:	4413      	add	r3, r2
 800ca02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	685a      	ldr	r2, [r3, #4]
 800ca0c:	4b25      	ldr	r3, [pc, #148]	@ (800caa4 <vPortFree+0xbc>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	4013      	ands	r3, r2
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d10b      	bne.n	800ca2e <vPortFree+0x46>
	__asm volatile
 800ca16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca1a:	f383 8811 	msr	BASEPRI, r3
 800ca1e:	f3bf 8f6f 	isb	sy
 800ca22:	f3bf 8f4f 	dsb	sy
 800ca26:	60fb      	str	r3, [r7, #12]
}
 800ca28:	bf00      	nop
 800ca2a:	bf00      	nop
 800ca2c:	e7fd      	b.n	800ca2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ca2e:	693b      	ldr	r3, [r7, #16]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d00b      	beq.n	800ca4e <vPortFree+0x66>
	__asm volatile
 800ca36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca3a:	f383 8811 	msr	BASEPRI, r3
 800ca3e:	f3bf 8f6f 	isb	sy
 800ca42:	f3bf 8f4f 	dsb	sy
 800ca46:	60bb      	str	r3, [r7, #8]
}
 800ca48:	bf00      	nop
 800ca4a:	bf00      	nop
 800ca4c:	e7fd      	b.n	800ca4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	685a      	ldr	r2, [r3, #4]
 800ca52:	4b14      	ldr	r3, [pc, #80]	@ (800caa4 <vPortFree+0xbc>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	4013      	ands	r3, r2
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d01e      	beq.n	800ca9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d11a      	bne.n	800ca9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	685a      	ldr	r2, [r3, #4]
 800ca68:	4b0e      	ldr	r3, [pc, #56]	@ (800caa4 <vPortFree+0xbc>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	43db      	mvns	r3, r3
 800ca6e:	401a      	ands	r2, r3
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ca74:	f7fe fc3c 	bl	800b2f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	685a      	ldr	r2, [r3, #4]
 800ca7c:	4b0a      	ldr	r3, [pc, #40]	@ (800caa8 <vPortFree+0xc0>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	4413      	add	r3, r2
 800ca82:	4a09      	ldr	r2, [pc, #36]	@ (800caa8 <vPortFree+0xc0>)
 800ca84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ca86:	6938      	ldr	r0, [r7, #16]
 800ca88:	f000 f874 	bl	800cb74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ca8c:	4b07      	ldr	r3, [pc, #28]	@ (800caac <vPortFree+0xc4>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	3301      	adds	r3, #1
 800ca92:	4a06      	ldr	r2, [pc, #24]	@ (800caac <vPortFree+0xc4>)
 800ca94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ca96:	f7fe fc39 	bl	800b30c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ca9a:	bf00      	nop
 800ca9c:	3718      	adds	r7, #24
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}
 800caa2:	bf00      	nop
 800caa4:	2000d104 	.word	0x2000d104
 800caa8:	2000d0f4 	.word	0x2000d0f4
 800caac:	2000d100 	.word	0x2000d100

0800cab0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cab0:	b480      	push	{r7}
 800cab2:	b085      	sub	sp, #20
 800cab4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cab6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800caba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cabc:	4b27      	ldr	r3, [pc, #156]	@ (800cb5c <prvHeapInit+0xac>)
 800cabe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f003 0307 	and.w	r3, r3, #7
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d00c      	beq.n	800cae4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	3307      	adds	r3, #7
 800cace:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	f023 0307 	bic.w	r3, r3, #7
 800cad6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cad8:	68ba      	ldr	r2, [r7, #8]
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	1ad3      	subs	r3, r2, r3
 800cade:	4a1f      	ldr	r2, [pc, #124]	@ (800cb5c <prvHeapInit+0xac>)
 800cae0:	4413      	add	r3, r2
 800cae2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cae8:	4a1d      	ldr	r2, [pc, #116]	@ (800cb60 <prvHeapInit+0xb0>)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800caee:	4b1c      	ldr	r3, [pc, #112]	@ (800cb60 <prvHeapInit+0xb0>)
 800caf0:	2200      	movs	r2, #0
 800caf2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	68ba      	ldr	r2, [r7, #8]
 800caf8:	4413      	add	r3, r2
 800cafa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cafc:	2208      	movs	r2, #8
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	1a9b      	subs	r3, r3, r2
 800cb02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	f023 0307 	bic.w	r3, r3, #7
 800cb0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	4a15      	ldr	r2, [pc, #84]	@ (800cb64 <prvHeapInit+0xb4>)
 800cb10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cb12:	4b14      	ldr	r3, [pc, #80]	@ (800cb64 <prvHeapInit+0xb4>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	2200      	movs	r2, #0
 800cb18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cb1a:	4b12      	ldr	r3, [pc, #72]	@ (800cb64 <prvHeapInit+0xb4>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	68fa      	ldr	r2, [r7, #12]
 800cb2a:	1ad2      	subs	r2, r2, r3
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cb30:	4b0c      	ldr	r3, [pc, #48]	@ (800cb64 <prvHeapInit+0xb4>)
 800cb32:	681a      	ldr	r2, [r3, #0]
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	685b      	ldr	r3, [r3, #4]
 800cb3c:	4a0a      	ldr	r2, [pc, #40]	@ (800cb68 <prvHeapInit+0xb8>)
 800cb3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	685b      	ldr	r3, [r3, #4]
 800cb44:	4a09      	ldr	r2, [pc, #36]	@ (800cb6c <prvHeapInit+0xbc>)
 800cb46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cb48:	4b09      	ldr	r3, [pc, #36]	@ (800cb70 <prvHeapInit+0xc0>)
 800cb4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cb4e:	601a      	str	r2, [r3, #0]
}
 800cb50:	bf00      	nop
 800cb52:	3714      	adds	r7, #20
 800cb54:	46bd      	mov	sp, r7
 800cb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5a:	4770      	bx	lr
 800cb5c:	200094e8 	.word	0x200094e8
 800cb60:	2000d0e8 	.word	0x2000d0e8
 800cb64:	2000d0f0 	.word	0x2000d0f0
 800cb68:	2000d0f8 	.word	0x2000d0f8
 800cb6c:	2000d0f4 	.word	0x2000d0f4
 800cb70:	2000d104 	.word	0x2000d104

0800cb74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cb74:	b480      	push	{r7}
 800cb76:	b085      	sub	sp, #20
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cb7c:	4b28      	ldr	r3, [pc, #160]	@ (800cc20 <prvInsertBlockIntoFreeList+0xac>)
 800cb7e:	60fb      	str	r3, [r7, #12]
 800cb80:	e002      	b.n	800cb88 <prvInsertBlockIntoFreeList+0x14>
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	60fb      	str	r3, [r7, #12]
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	687a      	ldr	r2, [r7, #4]
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d8f7      	bhi.n	800cb82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	685b      	ldr	r3, [r3, #4]
 800cb9a:	68ba      	ldr	r2, [r7, #8]
 800cb9c:	4413      	add	r3, r2
 800cb9e:	687a      	ldr	r2, [r7, #4]
 800cba0:	429a      	cmp	r2, r3
 800cba2:	d108      	bne.n	800cbb6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	685a      	ldr	r2, [r3, #4]
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	441a      	add	r2, r3
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	685b      	ldr	r3, [r3, #4]
 800cbbe:	68ba      	ldr	r2, [r7, #8]
 800cbc0:	441a      	add	r2, r3
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d118      	bne.n	800cbfc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681a      	ldr	r2, [r3, #0]
 800cbce:	4b15      	ldr	r3, [pc, #84]	@ (800cc24 <prvInsertBlockIntoFreeList+0xb0>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d00d      	beq.n	800cbf2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	685a      	ldr	r2, [r3, #4]
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	441a      	add	r2, r3
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	681a      	ldr	r2, [r3, #0]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	601a      	str	r2, [r3, #0]
 800cbf0:	e008      	b.n	800cc04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cbf2:	4b0c      	ldr	r3, [pc, #48]	@ (800cc24 <prvInsertBlockIntoFreeList+0xb0>)
 800cbf4:	681a      	ldr	r2, [r3, #0]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	601a      	str	r2, [r3, #0]
 800cbfa:	e003      	b.n	800cc04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	681a      	ldr	r2, [r3, #0]
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cc04:	68fa      	ldr	r2, [r7, #12]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	d002      	beq.n	800cc12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	687a      	ldr	r2, [r7, #4]
 800cc10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc12:	bf00      	nop
 800cc14:	3714      	adds	r7, #20
 800cc16:	46bd      	mov	sp, r7
 800cc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1c:	4770      	bx	lr
 800cc1e:	bf00      	nop
 800cc20:	2000d0e8 	.word	0x2000d0e8
 800cc24:	2000d0f0 	.word	0x2000d0f0

0800cc28 <rcl_get_zero_initialized_publisher>:
 800cc28:	4b01      	ldr	r3, [pc, #4]	@ (800cc30 <rcl_get_zero_initialized_publisher+0x8>)
 800cc2a:	6818      	ldr	r0, [r3, #0]
 800cc2c:	4770      	bx	lr
 800cc2e:	bf00      	nop
 800cc30:	0801fd80 	.word	0x0801fd80

0800cc34 <rcl_publisher_init>:
 800cc34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc38:	b088      	sub	sp, #32
 800cc3a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800cc3c:	2d00      	cmp	r5, #0
 800cc3e:	d069      	beq.n	800cd14 <rcl_publisher_init+0xe0>
 800cc40:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800cc44:	4604      	mov	r4, r0
 800cc46:	4648      	mov	r0, r9
 800cc48:	460e      	mov	r6, r1
 800cc4a:	4690      	mov	r8, r2
 800cc4c:	461f      	mov	r7, r3
 800cc4e:	f001 f847 	bl	800dce0 <rcutils_allocator_is_valid>
 800cc52:	2800      	cmp	r0, #0
 800cc54:	d05e      	beq.n	800cd14 <rcl_publisher_init+0xe0>
 800cc56:	2c00      	cmp	r4, #0
 800cc58:	d05c      	beq.n	800cd14 <rcl_publisher_init+0xe0>
 800cc5a:	f8d4 a000 	ldr.w	sl, [r4]
 800cc5e:	f1ba 0f00 	cmp.w	sl, #0
 800cc62:	d004      	beq.n	800cc6e <rcl_publisher_init+0x3a>
 800cc64:	2764      	movs	r7, #100	@ 0x64
 800cc66:	4638      	mov	r0, r7
 800cc68:	b008      	add	sp, #32
 800cc6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc6e:	4630      	mov	r0, r6
 800cc70:	f006 fae4 	bl	801323c <rcl_node_is_valid>
 800cc74:	2800      	cmp	r0, #0
 800cc76:	d052      	beq.n	800cd1e <rcl_publisher_init+0xea>
 800cc78:	f1b8 0f00 	cmp.w	r8, #0
 800cc7c:	d04a      	beq.n	800cd14 <rcl_publisher_init+0xe0>
 800cc7e:	2f00      	cmp	r7, #0
 800cc80:	d048      	beq.n	800cd14 <rcl_publisher_init+0xe0>
 800cc82:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800cc86:	aa07      	add	r2, sp, #28
 800cc88:	9205      	str	r2, [sp, #20]
 800cc8a:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800cc8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cc92:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800cc96:	f8cd a01c 	str.w	sl, [sp, #28]
 800cc9a:	4639      	mov	r1, r7
 800cc9c:	e899 000c 	ldmia.w	r9, {r2, r3}
 800cca0:	4630      	mov	r0, r6
 800cca2:	f006 fb1f 	bl	80132e4 <rcl_node_resolve_name>
 800cca6:	4607      	mov	r7, r0
 800cca8:	2800      	cmp	r0, #0
 800ccaa:	d14f      	bne.n	800cd4c <rcl_publisher_init+0x118>
 800ccac:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800ccae:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800ccb0:	20c8      	movs	r0, #200	@ 0xc8
 800ccb2:	4798      	blx	r3
 800ccb4:	6020      	str	r0, [r4, #0]
 800ccb6:	2800      	cmp	r0, #0
 800ccb8:	d04e      	beq.n	800cd58 <rcl_publisher_init+0x124>
 800ccba:	4630      	mov	r0, r6
 800ccbc:	f006 fae0 	bl	8013280 <rcl_node_get_rmw_handle>
 800ccc0:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800ccc4:	9300      	str	r3, [sp, #0]
 800ccc6:	9a07      	ldr	r2, [sp, #28]
 800ccc8:	6827      	ldr	r7, [r4, #0]
 800ccca:	462b      	mov	r3, r5
 800cccc:	4641      	mov	r1, r8
 800ccce:	f001 f915 	bl	800defc <rmw_create_publisher>
 800ccd2:	6823      	ldr	r3, [r4, #0]
 800ccd4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800ccd8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ccdc:	b370      	cbz	r0, 800cd3c <rcl_publisher_init+0x108>
 800ccde:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800cce2:	f001 f9e9 	bl	800e0b8 <rmw_publisher_get_actual_qos>
 800cce6:	6823      	ldr	r3, [r4, #0]
 800cce8:	4607      	mov	r7, r0
 800ccea:	b9d0      	cbnz	r0, 800cd22 <rcl_publisher_init+0xee>
 800ccec:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800ccf0:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800ccf4:	4629      	mov	r1, r5
 800ccf6:	2270      	movs	r2, #112	@ 0x70
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f00e f97c 	bl	801aff6 <memcpy>
 800ccfe:	6832      	ldr	r2, [r6, #0]
 800cd00:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800cd04:	9807      	ldr	r0, [sp, #28]
 800cd06:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800cd08:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800cd0a:	4798      	blx	r3
 800cd0c:	4638      	mov	r0, r7
 800cd0e:	b008      	add	sp, #32
 800cd10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd14:	270b      	movs	r7, #11
 800cd16:	4638      	mov	r0, r7
 800cd18:	b008      	add	sp, #32
 800cd1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd1e:	27c8      	movs	r7, #200	@ 0xc8
 800cd20:	e7a1      	b.n	800cc66 <rcl_publisher_init+0x32>
 800cd22:	b18b      	cbz	r3, 800cd48 <rcl_publisher_init+0x114>
 800cd24:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800cd28:	b142      	cbz	r2, 800cd3c <rcl_publisher_init+0x108>
 800cd2a:	4630      	mov	r0, r6
 800cd2c:	f006 faa8 	bl	8013280 <rcl_node_get_rmw_handle>
 800cd30:	6823      	ldr	r3, [r4, #0]
 800cd32:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800cd36:	f001 f9cf 	bl	800e0d8 <rmw_destroy_publisher>
 800cd3a:	6823      	ldr	r3, [r4, #0]
 800cd3c:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800cd3e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800cd40:	4618      	mov	r0, r3
 800cd42:	4790      	blx	r2
 800cd44:	2300      	movs	r3, #0
 800cd46:	6023      	str	r3, [r4, #0]
 800cd48:	2701      	movs	r7, #1
 800cd4a:	e7db      	b.n	800cd04 <rcl_publisher_init+0xd0>
 800cd4c:	2867      	cmp	r0, #103	@ 0x67
 800cd4e:	d0d9      	beq.n	800cd04 <rcl_publisher_init+0xd0>
 800cd50:	2869      	cmp	r0, #105	@ 0x69
 800cd52:	d003      	beq.n	800cd5c <rcl_publisher_init+0x128>
 800cd54:	280a      	cmp	r0, #10
 800cd56:	d1f7      	bne.n	800cd48 <rcl_publisher_init+0x114>
 800cd58:	270a      	movs	r7, #10
 800cd5a:	e7d3      	b.n	800cd04 <rcl_publisher_init+0xd0>
 800cd5c:	2767      	movs	r7, #103	@ 0x67
 800cd5e:	e7d1      	b.n	800cd04 <rcl_publisher_init+0xd0>

0800cd60 <rcl_publisher_get_default_options>:
 800cd60:	b570      	push	{r4, r5, r6, lr}
 800cd62:	4d14      	ldr	r5, [pc, #80]	@ (800cdb4 <rcl_publisher_get_default_options+0x54>)
 800cd64:	4914      	ldr	r1, [pc, #80]	@ (800cdb8 <rcl_publisher_get_default_options+0x58>)
 800cd66:	b088      	sub	sp, #32
 800cd68:	4604      	mov	r4, r0
 800cd6a:	2250      	movs	r2, #80	@ 0x50
 800cd6c:	4628      	mov	r0, r5
 800cd6e:	f00e f942 	bl	801aff6 <memcpy>
 800cd72:	a802      	add	r0, sp, #8
 800cd74:	f000 ffa6 	bl	800dcc4 <rcutils_get_default_allocator>
 800cd78:	f10d 0c08 	add.w	ip, sp, #8
 800cd7c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cd80:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800cd84:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cd88:	466e      	mov	r6, sp
 800cd8a:	f8dc 3000 	ldr.w	r3, [ip]
 800cd8e:	f8ce 3000 	str.w	r3, [lr]
 800cd92:	4630      	mov	r0, r6
 800cd94:	f001 f834 	bl	800de00 <rmw_get_default_publisher_options>
 800cd98:	e896 0003 	ldmia.w	r6, {r0, r1}
 800cd9c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800cda0:	e883 0003 	stmia.w	r3, {r0, r1}
 800cda4:	2270      	movs	r2, #112	@ 0x70
 800cda6:	4629      	mov	r1, r5
 800cda8:	4620      	mov	r0, r4
 800cdaa:	f00e f924 	bl	801aff6 <memcpy>
 800cdae:	4620      	mov	r0, r4
 800cdb0:	b008      	add	sp, #32
 800cdb2:	bd70      	pop	{r4, r5, r6, pc}
 800cdb4:	2000d108 	.word	0x2000d108
 800cdb8:	0801fd88 	.word	0x0801fd88

0800cdbc <rcl_publish>:
 800cdbc:	b1f8      	cbz	r0, 800cdfe <rcl_publish+0x42>
 800cdbe:	6803      	ldr	r3, [r0, #0]
 800cdc0:	b570      	push	{r4, r5, r6, lr}
 800cdc2:	4604      	mov	r4, r0
 800cdc4:	b1b3      	cbz	r3, 800cdf4 <rcl_publish+0x38>
 800cdc6:	4616      	mov	r6, r2
 800cdc8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800cdcc:	b192      	cbz	r2, 800cdf4 <rcl_publish+0x38>
 800cdce:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800cdd2:	460d      	mov	r5, r1
 800cdd4:	f005 fe58 	bl	8012a88 <rcl_context_is_valid>
 800cdd8:	b160      	cbz	r0, 800cdf4 <rcl_publish+0x38>
 800cdda:	6823      	ldr	r3, [r4, #0]
 800cddc:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800cde0:	b140      	cbz	r0, 800cdf4 <rcl_publish+0x38>
 800cde2:	b155      	cbz	r5, 800cdfa <rcl_publish+0x3e>
 800cde4:	4632      	mov	r2, r6
 800cde6:	4629      	mov	r1, r5
 800cde8:	f001 f828 	bl	800de3c <rmw_publish>
 800cdec:	3800      	subs	r0, #0
 800cdee:	bf18      	it	ne
 800cdf0:	2001      	movne	r0, #1
 800cdf2:	bd70      	pop	{r4, r5, r6, pc}
 800cdf4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800cdf8:	bd70      	pop	{r4, r5, r6, pc}
 800cdfa:	200b      	movs	r0, #11
 800cdfc:	bd70      	pop	{r4, r5, r6, pc}
 800cdfe:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800ce02:	4770      	bx	lr

0800ce04 <rcl_publisher_is_valid>:
 800ce04:	b1a0      	cbz	r0, 800ce30 <rcl_publisher_is_valid+0x2c>
 800ce06:	6803      	ldr	r3, [r0, #0]
 800ce08:	b510      	push	{r4, lr}
 800ce0a:	4604      	mov	r4, r0
 800ce0c:	b173      	cbz	r3, 800ce2c <rcl_publisher_is_valid+0x28>
 800ce0e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ce12:	b15a      	cbz	r2, 800ce2c <rcl_publisher_is_valid+0x28>
 800ce14:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800ce18:	f005 fe36 	bl	8012a88 <rcl_context_is_valid>
 800ce1c:	b130      	cbz	r0, 800ce2c <rcl_publisher_is_valid+0x28>
 800ce1e:	6823      	ldr	r3, [r4, #0]
 800ce20:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ce24:	3800      	subs	r0, #0
 800ce26:	bf18      	it	ne
 800ce28:	2001      	movne	r0, #1
 800ce2a:	bd10      	pop	{r4, pc}
 800ce2c:	2000      	movs	r0, #0
 800ce2e:	bd10      	pop	{r4, pc}
 800ce30:	2000      	movs	r0, #0
 800ce32:	4770      	bx	lr

0800ce34 <rcl_publisher_is_valid_except_context>:
 800ce34:	b130      	cbz	r0, 800ce44 <rcl_publisher_is_valid_except_context+0x10>
 800ce36:	6800      	ldr	r0, [r0, #0]
 800ce38:	b120      	cbz	r0, 800ce44 <rcl_publisher_is_valid_except_context+0x10>
 800ce3a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800ce3e:	3800      	subs	r0, #0
 800ce40:	bf18      	it	ne
 800ce42:	2001      	movne	r0, #1
 800ce44:	4770      	bx	lr
 800ce46:	bf00      	nop

0800ce48 <_rclc_check_for_new_data>:
 800ce48:	2800      	cmp	r0, #0
 800ce4a:	d046      	beq.n	800ceda <_rclc_check_for_new_data+0x92>
 800ce4c:	b510      	push	{r4, lr}
 800ce4e:	7802      	ldrb	r2, [r0, #0]
 800ce50:	b084      	sub	sp, #16
 800ce52:	4603      	mov	r3, r0
 800ce54:	2a0a      	cmp	r2, #10
 800ce56:	d842      	bhi.n	800cede <_rclc_check_for_new_data+0x96>
 800ce58:	e8df f002 	tbb	[pc, r2]
 800ce5c:	14181212 	.word	0x14181212
 800ce60:	06060614 	.word	0x06060614
 800ce64:	2e1a      	.short	0x2e1a
 800ce66:	16          	.byte	0x16
 800ce67:	00          	.byte	0x00
 800ce68:	6a0a      	ldr	r2, [r1, #32]
 800ce6a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ce6c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ce70:	2000      	movs	r0, #0
 800ce72:	1a12      	subs	r2, r2, r0
 800ce74:	bf18      	it	ne
 800ce76:	2201      	movne	r2, #1
 800ce78:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800ce7c:	b004      	add	sp, #16
 800ce7e:	bd10      	pop	{r4, pc}
 800ce80:	680a      	ldr	r2, [r1, #0]
 800ce82:	e7f2      	b.n	800ce6a <_rclc_check_for_new_data+0x22>
 800ce84:	698a      	ldr	r2, [r1, #24]
 800ce86:	e7f0      	b.n	800ce6a <_rclc_check_for_new_data+0x22>
 800ce88:	688a      	ldr	r2, [r1, #8]
 800ce8a:	e7ee      	b.n	800ce6a <_rclc_check_for_new_data+0x22>
 800ce8c:	690a      	ldr	r2, [r1, #16]
 800ce8e:	e7ec      	b.n	800ce6a <_rclc_check_for_new_data+0x22>
 800ce90:	685c      	ldr	r4, [r3, #4]
 800ce92:	4608      	mov	r0, r1
 800ce94:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800ce98:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800ce9c:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800cea0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800cea4:	9300      	str	r3, [sp, #0]
 800cea6:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800ceaa:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800ceae:	f104 0110 	add.w	r1, r4, #16
 800ceb2:	f007 fee5 	bl	8014c80 <rcl_action_client_wait_set_get_entities_ready>
 800ceb6:	e7e1      	b.n	800ce7c <_rclc_check_for_new_data+0x34>
 800ceb8:	685c      	ldr	r4, [r3, #4]
 800ceba:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800cebe:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800cec2:	e9cd 3200 	strd	r3, r2, [sp]
 800cec6:	4608      	mov	r0, r1
 800cec8:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800cecc:	f104 0220 	add.w	r2, r4, #32
 800ced0:	f104 0110 	add.w	r1, r4, #16
 800ced4:	f008 f8ea 	bl	80150ac <rcl_action_server_wait_set_get_entities_ready>
 800ced8:	e7d0      	b.n	800ce7c <_rclc_check_for_new_data+0x34>
 800ceda:	200b      	movs	r0, #11
 800cedc:	4770      	bx	lr
 800cede:	2001      	movs	r0, #1
 800cee0:	e7cc      	b.n	800ce7c <_rclc_check_for_new_data+0x34>
 800cee2:	bf00      	nop

0800cee4 <_rclc_take_new_data>:
 800cee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cee6:	b09b      	sub	sp, #108	@ 0x6c
 800cee8:	2800      	cmp	r0, #0
 800ceea:	f000 8088 	beq.w	800cffe <_rclc_take_new_data+0x11a>
 800ceee:	7803      	ldrb	r3, [r0, #0]
 800cef0:	4604      	mov	r4, r0
 800cef2:	2b0a      	cmp	r3, #10
 800cef4:	f200 8167 	bhi.w	800d1c6 <_rclc_take_new_data+0x2e2>
 800cef8:	e8df f003 	tbb	[pc, r3]
 800cefc:	44152d2d 	.word	0x44152d2d
 800cf00:	19191944 	.word	0x19191944
 800cf04:	065a      	.short	0x065a
 800cf06:	15          	.byte	0x15
 800cf07:	00          	.byte	0x00
 800cf08:	6840      	ldr	r0, [r0, #4]
 800cf0a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	f040 80b2 	bne.w	800d078 <_rclc_take_new_data+0x194>
 800cf14:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	f040 80e4 	bne.w	800d0e6 <_rclc_take_new_data+0x202>
 800cf1e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d16f      	bne.n	800d006 <_rclc_take_new_data+0x122>
 800cf26:	2500      	movs	r5, #0
 800cf28:	4628      	mov	r0, r5
 800cf2a:	b01b      	add	sp, #108	@ 0x6c
 800cf2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf2e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800cf30:	6a0b      	ldr	r3, [r1, #32]
 800cf32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d0f5      	beq.n	800cf26 <_rclc_take_new_data+0x42>
 800cf3a:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800cf3e:	f104 0110 	add.w	r1, r4, #16
 800cf42:	f006 fb79 	bl	8013638 <rcl_take_request>
 800cf46:	4605      	mov	r5, r0
 800cf48:	2800      	cmp	r0, #0
 800cf4a:	d0ec      	beq.n	800cf26 <_rclc_take_new_data+0x42>
 800cf4c:	f240 2359 	movw	r3, #601	@ 0x259
 800cf50:	4298      	cmp	r0, r3
 800cf52:	d013      	beq.n	800cf7c <_rclc_take_new_data+0x98>
 800cf54:	e029      	b.n	800cfaa <_rclc_take_new_data+0xc6>
 800cf56:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800cf58:	680b      	ldr	r3, [r1, #0]
 800cf5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d0e1      	beq.n	800cf26 <_rclc_take_new_data+0x42>
 800cf62:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800cf66:	2300      	movs	r3, #0
 800cf68:	aa0a      	add	r2, sp, #40	@ 0x28
 800cf6a:	f006 fca3 	bl	80138b4 <rcl_take>
 800cf6e:	4605      	mov	r5, r0
 800cf70:	2800      	cmp	r0, #0
 800cf72:	d0d9      	beq.n	800cf28 <_rclc_take_new_data+0x44>
 800cf74:	f240 1391 	movw	r3, #401	@ 0x191
 800cf78:	4298      	cmp	r0, r3
 800cf7a:	d116      	bne.n	800cfaa <_rclc_take_new_data+0xc6>
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800cf82:	e7d1      	b.n	800cf28 <_rclc_take_new_data+0x44>
 800cf84:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800cf86:	698b      	ldr	r3, [r1, #24]
 800cf88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d0ca      	beq.n	800cf26 <_rclc_take_new_data+0x42>
 800cf90:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800cf94:	f104 0110 	add.w	r1, r4, #16
 800cf98:	f005 fd06 	bl	80129a8 <rcl_take_response>
 800cf9c:	4605      	mov	r5, r0
 800cf9e:	2800      	cmp	r0, #0
 800cfa0:	d0c1      	beq.n	800cf26 <_rclc_take_new_data+0x42>
 800cfa2:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800cfa6:	4298      	cmp	r0, r3
 800cfa8:	d0be      	beq.n	800cf28 <_rclc_take_new_data+0x44>
 800cfaa:	f000 febd 	bl	800dd28 <rcutils_reset_error>
 800cfae:	e7bb      	b.n	800cf28 <_rclc_take_new_data+0x44>
 800cfb0:	6840      	ldr	r0, [r0, #4]
 800cfb2:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d17d      	bne.n	800d0b6 <_rclc_take_new_data+0x1d2>
 800cfba:	69c3      	ldr	r3, [r0, #28]
 800cfbc:	b11b      	cbz	r3, 800cfc6 <_rclc_take_new_data+0xe2>
 800cfbe:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d144      	bne.n	800d050 <_rclc_take_new_data+0x16c>
 800cfc6:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	f040 80ac 	bne.w	800d128 <_rclc_take_new_data+0x244>
 800cfd0:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d0a6      	beq.n	800cf26 <_rclc_take_new_data+0x42>
 800cfd8:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800cfda:	a90a      	add	r1, sp, #40	@ 0x28
 800cfdc:	3010      	adds	r0, #16
 800cfde:	f007 fd27 	bl	8014a30 <rcl_action_take_result_response>
 800cfe2:	4605      	mov	r5, r0
 800cfe4:	2800      	cmp	r0, #0
 800cfe6:	d1e0      	bne.n	800cfaa <_rclc_take_new_data+0xc6>
 800cfe8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cfec:	6860      	ldr	r0, [r4, #4]
 800cfee:	f008 f981 	bl	80152f4 <rclc_action_find_handle_by_result_request_sequence_number>
 800cff2:	2800      	cmp	r0, #0
 800cff4:	d098      	beq.n	800cf28 <_rclc_take_new_data+0x44>
 800cff6:	2301      	movs	r3, #1
 800cff8:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800cffc:	e794      	b.n	800cf28 <_rclc_take_new_data+0x44>
 800cffe:	250b      	movs	r5, #11
 800d000:	4628      	mov	r0, r5
 800d002:	b01b      	add	sp, #108	@ 0x6c
 800d004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d006:	ae04      	add	r6, sp, #16
 800d008:	aa0a      	add	r2, sp, #40	@ 0x28
 800d00a:	3010      	adds	r0, #16
 800d00c:	4631      	mov	r1, r6
 800d00e:	f007 ff81 	bl	8014f14 <rcl_action_take_cancel_request>
 800d012:	4605      	mov	r5, r0
 800d014:	2800      	cmp	r0, #0
 800d016:	d1c8      	bne.n	800cfaa <_rclc_take_new_data+0xc6>
 800d018:	6860      	ldr	r0, [r4, #4]
 800d01a:	a90a      	add	r1, sp, #40	@ 0x28
 800d01c:	f008 f928 	bl	8015270 <rclc_action_find_goal_handle_by_uuid>
 800d020:	4607      	mov	r7, r0
 800d022:	2800      	cmp	r0, #0
 800d024:	f000 80bb 	beq.w	800d19e <_rclc_take_new_data+0x2ba>
 800d028:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800d02c:	2101      	movs	r1, #1
 800d02e:	f008 f8a9 	bl	8015184 <rcl_action_transition_goal_state>
 800d032:	2803      	cmp	r0, #3
 800d034:	4684      	mov	ip, r0
 800d036:	f040 80a7 	bne.w	800d188 <_rclc_take_new_data+0x2a4>
 800d03a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d03c:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800d040:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d042:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d046:	e884 0003 	stmia.w	r4, {r0, r1}
 800d04a:	f887 c008 	strb.w	ip, [r7, #8]
 800d04e:	e76b      	b.n	800cf28 <_rclc_take_new_data+0x44>
 800d050:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d052:	3010      	adds	r0, #16
 800d054:	f007 fd6c 	bl	8014b30 <rcl_action_take_feedback>
 800d058:	4605      	mov	r5, r0
 800d05a:	2800      	cmp	r0, #0
 800d05c:	d1a5      	bne.n	800cfaa <_rclc_take_new_data+0xc6>
 800d05e:	6860      	ldr	r0, [r4, #4]
 800d060:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d062:	f008 f905 	bl	8015270 <rclc_action_find_goal_handle_by_uuid>
 800d066:	4603      	mov	r3, r0
 800d068:	2800      	cmp	r0, #0
 800d06a:	f000 80a3 	beq.w	800d1b4 <_rclc_take_new_data+0x2d0>
 800d06e:	2201      	movs	r2, #1
 800d070:	6860      	ldr	r0, [r4, #4]
 800d072:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800d076:	e7a6      	b.n	800cfc6 <_rclc_take_new_data+0xe2>
 800d078:	f008 f8d4 	bl	8015224 <rclc_action_take_goal_handle>
 800d07c:	4606      	mov	r6, r0
 800d07e:	6860      	ldr	r0, [r4, #4]
 800d080:	2e00      	cmp	r6, #0
 800d082:	f43f af47 	beq.w	800cf14 <_rclc_take_new_data+0x30>
 800d086:	6070      	str	r0, [r6, #4]
 800d088:	69f2      	ldr	r2, [r6, #28]
 800d08a:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800d08e:	3010      	adds	r0, #16
 800d090:	f007 fe8a 	bl	8014da8 <rcl_action_take_goal_request>
 800d094:	4605      	mov	r5, r0
 800d096:	2800      	cmp	r0, #0
 800d098:	f040 808e 	bne.w	800d1b8 <_rclc_take_new_data+0x2d4>
 800d09c:	69f7      	ldr	r7, [r6, #28]
 800d09e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d0a0:	7235      	strb	r5, [r6, #8]
 800d0a2:	f8c6 0009 	str.w	r0, [r6, #9]
 800d0a6:	f8c6 100d 	str.w	r1, [r6, #13]
 800d0aa:	6860      	ldr	r0, [r4, #4]
 800d0ac:	f8c6 2011 	str.w	r2, [r6, #17]
 800d0b0:	f8c6 3015 	str.w	r3, [r6, #21]
 800d0b4:	e72e      	b.n	800cf14 <_rclc_take_new_data+0x30>
 800d0b6:	aa04      	add	r2, sp, #16
 800d0b8:	a90a      	add	r1, sp, #40	@ 0x28
 800d0ba:	3010      	adds	r0, #16
 800d0bc:	f007 fc40 	bl	8014940 <rcl_action_take_goal_response>
 800d0c0:	4605      	mov	r5, r0
 800d0c2:	2800      	cmp	r0, #0
 800d0c4:	f47f af71 	bne.w	800cfaa <_rclc_take_new_data+0xc6>
 800d0c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d0cc:	6860      	ldr	r0, [r4, #4]
 800d0ce:	f008 f8ff 	bl	80152d0 <rclc_action_find_handle_by_goal_request_sequence_number>
 800d0d2:	b130      	cbz	r0, 800d0e2 <_rclc_take_new_data+0x1fe>
 800d0d4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800d0d8:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800d0dc:	2201      	movs	r2, #1
 800d0de:	f880 2020 	strb.w	r2, [r0, #32]
 800d0e2:	6860      	ldr	r0, [r4, #4]
 800d0e4:	e769      	b.n	800cfba <_rclc_take_new_data+0xd6>
 800d0e6:	aa04      	add	r2, sp, #16
 800d0e8:	3010      	adds	r0, #16
 800d0ea:	a90a      	add	r1, sp, #40	@ 0x28
 800d0ec:	f007 fed2 	bl	8014e94 <rcl_action_take_result_request>
 800d0f0:	4605      	mov	r5, r0
 800d0f2:	2800      	cmp	r0, #0
 800d0f4:	f47f af59 	bne.w	800cfaa <_rclc_take_new_data+0xc6>
 800d0f8:	6860      	ldr	r0, [r4, #4]
 800d0fa:	a904      	add	r1, sp, #16
 800d0fc:	f008 f8b8 	bl	8015270 <rclc_action_find_goal_handle_by_uuid>
 800d100:	4607      	mov	r7, r0
 800d102:	b160      	cbz	r0, 800d11e <_rclc_take_new_data+0x23a>
 800d104:	ad0a      	add	r5, sp, #40	@ 0x28
 800d106:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800d10a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d10c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d10e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d112:	f04f 0c02 	mov.w	ip, #2
 800d116:	e886 0003 	stmia.w	r6, {r0, r1}
 800d11a:	f887 c008 	strb.w	ip, [r7, #8]
 800d11e:	6860      	ldr	r0, [r4, #4]
 800d120:	2300      	movs	r3, #0
 800d122:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800d126:	e6fa      	b.n	800cf1e <_rclc_take_new_data+0x3a>
 800d128:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800d12c:	a90a      	add	r1, sp, #40	@ 0x28
 800d12e:	3010      	adds	r0, #16
 800d130:	f007 fcbe 	bl	8014ab0 <rcl_action_take_cancel_response>
 800d134:	4605      	mov	r5, r0
 800d136:	2800      	cmp	r0, #0
 800d138:	f47f af37 	bne.w	800cfaa <_rclc_take_new_data+0xc6>
 800d13c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d140:	6860      	ldr	r0, [r4, #4]
 800d142:	f008 f8e9 	bl	8015318 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800d146:	4606      	mov	r6, r0
 800d148:	6860      	ldr	r0, [r4, #4]
 800d14a:	2e00      	cmp	r6, #0
 800d14c:	f43f af40 	beq.w	800cfd0 <_rclc_take_new_data+0xec>
 800d150:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d152:	2701      	movs	r7, #1
 800d154:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800d156:	2b00      	cmp	r3, #0
 800d158:	f43f af3a 	beq.w	800cfd0 <_rclc_take_new_data+0xec>
 800d15c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d15e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800d162:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d166:	f008 f883 	bl	8015270 <rclc_action_find_goal_handle_by_uuid>
 800d16a:	b138      	cbz	r0, 800d17c <_rclc_take_new_data+0x298>
 800d16c:	6860      	ldr	r0, [r4, #4]
 800d16e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d170:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800d174:	3501      	adds	r5, #1
 800d176:	42ab      	cmp	r3, r5
 800d178:	d8f0      	bhi.n	800d15c <_rclc_take_new_data+0x278>
 800d17a:	e729      	b.n	800cfd0 <_rclc_take_new_data+0xec>
 800d17c:	6860      	ldr	r0, [r4, #4]
 800d17e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d180:	3501      	adds	r5, #1
 800d182:	42ab      	cmp	r3, r5
 800d184:	d8ea      	bhi.n	800d15c <_rclc_take_new_data+0x278>
 800d186:	e723      	b.n	800cfd0 <_rclc_take_new_data+0xec>
 800d188:	ab06      	add	r3, sp, #24
 800d18a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d18c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d190:	2103      	movs	r1, #3
 800d192:	e896 000c 	ldmia.w	r6, {r2, r3}
 800d196:	6860      	ldr	r0, [r4, #4]
 800d198:	f008 f932 	bl	8015400 <rclc_action_server_goal_cancel_reject>
 800d19c:	e6c4      	b.n	800cf28 <_rclc_take_new_data+0x44>
 800d19e:	ab06      	add	r3, sp, #24
 800d1a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d1a2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d1a6:	2102      	movs	r1, #2
 800d1a8:	e896 000c 	ldmia.w	r6, {r2, r3}
 800d1ac:	6860      	ldr	r0, [r4, #4]
 800d1ae:	f008 f927 	bl	8015400 <rclc_action_server_goal_cancel_reject>
 800d1b2:	e6b9      	b.n	800cf28 <_rclc_take_new_data+0x44>
 800d1b4:	6860      	ldr	r0, [r4, #4]
 800d1b6:	e706      	b.n	800cfc6 <_rclc_take_new_data+0xe2>
 800d1b8:	6860      	ldr	r0, [r4, #4]
 800d1ba:	4631      	mov	r1, r6
 800d1bc:	f008 f842 	bl	8015244 <rclc_action_remove_used_goal_handle>
 800d1c0:	f000 fdb2 	bl	800dd28 <rcutils_reset_error>
 800d1c4:	e6b0      	b.n	800cf28 <_rclc_take_new_data+0x44>
 800d1c6:	2501      	movs	r5, #1
 800d1c8:	e6ae      	b.n	800cf28 <_rclc_take_new_data+0x44>
 800d1ca:	bf00      	nop

0800d1cc <_rclc_execute.part.0>:
 800d1cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1ce:	7803      	ldrb	r3, [r0, #0]
 800d1d0:	b087      	sub	sp, #28
 800d1d2:	4604      	mov	r4, r0
 800d1d4:	2b0a      	cmp	r3, #10
 800d1d6:	f200 8136 	bhi.w	800d446 <_rclc_execute.part.0+0x27a>
 800d1da:	e8df f003 	tbb	[pc, r3]
 800d1de:	435e      	.short	0x435e
 800d1e0:	06a1664f 	.word	0x06a1664f
 800d1e4:	6c1e0606 	.word	0x6c1e0606
 800d1e8:	59          	.byte	0x59
 800d1e9:	00          	.byte	0x00
 800d1ea:	2b06      	cmp	r3, #6
 800d1ec:	f000 8122 	beq.w	800d434 <_rclc_execute.part.0+0x268>
 800d1f0:	2b07      	cmp	r3, #7
 800d1f2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d1f4:	f040 8118 	bne.w	800d428 <_rclc_execute.part.0+0x25c>
 800d1f8:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800d1fc:	6880      	ldr	r0, [r0, #8]
 800d1fe:	4798      	blx	r3
 800d200:	f104 0110 	add.w	r1, r4, #16
 800d204:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800d206:	6860      	ldr	r0, [r4, #4]
 800d208:	f006 fa56 	bl	80136b8 <rcl_send_response>
 800d20c:	2800      	cmp	r0, #0
 800d20e:	d033      	beq.n	800d278 <_rclc_execute.part.0+0xac>
 800d210:	9005      	str	r0, [sp, #20]
 800d212:	f000 fd89 	bl	800dd28 <rcutils_reset_error>
 800d216:	9805      	ldr	r0, [sp, #20]
 800d218:	e02e      	b.n	800d278 <_rclc_execute.part.0+0xac>
 800d21a:	6840      	ldr	r0, [r0, #4]
 800d21c:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800d220:	2b00      	cmp	r3, #0
 800d222:	f000 8086 	beq.w	800d332 <_rclc_execute.part.0+0x166>
 800d226:	2600      	movs	r6, #0
 800d228:	2701      	movs	r7, #1
 800d22a:	e004      	b.n	800d236 <_rclc_execute.part.0+0x6a>
 800d22c:	f007 ffd4 	bl	80151d8 <rclc_action_send_result_request>
 800d230:	b998      	cbnz	r0, 800d25a <_rclc_execute.part.0+0x8e>
 800d232:	722f      	strb	r7, [r5, #8]
 800d234:	6860      	ldr	r0, [r4, #4]
 800d236:	f008 f881 	bl	801533c <rclc_action_find_first_handle_with_goal_response>
 800d23a:	4605      	mov	r5, r0
 800d23c:	2800      	cmp	r0, #0
 800d23e:	d077      	beq.n	800d330 <_rclc_execute.part.0+0x164>
 800d240:	6863      	ldr	r3, [r4, #4]
 800d242:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d244:	699b      	ldr	r3, [r3, #24]
 800d246:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800d24a:	f885 6020 	strb.w	r6, [r5, #32]
 800d24e:	4798      	blx	r3
 800d250:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800d254:	4628      	mov	r0, r5
 800d256:	2b00      	cmp	r3, #0
 800d258:	d1e8      	bne.n	800d22c <_rclc_execute.part.0+0x60>
 800d25a:	6860      	ldr	r0, [r4, #4]
 800d25c:	4629      	mov	r1, r5
 800d25e:	f007 fff1 	bl	8015244 <rclc_action_remove_used_goal_handle>
 800d262:	e7e7      	b.n	800d234 <_rclc_execute.part.0+0x68>
 800d264:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800d268:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800d26c:	2d00      	cmp	r5, #0
 800d26e:	f000 80c9 	beq.w	800d404 <_rclc_execute.part.0+0x238>
 800d272:	6880      	ldr	r0, [r0, #8]
 800d274:	4798      	blx	r3
 800d276:	2000      	movs	r0, #0
 800d278:	b007      	add	sp, #28
 800d27a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d27c:	6840      	ldr	r0, [r0, #4]
 800d27e:	f006 fc1d 	bl	8013abc <rcl_timer_call>
 800d282:	f240 3321 	movw	r3, #801	@ 0x321
 800d286:	4298      	cmp	r0, r3
 800d288:	d004      	beq.n	800d294 <_rclc_execute.part.0+0xc8>
 800d28a:	2800      	cmp	r0, #0
 800d28c:	d0f4      	beq.n	800d278 <_rclc_execute.part.0+0xac>
 800d28e:	e7bf      	b.n	800d210 <_rclc_execute.part.0+0x44>
 800d290:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d292:	4798      	blx	r3
 800d294:	2000      	movs	r0, #0
 800d296:	b007      	add	sp, #28
 800d298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d29a:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800d29e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d2a0:	b925      	cbnz	r5, 800d2ac <_rclc_execute.part.0+0xe0>
 800d2a2:	4628      	mov	r0, r5
 800d2a4:	4798      	blx	r3
 800d2a6:	4628      	mov	r0, r5
 800d2a8:	e7e6      	b.n	800d278 <_rclc_execute.part.0+0xac>
 800d2aa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d2ac:	68a0      	ldr	r0, [r4, #8]
 800d2ae:	4798      	blx	r3
 800d2b0:	2000      	movs	r0, #0
 800d2b2:	b007      	add	sp, #28
 800d2b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2b6:	6840      	ldr	r0, [r0, #4]
 800d2b8:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800d2bc:	bb3b      	cbnz	r3, 800d30e <_rclc_execute.part.0+0x142>
 800d2be:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d07b      	beq.n	800d3be <_rclc_execute.part.0+0x1f2>
 800d2c6:	f640 0634 	movw	r6, #2100	@ 0x834
 800d2ca:	2701      	movs	r7, #1
 800d2cc:	e007      	b.n	800d2de <_rclc_execute.part.0+0x112>
 800d2ce:	4628      	mov	r0, r5
 800d2d0:	f008 f84c 	bl	801536c <rclc_action_server_response_goal_request>
 800d2d4:	6860      	ldr	r0, [r4, #4]
 800d2d6:	4629      	mov	r1, r5
 800d2d8:	f007 ffb4 	bl	8015244 <rclc_action_remove_used_goal_handle>
 800d2dc:	6860      	ldr	r0, [r4, #4]
 800d2de:	2100      	movs	r1, #0
 800d2e0:	f007 ffde 	bl	80152a0 <rclc_action_find_first_handle_by_status>
 800d2e4:	4605      	mov	r5, r0
 800d2e6:	2800      	cmp	r0, #0
 800d2e8:	d066      	beq.n	800d3b8 <_rclc_execute.part.0+0x1ec>
 800d2ea:	6863      	ldr	r3, [r4, #4]
 800d2ec:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d2ee:	699b      	ldr	r3, [r3, #24]
 800d2f0:	4798      	blx	r3
 800d2f2:	42b0      	cmp	r0, r6
 800d2f4:	f04f 0100 	mov.w	r1, #0
 800d2f8:	d1e9      	bne.n	800d2ce <_rclc_execute.part.0+0x102>
 800d2fa:	2101      	movs	r1, #1
 800d2fc:	4628      	mov	r0, r5
 800d2fe:	f008 f835 	bl	801536c <rclc_action_server_response_goal_request>
 800d302:	722f      	strb	r7, [r5, #8]
 800d304:	e7ea      	b.n	800d2dc <_rclc_execute.part.0+0x110>
 800d306:	6848      	ldr	r0, [r1, #4]
 800d308:	f007 ff9c 	bl	8015244 <rclc_action_remove_used_goal_handle>
 800d30c:	6860      	ldr	r0, [r4, #4]
 800d30e:	f007 ffd3 	bl	80152b8 <rclc_action_find_first_terminated_handle>
 800d312:	4601      	mov	r1, r0
 800d314:	2800      	cmp	r0, #0
 800d316:	d1f6      	bne.n	800d306 <_rclc_execute.part.0+0x13a>
 800d318:	6860      	ldr	r0, [r4, #4]
 800d31a:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800d31e:	e7ce      	b.n	800d2be <_rclc_execute.part.0+0xf2>
 800d320:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d322:	6880      	ldr	r0, [r0, #8]
 800d324:	f104 0110 	add.w	r1, r4, #16
 800d328:	4798      	blx	r3
 800d32a:	2000      	movs	r0, #0
 800d32c:	b007      	add	sp, #28
 800d32e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d330:	6860      	ldr	r0, [r4, #4]
 800d332:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800d336:	b18b      	cbz	r3, 800d35c <_rclc_execute.part.0+0x190>
 800d338:	68c5      	ldr	r5, [r0, #12]
 800d33a:	b32d      	cbz	r5, 800d388 <_rclc_execute.part.0+0x1bc>
 800d33c:	2600      	movs	r6, #0
 800d33e:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800d342:	b143      	cbz	r3, 800d356 <_rclc_execute.part.0+0x18a>
 800d344:	69c3      	ldr	r3, [r0, #28]
 800d346:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800d34a:	b123      	cbz	r3, 800d356 <_rclc_execute.part.0+0x18a>
 800d34c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d34e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d350:	4628      	mov	r0, r5
 800d352:	4798      	blx	r3
 800d354:	6860      	ldr	r0, [r4, #4]
 800d356:	682d      	ldr	r5, [r5, #0]
 800d358:	2d00      	cmp	r5, #0
 800d35a:	d1f0      	bne.n	800d33e <_rclc_execute.part.0+0x172>
 800d35c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800d360:	b193      	cbz	r3, 800d388 <_rclc_execute.part.0+0x1bc>
 800d362:	68c5      	ldr	r5, [r0, #12]
 800d364:	b185      	cbz	r5, 800d388 <_rclc_execute.part.0+0x1bc>
 800d366:	2600      	movs	r6, #0
 800d368:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800d36c:	b14b      	cbz	r3, 800d382 <_rclc_execute.part.0+0x1b6>
 800d36e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800d370:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800d374:	b12b      	cbz	r3, 800d382 <_rclc_execute.part.0+0x1b6>
 800d376:	4628      	mov	r0, r5
 800d378:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800d37c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d37e:	4798      	blx	r3
 800d380:	6860      	ldr	r0, [r4, #4]
 800d382:	682d      	ldr	r5, [r5, #0]
 800d384:	2d00      	cmp	r5, #0
 800d386:	d1ef      	bne.n	800d368 <_rclc_execute.part.0+0x19c>
 800d388:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d081      	beq.n	800d294 <_rclc_execute.part.0+0xc8>
 800d390:	2700      	movs	r7, #0
 800d392:	e00b      	b.n	800d3ac <_rclc_execute.part.0+0x1e0>
 800d394:	6863      	ldr	r3, [r4, #4]
 800d396:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d398:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800d39a:	6a1e      	ldr	r6, [r3, #32]
 800d39c:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800d3a0:	47b0      	blx	r6
 800d3a2:	6860      	ldr	r0, [r4, #4]
 800d3a4:	4629      	mov	r1, r5
 800d3a6:	f007 ff4d 	bl	8015244 <rclc_action_remove_used_goal_handle>
 800d3aa:	6860      	ldr	r0, [r4, #4]
 800d3ac:	f007 ffd2 	bl	8015354 <rclc_action_find_first_handle_with_result_response>
 800d3b0:	4605      	mov	r5, r0
 800d3b2:	2800      	cmp	r0, #0
 800d3b4:	d1ee      	bne.n	800d394 <_rclc_execute.part.0+0x1c8>
 800d3b6:	e76d      	b.n	800d294 <_rclc_execute.part.0+0xc8>
 800d3b8:	6860      	ldr	r0, [r4, #4]
 800d3ba:	f880 5020 	strb.w	r5, [r0, #32]
 800d3be:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	f43f af66 	beq.w	800d294 <_rclc_execute.part.0+0xc8>
 800d3c8:	68c5      	ldr	r5, [r0, #12]
 800d3ca:	b1b5      	cbz	r5, 800d3fa <_rclc_execute.part.0+0x22e>
 800d3cc:	2602      	movs	r6, #2
 800d3ce:	e001      	b.n	800d3d4 <_rclc_execute.part.0+0x208>
 800d3d0:	682d      	ldr	r5, [r5, #0]
 800d3d2:	b195      	cbz	r5, 800d3fa <_rclc_execute.part.0+0x22e>
 800d3d4:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800d3d8:	2b03      	cmp	r3, #3
 800d3da:	d1f9      	bne.n	800d3d0 <_rclc_execute.part.0+0x204>
 800d3dc:	69c3      	ldr	r3, [r0, #28]
 800d3de:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d3e0:	4628      	mov	r0, r5
 800d3e2:	4798      	blx	r3
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800d3ea:	4628      	mov	r0, r5
 800d3ec:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800d3f0:	b163      	cbz	r3, 800d40c <_rclc_execute.part.0+0x240>
 800d3f2:	f007 ffd9 	bl	80153a8 <rclc_action_server_goal_cancel_accept>
 800d3f6:	6860      	ldr	r0, [r4, #4]
 800d3f8:	e7ea      	b.n	800d3d0 <_rclc_execute.part.0+0x204>
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800d400:	4618      	mov	r0, r3
 800d402:	e739      	b.n	800d278 <_rclc_execute.part.0+0xac>
 800d404:	4628      	mov	r0, r5
 800d406:	4798      	blx	r3
 800d408:	4628      	mov	r0, r5
 800d40a:	e735      	b.n	800d278 <_rclc_execute.part.0+0xac>
 800d40c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800d40e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d412:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800d416:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d41a:	6860      	ldr	r0, [r4, #4]
 800d41c:	2101      	movs	r1, #1
 800d41e:	f007 ffef 	bl	8015400 <rclc_action_server_goal_cancel_reject>
 800d422:	722e      	strb	r6, [r5, #8]
 800d424:	6860      	ldr	r0, [r4, #4]
 800d426:	e7d3      	b.n	800d3d0 <_rclc_execute.part.0+0x204>
 800d428:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d42a:	6880      	ldr	r0, [r0, #8]
 800d42c:	4798      	blx	r3
 800d42e:	f104 0110 	add.w	r1, r4, #16
 800d432:	e6e7      	b.n	800d204 <_rclc_execute.part.0+0x38>
 800d434:	f100 0110 	add.w	r1, r0, #16
 800d438:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d43a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800d43c:	6880      	ldr	r0, [r0, #8]
 800d43e:	9105      	str	r1, [sp, #20]
 800d440:	4798      	blx	r3
 800d442:	9905      	ldr	r1, [sp, #20]
 800d444:	e6de      	b.n	800d204 <_rclc_execute.part.0+0x38>
 800d446:	2001      	movs	r0, #1
 800d448:	e716      	b.n	800d278 <_rclc_execute.part.0+0xac>
 800d44a:	bf00      	nop

0800d44c <rclc_executor_trigger_any>:
 800d44c:	2800      	cmp	r0, #0
 800d44e:	d03f      	beq.n	800d4d0 <rclc_executor_trigger_any+0x84>
 800d450:	2900      	cmp	r1, #0
 800d452:	d03e      	beq.n	800d4d2 <rclc_executor_trigger_any+0x86>
 800d454:	4603      	mov	r3, r0
 800d456:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800d45a:	2200      	movs	r2, #0
 800d45c:	2800      	cmp	r0, #0
 800d45e:	d037      	beq.n	800d4d0 <rclc_executor_trigger_any+0x84>
 800d460:	b430      	push	{r4, r5}
 800d462:	f893 c000 	ldrb.w	ip, [r3]
 800d466:	f1bc 0f08 	cmp.w	ip, #8
 800d46a:	d11e      	bne.n	800d4aa <rclc_executor_trigger_any+0x5e>
 800d46c:	685c      	ldr	r4, [r3, #4]
 800d46e:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800d470:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800d474:	d105      	bne.n	800d482 <rclc_executor_trigger_any+0x36>
 800d476:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800d47a:	b910      	cbnz	r0, 800d482 <rclc_executor_trigger_any+0x36>
 800d47c:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800d480:	b128      	cbz	r0, 800d48e <rclc_executor_trigger_any+0x42>
 800d482:	bc30      	pop	{r4, r5}
 800d484:	4770      	bx	lr
 800d486:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800d48a:	2800      	cmp	r0, #0
 800d48c:	d1f9      	bne.n	800d482 <rclc_executor_trigger_any+0x36>
 800d48e:	3201      	adds	r2, #1
 800d490:	4291      	cmp	r1, r2
 800d492:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800d496:	d018      	beq.n	800d4ca <rclc_executor_trigger_any+0x7e>
 800d498:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800d49c:	2800      	cmp	r0, #0
 800d49e:	d0f0      	beq.n	800d482 <rclc_executor_trigger_any+0x36>
 800d4a0:	f893 c000 	ldrb.w	ip, [r3]
 800d4a4:	f1bc 0f08 	cmp.w	ip, #8
 800d4a8:	d0e0      	beq.n	800d46c <rclc_executor_trigger_any+0x20>
 800d4aa:	f1bc 0f09 	cmp.w	ip, #9
 800d4ae:	d1ea      	bne.n	800d486 <rclc_executor_trigger_any+0x3a>
 800d4b0:	685c      	ldr	r4, [r3, #4]
 800d4b2:	6a25      	ldr	r5, [r4, #32]
 800d4b4:	2d00      	cmp	r5, #0
 800d4b6:	d1e4      	bne.n	800d482 <rclc_executor_trigger_any+0x36>
 800d4b8:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800d4bc:	2800      	cmp	r0, #0
 800d4be:	d1e0      	bne.n	800d482 <rclc_executor_trigger_any+0x36>
 800d4c0:	3201      	adds	r2, #1
 800d4c2:	4291      	cmp	r1, r2
 800d4c4:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800d4c8:	d1e6      	bne.n	800d498 <rclc_executor_trigger_any+0x4c>
 800d4ca:	2000      	movs	r0, #0
 800d4cc:	bc30      	pop	{r4, r5}
 800d4ce:	4770      	bx	lr
 800d4d0:	4770      	bx	lr
 800d4d2:	4608      	mov	r0, r1
 800d4d4:	4770      	bx	lr
 800d4d6:	bf00      	nop

0800d4d8 <rclc_executor_get_zero_initialized_executor>:
 800d4d8:	b510      	push	{r4, lr}
 800d4da:	4903      	ldr	r1, [pc, #12]	@ (800d4e8 <rclc_executor_get_zero_initialized_executor+0x10>)
 800d4dc:	4604      	mov	r4, r0
 800d4de:	2288      	movs	r2, #136	@ 0x88
 800d4e0:	f00d fd89 	bl	801aff6 <memcpy>
 800d4e4:	4620      	mov	r0, r4
 800d4e6:	bd10      	pop	{r4, pc}
 800d4e8:	0801fdd8 	.word	0x0801fdd8
 800d4ec:	00000000 	.word	0x00000000

0800d4f0 <rclc_executor_init>:
 800d4f0:	2800      	cmp	r0, #0
 800d4f2:	d05f      	beq.n	800d5b4 <rclc_executor_init+0xc4>
 800d4f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4f8:	460c      	mov	r4, r1
 800d4fa:	b0b0      	sub	sp, #192	@ 0xc0
 800d4fc:	2900      	cmp	r1, #0
 800d4fe:	d051      	beq.n	800d5a4 <rclc_executor_init+0xb4>
 800d500:	4605      	mov	r5, r0
 800d502:	4618      	mov	r0, r3
 800d504:	4616      	mov	r6, r2
 800d506:	461f      	mov	r7, r3
 800d508:	f000 fbea 	bl	800dce0 <rcutils_allocator_is_valid>
 800d50c:	2800      	cmp	r0, #0
 800d50e:	d049      	beq.n	800d5a4 <rclc_executor_init+0xb4>
 800d510:	2e00      	cmp	r6, #0
 800d512:	d047      	beq.n	800d5a4 <rclc_executor_init+0xb4>
 800d514:	492c      	ldr	r1, [pc, #176]	@ (800d5c8 <rclc_executor_init+0xd8>)
 800d516:	2288      	movs	r2, #136	@ 0x88
 800d518:	a80e      	add	r0, sp, #56	@ 0x38
 800d51a:	f00d fd6c 	bl	801aff6 <memcpy>
 800d51e:	a90e      	add	r1, sp, #56	@ 0x38
 800d520:	2288      	movs	r2, #136	@ 0x88
 800d522:	4628      	mov	r0, r5
 800d524:	f00d fd67 	bl	801aff6 <memcpy>
 800d528:	602c      	str	r4, [r5, #0]
 800d52a:	4668      	mov	r0, sp
 800d52c:	60ae      	str	r6, [r5, #8]
 800d52e:	466c      	mov	r4, sp
 800d530:	f006 fc36 	bl	8013da0 <rcl_get_zero_initialized_wait_set>
 800d534:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d536:	f105 0c14 	add.w	ip, r5, #20
 800d53a:	f8d7 8000 	ldr.w	r8, [r7]
 800d53e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d542:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d544:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d548:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d54a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d54e:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800d5c0 <rclc_executor_init+0xd0>
 800d552:	6823      	ldr	r3, [r4, #0]
 800d554:	f8cc 3000 	str.w	r3, [ip]
 800d558:	6939      	ldr	r1, [r7, #16]
 800d55a:	612f      	str	r7, [r5, #16]
 800d55c:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800d560:	01b0      	lsls	r0, r6, #6
 800d562:	47c0      	blx	r8
 800d564:	6068      	str	r0, [r5, #4]
 800d566:	b338      	cbz	r0, 800d5b8 <rclc_executor_init+0xc8>
 800d568:	2400      	movs	r4, #0
 800d56a:	e000      	b.n	800d56e <rclc_executor_init+0x7e>
 800d56c:	6868      	ldr	r0, [r5, #4]
 800d56e:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800d572:	4631      	mov	r1, r6
 800d574:	3401      	adds	r4, #1
 800d576:	f000 fa6b 	bl	800da50 <rclc_executor_handle_init>
 800d57a:	42a6      	cmp	r6, r4
 800d57c:	d1f6      	bne.n	800d56c <rclc_executor_init+0x7c>
 800d57e:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800d582:	f000 fa5b 	bl	800da3c <rclc_executor_handle_counters_zero_init>
 800d586:	4a11      	ldr	r2, [pc, #68]	@ (800d5cc <rclc_executor_init+0xdc>)
 800d588:	686b      	ldr	r3, [r5, #4]
 800d58a:	2000      	movs	r0, #0
 800d58c:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800d590:	b163      	cbz	r3, 800d5ac <rclc_executor_init+0xbc>
 800d592:	692b      	ldr	r3, [r5, #16]
 800d594:	b153      	cbz	r3, 800d5ac <rclc_executor_init+0xbc>
 800d596:	68ab      	ldr	r3, [r5, #8]
 800d598:	b143      	cbz	r3, 800d5ac <rclc_executor_init+0xbc>
 800d59a:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800d59e:	b030      	add	sp, #192	@ 0xc0
 800d5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5a4:	200b      	movs	r0, #11
 800d5a6:	b030      	add	sp, #192	@ 0xc0
 800d5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	b030      	add	sp, #192	@ 0xc0
 800d5b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5b4:	200b      	movs	r0, #11
 800d5b6:	4770      	bx	lr
 800d5b8:	200a      	movs	r0, #10
 800d5ba:	e7f4      	b.n	800d5a6 <rclc_executor_init+0xb6>
 800d5bc:	f3af 8000 	nop.w
 800d5c0:	3b9aca00 	.word	0x3b9aca00
 800d5c4:	00000000 	.word	0x00000000
 800d5c8:	0801fdd8 	.word	0x0801fdd8
 800d5cc:	0800d44d 	.word	0x0800d44d

0800d5d0 <rclc_executor_add_subscription>:
 800d5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5d2:	f89d e018 	ldrb.w	lr, [sp, #24]
 800d5d6:	b338      	cbz	r0, 800d628 <rclc_executor_add_subscription+0x58>
 800d5d8:	b331      	cbz	r1, 800d628 <rclc_executor_add_subscription+0x58>
 800d5da:	b32a      	cbz	r2, 800d628 <rclc_executor_add_subscription+0x58>
 800d5dc:	b323      	cbz	r3, 800d628 <rclc_executor_add_subscription+0x58>
 800d5de:	4604      	mov	r4, r0
 800d5e0:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800d5e4:	42a8      	cmp	r0, r5
 800d5e6:	d301      	bcc.n	800d5ec <rclc_executor_add_subscription+0x1c>
 800d5e8:	2001      	movs	r0, #1
 800d5ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5ec:	6866      	ldr	r6, [r4, #4]
 800d5ee:	0187      	lsls	r7, r0, #6
 800d5f0:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800d5f4:	2500      	movs	r5, #0
 800d5f6:	55f5      	strb	r5, [r6, r7]
 800d5f8:	3001      	adds	r0, #1
 800d5fa:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800d5fe:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800d602:	2301      	movs	r3, #1
 800d604:	f104 0514 	add.w	r5, r4, #20
 800d608:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800d60c:	f88c e001 	strb.w	lr, [ip, #1]
 800d610:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800d614:	60e0      	str	r0, [r4, #12]
 800d616:	4628      	mov	r0, r5
 800d618:	f006 fbd6 	bl	8013dc8 <rcl_wait_set_is_valid>
 800d61c:	b930      	cbnz	r0, 800d62c <rclc_executor_add_subscription+0x5c>
 800d61e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800d620:	3301      	adds	r3, #1
 800d622:	2000      	movs	r0, #0
 800d624:	64a3      	str	r3, [r4, #72]	@ 0x48
 800d626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d628:	200b      	movs	r0, #11
 800d62a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d62c:	4628      	mov	r0, r5
 800d62e:	f006 fbd1 	bl	8013dd4 <rcl_wait_set_fini>
 800d632:	2800      	cmp	r0, #0
 800d634:	d0f3      	beq.n	800d61e <rclc_executor_add_subscription+0x4e>
 800d636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d638 <rclc_executor_prepare>:
 800d638:	2800      	cmp	r0, #0
 800d63a:	d044      	beq.n	800d6c6 <rclc_executor_prepare+0x8e>
 800d63c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d63e:	f100 0514 	add.w	r5, r0, #20
 800d642:	b09b      	sub	sp, #108	@ 0x6c
 800d644:	4604      	mov	r4, r0
 800d646:	4628      	mov	r0, r5
 800d648:	f006 fbbe 	bl	8013dc8 <rcl_wait_set_is_valid>
 800d64c:	b110      	cbz	r0, 800d654 <rclc_executor_prepare+0x1c>
 800d64e:	2000      	movs	r0, #0
 800d650:	b01b      	add	sp, #108	@ 0x6c
 800d652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d654:	4628      	mov	r0, r5
 800d656:	f006 fbbd 	bl	8013dd4 <rcl_wait_set_fini>
 800d65a:	2800      	cmp	r0, #0
 800d65c:	d130      	bne.n	800d6c0 <rclc_executor_prepare+0x88>
 800d65e:	a80c      	add	r0, sp, #48	@ 0x30
 800d660:	f006 fb9e 	bl	8013da0 <rcl_get_zero_initialized_wait_set>
 800d664:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800d668:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d66c:	46ae      	mov	lr, r5
 800d66e:	6927      	ldr	r7, [r4, #16]
 800d670:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d674:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d678:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d67c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d680:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d684:	f8dc 3000 	ldr.w	r3, [ip]
 800d688:	f8ce 3000 	str.w	r3, [lr]
 800d68c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d68e:	ae04      	add	r6, sp, #16
 800d690:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	6822      	ldr	r2, [r4, #0]
 800d696:	6033      	str	r3, [r6, #0]
 800d698:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d69a:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800d69c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800d6a0:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800d6a4:	e9cd 2100 	strd	r2, r1, [sp]
 800d6a8:	4628      	mov	r0, r5
 800d6aa:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800d6ac:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d6ae:	f006 fe8f 	bl	80143d0 <rcl_wait_set_init>
 800d6b2:	2800      	cmp	r0, #0
 800d6b4:	d0cc      	beq.n	800d650 <rclc_executor_prepare+0x18>
 800d6b6:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d6b8:	f000 fb36 	bl	800dd28 <rcutils_reset_error>
 800d6bc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d6be:	e7c7      	b.n	800d650 <rclc_executor_prepare+0x18>
 800d6c0:	f000 fb32 	bl	800dd28 <rcutils_reset_error>
 800d6c4:	e7cb      	b.n	800d65e <rclc_executor_prepare+0x26>
 800d6c6:	200b      	movs	r0, #11
 800d6c8:	4770      	bx	lr
 800d6ca:	bf00      	nop

0800d6cc <rclc_executor_spin_some.part.0>:
 800d6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6d0:	f100 0614 	add.w	r6, r0, #20
 800d6d4:	b083      	sub	sp, #12
 800d6d6:	4691      	mov	r9, r2
 800d6d8:	4698      	mov	r8, r3
 800d6da:	4605      	mov	r5, r0
 800d6dc:	f7ff ffac 	bl	800d638 <rclc_executor_prepare>
 800d6e0:	4630      	mov	r0, r6
 800d6e2:	f006 fc43 	bl	8013f6c <rcl_wait_set_clear>
 800d6e6:	4607      	mov	r7, r0
 800d6e8:	2800      	cmp	r0, #0
 800d6ea:	f040 80ed 	bne.w	800d8c8 <rclc_executor_spin_some.part.0+0x1fc>
 800d6ee:	68ab      	ldr	r3, [r5, #8]
 800d6f0:	4604      	mov	r4, r0
 800d6f2:	b303      	cbz	r3, 800d736 <rclc_executor_spin_some.part.0+0x6a>
 800d6f4:	6869      	ldr	r1, [r5, #4]
 800d6f6:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800d6fa:	01a2      	lsls	r2, r4, #6
 800d6fc:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800d700:	b1cb      	cbz	r3, 800d736 <rclc_executor_spin_some.part.0+0x6a>
 800d702:	5c8b      	ldrb	r3, [r1, r2]
 800d704:	2b0a      	cmp	r3, #10
 800d706:	f200 80d8 	bhi.w	800d8ba <rclc_executor_spin_some.part.0+0x1ee>
 800d70a:	e8df f003 	tbb	[pc, r3]
 800d70e:	9c9c      	.short	0x9c9c
 800d710:	068c8ca7 	.word	0x068c8ca7
 800d714:	bdc90606 	.word	0xbdc90606
 800d718:	b2          	.byte	0xb2
 800d719:	00          	.byte	0x00
 800d71a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d71e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d722:	4630      	mov	r0, r6
 800d724:	f006 ff6a 	bl	80145fc <rcl_wait_set_add_service>
 800d728:	2800      	cmp	r0, #0
 800d72a:	f040 8086 	bne.w	800d83a <rclc_executor_spin_some.part.0+0x16e>
 800d72e:	68ab      	ldr	r3, [r5, #8]
 800d730:	3401      	adds	r4, #1
 800d732:	429c      	cmp	r4, r3
 800d734:	d3de      	bcc.n	800d6f4 <rclc_executor_spin_some.part.0+0x28>
 800d736:	4643      	mov	r3, r8
 800d738:	464a      	mov	r2, r9
 800d73a:	4630      	mov	r0, r6
 800d73c:	f006 ff8c 	bl	8014658 <rcl_wait>
 800d740:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800d744:	2b00      	cmp	r3, #0
 800d746:	f000 80c7 	beq.w	800d8d8 <rclc_executor_spin_some.part.0+0x20c>
 800d74a:	2b01      	cmp	r3, #1
 800d74c:	f040 80b5 	bne.w	800d8ba <rclc_executor_spin_some.part.0+0x1ee>
 800d750:	68ab      	ldr	r3, [r5, #8]
 800d752:	2b00      	cmp	r3, #0
 800d754:	f000 8159 	beq.w	800da0a <rclc_executor_spin_some.part.0+0x33e>
 800d758:	2400      	movs	r4, #0
 800d75a:	46a0      	mov	r8, r4
 800d75c:	f240 1991 	movw	r9, #401	@ 0x191
 800d760:	e00a      	b.n	800d778 <rclc_executor_spin_some.part.0+0xac>
 800d762:	f7ff fb71 	bl	800ce48 <_rclc_check_for_new_data>
 800d766:	4604      	mov	r4, r0
 800d768:	b110      	cbz	r0, 800d770 <rclc_executor_spin_some.part.0+0xa4>
 800d76a:	4548      	cmp	r0, r9
 800d76c:	f040 80b2 	bne.w	800d8d4 <rclc_executor_spin_some.part.0+0x208>
 800d770:	68ab      	ldr	r3, [r5, #8]
 800d772:	4598      	cmp	r8, r3
 800d774:	f080 8126 	bcs.w	800d9c4 <rclc_executor_spin_some.part.0+0x2f8>
 800d778:	686a      	ldr	r2, [r5, #4]
 800d77a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800d77e:	4631      	mov	r1, r6
 800d780:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800d784:	f108 0801 	add.w	r8, r8, #1
 800d788:	f1bc 0f00 	cmp.w	ip, #0
 800d78c:	d1e9      	bne.n	800d762 <rclc_executor_spin_some.part.0+0x96>
 800d78e:	4619      	mov	r1, r3
 800d790:	4610      	mov	r0, r2
 800d792:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800d796:	4798      	blx	r3
 800d798:	2800      	cmp	r0, #0
 800d79a:	f000 809b 	beq.w	800d8d4 <rclc_executor_spin_some.part.0+0x208>
 800d79e:	68ab      	ldr	r3, [r5, #8]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	f000 8097 	beq.w	800d8d4 <rclc_executor_spin_some.part.0+0x208>
 800d7a6:	f04f 0800 	mov.w	r8, #0
 800d7aa:	f240 1991 	movw	r9, #401	@ 0x191
 800d7ae:	e009      	b.n	800d7c4 <rclc_executor_spin_some.part.0+0xf8>
 800d7b0:	f7ff fb98 	bl	800cee4 <_rclc_take_new_data>
 800d7b4:	4604      	mov	r4, r0
 800d7b6:	b110      	cbz	r0, 800d7be <rclc_executor_spin_some.part.0+0xf2>
 800d7b8:	4548      	cmp	r0, r9
 800d7ba:	f040 808b 	bne.w	800d8d4 <rclc_executor_spin_some.part.0+0x208>
 800d7be:	68ab      	ldr	r3, [r5, #8]
 800d7c0:	4598      	cmp	r8, r3
 800d7c2:	d209      	bcs.n	800d7d8 <rclc_executor_spin_some.part.0+0x10c>
 800d7c4:	6868      	ldr	r0, [r5, #4]
 800d7c6:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800d7ca:	4631      	mov	r1, r6
 800d7cc:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800d7d0:	f108 0801 	add.w	r8, r8, #1
 800d7d4:	2a00      	cmp	r2, #0
 800d7d6:	d1eb      	bne.n	800d7b0 <rclc_executor_spin_some.part.0+0xe4>
 800d7d8:	2600      	movs	r6, #0
 800d7da:	b97b      	cbnz	r3, 800d7fc <rclc_executor_spin_some.part.0+0x130>
 800d7dc:	e07a      	b.n	800d8d4 <rclc_executor_spin_some.part.0+0x208>
 800d7de:	f812 200c 	ldrb.w	r2, [r2, ip]
 800d7e2:	2a08      	cmp	r2, #8
 800d7e4:	f000 80fd 	beq.w	800d9e2 <rclc_executor_spin_some.part.0+0x316>
 800d7e8:	2a09      	cmp	r2, #9
 800d7ea:	f000 80ef 	beq.w	800d9cc <rclc_executor_spin_some.part.0+0x300>
 800d7ee:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800d7f2:	b98a      	cbnz	r2, 800d818 <rclc_executor_spin_some.part.0+0x14c>
 800d7f4:	3601      	adds	r6, #1
 800d7f6:	429e      	cmp	r6, r3
 800d7f8:	d262      	bcs.n	800d8c0 <rclc_executor_spin_some.part.0+0x1f4>
 800d7fa:	2400      	movs	r4, #0
 800d7fc:	686a      	ldr	r2, [r5, #4]
 800d7fe:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800d802:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800d806:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800d80a:	2900      	cmp	r1, #0
 800d80c:	d062      	beq.n	800d8d4 <rclc_executor_spin_some.part.0+0x208>
 800d80e:	7841      	ldrb	r1, [r0, #1]
 800d810:	2900      	cmp	r1, #0
 800d812:	d0e4      	beq.n	800d7de <rclc_executor_spin_some.part.0+0x112>
 800d814:	2901      	cmp	r1, #1
 800d816:	d1ed      	bne.n	800d7f4 <rclc_executor_spin_some.part.0+0x128>
 800d818:	f7ff fcd8 	bl	800d1cc <_rclc_execute.part.0>
 800d81c:	2800      	cmp	r0, #0
 800d81e:	f040 80b6 	bne.w	800d98e <rclc_executor_spin_some.part.0+0x2c2>
 800d822:	68ab      	ldr	r3, [r5, #8]
 800d824:	e7e6      	b.n	800d7f4 <rclc_executor_spin_some.part.0+0x128>
 800d826:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d82a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d82e:	4630      	mov	r0, r6
 800d830:	f006 feb8 	bl	80145a4 <rcl_wait_set_add_client>
 800d834:	2800      	cmp	r0, #0
 800d836:	f43f af7a 	beq.w	800d72e <rclc_executor_spin_some.part.0+0x62>
 800d83a:	9001      	str	r0, [sp, #4]
 800d83c:	f000 fa74 	bl	800dd28 <rcutils_reset_error>
 800d840:	9801      	ldr	r0, [sp, #4]
 800d842:	4607      	mov	r7, r0
 800d844:	e03c      	b.n	800d8c0 <rclc_executor_spin_some.part.0+0x1f4>
 800d846:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d84a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d84e:	4630      	mov	r0, r6
 800d850:	f006 fb60 	bl	8013f14 <rcl_wait_set_add_subscription>
 800d854:	2800      	cmp	r0, #0
 800d856:	f43f af6a 	beq.w	800d72e <rclc_executor_spin_some.part.0+0x62>
 800d85a:	e7ee      	b.n	800d83a <rclc_executor_spin_some.part.0+0x16e>
 800d85c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d860:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d864:	4630      	mov	r0, r6
 800d866:	f006 fe6d 	bl	8014544 <rcl_wait_set_add_timer>
 800d86a:	2800      	cmp	r0, #0
 800d86c:	f43f af5f 	beq.w	800d72e <rclc_executor_spin_some.part.0+0x62>
 800d870:	e7e3      	b.n	800d83a <rclc_executor_spin_some.part.0+0x16e>
 800d872:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d876:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d87a:	4630      	mov	r0, r6
 800d87c:	f006 fe36 	bl	80144ec <rcl_wait_set_add_guard_condition>
 800d880:	2800      	cmp	r0, #0
 800d882:	f43f af54 	beq.w	800d72e <rclc_executor_spin_some.part.0+0x62>
 800d886:	e7d8      	b.n	800d83a <rclc_executor_spin_some.part.0+0x16e>
 800d888:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d88c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d890:	3110      	adds	r1, #16
 800d892:	4630      	mov	r0, r6
 800d894:	f007 fbb6 	bl	8015004 <rcl_action_wait_set_add_action_server>
 800d898:	2800      	cmp	r0, #0
 800d89a:	f43f af48 	beq.w	800d72e <rclc_executor_spin_some.part.0+0x62>
 800d89e:	e7cc      	b.n	800d83a <rclc_executor_spin_some.part.0+0x16e>
 800d8a0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d8a4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d8a8:	3110      	adds	r1, #16
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	4630      	mov	r0, r6
 800d8ae:	f007 f983 	bl	8014bb8 <rcl_action_wait_set_add_action_client>
 800d8b2:	2800      	cmp	r0, #0
 800d8b4:	f43f af3b 	beq.w	800d72e <rclc_executor_spin_some.part.0+0x62>
 800d8b8:	e7bf      	b.n	800d83a <rclc_executor_spin_some.part.0+0x16e>
 800d8ba:	f000 fa35 	bl	800dd28 <rcutils_reset_error>
 800d8be:	2701      	movs	r7, #1
 800d8c0:	4638      	mov	r0, r7
 800d8c2:	b003      	add	sp, #12
 800d8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8c8:	f000 fa2e 	bl	800dd28 <rcutils_reset_error>
 800d8cc:	4638      	mov	r0, r7
 800d8ce:	b003      	add	sp, #12
 800d8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8d4:	4627      	mov	r7, r4
 800d8d6:	e7f3      	b.n	800d8c0 <rclc_executor_spin_some.part.0+0x1f4>
 800d8d8:	68ab      	ldr	r3, [r5, #8]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	f000 8092 	beq.w	800da04 <rclc_executor_spin_some.part.0+0x338>
 800d8e0:	2400      	movs	r4, #0
 800d8e2:	46a0      	mov	r8, r4
 800d8e4:	f240 1991 	movw	r9, #401	@ 0x191
 800d8e8:	e008      	b.n	800d8fc <rclc_executor_spin_some.part.0+0x230>
 800d8ea:	f7ff faad 	bl	800ce48 <_rclc_check_for_new_data>
 800d8ee:	4604      	mov	r4, r0
 800d8f0:	b108      	cbz	r0, 800d8f6 <rclc_executor_spin_some.part.0+0x22a>
 800d8f2:	4548      	cmp	r0, r9
 800d8f4:	d1ee      	bne.n	800d8d4 <rclc_executor_spin_some.part.0+0x208>
 800d8f6:	68ab      	ldr	r3, [r5, #8]
 800d8f8:	4598      	cmp	r8, r3
 800d8fa:	d265      	bcs.n	800d9c8 <rclc_executor_spin_some.part.0+0x2fc>
 800d8fc:	686a      	ldr	r2, [r5, #4]
 800d8fe:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800d902:	4631      	mov	r1, r6
 800d904:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800d908:	f108 0801 	add.w	r8, r8, #1
 800d90c:	f1bc 0f00 	cmp.w	ip, #0
 800d910:	d1eb      	bne.n	800d8ea <rclc_executor_spin_some.part.0+0x21e>
 800d912:	4619      	mov	r1, r3
 800d914:	4610      	mov	r0, r2
 800d916:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800d91a:	4798      	blx	r3
 800d91c:	2800      	cmp	r0, #0
 800d91e:	d0d9      	beq.n	800d8d4 <rclc_executor_spin_some.part.0+0x208>
 800d920:	68ab      	ldr	r3, [r5, #8]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d0d6      	beq.n	800d8d4 <rclc_executor_spin_some.part.0+0x208>
 800d926:	f04f 0800 	mov.w	r8, #0
 800d92a:	f240 1991 	movw	r9, #401	@ 0x191
 800d92e:	f240 2a59 	movw	sl, #601	@ 0x259
 800d932:	e00e      	b.n	800d952 <rclc_executor_spin_some.part.0+0x286>
 800d934:	f813 300b 	ldrb.w	r3, [r3, fp]
 800d938:	2b08      	cmp	r3, #8
 800d93a:	d033      	beq.n	800d9a4 <rclc_executor_spin_some.part.0+0x2d8>
 800d93c:	2b09      	cmp	r3, #9
 800d93e:	d028      	beq.n	800d992 <rclc_executor_spin_some.part.0+0x2c6>
 800d940:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800d944:	b9fb      	cbnz	r3, 800d986 <rclc_executor_spin_some.part.0+0x2ba>
 800d946:	68ab      	ldr	r3, [r5, #8]
 800d948:	f108 0801 	add.w	r8, r8, #1
 800d94c:	4598      	cmp	r8, r3
 800d94e:	d2b7      	bcs.n	800d8c0 <rclc_executor_spin_some.part.0+0x1f4>
 800d950:	2400      	movs	r4, #0
 800d952:	6868      	ldr	r0, [r5, #4]
 800d954:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800d958:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800d95c:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800d960:	2b00      	cmp	r3, #0
 800d962:	d0b7      	beq.n	800d8d4 <rclc_executor_spin_some.part.0+0x208>
 800d964:	4631      	mov	r1, r6
 800d966:	f7ff fabd 	bl	800cee4 <_rclc_take_new_data>
 800d96a:	b118      	cbz	r0, 800d974 <rclc_executor_spin_some.part.0+0x2a8>
 800d96c:	4548      	cmp	r0, r9
 800d96e:	d001      	beq.n	800d974 <rclc_executor_spin_some.part.0+0x2a8>
 800d970:	4550      	cmp	r0, sl
 800d972:	d10c      	bne.n	800d98e <rclc_executor_spin_some.part.0+0x2c2>
 800d974:	686b      	ldr	r3, [r5, #4]
 800d976:	eb13 000b 	adds.w	r0, r3, fp
 800d97a:	d021      	beq.n	800d9c0 <rclc_executor_spin_some.part.0+0x2f4>
 800d97c:	7842      	ldrb	r2, [r0, #1]
 800d97e:	2a00      	cmp	r2, #0
 800d980:	d0d8      	beq.n	800d934 <rclc_executor_spin_some.part.0+0x268>
 800d982:	2a01      	cmp	r2, #1
 800d984:	d1df      	bne.n	800d946 <rclc_executor_spin_some.part.0+0x27a>
 800d986:	f7ff fc21 	bl	800d1cc <_rclc_execute.part.0>
 800d98a:	2800      	cmp	r0, #0
 800d98c:	d0db      	beq.n	800d946 <rclc_executor_spin_some.part.0+0x27a>
 800d98e:	4607      	mov	r7, r0
 800d990:	e796      	b.n	800d8c0 <rclc_executor_spin_some.part.0+0x1f4>
 800d992:	6843      	ldr	r3, [r0, #4]
 800d994:	6a1a      	ldr	r2, [r3, #32]
 800d996:	2a00      	cmp	r2, #0
 800d998:	d1f5      	bne.n	800d986 <rclc_executor_spin_some.part.0+0x2ba>
 800d99a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d0d1      	beq.n	800d946 <rclc_executor_spin_some.part.0+0x27a>
 800d9a2:	e7f0      	b.n	800d986 <rclc_executor_spin_some.part.0+0x2ba>
 800d9a4:	6843      	ldr	r3, [r0, #4]
 800d9a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d9a8:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800d9ac:	d1eb      	bne.n	800d986 <rclc_executor_spin_some.part.0+0x2ba>
 800d9ae:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800d9b2:	2a00      	cmp	r2, #0
 800d9b4:	d1e7      	bne.n	800d986 <rclc_executor_spin_some.part.0+0x2ba>
 800d9b6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d0c3      	beq.n	800d946 <rclc_executor_spin_some.part.0+0x27a>
 800d9be:	e7e2      	b.n	800d986 <rclc_executor_spin_some.part.0+0x2ba>
 800d9c0:	270b      	movs	r7, #11
 800d9c2:	e77d      	b.n	800d8c0 <rclc_executor_spin_some.part.0+0x1f4>
 800d9c4:	686a      	ldr	r2, [r5, #4]
 800d9c6:	e6e2      	b.n	800d78e <rclc_executor_spin_some.part.0+0xc2>
 800d9c8:	686a      	ldr	r2, [r5, #4]
 800d9ca:	e7a2      	b.n	800d912 <rclc_executor_spin_some.part.0+0x246>
 800d9cc:	6842      	ldr	r2, [r0, #4]
 800d9ce:	6a11      	ldr	r1, [r2, #32]
 800d9d0:	2900      	cmp	r1, #0
 800d9d2:	f47f af21 	bne.w	800d818 <rclc_executor_spin_some.part.0+0x14c>
 800d9d6:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800d9da:	2a00      	cmp	r2, #0
 800d9dc:	f43f af0a 	beq.w	800d7f4 <rclc_executor_spin_some.part.0+0x128>
 800d9e0:	e71a      	b.n	800d818 <rclc_executor_spin_some.part.0+0x14c>
 800d9e2:	6842      	ldr	r2, [r0, #4]
 800d9e4:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800d9e6:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800d9ea:	f47f af15 	bne.w	800d818 <rclc_executor_spin_some.part.0+0x14c>
 800d9ee:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800d9f2:	2900      	cmp	r1, #0
 800d9f4:	f47f af10 	bne.w	800d818 <rclc_executor_spin_some.part.0+0x14c>
 800d9f8:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800d9fc:	2a00      	cmp	r2, #0
 800d9fe:	f43f aef9 	beq.w	800d7f4 <rclc_executor_spin_some.part.0+0x128>
 800da02:	e709      	b.n	800d818 <rclc_executor_spin_some.part.0+0x14c>
 800da04:	686a      	ldr	r2, [r5, #4]
 800da06:	461c      	mov	r4, r3
 800da08:	e783      	b.n	800d912 <rclc_executor_spin_some.part.0+0x246>
 800da0a:	686a      	ldr	r2, [r5, #4]
 800da0c:	461c      	mov	r4, r3
 800da0e:	e6be      	b.n	800d78e <rclc_executor_spin_some.part.0+0xc2>

0800da10 <rclc_executor_spin_some>:
 800da10:	b190      	cbz	r0, 800da38 <rclc_executor_spin_some+0x28>
 800da12:	b570      	push	{r4, r5, r6, lr}
 800da14:	4604      	mov	r4, r0
 800da16:	6800      	ldr	r0, [r0, #0]
 800da18:	4616      	mov	r6, r2
 800da1a:	461d      	mov	r5, r3
 800da1c:	f005 f834 	bl	8012a88 <rcl_context_is_valid>
 800da20:	b130      	cbz	r0, 800da30 <rclc_executor_spin_some+0x20>
 800da22:	4632      	mov	r2, r6
 800da24:	462b      	mov	r3, r5
 800da26:	4620      	mov	r0, r4
 800da28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800da2c:	f7ff be4e 	b.w	800d6cc <rclc_executor_spin_some.part.0>
 800da30:	f000 f97a 	bl	800dd28 <rcutils_reset_error>
 800da34:	2001      	movs	r0, #1
 800da36:	bd70      	pop	{r4, r5, r6, pc}
 800da38:	200b      	movs	r0, #11
 800da3a:	4770      	bx	lr

0800da3c <rclc_executor_handle_counters_zero_init>:
 800da3c:	b130      	cbz	r0, 800da4c <rclc_executor_handle_counters_zero_init+0x10>
 800da3e:	b508      	push	{r3, lr}
 800da40:	2220      	movs	r2, #32
 800da42:	2100      	movs	r1, #0
 800da44:	f00d f9b4 	bl	801adb0 <memset>
 800da48:	2000      	movs	r0, #0
 800da4a:	bd08      	pop	{r3, pc}
 800da4c:	200b      	movs	r0, #11
 800da4e:	4770      	bx	lr

0800da50 <rclc_executor_handle_init>:
 800da50:	b168      	cbz	r0, 800da6e <rclc_executor_handle_init+0x1e>
 800da52:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800da78 <rclc_executor_handle_init+0x28>
 800da56:	2300      	movs	r3, #0
 800da58:	220b      	movs	r2, #11
 800da5a:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800da5e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800da62:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800da66:	8002      	strh	r2, [r0, #0]
 800da68:	8703      	strh	r3, [r0, #56]	@ 0x38
 800da6a:	4618      	mov	r0, r3
 800da6c:	4770      	bx	lr
 800da6e:	200b      	movs	r0, #11
 800da70:	4770      	bx	lr
 800da72:	bf00      	nop
 800da74:	f3af 8000 	nop.w
	...

0800da80 <rclc_support_init>:
 800da80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da84:	b086      	sub	sp, #24
 800da86:	b3b8      	cbz	r0, 800daf8 <rclc_support_init+0x78>
 800da88:	461c      	mov	r4, r3
 800da8a:	b3ab      	cbz	r3, 800daf8 <rclc_support_init+0x78>
 800da8c:	460f      	mov	r7, r1
 800da8e:	4690      	mov	r8, r2
 800da90:	4606      	mov	r6, r0
 800da92:	f005 f963 	bl	8012d5c <rcl_get_zero_initialized_init_options>
 800da96:	f104 030c 	add.w	r3, r4, #12
 800da9a:	9005      	str	r0, [sp, #20]
 800da9c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800daa0:	e88d 0003 	stmia.w	sp, {r0, r1}
 800daa4:	a805      	add	r0, sp, #20
 800daa6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800daaa:	f005 f959 	bl	8012d60 <rcl_init_options_init>
 800daae:	4605      	mov	r5, r0
 800dab0:	b9e0      	cbnz	r0, 800daec <rclc_support_init+0x6c>
 800dab2:	ad02      	add	r5, sp, #8
 800dab4:	4628      	mov	r0, r5
 800dab6:	f004 ffdd 	bl	8012a74 <rcl_get_zero_initialized_context>
 800daba:	e895 0003 	ldmia.w	r5, {r0, r1}
 800dabe:	4633      	mov	r3, r6
 800dac0:	e886 0003 	stmia.w	r6, {r0, r1}
 800dac4:	aa05      	add	r2, sp, #20
 800dac6:	4641      	mov	r1, r8
 800dac8:	4638      	mov	r0, r7
 800daca:	f005 f843 	bl	8012b54 <rcl_init>
 800dace:	4605      	mov	r5, r0
 800dad0:	b9b8      	cbnz	r0, 800db02 <rclc_support_init+0x82>
 800dad2:	60b4      	str	r4, [r6, #8]
 800dad4:	4622      	mov	r2, r4
 800dad6:	f106 010c 	add.w	r1, r6, #12
 800dada:	2003      	movs	r0, #3
 800dadc:	f005 ff6a 	bl	80139b4 <rcl_clock_init>
 800dae0:	4605      	mov	r5, r0
 800dae2:	b970      	cbnz	r0, 800db02 <rclc_support_init+0x82>
 800dae4:	a805      	add	r0, sp, #20
 800dae6:	f005 f9a1 	bl	8012e2c <rcl_init_options_fini>
 800daea:	b108      	cbz	r0, 800daf0 <rclc_support_init+0x70>
 800daec:	f000 f91c 	bl	800dd28 <rcutils_reset_error>
 800daf0:	4628      	mov	r0, r5
 800daf2:	b006      	add	sp, #24
 800daf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daf8:	250b      	movs	r5, #11
 800dafa:	4628      	mov	r0, r5
 800dafc:	b006      	add	sp, #24
 800dafe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db02:	f000 f911 	bl	800dd28 <rcutils_reset_error>
 800db06:	a805      	add	r0, sp, #20
 800db08:	f005 f990 	bl	8012e2c <rcl_init_options_fini>
 800db0c:	2800      	cmp	r0, #0
 800db0e:	d0ef      	beq.n	800daf0 <rclc_support_init+0x70>
 800db10:	e7ec      	b.n	800daec <rclc_support_init+0x6c>
 800db12:	bf00      	nop

0800db14 <rclc_node_init_default>:
 800db14:	b3b8      	cbz	r0, 800db86 <rclc_node_init_default+0x72>
 800db16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db1a:	460d      	mov	r5, r1
 800db1c:	b0a1      	sub	sp, #132	@ 0x84
 800db1e:	b329      	cbz	r1, 800db6c <rclc_node_init_default+0x58>
 800db20:	4616      	mov	r6, r2
 800db22:	b31a      	cbz	r2, 800db6c <rclc_node_init_default+0x58>
 800db24:	461f      	mov	r7, r3
 800db26:	b30b      	cbz	r3, 800db6c <rclc_node_init_default+0x58>
 800db28:	f10d 0810 	add.w	r8, sp, #16
 800db2c:	4604      	mov	r4, r0
 800db2e:	4640      	mov	r0, r8
 800db30:	f005 fa34 	bl	8012f9c <rcl_get_zero_initialized_node>
 800db34:	e898 0003 	ldmia.w	r8, {r0, r1}
 800db38:	f10d 0918 	add.w	r9, sp, #24
 800db3c:	e884 0003 	stmia.w	r4, {r0, r1}
 800db40:	4648      	mov	r0, r9
 800db42:	f005 fba3 	bl	801328c <rcl_node_get_default_options>
 800db46:	4640      	mov	r0, r8
 800db48:	f005 fa28 	bl	8012f9c <rcl_get_zero_initialized_node>
 800db4c:	f8cd 9000 	str.w	r9, [sp]
 800db50:	e898 0003 	ldmia.w	r8, {r0, r1}
 800db54:	463b      	mov	r3, r7
 800db56:	e884 0003 	stmia.w	r4, {r0, r1}
 800db5a:	4632      	mov	r2, r6
 800db5c:	4629      	mov	r1, r5
 800db5e:	4620      	mov	r0, r4
 800db60:	f005 fa26 	bl	8012fb0 <rcl_node_init>
 800db64:	b930      	cbnz	r0, 800db74 <rclc_node_init_default+0x60>
 800db66:	b021      	add	sp, #132	@ 0x84
 800db68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db6c:	200b      	movs	r0, #11
 800db6e:	b021      	add	sp, #132	@ 0x84
 800db70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db74:	9003      	str	r0, [sp, #12]
 800db76:	f000 f8d7 	bl	800dd28 <rcutils_reset_error>
 800db7a:	f000 f8d5 	bl	800dd28 <rcutils_reset_error>
 800db7e:	9803      	ldr	r0, [sp, #12]
 800db80:	b021      	add	sp, #132	@ 0x84
 800db82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db86:	200b      	movs	r0, #11
 800db88:	4770      	bx	lr
 800db8a:	bf00      	nop

0800db8c <rclc_publisher_init_default>:
 800db8c:	b368      	cbz	r0, 800dbea <rclc_publisher_init_default+0x5e>
 800db8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db92:	460d      	mov	r5, r1
 800db94:	b0a0      	sub	sp, #128	@ 0x80
 800db96:	b321      	cbz	r1, 800dbe2 <rclc_publisher_init_default+0x56>
 800db98:	4616      	mov	r6, r2
 800db9a:	b312      	cbz	r2, 800dbe2 <rclc_publisher_init_default+0x56>
 800db9c:	461f      	mov	r7, r3
 800db9e:	b303      	cbz	r3, 800dbe2 <rclc_publisher_init_default+0x56>
 800dba0:	4604      	mov	r4, r0
 800dba2:	f7ff f841 	bl	800cc28 <rcl_get_zero_initialized_publisher>
 800dba6:	f10d 0810 	add.w	r8, sp, #16
 800dbaa:	6020      	str	r0, [r4, #0]
 800dbac:	4640      	mov	r0, r8
 800dbae:	f7ff f8d7 	bl	800cd60 <rcl_publisher_get_default_options>
 800dbb2:	490f      	ldr	r1, [pc, #60]	@ (800dbf0 <rclc_publisher_init_default+0x64>)
 800dbb4:	2250      	movs	r2, #80	@ 0x50
 800dbb6:	4640      	mov	r0, r8
 800dbb8:	f00d fa1d 	bl	801aff6 <memcpy>
 800dbbc:	f8cd 8000 	str.w	r8, [sp]
 800dbc0:	463b      	mov	r3, r7
 800dbc2:	4632      	mov	r2, r6
 800dbc4:	4629      	mov	r1, r5
 800dbc6:	4620      	mov	r0, r4
 800dbc8:	f7ff f834 	bl	800cc34 <rcl_publisher_init>
 800dbcc:	b910      	cbnz	r0, 800dbd4 <rclc_publisher_init_default+0x48>
 800dbce:	b020      	add	sp, #128	@ 0x80
 800dbd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbd4:	9003      	str	r0, [sp, #12]
 800dbd6:	f000 f8a7 	bl	800dd28 <rcutils_reset_error>
 800dbda:	9803      	ldr	r0, [sp, #12]
 800dbdc:	b020      	add	sp, #128	@ 0x80
 800dbde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbe2:	200b      	movs	r0, #11
 800dbe4:	b020      	add	sp, #128	@ 0x80
 800dbe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbea:	200b      	movs	r0, #11
 800dbec:	4770      	bx	lr
 800dbee:	bf00      	nop
 800dbf0:	0801fe60 	.word	0x0801fe60

0800dbf4 <rclc_subscription_init_best_effort>:
 800dbf4:	b368      	cbz	r0, 800dc52 <rclc_subscription_init_best_effort+0x5e>
 800dbf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbfa:	460d      	mov	r5, r1
 800dbfc:	b0a0      	sub	sp, #128	@ 0x80
 800dbfe:	b321      	cbz	r1, 800dc4a <rclc_subscription_init_best_effort+0x56>
 800dc00:	4616      	mov	r6, r2
 800dc02:	b312      	cbz	r2, 800dc4a <rclc_subscription_init_best_effort+0x56>
 800dc04:	461f      	mov	r7, r3
 800dc06:	b303      	cbz	r3, 800dc4a <rclc_subscription_init_best_effort+0x56>
 800dc08:	4604      	mov	r4, r0
 800dc0a:	f005 fd77 	bl	80136fc <rcl_get_zero_initialized_subscription>
 800dc0e:	f10d 0810 	add.w	r8, sp, #16
 800dc12:	6020      	str	r0, [r4, #0]
 800dc14:	4640      	mov	r0, r8
 800dc16:	f005 fe1f 	bl	8013858 <rcl_subscription_get_default_options>
 800dc1a:	490f      	ldr	r1, [pc, #60]	@ (800dc58 <rclc_subscription_init_best_effort+0x64>)
 800dc1c:	2250      	movs	r2, #80	@ 0x50
 800dc1e:	4640      	mov	r0, r8
 800dc20:	f00d f9e9 	bl	801aff6 <memcpy>
 800dc24:	f8cd 8000 	str.w	r8, [sp]
 800dc28:	463b      	mov	r3, r7
 800dc2a:	4632      	mov	r2, r6
 800dc2c:	4629      	mov	r1, r5
 800dc2e:	4620      	mov	r0, r4
 800dc30:	f005 fd6a 	bl	8013708 <rcl_subscription_init>
 800dc34:	b910      	cbnz	r0, 800dc3c <rclc_subscription_init_best_effort+0x48>
 800dc36:	b020      	add	sp, #128	@ 0x80
 800dc38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc3c:	9003      	str	r0, [sp, #12]
 800dc3e:	f000 f873 	bl	800dd28 <rcutils_reset_error>
 800dc42:	9803      	ldr	r0, [sp, #12]
 800dc44:	b020      	add	sp, #128	@ 0x80
 800dc46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc4a:	200b      	movs	r0, #11
 800dc4c:	b020      	add	sp, #128	@ 0x80
 800dc4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc52:	200b      	movs	r0, #11
 800dc54:	4770      	bx	lr
 800dc56:	bf00      	nop
 800dc58:	0801feb0 	.word	0x0801feb0

0800dc5c <__default_zero_allocate>:
 800dc5c:	f00b bd04 	b.w	8019668 <calloc>

0800dc60 <__default_reallocate>:
 800dc60:	f00b bea2 	b.w	80199a8 <realloc>

0800dc64 <__default_deallocate>:
 800dc64:	f00b bd7e 	b.w	8019764 <free>

0800dc68 <__default_allocate>:
 800dc68:	f00b bd74 	b.w	8019754 <malloc>

0800dc6c <rcutils_get_zero_initialized_allocator>:
 800dc6c:	b510      	push	{r4, lr}
 800dc6e:	4c05      	ldr	r4, [pc, #20]	@ (800dc84 <rcutils_get_zero_initialized_allocator+0x18>)
 800dc70:	4686      	mov	lr, r0
 800dc72:	4684      	mov	ip, r0
 800dc74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dc76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dc7a:	6823      	ldr	r3, [r4, #0]
 800dc7c:	f8cc 3000 	str.w	r3, [ip]
 800dc80:	4670      	mov	r0, lr
 800dc82:	bd10      	pop	{r4, pc}
 800dc84:	0801ff00 	.word	0x0801ff00

0800dc88 <rcutils_set_default_allocator>:
 800dc88:	b1a8      	cbz	r0, 800dcb6 <rcutils_set_default_allocator+0x2e>
 800dc8a:	6802      	ldr	r2, [r0, #0]
 800dc8c:	b1a2      	cbz	r2, 800dcb8 <rcutils_set_default_allocator+0x30>
 800dc8e:	6841      	ldr	r1, [r0, #4]
 800dc90:	b1a1      	cbz	r1, 800dcbc <rcutils_set_default_allocator+0x34>
 800dc92:	b410      	push	{r4}
 800dc94:	68c4      	ldr	r4, [r0, #12]
 800dc96:	b164      	cbz	r4, 800dcb2 <rcutils_set_default_allocator+0x2a>
 800dc98:	6880      	ldr	r0, [r0, #8]
 800dc9a:	b138      	cbz	r0, 800dcac <rcutils_set_default_allocator+0x24>
 800dc9c:	4b08      	ldr	r3, [pc, #32]	@ (800dcc0 <rcutils_set_default_allocator+0x38>)
 800dc9e:	601a      	str	r2, [r3, #0]
 800dca0:	2200      	movs	r2, #0
 800dca2:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800dca6:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800dcaa:	2001      	movs	r0, #1
 800dcac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcb0:	4770      	bx	lr
 800dcb2:	4620      	mov	r0, r4
 800dcb4:	e7fa      	b.n	800dcac <rcutils_set_default_allocator+0x24>
 800dcb6:	4770      	bx	lr
 800dcb8:	4610      	mov	r0, r2
 800dcba:	4770      	bx	lr
 800dcbc:	4608      	mov	r0, r1
 800dcbe:	4770      	bx	lr
 800dcc0:	2000001c 	.word	0x2000001c

0800dcc4 <rcutils_get_default_allocator>:
 800dcc4:	b510      	push	{r4, lr}
 800dcc6:	4c05      	ldr	r4, [pc, #20]	@ (800dcdc <rcutils_get_default_allocator+0x18>)
 800dcc8:	4686      	mov	lr, r0
 800dcca:	4684      	mov	ip, r0
 800dccc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dcce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dcd2:	6823      	ldr	r3, [r4, #0]
 800dcd4:	f8cc 3000 	str.w	r3, [ip]
 800dcd8:	4670      	mov	r0, lr
 800dcda:	bd10      	pop	{r4, pc}
 800dcdc:	2000001c 	.word	0x2000001c

0800dce0 <rcutils_allocator_is_valid>:
 800dce0:	b158      	cbz	r0, 800dcfa <rcutils_allocator_is_valid+0x1a>
 800dce2:	6803      	ldr	r3, [r0, #0]
 800dce4:	b143      	cbz	r3, 800dcf8 <rcutils_allocator_is_valid+0x18>
 800dce6:	6843      	ldr	r3, [r0, #4]
 800dce8:	b133      	cbz	r3, 800dcf8 <rcutils_allocator_is_valid+0x18>
 800dcea:	68c3      	ldr	r3, [r0, #12]
 800dcec:	b123      	cbz	r3, 800dcf8 <rcutils_allocator_is_valid+0x18>
 800dcee:	6880      	ldr	r0, [r0, #8]
 800dcf0:	3800      	subs	r0, #0
 800dcf2:	bf18      	it	ne
 800dcf4:	2001      	movne	r0, #1
 800dcf6:	4770      	bx	lr
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	4770      	bx	lr

0800dcfc <rcutils_get_error_string>:
 800dcfc:	4b06      	ldr	r3, [pc, #24]	@ (800dd18 <rcutils_get_error_string+0x1c>)
 800dcfe:	781b      	ldrb	r3, [r3, #0]
 800dd00:	b13b      	cbz	r3, 800dd12 <rcutils_get_error_string+0x16>
 800dd02:	4b06      	ldr	r3, [pc, #24]	@ (800dd1c <rcutils_get_error_string+0x20>)
 800dd04:	781a      	ldrb	r2, [r3, #0]
 800dd06:	b90a      	cbnz	r2, 800dd0c <rcutils_get_error_string+0x10>
 800dd08:	2201      	movs	r2, #1
 800dd0a:	701a      	strb	r2, [r3, #0]
 800dd0c:	4b04      	ldr	r3, [pc, #16]	@ (800dd20 <rcutils_get_error_string+0x24>)
 800dd0e:	7818      	ldrb	r0, [r3, #0]
 800dd10:	4770      	bx	lr
 800dd12:	4b04      	ldr	r3, [pc, #16]	@ (800dd24 <rcutils_get_error_string+0x28>)
 800dd14:	7818      	ldrb	r0, [r3, #0]
 800dd16:	4770      	bx	lr
 800dd18:	2000d178 	.word	0x2000d178
 800dd1c:	2000d191 	.word	0x2000d191
 800dd20:	2000d190 	.word	0x2000d190
 800dd24:	0801ff14 	.word	0x0801ff14

0800dd28 <rcutils_reset_error>:
 800dd28:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800dd48 <rcutils_reset_error+0x20>
 800dd2c:	4a08      	ldr	r2, [pc, #32]	@ (800dd50 <rcutils_reset_error+0x28>)
 800dd2e:	4809      	ldr	r0, [pc, #36]	@ (800dd54 <rcutils_reset_error+0x2c>)
 800dd30:	4909      	ldr	r1, [pc, #36]	@ (800dd58 <rcutils_reset_error+0x30>)
 800dd32:	2300      	movs	r3, #0
 800dd34:	8013      	strh	r3, [r2, #0]
 800dd36:	ed82 7b02 	vstr	d7, [r2, #8]
 800dd3a:	4a08      	ldr	r2, [pc, #32]	@ (800dd5c <rcutils_reset_error+0x34>)
 800dd3c:	7003      	strb	r3, [r0, #0]
 800dd3e:	700b      	strb	r3, [r1, #0]
 800dd40:	7013      	strb	r3, [r2, #0]
 800dd42:	4770      	bx	lr
 800dd44:	f3af 8000 	nop.w
	...
 800dd50:	2000d180 	.word	0x2000d180
 800dd54:	2000d191 	.word	0x2000d191
 800dd58:	2000d190 	.word	0x2000d190
 800dd5c:	2000d178 	.word	0x2000d178

0800dd60 <rcutils_system_time_now>:
 800dd60:	b308      	cbz	r0, 800dda6 <rcutils_system_time_now+0x46>
 800dd62:	b570      	push	{r4, r5, r6, lr}
 800dd64:	b084      	sub	sp, #16
 800dd66:	4604      	mov	r4, r0
 800dd68:	4669      	mov	r1, sp
 800dd6a:	2001      	movs	r0, #1
 800dd6c:	f7f7 f868 	bl	8004e40 <clock_gettime>
 800dd70:	e9dd 3500 	ldrd	r3, r5, [sp]
 800dd74:	2d00      	cmp	r5, #0
 800dd76:	db13      	blt.n	800dda0 <rcutils_system_time_now+0x40>
 800dd78:	9902      	ldr	r1, [sp, #8]
 800dd7a:	2900      	cmp	r1, #0
 800dd7c:	db0d      	blt.n	800dd9a <rcutils_system_time_now+0x3a>
 800dd7e:	4e0b      	ldr	r6, [pc, #44]	@ (800ddac <rcutils_system_time_now+0x4c>)
 800dd80:	fba3 3206 	umull	r3, r2, r3, r6
 800dd84:	185b      	adds	r3, r3, r1
 800dd86:	fb06 2205 	mla	r2, r6, r5, r2
 800dd8a:	f04f 0000 	mov.w	r0, #0
 800dd8e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800dd92:	e9c4 3200 	strd	r3, r2, [r4]
 800dd96:	b004      	add	sp, #16
 800dd98:	bd70      	pop	{r4, r5, r6, pc}
 800dd9a:	ea53 0205 	orrs.w	r2, r3, r5
 800dd9e:	d1ee      	bne.n	800dd7e <rcutils_system_time_now+0x1e>
 800dda0:	2002      	movs	r0, #2
 800dda2:	b004      	add	sp, #16
 800dda4:	bd70      	pop	{r4, r5, r6, pc}
 800dda6:	200b      	movs	r0, #11
 800dda8:	4770      	bx	lr
 800ddaa:	bf00      	nop
 800ddac:	3b9aca00 	.word	0x3b9aca00

0800ddb0 <rcutils_steady_time_now>:
 800ddb0:	b308      	cbz	r0, 800ddf6 <rcutils_steady_time_now+0x46>
 800ddb2:	b570      	push	{r4, r5, r6, lr}
 800ddb4:	b084      	sub	sp, #16
 800ddb6:	4604      	mov	r4, r0
 800ddb8:	4669      	mov	r1, sp
 800ddba:	2000      	movs	r0, #0
 800ddbc:	f7f7 f840 	bl	8004e40 <clock_gettime>
 800ddc0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800ddc4:	2d00      	cmp	r5, #0
 800ddc6:	db13      	blt.n	800ddf0 <rcutils_steady_time_now+0x40>
 800ddc8:	9902      	ldr	r1, [sp, #8]
 800ddca:	2900      	cmp	r1, #0
 800ddcc:	db0d      	blt.n	800ddea <rcutils_steady_time_now+0x3a>
 800ddce:	4e0b      	ldr	r6, [pc, #44]	@ (800ddfc <rcutils_steady_time_now+0x4c>)
 800ddd0:	fba3 3206 	umull	r3, r2, r3, r6
 800ddd4:	185b      	adds	r3, r3, r1
 800ddd6:	fb06 2205 	mla	r2, r6, r5, r2
 800ddda:	f04f 0000 	mov.w	r0, #0
 800ddde:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800dde2:	e9c4 3200 	strd	r3, r2, [r4]
 800dde6:	b004      	add	sp, #16
 800dde8:	bd70      	pop	{r4, r5, r6, pc}
 800ddea:	ea53 0205 	orrs.w	r2, r3, r5
 800ddee:	d1ee      	bne.n	800ddce <rcutils_steady_time_now+0x1e>
 800ddf0:	2002      	movs	r0, #2
 800ddf2:	b004      	add	sp, #16
 800ddf4:	bd70      	pop	{r4, r5, r6, pc}
 800ddf6:	200b      	movs	r0, #11
 800ddf8:	4770      	bx	lr
 800ddfa:	bf00      	nop
 800ddfc:	3b9aca00 	.word	0x3b9aca00

0800de00 <rmw_get_default_publisher_options>:
 800de00:	2200      	movs	r2, #0
 800de02:	6002      	str	r2, [r0, #0]
 800de04:	7102      	strb	r2, [r0, #4]
 800de06:	4770      	bx	lr

0800de08 <rmw_uros_set_custom_transport>:
 800de08:	b470      	push	{r4, r5, r6}
 800de0a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800de0e:	b162      	cbz	r2, 800de2a <rmw_uros_set_custom_transport+0x22>
 800de10:	b15b      	cbz	r3, 800de2a <rmw_uros_set_custom_transport+0x22>
 800de12:	b155      	cbz	r5, 800de2a <rmw_uros_set_custom_transport+0x22>
 800de14:	b14e      	cbz	r6, 800de2a <rmw_uros_set_custom_transport+0x22>
 800de16:	4c06      	ldr	r4, [pc, #24]	@ (800de30 <rmw_uros_set_custom_transport+0x28>)
 800de18:	7020      	strb	r0, [r4, #0]
 800de1a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800de1e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800de22:	6166      	str	r6, [r4, #20]
 800de24:	2000      	movs	r0, #0
 800de26:	bc70      	pop	{r4, r5, r6}
 800de28:	4770      	bx	lr
 800de2a:	200b      	movs	r0, #11
 800de2c:	bc70      	pop	{r4, r5, r6}
 800de2e:	4770      	bx	lr
 800de30:	2000d194 	.word	0x2000d194

0800de34 <flush_session>:
 800de34:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800de36:	f002 be07 	b.w	8010a48 <uxr_run_session_until_confirm_delivery>
 800de3a:	bf00      	nop

0800de3c <rmw_publish>:
 800de3c:	2800      	cmp	r0, #0
 800de3e:	d053      	beq.n	800dee8 <rmw_publish+0xac>
 800de40:	b570      	push	{r4, r5, r6, lr}
 800de42:	460d      	mov	r5, r1
 800de44:	b08e      	sub	sp, #56	@ 0x38
 800de46:	2900      	cmp	r1, #0
 800de48:	d04b      	beq.n	800dee2 <rmw_publish+0xa6>
 800de4a:	4604      	mov	r4, r0
 800de4c:	6800      	ldr	r0, [r0, #0]
 800de4e:	f000 fced 	bl	800e82c <is_uxrce_rmw_identifier_valid>
 800de52:	2800      	cmp	r0, #0
 800de54:	d045      	beq.n	800dee2 <rmw_publish+0xa6>
 800de56:	6866      	ldr	r6, [r4, #4]
 800de58:	2e00      	cmp	r6, #0
 800de5a:	d042      	beq.n	800dee2 <rmw_publish+0xa6>
 800de5c:	69b4      	ldr	r4, [r6, #24]
 800de5e:	4628      	mov	r0, r5
 800de60:	6923      	ldr	r3, [r4, #16]
 800de62:	4798      	blx	r3
 800de64:	69f3      	ldr	r3, [r6, #28]
 800de66:	9005      	str	r0, [sp, #20]
 800de68:	b113      	cbz	r3, 800de70 <rmw_publish+0x34>
 800de6a:	a805      	add	r0, sp, #20
 800de6c:	4798      	blx	r3
 800de6e:	9805      	ldr	r0, [sp, #20]
 800de70:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800de74:	691b      	ldr	r3, [r3, #16]
 800de76:	9000      	str	r0, [sp, #0]
 800de78:	6972      	ldr	r2, [r6, #20]
 800de7a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800de7c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800de80:	ab06      	add	r3, sp, #24
 800de82:	f003 fbcd 	bl	8011620 <uxr_prepare_output_stream>
 800de86:	b1d8      	cbz	r0, 800dec0 <rmw_publish+0x84>
 800de88:	68a3      	ldr	r3, [r4, #8]
 800de8a:	a906      	add	r1, sp, #24
 800de8c:	4628      	mov	r0, r5
 800de8e:	4798      	blx	r3
 800de90:	6a33      	ldr	r3, [r6, #32]
 800de92:	4604      	mov	r4, r0
 800de94:	b10b      	cbz	r3, 800de9a <rmw_publish+0x5e>
 800de96:	a806      	add	r0, sp, #24
 800de98:	4798      	blx	r3
 800de9a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800de9e:	2b01      	cmp	r3, #1
 800dea0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800dea4:	d022      	beq.n	800deec <rmw_publish+0xb0>
 800dea6:	6918      	ldr	r0, [r3, #16]
 800dea8:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800deaa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800deae:	f002 fdcb 	bl	8010a48 <uxr_run_session_until_confirm_delivery>
 800deb2:	4020      	ands	r0, r4
 800deb4:	b2c4      	uxtb	r4, r0
 800deb6:	f084 0001 	eor.w	r0, r4, #1
 800deba:	b2c0      	uxtb	r0, r0
 800debc:	b00e      	add	sp, #56	@ 0x38
 800debe:	bd70      	pop	{r4, r5, r6, pc}
 800dec0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800dec4:	6918      	ldr	r0, [r3, #16]
 800dec6:	9b05      	ldr	r3, [sp, #20]
 800dec8:	9300      	str	r3, [sp, #0]
 800deca:	4b0b      	ldr	r3, [pc, #44]	@ (800def8 <rmw_publish+0xbc>)
 800decc:	9301      	str	r3, [sp, #4]
 800dece:	9602      	str	r6, [sp, #8]
 800ded0:	6972      	ldr	r2, [r6, #20]
 800ded2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800ded4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ded8:	ab06      	add	r3, sp, #24
 800deda:	f003 fbd1 	bl	8011680 <uxr_prepare_output_stream_fragmented>
 800dede:	2800      	cmp	r0, #0
 800dee0:	d1d2      	bne.n	800de88 <rmw_publish+0x4c>
 800dee2:	2001      	movs	r0, #1
 800dee4:	b00e      	add	sp, #56	@ 0x38
 800dee6:	bd70      	pop	{r4, r5, r6, pc}
 800dee8:	2001      	movs	r0, #1
 800deea:	4770      	bx	lr
 800deec:	6918      	ldr	r0, [r3, #16]
 800deee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800def2:	f002 f9e9 	bl	80102c8 <uxr_flash_output_streams>
 800def6:	e7de      	b.n	800deb6 <rmw_publish+0x7a>
 800def8:	0800de35 	.word	0x0800de35

0800defc <rmw_create_publisher>:
 800defc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df00:	b087      	sub	sp, #28
 800df02:	2800      	cmp	r0, #0
 800df04:	f000 80cc 	beq.w	800e0a0 <rmw_create_publisher+0x1a4>
 800df08:	460e      	mov	r6, r1
 800df0a:	2900      	cmp	r1, #0
 800df0c:	f000 80c8 	beq.w	800e0a0 <rmw_create_publisher+0x1a4>
 800df10:	4604      	mov	r4, r0
 800df12:	6800      	ldr	r0, [r0, #0]
 800df14:	4615      	mov	r5, r2
 800df16:	4698      	mov	r8, r3
 800df18:	f000 fc88 	bl	800e82c <is_uxrce_rmw_identifier_valid>
 800df1c:	2800      	cmp	r0, #0
 800df1e:	f000 80bf 	beq.w	800e0a0 <rmw_create_publisher+0x1a4>
 800df22:	2d00      	cmp	r5, #0
 800df24:	f000 80bc 	beq.w	800e0a0 <rmw_create_publisher+0x1a4>
 800df28:	782b      	ldrb	r3, [r5, #0]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	f000 80b8 	beq.w	800e0a0 <rmw_create_publisher+0x1a4>
 800df30:	f1b8 0f00 	cmp.w	r8, #0
 800df34:	f000 80b4 	beq.w	800e0a0 <rmw_create_publisher+0x1a4>
 800df38:	485c      	ldr	r0, [pc, #368]	@ (800e0ac <rmw_create_publisher+0x1b0>)
 800df3a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800df3e:	f007 ffdf 	bl	8015f00 <get_memory>
 800df42:	2800      	cmp	r0, #0
 800df44:	f000 80ac 	beq.w	800e0a0 <rmw_create_publisher+0x1a4>
 800df48:	6884      	ldr	r4, [r0, #8]
 800df4a:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800df4e:	f008 f83f 	bl	8015fd0 <rmw_get_implementation_identifier>
 800df52:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800df56:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800df5a:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800df5e:	4628      	mov	r0, r5
 800df60:	f7f2 f99e 	bl	80002a0 <strlen>
 800df64:	3001      	adds	r0, #1
 800df66:	283c      	cmp	r0, #60	@ 0x3c
 800df68:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800df6c:	f200 8091 	bhi.w	800e092 <rmw_create_publisher+0x196>
 800df70:	4a4f      	ldr	r2, [pc, #316]	@ (800e0b0 <rmw_create_publisher+0x1b4>)
 800df72:	462b      	mov	r3, r5
 800df74:	213c      	movs	r1, #60	@ 0x3c
 800df76:	4650      	mov	r0, sl
 800df78:	f00c fd60 	bl	801aa3c <sniprintf>
 800df7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800df80:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800df82:	4641      	mov	r1, r8
 800df84:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800df88:	2250      	movs	r2, #80	@ 0x50
 800df8a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800df8e:	f00d f832 	bl	801aff6 <memcpy>
 800df92:	f898 3008 	ldrb.w	r3, [r8, #8]
 800df96:	4947      	ldr	r1, [pc, #284]	@ (800e0b4 <rmw_create_publisher+0x1b8>)
 800df98:	2b02      	cmp	r3, #2
 800df9a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800df9e:	bf0c      	ite	eq
 800dfa0:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800dfa4:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800dfa8:	67a3      	str	r3, [r4, #120]	@ 0x78
 800dfaa:	2300      	movs	r3, #0
 800dfac:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800dfb0:	4630      	mov	r0, r6
 800dfb2:	f000 fc49 	bl	800e848 <get_message_typesupport_handle>
 800dfb6:	2800      	cmp	r0, #0
 800dfb8:	d06b      	beq.n	800e092 <rmw_create_publisher+0x196>
 800dfba:	6842      	ldr	r2, [r0, #4]
 800dfbc:	61a2      	str	r2, [r4, #24]
 800dfbe:	2a00      	cmp	r2, #0
 800dfc0:	d067      	beq.n	800e092 <rmw_create_publisher+0x196>
 800dfc2:	4629      	mov	r1, r5
 800dfc4:	4643      	mov	r3, r8
 800dfc6:	4648      	mov	r0, r9
 800dfc8:	f008 fa68 	bl	801649c <create_topic>
 800dfcc:	6260      	str	r0, [r4, #36]	@ 0x24
 800dfce:	2800      	cmp	r0, #0
 800dfd0:	d063      	beq.n	800e09a <rmw_create_publisher+0x19e>
 800dfd2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dfd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dfda:	2103      	movs	r1, #3
 800dfdc:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800dfe0:	1c42      	adds	r2, r0, #1
 800dfe2:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800dfe6:	f002 f81f 	bl	8010028 <uxr_object_id>
 800dfea:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800dfee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dff2:	6120      	str	r0, [r4, #16]
 800dff4:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800dff8:	6910      	ldr	r0, [r2, #16]
 800dffa:	2506      	movs	r5, #6
 800dffc:	9500      	str	r5, [sp, #0]
 800dffe:	6819      	ldr	r1, [r3, #0]
 800e000:	6922      	ldr	r2, [r4, #16]
 800e002:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e006:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e00a:	f001 febf 	bl	800fd8c <uxr_buffer_create_publisher_bin>
 800e00e:	4602      	mov	r2, r0
 800e010:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e014:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e018:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e01c:	f000 fb86 	bl	800e72c <run_xrce_session>
 800e020:	b3b8      	cbz	r0, 800e092 <rmw_create_publisher+0x196>
 800e022:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e026:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e02a:	2105      	movs	r1, #5
 800e02c:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800e030:	1c42      	adds	r2, r0, #1
 800e032:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800e036:	f001 fff7 	bl	8010028 <uxr_object_id>
 800e03a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e03e:	6160      	str	r0, [r4, #20]
 800e040:	691e      	ldr	r6, [r3, #16]
 800e042:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e046:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800e04a:	f10d 0a10 	add.w	sl, sp, #16
 800e04e:	4641      	mov	r1, r8
 800e050:	4650      	mov	r0, sl
 800e052:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800e056:	f000 fb85 	bl	800e764 <convert_qos_profile>
 800e05a:	9503      	str	r5, [sp, #12]
 800e05c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800e060:	9001      	str	r0, [sp, #4]
 800e062:	f8ad 1008 	strh.w	r1, [sp, #8]
 800e066:	f8db 3010 	ldr.w	r3, [fp, #16]
 800e06a:	9300      	str	r3, [sp, #0]
 800e06c:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800e070:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800e074:	f8d8 1000 	ldr.w	r1, [r8]
 800e078:	4630      	mov	r0, r6
 800e07a:	f001 fee7 	bl	800fe4c <uxr_buffer_create_datawriter_bin>
 800e07e:	4602      	mov	r2, r0
 800e080:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e084:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e088:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e08c:	f000 fb4e 	bl	800e72c <run_xrce_session>
 800e090:	b938      	cbnz	r0, 800e0a2 <rmw_create_publisher+0x1a6>
 800e092:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e094:	b108      	cbz	r0, 800e09a <rmw_create_publisher+0x19e>
 800e096:	f000 fa47 	bl	800e528 <rmw_uxrce_fini_topic_memory>
 800e09a:	4638      	mov	r0, r7
 800e09c:	f000 f9ec 	bl	800e478 <rmw_uxrce_fini_publisher_memory>
 800e0a0:	2700      	movs	r7, #0
 800e0a2:	4638      	mov	r0, r7
 800e0a4:	b007      	add	sp, #28
 800e0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0aa:	bf00      	nop
 800e0ac:	20011a8c 	.word	0x20011a8c
 800e0b0:	0801ff4c 	.word	0x0801ff4c
 800e0b4:	0801ff18 	.word	0x0801ff18

0800e0b8 <rmw_publisher_get_actual_qos>:
 800e0b8:	b150      	cbz	r0, 800e0d0 <rmw_publisher_get_actual_qos+0x18>
 800e0ba:	b508      	push	{r3, lr}
 800e0bc:	460b      	mov	r3, r1
 800e0be:	b149      	cbz	r1, 800e0d4 <rmw_publisher_get_actual_qos+0x1c>
 800e0c0:	6841      	ldr	r1, [r0, #4]
 800e0c2:	2250      	movs	r2, #80	@ 0x50
 800e0c4:	3128      	adds	r1, #40	@ 0x28
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f00c ff95 	bl	801aff6 <memcpy>
 800e0cc:	2000      	movs	r0, #0
 800e0ce:	bd08      	pop	{r3, pc}
 800e0d0:	200b      	movs	r0, #11
 800e0d2:	4770      	bx	lr
 800e0d4:	200b      	movs	r0, #11
 800e0d6:	bd08      	pop	{r3, pc}

0800e0d8 <rmw_destroy_publisher>:
 800e0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0da:	b128      	cbz	r0, 800e0e8 <rmw_destroy_publisher+0x10>
 800e0dc:	4604      	mov	r4, r0
 800e0de:	6800      	ldr	r0, [r0, #0]
 800e0e0:	460d      	mov	r5, r1
 800e0e2:	f000 fba3 	bl	800e82c <is_uxrce_rmw_identifier_valid>
 800e0e6:	b910      	cbnz	r0, 800e0ee <rmw_destroy_publisher+0x16>
 800e0e8:	2401      	movs	r4, #1
 800e0ea:	4620      	mov	r0, r4
 800e0ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0ee:	6863      	ldr	r3, [r4, #4]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d0f9      	beq.n	800e0e8 <rmw_destroy_publisher+0x10>
 800e0f4:	2d00      	cmp	r5, #0
 800e0f6:	d0f7      	beq.n	800e0e8 <rmw_destroy_publisher+0x10>
 800e0f8:	6828      	ldr	r0, [r5, #0]
 800e0fa:	f000 fb97 	bl	800e82c <is_uxrce_rmw_identifier_valid>
 800e0fe:	2800      	cmp	r0, #0
 800e100:	d0f2      	beq.n	800e0e8 <rmw_destroy_publisher+0x10>
 800e102:	686c      	ldr	r4, [r5, #4]
 800e104:	2c00      	cmp	r4, #0
 800e106:	d0ef      	beq.n	800e0e8 <rmw_destroy_publisher+0x10>
 800e108:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e10a:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800e10e:	f008 fa15 	bl	801653c <destroy_topic>
 800e112:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e116:	6962      	ldr	r2, [r4, #20]
 800e118:	6918      	ldr	r0, [r3, #16]
 800e11a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e11e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e122:	6819      	ldr	r1, [r3, #0]
 800e124:	f001 fd7e 	bl	800fc24 <uxr_buffer_delete_entity>
 800e128:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e12c:	6922      	ldr	r2, [r4, #16]
 800e12e:	691b      	ldr	r3, [r3, #16]
 800e130:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800e134:	4604      	mov	r4, r0
 800e136:	6809      	ldr	r1, [r1, #0]
 800e138:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e13c:	f001 fd72 	bl	800fc24 <uxr_buffer_delete_entity>
 800e140:	693e      	ldr	r6, [r7, #16]
 800e142:	4622      	mov	r2, r4
 800e144:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e148:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e14c:	4604      	mov	r4, r0
 800e14e:	4630      	mov	r0, r6
 800e150:	f000 faec 	bl	800e72c <run_xrce_session>
 800e154:	693e      	ldr	r6, [r7, #16]
 800e156:	4622      	mov	r2, r4
 800e158:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e15c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e160:	4604      	mov	r4, r0
 800e162:	4630      	mov	r0, r6
 800e164:	f000 fae2 	bl	800e72c <run_xrce_session>
 800e168:	b12c      	cbz	r4, 800e176 <rmw_destroy_publisher+0x9e>
 800e16a:	b120      	cbz	r0, 800e176 <rmw_destroy_publisher+0x9e>
 800e16c:	2400      	movs	r4, #0
 800e16e:	4628      	mov	r0, r5
 800e170:	f000 f982 	bl	800e478 <rmw_uxrce_fini_publisher_memory>
 800e174:	e7b9      	b.n	800e0ea <rmw_destroy_publisher+0x12>
 800e176:	2402      	movs	r4, #2
 800e178:	e7f9      	b.n	800e16e <rmw_destroy_publisher+0x96>
 800e17a:	bf00      	nop

0800e17c <rmw_uxrce_init_service_memory>:
 800e17c:	b1e2      	cbz	r2, 800e1b8 <rmw_uxrce_init_service_memory+0x3c>
 800e17e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e182:	7b05      	ldrb	r5, [r0, #12]
 800e184:	4606      	mov	r6, r0
 800e186:	b9ad      	cbnz	r5, 800e1b4 <rmw_uxrce_init_service_memory+0x38>
 800e188:	23c8      	movs	r3, #200	@ 0xc8
 800e18a:	e9c0 5500 	strd	r5, r5, [r0]
 800e18e:	6083      	str	r3, [r0, #8]
 800e190:	f240 1301 	movw	r3, #257	@ 0x101
 800e194:	4617      	mov	r7, r2
 800e196:	8183      	strh	r3, [r0, #12]
 800e198:	460c      	mov	r4, r1
 800e19a:	46a8      	mov	r8, r5
 800e19c:	4621      	mov	r1, r4
 800e19e:	4630      	mov	r0, r6
 800e1a0:	3501      	adds	r5, #1
 800e1a2:	f007 febd 	bl	8015f20 <put_memory>
 800e1a6:	42af      	cmp	r7, r5
 800e1a8:	60a4      	str	r4, [r4, #8]
 800e1aa:	f884 800c 	strb.w	r8, [r4, #12]
 800e1ae:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800e1b2:	d1f3      	bne.n	800e19c <rmw_uxrce_init_service_memory+0x20>
 800e1b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1b8:	4770      	bx	lr
 800e1ba:	bf00      	nop

0800e1bc <rmw_uxrce_init_client_memory>:
 800e1bc:	b1e2      	cbz	r2, 800e1f8 <rmw_uxrce_init_client_memory+0x3c>
 800e1be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1c2:	7b05      	ldrb	r5, [r0, #12]
 800e1c4:	4606      	mov	r6, r0
 800e1c6:	b9ad      	cbnz	r5, 800e1f4 <rmw_uxrce_init_client_memory+0x38>
 800e1c8:	23c8      	movs	r3, #200	@ 0xc8
 800e1ca:	e9c0 5500 	strd	r5, r5, [r0]
 800e1ce:	6083      	str	r3, [r0, #8]
 800e1d0:	f240 1301 	movw	r3, #257	@ 0x101
 800e1d4:	4617      	mov	r7, r2
 800e1d6:	8183      	strh	r3, [r0, #12]
 800e1d8:	460c      	mov	r4, r1
 800e1da:	46a8      	mov	r8, r5
 800e1dc:	4621      	mov	r1, r4
 800e1de:	4630      	mov	r0, r6
 800e1e0:	3501      	adds	r5, #1
 800e1e2:	f007 fe9d 	bl	8015f20 <put_memory>
 800e1e6:	42af      	cmp	r7, r5
 800e1e8:	60a4      	str	r4, [r4, #8]
 800e1ea:	f884 800c 	strb.w	r8, [r4, #12]
 800e1ee:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800e1f2:	d1f3      	bne.n	800e1dc <rmw_uxrce_init_client_memory+0x20>
 800e1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1f8:	4770      	bx	lr
 800e1fa:	bf00      	nop

0800e1fc <rmw_uxrce_init_publisher_memory>:
 800e1fc:	b1e2      	cbz	r2, 800e238 <rmw_uxrce_init_publisher_memory+0x3c>
 800e1fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e202:	7b05      	ldrb	r5, [r0, #12]
 800e204:	4606      	mov	r6, r0
 800e206:	b9ad      	cbnz	r5, 800e234 <rmw_uxrce_init_publisher_memory+0x38>
 800e208:	23d8      	movs	r3, #216	@ 0xd8
 800e20a:	e9c0 5500 	strd	r5, r5, [r0]
 800e20e:	6083      	str	r3, [r0, #8]
 800e210:	f240 1301 	movw	r3, #257	@ 0x101
 800e214:	4617      	mov	r7, r2
 800e216:	8183      	strh	r3, [r0, #12]
 800e218:	460c      	mov	r4, r1
 800e21a:	46a8      	mov	r8, r5
 800e21c:	4621      	mov	r1, r4
 800e21e:	4630      	mov	r0, r6
 800e220:	3501      	adds	r5, #1
 800e222:	f007 fe7d 	bl	8015f20 <put_memory>
 800e226:	42af      	cmp	r7, r5
 800e228:	60a4      	str	r4, [r4, #8]
 800e22a:	f884 800c 	strb.w	r8, [r4, #12]
 800e22e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800e232:	d1f3      	bne.n	800e21c <rmw_uxrce_init_publisher_memory+0x20>
 800e234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e238:	4770      	bx	lr
 800e23a:	bf00      	nop

0800e23c <rmw_uxrce_init_subscription_memory>:
 800e23c:	b1e2      	cbz	r2, 800e278 <rmw_uxrce_init_subscription_memory+0x3c>
 800e23e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e242:	7b05      	ldrb	r5, [r0, #12]
 800e244:	4606      	mov	r6, r0
 800e246:	b9ad      	cbnz	r5, 800e274 <rmw_uxrce_init_subscription_memory+0x38>
 800e248:	23d8      	movs	r3, #216	@ 0xd8
 800e24a:	e9c0 5500 	strd	r5, r5, [r0]
 800e24e:	6083      	str	r3, [r0, #8]
 800e250:	f240 1301 	movw	r3, #257	@ 0x101
 800e254:	4617      	mov	r7, r2
 800e256:	8183      	strh	r3, [r0, #12]
 800e258:	460c      	mov	r4, r1
 800e25a:	46a8      	mov	r8, r5
 800e25c:	4621      	mov	r1, r4
 800e25e:	4630      	mov	r0, r6
 800e260:	3501      	adds	r5, #1
 800e262:	f007 fe5d 	bl	8015f20 <put_memory>
 800e266:	42af      	cmp	r7, r5
 800e268:	60a4      	str	r4, [r4, #8]
 800e26a:	f884 800c 	strb.w	r8, [r4, #12]
 800e26e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800e272:	d1f3      	bne.n	800e25c <rmw_uxrce_init_subscription_memory+0x20>
 800e274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e278:	4770      	bx	lr
 800e27a:	bf00      	nop

0800e27c <rmw_uxrce_init_node_memory>:
 800e27c:	b1e2      	cbz	r2, 800e2b8 <rmw_uxrce_init_node_memory+0x3c>
 800e27e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e282:	7b05      	ldrb	r5, [r0, #12]
 800e284:	4606      	mov	r6, r0
 800e286:	b9ad      	cbnz	r5, 800e2b4 <rmw_uxrce_init_node_memory+0x38>
 800e288:	23a4      	movs	r3, #164	@ 0xa4
 800e28a:	e9c0 5500 	strd	r5, r5, [r0]
 800e28e:	6083      	str	r3, [r0, #8]
 800e290:	f240 1301 	movw	r3, #257	@ 0x101
 800e294:	4617      	mov	r7, r2
 800e296:	8183      	strh	r3, [r0, #12]
 800e298:	460c      	mov	r4, r1
 800e29a:	46a8      	mov	r8, r5
 800e29c:	4621      	mov	r1, r4
 800e29e:	4630      	mov	r0, r6
 800e2a0:	3501      	adds	r5, #1
 800e2a2:	f007 fe3d 	bl	8015f20 <put_memory>
 800e2a6:	42af      	cmp	r7, r5
 800e2a8:	60a4      	str	r4, [r4, #8]
 800e2aa:	f884 800c 	strb.w	r8, [r4, #12]
 800e2ae:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800e2b2:	d1f3      	bne.n	800e29c <rmw_uxrce_init_node_memory+0x20>
 800e2b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2b8:	4770      	bx	lr
 800e2ba:	bf00      	nop

0800e2bc <rmw_uxrce_init_session_memory>:
 800e2bc:	b1ea      	cbz	r2, 800e2fa <rmw_uxrce_init_session_memory+0x3e>
 800e2be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2c2:	7b05      	ldrb	r5, [r0, #12]
 800e2c4:	4606      	mov	r6, r0
 800e2c6:	b9b5      	cbnz	r5, 800e2f6 <rmw_uxrce_init_session_memory+0x3a>
 800e2c8:	e9c0 5500 	strd	r5, r5, [r0]
 800e2cc:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800e2d0:	f240 1301 	movw	r3, #257	@ 0x101
 800e2d4:	4617      	mov	r7, r2
 800e2d6:	f8c0 8008 	str.w	r8, [r0, #8]
 800e2da:	460c      	mov	r4, r1
 800e2dc:	8183      	strh	r3, [r0, #12]
 800e2de:	46a9      	mov	r9, r5
 800e2e0:	4621      	mov	r1, r4
 800e2e2:	4630      	mov	r0, r6
 800e2e4:	3501      	adds	r5, #1
 800e2e6:	f007 fe1b 	bl	8015f20 <put_memory>
 800e2ea:	42af      	cmp	r7, r5
 800e2ec:	60a4      	str	r4, [r4, #8]
 800e2ee:	f884 900c 	strb.w	r9, [r4, #12]
 800e2f2:	4444      	add	r4, r8
 800e2f4:	d1f4      	bne.n	800e2e0 <rmw_uxrce_init_session_memory+0x24>
 800e2f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2fa:	4770      	bx	lr

0800e2fc <rmw_uxrce_init_topic_memory>:
 800e2fc:	b1e2      	cbz	r2, 800e338 <rmw_uxrce_init_topic_memory+0x3c>
 800e2fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e302:	7b05      	ldrb	r5, [r0, #12]
 800e304:	4606      	mov	r6, r0
 800e306:	b9ad      	cbnz	r5, 800e334 <rmw_uxrce_init_topic_memory+0x38>
 800e308:	231c      	movs	r3, #28
 800e30a:	e9c0 5500 	strd	r5, r5, [r0]
 800e30e:	6083      	str	r3, [r0, #8]
 800e310:	f240 1301 	movw	r3, #257	@ 0x101
 800e314:	4617      	mov	r7, r2
 800e316:	8183      	strh	r3, [r0, #12]
 800e318:	460c      	mov	r4, r1
 800e31a:	46a8      	mov	r8, r5
 800e31c:	4621      	mov	r1, r4
 800e31e:	4630      	mov	r0, r6
 800e320:	3501      	adds	r5, #1
 800e322:	f007 fdfd 	bl	8015f20 <put_memory>
 800e326:	42af      	cmp	r7, r5
 800e328:	60a4      	str	r4, [r4, #8]
 800e32a:	f884 800c 	strb.w	r8, [r4, #12]
 800e32e:	f104 041c 	add.w	r4, r4, #28
 800e332:	d1f3      	bne.n	800e31c <rmw_uxrce_init_topic_memory+0x20>
 800e334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e338:	4770      	bx	lr
 800e33a:	bf00      	nop

0800e33c <rmw_uxrce_init_static_input_buffer_memory>:
 800e33c:	b1ea      	cbz	r2, 800e37a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800e33e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e342:	7b05      	ldrb	r5, [r0, #12]
 800e344:	4606      	mov	r6, r0
 800e346:	b9b5      	cbnz	r5, 800e376 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800e348:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800e34c:	e9c0 5500 	strd	r5, r5, [r0]
 800e350:	6083      	str	r3, [r0, #8]
 800e352:	f240 1301 	movw	r3, #257	@ 0x101
 800e356:	4617      	mov	r7, r2
 800e358:	8183      	strh	r3, [r0, #12]
 800e35a:	460c      	mov	r4, r1
 800e35c:	46a8      	mov	r8, r5
 800e35e:	4621      	mov	r1, r4
 800e360:	4630      	mov	r0, r6
 800e362:	3501      	adds	r5, #1
 800e364:	f007 fddc 	bl	8015f20 <put_memory>
 800e368:	42af      	cmp	r7, r5
 800e36a:	60a4      	str	r4, [r4, #8]
 800e36c:	f884 800c 	strb.w	r8, [r4, #12]
 800e370:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800e374:	d1f3      	bne.n	800e35e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800e376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e37a:	4770      	bx	lr

0800e37c <rmw_uxrce_init_init_options_impl_memory>:
 800e37c:	b1e2      	cbz	r2, 800e3b8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800e37e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e382:	7b05      	ldrb	r5, [r0, #12]
 800e384:	4606      	mov	r6, r0
 800e386:	b9ad      	cbnz	r5, 800e3b4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800e388:	232c      	movs	r3, #44	@ 0x2c
 800e38a:	e9c0 5500 	strd	r5, r5, [r0]
 800e38e:	6083      	str	r3, [r0, #8]
 800e390:	f240 1301 	movw	r3, #257	@ 0x101
 800e394:	4617      	mov	r7, r2
 800e396:	8183      	strh	r3, [r0, #12]
 800e398:	460c      	mov	r4, r1
 800e39a:	46a8      	mov	r8, r5
 800e39c:	4621      	mov	r1, r4
 800e39e:	4630      	mov	r0, r6
 800e3a0:	3501      	adds	r5, #1
 800e3a2:	f007 fdbd 	bl	8015f20 <put_memory>
 800e3a6:	42af      	cmp	r7, r5
 800e3a8:	60a4      	str	r4, [r4, #8]
 800e3aa:	f884 800c 	strb.w	r8, [r4, #12]
 800e3ae:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800e3b2:	d1f3      	bne.n	800e39c <rmw_uxrce_init_init_options_impl_memory+0x20>
 800e3b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3b8:	4770      	bx	lr
 800e3ba:	bf00      	nop

0800e3bc <rmw_uxrce_init_wait_set_memory>:
 800e3bc:	b1e2      	cbz	r2, 800e3f8 <rmw_uxrce_init_wait_set_memory+0x3c>
 800e3be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3c2:	7b05      	ldrb	r5, [r0, #12]
 800e3c4:	4606      	mov	r6, r0
 800e3c6:	b9ad      	cbnz	r5, 800e3f4 <rmw_uxrce_init_wait_set_memory+0x38>
 800e3c8:	231c      	movs	r3, #28
 800e3ca:	e9c0 5500 	strd	r5, r5, [r0]
 800e3ce:	6083      	str	r3, [r0, #8]
 800e3d0:	f240 1301 	movw	r3, #257	@ 0x101
 800e3d4:	4617      	mov	r7, r2
 800e3d6:	8183      	strh	r3, [r0, #12]
 800e3d8:	460c      	mov	r4, r1
 800e3da:	46a8      	mov	r8, r5
 800e3dc:	4621      	mov	r1, r4
 800e3de:	4630      	mov	r0, r6
 800e3e0:	3501      	adds	r5, #1
 800e3e2:	f007 fd9d 	bl	8015f20 <put_memory>
 800e3e6:	42af      	cmp	r7, r5
 800e3e8:	60a4      	str	r4, [r4, #8]
 800e3ea:	f884 800c 	strb.w	r8, [r4, #12]
 800e3ee:	f104 041c 	add.w	r4, r4, #28
 800e3f2:	d1f3      	bne.n	800e3dc <rmw_uxrce_init_wait_set_memory+0x20>
 800e3f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3f8:	4770      	bx	lr
 800e3fa:	bf00      	nop

0800e3fc <rmw_uxrce_init_guard_condition_memory>:
 800e3fc:	b1e2      	cbz	r2, 800e438 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800e3fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e402:	7b05      	ldrb	r5, [r0, #12]
 800e404:	4606      	mov	r6, r0
 800e406:	b9ad      	cbnz	r5, 800e434 <rmw_uxrce_init_guard_condition_memory+0x38>
 800e408:	2320      	movs	r3, #32
 800e40a:	e9c0 5500 	strd	r5, r5, [r0]
 800e40e:	6083      	str	r3, [r0, #8]
 800e410:	f240 1301 	movw	r3, #257	@ 0x101
 800e414:	4617      	mov	r7, r2
 800e416:	8183      	strh	r3, [r0, #12]
 800e418:	460c      	mov	r4, r1
 800e41a:	46a8      	mov	r8, r5
 800e41c:	4621      	mov	r1, r4
 800e41e:	4630      	mov	r0, r6
 800e420:	3501      	adds	r5, #1
 800e422:	f007 fd7d 	bl	8015f20 <put_memory>
 800e426:	42af      	cmp	r7, r5
 800e428:	60a4      	str	r4, [r4, #8]
 800e42a:	f884 800c 	strb.w	r8, [r4, #12]
 800e42e:	f104 0420 	add.w	r4, r4, #32
 800e432:	d1f3      	bne.n	800e41c <rmw_uxrce_init_guard_condition_memory+0x20>
 800e434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e438:	4770      	bx	lr
 800e43a:	bf00      	nop

0800e43c <rmw_uxrce_fini_session_memory>:
 800e43c:	4601      	mov	r1, r0
 800e43e:	4801      	ldr	r0, [pc, #4]	@ (800e444 <rmw_uxrce_fini_session_memory+0x8>)
 800e440:	f007 bd6e 	b.w	8015f20 <put_memory>
 800e444:	20011aac 	.word	0x20011aac

0800e448 <rmw_uxrce_fini_node_memory>:
 800e448:	b538      	push	{r3, r4, r5, lr}
 800e44a:	4604      	mov	r4, r0
 800e44c:	6800      	ldr	r0, [r0, #0]
 800e44e:	b128      	cbz	r0, 800e45c <rmw_uxrce_fini_node_memory+0x14>
 800e450:	4b07      	ldr	r3, [pc, #28]	@ (800e470 <rmw_uxrce_fini_node_memory+0x28>)
 800e452:	6819      	ldr	r1, [r3, #0]
 800e454:	f7f1 fec4 	bl	80001e0 <strcmp>
 800e458:	b940      	cbnz	r0, 800e46c <rmw_uxrce_fini_node_memory+0x24>
 800e45a:	6020      	str	r0, [r4, #0]
 800e45c:	6861      	ldr	r1, [r4, #4]
 800e45e:	b129      	cbz	r1, 800e46c <rmw_uxrce_fini_node_memory+0x24>
 800e460:	2500      	movs	r5, #0
 800e462:	4804      	ldr	r0, [pc, #16]	@ (800e474 <rmw_uxrce_fini_node_memory+0x2c>)
 800e464:	610d      	str	r5, [r1, #16]
 800e466:	f007 fd5b 	bl	8015f20 <put_memory>
 800e46a:	6065      	str	r5, [r4, #4]
 800e46c:	bd38      	pop	{r3, r4, r5, pc}
 800e46e:	bf00      	nop
 800e470:	0802066c 	.word	0x0802066c
 800e474:	20011a7c 	.word	0x20011a7c

0800e478 <rmw_uxrce_fini_publisher_memory>:
 800e478:	b510      	push	{r4, lr}
 800e47a:	4604      	mov	r4, r0
 800e47c:	6800      	ldr	r0, [r0, #0]
 800e47e:	b128      	cbz	r0, 800e48c <rmw_uxrce_fini_publisher_memory+0x14>
 800e480:	4b06      	ldr	r3, [pc, #24]	@ (800e49c <rmw_uxrce_fini_publisher_memory+0x24>)
 800e482:	6819      	ldr	r1, [r3, #0]
 800e484:	f7f1 feac 	bl	80001e0 <strcmp>
 800e488:	b938      	cbnz	r0, 800e49a <rmw_uxrce_fini_publisher_memory+0x22>
 800e48a:	6020      	str	r0, [r4, #0]
 800e48c:	6861      	ldr	r1, [r4, #4]
 800e48e:	b121      	cbz	r1, 800e49a <rmw_uxrce_fini_publisher_memory+0x22>
 800e490:	4803      	ldr	r0, [pc, #12]	@ (800e4a0 <rmw_uxrce_fini_publisher_memory+0x28>)
 800e492:	f007 fd45 	bl	8015f20 <put_memory>
 800e496:	2300      	movs	r3, #0
 800e498:	6063      	str	r3, [r4, #4]
 800e49a:	bd10      	pop	{r4, pc}
 800e49c:	0802066c 	.word	0x0802066c
 800e4a0:	20011a8c 	.word	0x20011a8c

0800e4a4 <rmw_uxrce_fini_subscription_memory>:
 800e4a4:	b510      	push	{r4, lr}
 800e4a6:	4604      	mov	r4, r0
 800e4a8:	6800      	ldr	r0, [r0, #0]
 800e4aa:	b128      	cbz	r0, 800e4b8 <rmw_uxrce_fini_subscription_memory+0x14>
 800e4ac:	4b06      	ldr	r3, [pc, #24]	@ (800e4c8 <rmw_uxrce_fini_subscription_memory+0x24>)
 800e4ae:	6819      	ldr	r1, [r3, #0]
 800e4b0:	f7f1 fe96 	bl	80001e0 <strcmp>
 800e4b4:	b938      	cbnz	r0, 800e4c6 <rmw_uxrce_fini_subscription_memory+0x22>
 800e4b6:	6020      	str	r0, [r4, #0]
 800e4b8:	6861      	ldr	r1, [r4, #4]
 800e4ba:	b121      	cbz	r1, 800e4c6 <rmw_uxrce_fini_subscription_memory+0x22>
 800e4bc:	4803      	ldr	r0, [pc, #12]	@ (800e4cc <rmw_uxrce_fini_subscription_memory+0x28>)
 800e4be:	f007 fd2f 	bl	8015f20 <put_memory>
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	6063      	str	r3, [r4, #4]
 800e4c6:	bd10      	pop	{r4, pc}
 800e4c8:	0802066c 	.word	0x0802066c
 800e4cc:	20011acc 	.word	0x20011acc

0800e4d0 <rmw_uxrce_fini_service_memory>:
 800e4d0:	b510      	push	{r4, lr}
 800e4d2:	4604      	mov	r4, r0
 800e4d4:	6800      	ldr	r0, [r0, #0]
 800e4d6:	b128      	cbz	r0, 800e4e4 <rmw_uxrce_fini_service_memory+0x14>
 800e4d8:	4b06      	ldr	r3, [pc, #24]	@ (800e4f4 <rmw_uxrce_fini_service_memory+0x24>)
 800e4da:	6819      	ldr	r1, [r3, #0]
 800e4dc:	f7f1 fe80 	bl	80001e0 <strcmp>
 800e4e0:	b938      	cbnz	r0, 800e4f2 <rmw_uxrce_fini_service_memory+0x22>
 800e4e2:	6020      	str	r0, [r4, #0]
 800e4e4:	6861      	ldr	r1, [r4, #4]
 800e4e6:	b121      	cbz	r1, 800e4f2 <rmw_uxrce_fini_service_memory+0x22>
 800e4e8:	4803      	ldr	r0, [pc, #12]	@ (800e4f8 <rmw_uxrce_fini_service_memory+0x28>)
 800e4ea:	f007 fd19 	bl	8015f20 <put_memory>
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	6063      	str	r3, [r4, #4]
 800e4f2:	bd10      	pop	{r4, pc}
 800e4f4:	0802066c 	.word	0x0802066c
 800e4f8:	20011a9c 	.word	0x20011a9c

0800e4fc <rmw_uxrce_fini_client_memory>:
 800e4fc:	b510      	push	{r4, lr}
 800e4fe:	4604      	mov	r4, r0
 800e500:	6800      	ldr	r0, [r0, #0]
 800e502:	b128      	cbz	r0, 800e510 <rmw_uxrce_fini_client_memory+0x14>
 800e504:	4b06      	ldr	r3, [pc, #24]	@ (800e520 <rmw_uxrce_fini_client_memory+0x24>)
 800e506:	6819      	ldr	r1, [r3, #0]
 800e508:	f7f1 fe6a 	bl	80001e0 <strcmp>
 800e50c:	b938      	cbnz	r0, 800e51e <rmw_uxrce_fini_client_memory+0x22>
 800e50e:	6020      	str	r0, [r4, #0]
 800e510:	6861      	ldr	r1, [r4, #4]
 800e512:	b121      	cbz	r1, 800e51e <rmw_uxrce_fini_client_memory+0x22>
 800e514:	4803      	ldr	r0, [pc, #12]	@ (800e524 <rmw_uxrce_fini_client_memory+0x28>)
 800e516:	f007 fd03 	bl	8015f20 <put_memory>
 800e51a:	2300      	movs	r3, #0
 800e51c:	6063      	str	r3, [r4, #4]
 800e51e:	bd10      	pop	{r4, pc}
 800e520:	0802066c 	.word	0x0802066c
 800e524:	2000d1b0 	.word	0x2000d1b0

0800e528 <rmw_uxrce_fini_topic_memory>:
 800e528:	b510      	push	{r4, lr}
 800e52a:	4604      	mov	r4, r0
 800e52c:	4621      	mov	r1, r4
 800e52e:	4803      	ldr	r0, [pc, #12]	@ (800e53c <rmw_uxrce_fini_topic_memory+0x14>)
 800e530:	f007 fcf6 	bl	8015f20 <put_memory>
 800e534:	2300      	movs	r3, #0
 800e536:	61a3      	str	r3, [r4, #24]
 800e538:	bd10      	pop	{r4, pc}
 800e53a:	bf00      	nop
 800e53c:	20011adc 	.word	0x20011adc

0800e540 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800e540:	b082      	sub	sp, #8
 800e542:	b530      	push	{r4, r5, lr}
 800e544:	4925      	ldr	r1, [pc, #148]	@ (800e5dc <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800e546:	680d      	ldr	r5, [r1, #0]
 800e548:	ac03      	add	r4, sp, #12
 800e54a:	e884 000c 	stmia.w	r4, {r2, r3}
 800e54e:	461c      	mov	r4, r3
 800e550:	2d00      	cmp	r5, #0
 800e552:	d041      	beq.n	800e5d8 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800e554:	462b      	mov	r3, r5
 800e556:	2100      	movs	r1, #0
 800e558:	689a      	ldr	r2, [r3, #8]
 800e55a:	685b      	ldr	r3, [r3, #4]
 800e55c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800e560:	4290      	cmp	r0, r2
 800e562:	bf08      	it	eq
 800e564:	3101      	addeq	r1, #1
 800e566:	2b00      	cmp	r3, #0
 800e568:	d1f6      	bne.n	800e558 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800e56a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800e56e:	2b02      	cmp	r3, #2
 800e570:	d029      	beq.n	800e5c6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e572:	d907      	bls.n	800e584 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800e574:	2b03      	cmp	r3, #3
 800e576:	d005      	beq.n	800e584 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800e578:	2100      	movs	r1, #0
 800e57a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e57e:	4608      	mov	r0, r1
 800e580:	b002      	add	sp, #8
 800e582:	4770      	bx	lr
 800e584:	b314      	cbz	r4, 800e5cc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e586:	428c      	cmp	r4, r1
 800e588:	d820      	bhi.n	800e5cc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e58a:	2d00      	cmp	r5, #0
 800e58c:	d0f4      	beq.n	800e578 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e58e:	2100      	movs	r1, #0
 800e590:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800e594:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800e598:	e002      	b.n	800e5a0 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800e59a:	686d      	ldr	r5, [r5, #4]
 800e59c:	2d00      	cmp	r5, #0
 800e59e:	d0ec      	beq.n	800e57a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800e5a0:	68ab      	ldr	r3, [r5, #8]
 800e5a2:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800e5a6:	4290      	cmp	r0, r2
 800e5a8:	d1f7      	bne.n	800e59a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e5aa:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800e5ae:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800e5b2:	4562      	cmp	r2, ip
 800e5b4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800e5b8:	eb73 0e04 	sbcs.w	lr, r3, r4
 800e5bc:	daed      	bge.n	800e59a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e5be:	4694      	mov	ip, r2
 800e5c0:	461c      	mov	r4, r3
 800e5c2:	4629      	mov	r1, r5
 800e5c4:	e7e9      	b.n	800e59a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e5c6:	b10c      	cbz	r4, 800e5cc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e5c8:	428c      	cmp	r4, r1
 800e5ca:	d9d5      	bls.n	800e578 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e5cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e5d0:	4802      	ldr	r0, [pc, #8]	@ (800e5dc <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800e5d2:	b002      	add	sp, #8
 800e5d4:	f007 bc94 	b.w	8015f00 <get_memory>
 800e5d8:	4629      	mov	r1, r5
 800e5da:	e7c6      	b.n	800e56a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800e5dc:	20011abc 	.word	0x20011abc

0800e5e0 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800e5e0:	4b11      	ldr	r3, [pc, #68]	@ (800e628 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	b530      	push	{r4, r5, lr}
 800e5e6:	b1e3      	cbz	r3, 800e622 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800e5e8:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800e5ec:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800e5f0:	2400      	movs	r4, #0
 800e5f2:	e001      	b.n	800e5f8 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800e5f4:	685b      	ldr	r3, [r3, #4]
 800e5f6:	b193      	cbz	r3, 800e61e <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800e5f8:	689a      	ldr	r2, [r3, #8]
 800e5fa:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800e5fe:	4288      	cmp	r0, r1
 800e600:	d1f8      	bne.n	800e5f4 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800e602:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800e606:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800e60a:	4571      	cmp	r1, lr
 800e60c:	eb72 050c 	sbcs.w	r5, r2, ip
 800e610:	daf0      	bge.n	800e5f4 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800e612:	461c      	mov	r4, r3
 800e614:	685b      	ldr	r3, [r3, #4]
 800e616:	468e      	mov	lr, r1
 800e618:	4694      	mov	ip, r2
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d1ec      	bne.n	800e5f8 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800e61e:	4620      	mov	r0, r4
 800e620:	bd30      	pop	{r4, r5, pc}
 800e622:	461c      	mov	r4, r3
 800e624:	4620      	mov	r0, r4
 800e626:	bd30      	pop	{r4, r5, pc}
 800e628:	20011abc 	.word	0x20011abc
 800e62c:	00000000 	.word	0x00000000

0800e630 <rmw_uxrce_clean_expired_static_input_buffer>:
 800e630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e634:	4b3c      	ldr	r3, [pc, #240]	@ (800e728 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800e636:	ed2d 8b06 	vpush	{d8-d10}
 800e63a:	681f      	ldr	r7, [r3, #0]
 800e63c:	b08d      	sub	sp, #52	@ 0x34
 800e63e:	f008 fd9d 	bl	801717c <rmw_uros_epoch_nanos>
 800e642:	2f00      	cmp	r7, #0
 800e644:	d05d      	beq.n	800e702 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800e646:	46b8      	mov	r8, r7
 800e648:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800e710 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800e64c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e650:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800e654:	2b04      	cmp	r3, #4
 800e656:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800e718 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800e65a:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800e720 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800e65e:	4681      	mov	r9, r0
 800e660:	468a      	mov	sl, r1
 800e662:	ac04      	add	r4, sp, #16
 800e664:	d03f      	beq.n	800e6e6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800e666:	2b05      	cmp	r3, #5
 800e668:	d044      	beq.n	800e6f4 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800e66a:	2b03      	cmp	r3, #3
 800e66c:	d03b      	beq.n	800e6e6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800e66e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e672:	ed8d ab06 	vstr	d10, [sp, #24]
 800e676:	ed8d 8b08 	vstr	d8, [sp, #32]
 800e67a:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800e67e:	ab08      	add	r3, sp, #32
 800e680:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e682:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e686:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e68a:	f007 fa6d 	bl	8015b68 <rmw_time_equal>
 800e68e:	b118      	cbz	r0, 800e698 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800e690:	ed8d 9b04 	vstr	d9, [sp, #16]
 800e694:	ed8d 8b06 	vstr	d8, [sp, #24]
 800e698:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e69c:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800e6a0:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800e6a4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800e6a8:	f007 fab2 	bl	8015c10 <rmw_time_total_nsec>
 800e6ac:	1830      	adds	r0, r6, r0
 800e6ae:	eb47 0101 	adc.w	r1, r7, r1
 800e6b2:	4548      	cmp	r0, r9
 800e6b4:	eb71 030a 	sbcs.w	r3, r1, sl
 800e6b8:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800e6bc:	db05      	blt.n	800e6ca <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800e6be:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800e6c2:	4591      	cmp	r9, r2
 800e6c4:	eb7a 0303 	sbcs.w	r3, sl, r3
 800e6c8:	da03      	bge.n	800e6d2 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800e6ca:	4817      	ldr	r0, [pc, #92]	@ (800e728 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800e6cc:	4641      	mov	r1, r8
 800e6ce:	f007 fc27 	bl	8015f20 <put_memory>
 800e6d2:	f1bb 0f00 	cmp.w	fp, #0
 800e6d6:	d014      	beq.n	800e702 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800e6d8:	46d8      	mov	r8, fp
 800e6da:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e6de:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800e6e2:	2b04      	cmp	r3, #4
 800e6e4:	d1bf      	bne.n	800e666 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800e6e6:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800e6ea:	3340      	adds	r3, #64	@ 0x40
 800e6ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e6ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e6f2:	e7c0      	b.n	800e676 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800e6f4:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800e6f8:	3348      	adds	r3, #72	@ 0x48
 800e6fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e6fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e700:	e7b9      	b.n	800e676 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800e702:	b00d      	add	sp, #52	@ 0x34
 800e704:	ecbd 8b06 	vpop	{d8-d10}
 800e708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e70c:	f3af 8000 	nop.w
	...
 800e718:	00000001 	.word	0x00000001
 800e71c:	00000000 	.word	0x00000000
 800e720:	0000001e 	.word	0x0000001e
 800e724:	00000000 	.word	0x00000000
 800e728:	20011abc 	.word	0x20011abc

0800e72c <run_xrce_session>:
 800e72c:	b510      	push	{r4, lr}
 800e72e:	788c      	ldrb	r4, [r1, #2]
 800e730:	b086      	sub	sp, #24
 800e732:	2c01      	cmp	r4, #1
 800e734:	f8ad 200e 	strh.w	r2, [sp, #14]
 800e738:	d00c      	beq.n	800e754 <run_xrce_session+0x28>
 800e73a:	4619      	mov	r1, r3
 800e73c:	2301      	movs	r3, #1
 800e73e:	9300      	str	r3, [sp, #0]
 800e740:	f10d 020e 	add.w	r2, sp, #14
 800e744:	f10d 0317 	add.w	r3, sp, #23
 800e748:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e74c:	f002 f9a2 	bl	8010a94 <uxr_run_session_until_all_status>
 800e750:	b006      	add	sp, #24
 800e752:	bd10      	pop	{r4, pc}
 800e754:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e758:	f001 fdb6 	bl	80102c8 <uxr_flash_output_streams>
 800e75c:	4620      	mov	r0, r4
 800e75e:	b006      	add	sp, #24
 800e760:	bd10      	pop	{r4, pc}
 800e762:	bf00      	nop

0800e764 <convert_qos_profile>:
 800e764:	7a4a      	ldrb	r2, [r1, #9]
 800e766:	f891 c008 	ldrb.w	ip, [r1, #8]
 800e76a:	2a02      	cmp	r2, #2
 800e76c:	bf18      	it	ne
 800e76e:	2200      	movne	r2, #0
 800e770:	7002      	strb	r2, [r0, #0]
 800e772:	780a      	ldrb	r2, [r1, #0]
 800e774:	8889      	ldrh	r1, [r1, #4]
 800e776:	8081      	strh	r1, [r0, #4]
 800e778:	f1ac 0c02 	sub.w	ip, ip, #2
 800e77c:	f1a2 0202 	sub.w	r2, r2, #2
 800e780:	fabc fc8c 	clz	ip, ip
 800e784:	fab2 f282 	clz	r2, r2
 800e788:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800e78c:	0952      	lsrs	r2, r2, #5
 800e78e:	f880 c001 	strb.w	ip, [r0, #1]
 800e792:	7082      	strb	r2, [r0, #2]
 800e794:	4770      	bx	lr
 800e796:	bf00      	nop

0800e798 <generate_type_name>:
 800e798:	b530      	push	{r4, r5, lr}
 800e79a:	2300      	movs	r3, #0
 800e79c:	700b      	strb	r3, [r1, #0]
 800e79e:	6803      	ldr	r3, [r0, #0]
 800e7a0:	b087      	sub	sp, #28
 800e7a2:	4614      	mov	r4, r2
 800e7a4:	b1d3      	cbz	r3, 800e7dc <generate_type_name+0x44>
 800e7a6:	4a0f      	ldr	r2, [pc, #60]	@ (800e7e4 <generate_type_name+0x4c>)
 800e7a8:	4615      	mov	r5, r2
 800e7aa:	9203      	str	r2, [sp, #12]
 800e7ac:	9500      	str	r5, [sp, #0]
 800e7ae:	6842      	ldr	r2, [r0, #4]
 800e7b0:	480d      	ldr	r0, [pc, #52]	@ (800e7e8 <generate_type_name+0x50>)
 800e7b2:	9001      	str	r0, [sp, #4]
 800e7b4:	4608      	mov	r0, r1
 800e7b6:	490d      	ldr	r1, [pc, #52]	@ (800e7ec <generate_type_name+0x54>)
 800e7b8:	9204      	str	r2, [sp, #16]
 800e7ba:	9105      	str	r1, [sp, #20]
 800e7bc:	9102      	str	r1, [sp, #8]
 800e7be:	4a0c      	ldr	r2, [pc, #48]	@ (800e7f0 <generate_type_name+0x58>)
 800e7c0:	4621      	mov	r1, r4
 800e7c2:	f00c f93b 	bl	801aa3c <sniprintf>
 800e7c6:	2800      	cmp	r0, #0
 800e7c8:	db05      	blt.n	800e7d6 <generate_type_name+0x3e>
 800e7ca:	4284      	cmp	r4, r0
 800e7cc:	bfd4      	ite	le
 800e7ce:	2000      	movle	r0, #0
 800e7d0:	2001      	movgt	r0, #1
 800e7d2:	b007      	add	sp, #28
 800e7d4:	bd30      	pop	{r4, r5, pc}
 800e7d6:	2000      	movs	r0, #0
 800e7d8:	b007      	add	sp, #28
 800e7da:	bd30      	pop	{r4, r5, pc}
 800e7dc:	4b05      	ldr	r3, [pc, #20]	@ (800e7f4 <generate_type_name+0x5c>)
 800e7de:	4a01      	ldr	r2, [pc, #4]	@ (800e7e4 <generate_type_name+0x4c>)
 800e7e0:	461d      	mov	r5, r3
 800e7e2:	e7e2      	b.n	800e7aa <generate_type_name+0x12>
 800e7e4:	0801ff3c 	.word	0x0801ff3c
 800e7e8:	0801ff54 	.word	0x0801ff54
 800e7ec:	0801ff50 	.word	0x0801ff50
 800e7f0:	0801ff40 	.word	0x0801ff40
 800e7f4:	080206bc 	.word	0x080206bc

0800e7f8 <generate_topic_name>:
 800e7f8:	b510      	push	{r4, lr}
 800e7fa:	b082      	sub	sp, #8
 800e7fc:	4614      	mov	r4, r2
 800e7fe:	9000      	str	r0, [sp, #0]
 800e800:	4b08      	ldr	r3, [pc, #32]	@ (800e824 <generate_topic_name+0x2c>)
 800e802:	4a09      	ldr	r2, [pc, #36]	@ (800e828 <generate_topic_name+0x30>)
 800e804:	4608      	mov	r0, r1
 800e806:	4621      	mov	r1, r4
 800e808:	f00c f918 	bl	801aa3c <sniprintf>
 800e80c:	2800      	cmp	r0, #0
 800e80e:	db05      	blt.n	800e81c <generate_topic_name+0x24>
 800e810:	4284      	cmp	r4, r0
 800e812:	bfd4      	ite	le
 800e814:	2000      	movle	r0, #0
 800e816:	2001      	movgt	r0, #1
 800e818:	b002      	add	sp, #8
 800e81a:	bd10      	pop	{r4, pc}
 800e81c:	2000      	movs	r0, #0
 800e81e:	b002      	add	sp, #8
 800e820:	bd10      	pop	{r4, pc}
 800e822:	bf00      	nop
 800e824:	0801ff60 	.word	0x0801ff60
 800e828:	0801ff58 	.word	0x0801ff58

0800e82c <is_uxrce_rmw_identifier_valid>:
 800e82c:	b510      	push	{r4, lr}
 800e82e:	4604      	mov	r4, r0
 800e830:	b140      	cbz	r0, 800e844 <is_uxrce_rmw_identifier_valid+0x18>
 800e832:	f007 fbcd 	bl	8015fd0 <rmw_get_implementation_identifier>
 800e836:	4601      	mov	r1, r0
 800e838:	4620      	mov	r0, r4
 800e83a:	f7f1 fcd1 	bl	80001e0 <strcmp>
 800e83e:	fab0 f080 	clz	r0, r0
 800e842:	0940      	lsrs	r0, r0, #5
 800e844:	bd10      	pop	{r4, pc}
 800e846:	bf00      	nop

0800e848 <get_message_typesupport_handle>:
 800e848:	6883      	ldr	r3, [r0, #8]
 800e84a:	4718      	bx	r3

0800e84c <get_message_typesupport_handle_function>:
 800e84c:	b510      	push	{r4, lr}
 800e84e:	4604      	mov	r4, r0
 800e850:	6800      	ldr	r0, [r0, #0]
 800e852:	f7f1 fcc5 	bl	80001e0 <strcmp>
 800e856:	2800      	cmp	r0, #0
 800e858:	bf0c      	ite	eq
 800e85a:	4620      	moveq	r0, r4
 800e85c:	2000      	movne	r0, #0
 800e85e:	bd10      	pop	{r4, pc}

0800e860 <std_msgs__msg__Float32__init>:
 800e860:	3800      	subs	r0, #0
 800e862:	bf18      	it	ne
 800e864:	2001      	movne	r0, #1
 800e866:	4770      	bx	lr

0800e868 <std_msgs__msg__Float32__fini>:
 800e868:	4770      	bx	lr
 800e86a:	bf00      	nop

0800e86c <std_msgs__msg__String__init>:
 800e86c:	b538      	push	{r3, r4, r5, lr}
 800e86e:	4604      	mov	r4, r0
 800e870:	b128      	cbz	r0, 800e87e <std_msgs__msg__String__init+0x12>
 800e872:	f008 fc91 	bl	8017198 <rosidl_runtime_c__String__init>
 800e876:	4605      	mov	r5, r0
 800e878:	b120      	cbz	r0, 800e884 <std_msgs__msg__String__init+0x18>
 800e87a:	4628      	mov	r0, r5
 800e87c:	bd38      	pop	{r3, r4, r5, pc}
 800e87e:	4605      	mov	r5, r0
 800e880:	4628      	mov	r0, r5
 800e882:	bd38      	pop	{r3, r4, r5, pc}
 800e884:	4620      	mov	r0, r4
 800e886:	f008 fc9d 	bl	80171c4 <rosidl_runtime_c__String__fini>
 800e88a:	4628      	mov	r0, r5
 800e88c:	bd38      	pop	{r3, r4, r5, pc}
 800e88e:	bf00      	nop

0800e890 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 800e890:	4b04      	ldr	r3, [pc, #16]	@ (800e8a4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800e892:	681a      	ldr	r2, [r3, #0]
 800e894:	b10a      	cbz	r2, 800e89a <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0xa>
 800e896:	4803      	ldr	r0, [pc, #12]	@ (800e8a4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800e898:	4770      	bx	lr
 800e89a:	4a03      	ldr	r2, [pc, #12]	@ (800e8a8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x18>)
 800e89c:	4801      	ldr	r0, [pc, #4]	@ (800e8a4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800e89e:	6812      	ldr	r2, [r2, #0]
 800e8a0:	601a      	str	r2, [r3, #0]
 800e8a2:	4770      	bx	lr
 800e8a4:	20000038 	.word	0x20000038
 800e8a8:	200000b4 	.word	0x200000b4

0800e8ac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 800e8ac:	4a02      	ldr	r2, [pc, #8]	@ (800e8b8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0xc>)
 800e8ae:	4b03      	ldr	r3, [pc, #12]	@ (800e8bc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x10>)
 800e8b0:	6812      	ldr	r2, [r2, #0]
 800e8b2:	601a      	str	r2, [r3, #0]
 800e8b4:	4770      	bx	lr
 800e8b6:	bf00      	nop
 800e8b8:	200000b4 	.word	0x200000b4
 800e8bc:	20000038 	.word	0x20000038

0800e8c0 <std_msgs__msg__Float32__rosidl_typesupport_introspection_c__Float32_init_function>:
 800e8c0:	f7ff bfce 	b.w	800e860 <std_msgs__msg__Float32__init>

0800e8c4 <std_msgs__msg__Float32__rosidl_typesupport_introspection_c__Float32_fini_function>:
 800e8c4:	f7ff bfd0 	b.w	800e868 <std_msgs__msg__Float32__fini>

0800e8c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 800e8c8:	4b04      	ldr	r3, [pc, #16]	@ (800e8dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800e8ca:	681a      	ldr	r2, [r3, #0]
 800e8cc:	b10a      	cbz	r2, 800e8d2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0xa>
 800e8ce:	4803      	ldr	r0, [pc, #12]	@ (800e8dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800e8d0:	4770      	bx	lr
 800e8d2:	4a03      	ldr	r2, [pc, #12]	@ (800e8e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x18>)
 800e8d4:	4801      	ldr	r0, [pc, #4]	@ (800e8dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800e8d6:	6812      	ldr	r2, [r2, #0]
 800e8d8:	601a      	str	r2, [r3, #0]
 800e8da:	4770      	bx	lr
 800e8dc:	20000080 	.word	0x20000080
 800e8e0:	200000b8 	.word	0x200000b8

0800e8e4 <_Float32__max_serialized_size>:
 800e8e4:	b508      	push	{r3, lr}
 800e8e6:	2104      	movs	r1, #4
 800e8e8:	2000      	movs	r0, #0
 800e8ea:	f001 f92f 	bl	800fb4c <ucdr_alignment>
 800e8ee:	3004      	adds	r0, #4
 800e8f0:	bd08      	pop	{r3, pc}
 800e8f2:	bf00      	nop

0800e8f4 <_Float32__cdr_deserialize>:
 800e8f4:	b109      	cbz	r1, 800e8fa <_Float32__cdr_deserialize+0x6>
 800e8f6:	f001 b841 	b.w	800f97c <ucdr_deserialize_float>
 800e8fa:	4608      	mov	r0, r1
 800e8fc:	4770      	bx	lr
 800e8fe:	bf00      	nop

0800e900 <get_serialized_size_std_msgs__msg__Float32>:
 800e900:	b138      	cbz	r0, 800e912 <get_serialized_size_std_msgs__msg__Float32+0x12>
 800e902:	b508      	push	{r3, lr}
 800e904:	460b      	mov	r3, r1
 800e906:	4618      	mov	r0, r3
 800e908:	2104      	movs	r1, #4
 800e90a:	f001 f91f 	bl	800fb4c <ucdr_alignment>
 800e90e:	3004      	adds	r0, #4
 800e910:	bd08      	pop	{r3, pc}
 800e912:	4770      	bx	lr

0800e914 <_Float32__cdr_serialize>:
 800e914:	b120      	cbz	r0, 800e920 <_Float32__cdr_serialize+0xc>
 800e916:	ed90 0a00 	vldr	s0, [r0]
 800e91a:	4608      	mov	r0, r1
 800e91c:	f000 bf96 	b.w	800f84c <ucdr_serialize_float>
 800e920:	4770      	bx	lr
 800e922:	bf00      	nop

0800e924 <_Float32__get_serialized_size>:
 800e924:	b130      	cbz	r0, 800e934 <_Float32__get_serialized_size+0x10>
 800e926:	b508      	push	{r3, lr}
 800e928:	2104      	movs	r1, #4
 800e92a:	2000      	movs	r0, #0
 800e92c:	f001 f90e 	bl	800fb4c <ucdr_alignment>
 800e930:	3004      	adds	r0, #4
 800e932:	bd08      	pop	{r3, pc}
 800e934:	4770      	bx	lr
 800e936:	bf00      	nop

0800e938 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 800e938:	4800      	ldr	r0, [pc, #0]	@ (800e93c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32+0x4>)
 800e93a:	4770      	bx	lr
 800e93c:	2000008c 	.word	0x2000008c

0800e940 <ucdr_serialize_bool>:
 800e940:	b538      	push	{r3, r4, r5, lr}
 800e942:	460d      	mov	r5, r1
 800e944:	2101      	movs	r1, #1
 800e946:	4604      	mov	r4, r0
 800e948:	f001 f8b4 	bl	800fab4 <ucdr_check_final_buffer_behavior>
 800e94c:	b148      	cbz	r0, 800e962 <ucdr_serialize_bool+0x22>
 800e94e:	68a3      	ldr	r3, [r4, #8]
 800e950:	701d      	strb	r5, [r3, #0]
 800e952:	68a2      	ldr	r2, [r4, #8]
 800e954:	6923      	ldr	r3, [r4, #16]
 800e956:	2101      	movs	r1, #1
 800e958:	440a      	add	r2, r1
 800e95a:	440b      	add	r3, r1
 800e95c:	60a2      	str	r2, [r4, #8]
 800e95e:	6123      	str	r3, [r4, #16]
 800e960:	7561      	strb	r1, [r4, #21]
 800e962:	7da0      	ldrb	r0, [r4, #22]
 800e964:	f080 0001 	eor.w	r0, r0, #1
 800e968:	bd38      	pop	{r3, r4, r5, pc}
 800e96a:	bf00      	nop

0800e96c <ucdr_deserialize_bool>:
 800e96c:	b538      	push	{r3, r4, r5, lr}
 800e96e:	460d      	mov	r5, r1
 800e970:	2101      	movs	r1, #1
 800e972:	4604      	mov	r4, r0
 800e974:	f001 f89e 	bl	800fab4 <ucdr_check_final_buffer_behavior>
 800e978:	b160      	cbz	r0, 800e994 <ucdr_deserialize_bool+0x28>
 800e97a:	68a2      	ldr	r2, [r4, #8]
 800e97c:	6923      	ldr	r3, [r4, #16]
 800e97e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800e982:	3900      	subs	r1, #0
 800e984:	bf18      	it	ne
 800e986:	2101      	movne	r1, #1
 800e988:	7029      	strb	r1, [r5, #0]
 800e98a:	3301      	adds	r3, #1
 800e98c:	2101      	movs	r1, #1
 800e98e:	60a2      	str	r2, [r4, #8]
 800e990:	6123      	str	r3, [r4, #16]
 800e992:	7561      	strb	r1, [r4, #21]
 800e994:	7da0      	ldrb	r0, [r4, #22]
 800e996:	f080 0001 	eor.w	r0, r0, #1
 800e99a:	bd38      	pop	{r3, r4, r5, pc}

0800e99c <ucdr_serialize_uint8_t>:
 800e99c:	b538      	push	{r3, r4, r5, lr}
 800e99e:	460d      	mov	r5, r1
 800e9a0:	2101      	movs	r1, #1
 800e9a2:	4604      	mov	r4, r0
 800e9a4:	f001 f886 	bl	800fab4 <ucdr_check_final_buffer_behavior>
 800e9a8:	b148      	cbz	r0, 800e9be <ucdr_serialize_uint8_t+0x22>
 800e9aa:	68a3      	ldr	r3, [r4, #8]
 800e9ac:	701d      	strb	r5, [r3, #0]
 800e9ae:	68a2      	ldr	r2, [r4, #8]
 800e9b0:	6923      	ldr	r3, [r4, #16]
 800e9b2:	2101      	movs	r1, #1
 800e9b4:	440a      	add	r2, r1
 800e9b6:	440b      	add	r3, r1
 800e9b8:	60a2      	str	r2, [r4, #8]
 800e9ba:	6123      	str	r3, [r4, #16]
 800e9bc:	7561      	strb	r1, [r4, #21]
 800e9be:	7da0      	ldrb	r0, [r4, #22]
 800e9c0:	f080 0001 	eor.w	r0, r0, #1
 800e9c4:	bd38      	pop	{r3, r4, r5, pc}
 800e9c6:	bf00      	nop

0800e9c8 <ucdr_deserialize_uint8_t>:
 800e9c8:	b538      	push	{r3, r4, r5, lr}
 800e9ca:	460d      	mov	r5, r1
 800e9cc:	2101      	movs	r1, #1
 800e9ce:	4604      	mov	r4, r0
 800e9d0:	f001 f870 	bl	800fab4 <ucdr_check_final_buffer_behavior>
 800e9d4:	b150      	cbz	r0, 800e9ec <ucdr_deserialize_uint8_t+0x24>
 800e9d6:	68a3      	ldr	r3, [r4, #8]
 800e9d8:	781b      	ldrb	r3, [r3, #0]
 800e9da:	702b      	strb	r3, [r5, #0]
 800e9dc:	68a2      	ldr	r2, [r4, #8]
 800e9de:	6923      	ldr	r3, [r4, #16]
 800e9e0:	2101      	movs	r1, #1
 800e9e2:	440a      	add	r2, r1
 800e9e4:	440b      	add	r3, r1
 800e9e6:	60a2      	str	r2, [r4, #8]
 800e9e8:	6123      	str	r3, [r4, #16]
 800e9ea:	7561      	strb	r1, [r4, #21]
 800e9ec:	7da0      	ldrb	r0, [r4, #22]
 800e9ee:	f080 0001 	eor.w	r0, r0, #1
 800e9f2:	bd38      	pop	{r3, r4, r5, pc}

0800e9f4 <ucdr_serialize_uint16_t>:
 800e9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9f8:	b082      	sub	sp, #8
 800e9fa:	460b      	mov	r3, r1
 800e9fc:	2102      	movs	r1, #2
 800e9fe:	4604      	mov	r4, r0
 800ea00:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ea04:	f001 f8aa 	bl	800fb5c <ucdr_buffer_alignment>
 800ea08:	4601      	mov	r1, r0
 800ea0a:	4620      	mov	r0, r4
 800ea0c:	7d67      	ldrb	r7, [r4, #21]
 800ea0e:	f001 f8e9 	bl	800fbe4 <ucdr_advance_buffer>
 800ea12:	2102      	movs	r1, #2
 800ea14:	4620      	mov	r0, r4
 800ea16:	f001 f841 	bl	800fa9c <ucdr_check_buffer_available_for>
 800ea1a:	bb78      	cbnz	r0, 800ea7c <ucdr_serialize_uint16_t+0x88>
 800ea1c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ea20:	42ab      	cmp	r3, r5
 800ea22:	d926      	bls.n	800ea72 <ucdr_serialize_uint16_t+0x7e>
 800ea24:	1b5e      	subs	r6, r3, r5
 800ea26:	60a3      	str	r3, [r4, #8]
 800ea28:	6923      	ldr	r3, [r4, #16]
 800ea2a:	f1c6 0802 	rsb	r8, r6, #2
 800ea2e:	4433      	add	r3, r6
 800ea30:	6123      	str	r3, [r4, #16]
 800ea32:	4641      	mov	r1, r8
 800ea34:	4620      	mov	r0, r4
 800ea36:	f001 f83d 	bl	800fab4 <ucdr_check_final_buffer_behavior>
 800ea3a:	2800      	cmp	r0, #0
 800ea3c:	d03b      	beq.n	800eab6 <ucdr_serialize_uint16_t+0xc2>
 800ea3e:	7d23      	ldrb	r3, [r4, #20]
 800ea40:	2b01      	cmp	r3, #1
 800ea42:	d04a      	beq.n	800eada <ucdr_serialize_uint16_t+0xe6>
 800ea44:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ea48:	702b      	strb	r3, [r5, #0]
 800ea4a:	2e00      	cmp	r6, #0
 800ea4c:	d040      	beq.n	800ead0 <ucdr_serialize_uint16_t+0xdc>
 800ea4e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ea52:	706b      	strb	r3, [r5, #1]
 800ea54:	6923      	ldr	r3, [r4, #16]
 800ea56:	68a2      	ldr	r2, [r4, #8]
 800ea58:	7da0      	ldrb	r0, [r4, #22]
 800ea5a:	3302      	adds	r3, #2
 800ea5c:	1b9e      	subs	r6, r3, r6
 800ea5e:	4442      	add	r2, r8
 800ea60:	2302      	movs	r3, #2
 800ea62:	f080 0001 	eor.w	r0, r0, #1
 800ea66:	60a2      	str	r2, [r4, #8]
 800ea68:	6126      	str	r6, [r4, #16]
 800ea6a:	7563      	strb	r3, [r4, #21]
 800ea6c:	b002      	add	sp, #8
 800ea6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea72:	2102      	movs	r1, #2
 800ea74:	4620      	mov	r0, r4
 800ea76:	f001 f81d 	bl	800fab4 <ucdr_check_final_buffer_behavior>
 800ea7a:	b190      	cbz	r0, 800eaa2 <ucdr_serialize_uint16_t+0xae>
 800ea7c:	7d23      	ldrb	r3, [r4, #20]
 800ea7e:	2b01      	cmp	r3, #1
 800ea80:	68a3      	ldr	r3, [r4, #8]
 800ea82:	d014      	beq.n	800eaae <ucdr_serialize_uint16_t+0xba>
 800ea84:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ea88:	701a      	strb	r2, [r3, #0]
 800ea8a:	68a3      	ldr	r3, [r4, #8]
 800ea8c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ea90:	705a      	strb	r2, [r3, #1]
 800ea92:	68a2      	ldr	r2, [r4, #8]
 800ea94:	6923      	ldr	r3, [r4, #16]
 800ea96:	3202      	adds	r2, #2
 800ea98:	3302      	adds	r3, #2
 800ea9a:	2102      	movs	r1, #2
 800ea9c:	60a2      	str	r2, [r4, #8]
 800ea9e:	6123      	str	r3, [r4, #16]
 800eaa0:	7561      	strb	r1, [r4, #21]
 800eaa2:	7da0      	ldrb	r0, [r4, #22]
 800eaa4:	f080 0001 	eor.w	r0, r0, #1
 800eaa8:	b002      	add	sp, #8
 800eaaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaae:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800eab2:	801a      	strh	r2, [r3, #0]
 800eab4:	e7ed      	b.n	800ea92 <ucdr_serialize_uint16_t+0x9e>
 800eab6:	68a2      	ldr	r2, [r4, #8]
 800eab8:	6923      	ldr	r3, [r4, #16]
 800eaba:	7da0      	ldrb	r0, [r4, #22]
 800eabc:	7567      	strb	r7, [r4, #21]
 800eabe:	1b92      	subs	r2, r2, r6
 800eac0:	1b9b      	subs	r3, r3, r6
 800eac2:	f080 0001 	eor.w	r0, r0, #1
 800eac6:	60a2      	str	r2, [r4, #8]
 800eac8:	6123      	str	r3, [r4, #16]
 800eaca:	b002      	add	sp, #8
 800eacc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ead0:	68a3      	ldr	r3, [r4, #8]
 800ead2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ead6:	701a      	strb	r2, [r3, #0]
 800ead8:	e7bc      	b.n	800ea54 <ucdr_serialize_uint16_t+0x60>
 800eada:	4628      	mov	r0, r5
 800eadc:	f10d 0506 	add.w	r5, sp, #6
 800eae0:	4629      	mov	r1, r5
 800eae2:	4632      	mov	r2, r6
 800eae4:	f00c fa87 	bl	801aff6 <memcpy>
 800eae8:	68a0      	ldr	r0, [r4, #8]
 800eaea:	4642      	mov	r2, r8
 800eaec:	19a9      	adds	r1, r5, r6
 800eaee:	f00c fa82 	bl	801aff6 <memcpy>
 800eaf2:	e7af      	b.n	800ea54 <ucdr_serialize_uint16_t+0x60>

0800eaf4 <ucdr_serialize_endian_uint16_t>:
 800eaf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eaf8:	b083      	sub	sp, #12
 800eafa:	460d      	mov	r5, r1
 800eafc:	2102      	movs	r1, #2
 800eafe:	4604      	mov	r4, r0
 800eb00:	f8ad 2006 	strh.w	r2, [sp, #6]
 800eb04:	f001 f82a 	bl	800fb5c <ucdr_buffer_alignment>
 800eb08:	4601      	mov	r1, r0
 800eb0a:	4620      	mov	r0, r4
 800eb0c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800eb10:	f001 f868 	bl	800fbe4 <ucdr_advance_buffer>
 800eb14:	2102      	movs	r1, #2
 800eb16:	4620      	mov	r0, r4
 800eb18:	f000 ffc0 	bl	800fa9c <ucdr_check_buffer_available_for>
 800eb1c:	bb70      	cbnz	r0, 800eb7c <ucdr_serialize_endian_uint16_t+0x88>
 800eb1e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800eb22:	42be      	cmp	r6, r7
 800eb24:	d925      	bls.n	800eb72 <ucdr_serialize_endian_uint16_t+0x7e>
 800eb26:	6923      	ldr	r3, [r4, #16]
 800eb28:	60a6      	str	r6, [r4, #8]
 800eb2a:	1bf6      	subs	r6, r6, r7
 800eb2c:	4433      	add	r3, r6
 800eb2e:	f1c6 0902 	rsb	r9, r6, #2
 800eb32:	6123      	str	r3, [r4, #16]
 800eb34:	4649      	mov	r1, r9
 800eb36:	4620      	mov	r0, r4
 800eb38:	f000 ffbc 	bl	800fab4 <ucdr_check_final_buffer_behavior>
 800eb3c:	2800      	cmp	r0, #0
 800eb3e:	d039      	beq.n	800ebb4 <ucdr_serialize_endian_uint16_t+0xc0>
 800eb40:	2d01      	cmp	r5, #1
 800eb42:	d04a      	beq.n	800ebda <ucdr_serialize_endian_uint16_t+0xe6>
 800eb44:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800eb48:	703b      	strb	r3, [r7, #0]
 800eb4a:	2e00      	cmp	r6, #0
 800eb4c:	d040      	beq.n	800ebd0 <ucdr_serialize_endian_uint16_t+0xdc>
 800eb4e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800eb52:	707b      	strb	r3, [r7, #1]
 800eb54:	6923      	ldr	r3, [r4, #16]
 800eb56:	68a2      	ldr	r2, [r4, #8]
 800eb58:	7da0      	ldrb	r0, [r4, #22]
 800eb5a:	3302      	adds	r3, #2
 800eb5c:	444a      	add	r2, r9
 800eb5e:	1b9b      	subs	r3, r3, r6
 800eb60:	2102      	movs	r1, #2
 800eb62:	f080 0001 	eor.w	r0, r0, #1
 800eb66:	60a2      	str	r2, [r4, #8]
 800eb68:	6123      	str	r3, [r4, #16]
 800eb6a:	7561      	strb	r1, [r4, #21]
 800eb6c:	b003      	add	sp, #12
 800eb6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb72:	2102      	movs	r1, #2
 800eb74:	4620      	mov	r0, r4
 800eb76:	f000 ff9d 	bl	800fab4 <ucdr_check_final_buffer_behavior>
 800eb7a:	b188      	cbz	r0, 800eba0 <ucdr_serialize_endian_uint16_t+0xac>
 800eb7c:	2d01      	cmp	r5, #1
 800eb7e:	68a3      	ldr	r3, [r4, #8]
 800eb80:	d014      	beq.n	800ebac <ucdr_serialize_endian_uint16_t+0xb8>
 800eb82:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800eb86:	701a      	strb	r2, [r3, #0]
 800eb88:	68a3      	ldr	r3, [r4, #8]
 800eb8a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eb8e:	705a      	strb	r2, [r3, #1]
 800eb90:	68a2      	ldr	r2, [r4, #8]
 800eb92:	6923      	ldr	r3, [r4, #16]
 800eb94:	3202      	adds	r2, #2
 800eb96:	3302      	adds	r3, #2
 800eb98:	2102      	movs	r1, #2
 800eb9a:	60a2      	str	r2, [r4, #8]
 800eb9c:	6123      	str	r3, [r4, #16]
 800eb9e:	7561      	strb	r1, [r4, #21]
 800eba0:	7da0      	ldrb	r0, [r4, #22]
 800eba2:	f080 0001 	eor.w	r0, r0, #1
 800eba6:	b003      	add	sp, #12
 800eba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ebb0:	801a      	strh	r2, [r3, #0]
 800ebb2:	e7ed      	b.n	800eb90 <ucdr_serialize_endian_uint16_t+0x9c>
 800ebb4:	68a2      	ldr	r2, [r4, #8]
 800ebb6:	6923      	ldr	r3, [r4, #16]
 800ebb8:	7da0      	ldrb	r0, [r4, #22]
 800ebba:	f884 8015 	strb.w	r8, [r4, #21]
 800ebbe:	1b92      	subs	r2, r2, r6
 800ebc0:	1b9b      	subs	r3, r3, r6
 800ebc2:	f080 0001 	eor.w	r0, r0, #1
 800ebc6:	60a2      	str	r2, [r4, #8]
 800ebc8:	6123      	str	r3, [r4, #16]
 800ebca:	b003      	add	sp, #12
 800ebcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebd0:	68a3      	ldr	r3, [r4, #8]
 800ebd2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ebd6:	701a      	strb	r2, [r3, #0]
 800ebd8:	e7bc      	b.n	800eb54 <ucdr_serialize_endian_uint16_t+0x60>
 800ebda:	f10d 0506 	add.w	r5, sp, #6
 800ebde:	4629      	mov	r1, r5
 800ebe0:	4632      	mov	r2, r6
 800ebe2:	4638      	mov	r0, r7
 800ebe4:	f00c fa07 	bl	801aff6 <memcpy>
 800ebe8:	68a0      	ldr	r0, [r4, #8]
 800ebea:	464a      	mov	r2, r9
 800ebec:	19a9      	adds	r1, r5, r6
 800ebee:	f00c fa02 	bl	801aff6 <memcpy>
 800ebf2:	e7af      	b.n	800eb54 <ucdr_serialize_endian_uint16_t+0x60>

0800ebf4 <ucdr_deserialize_uint16_t>:
 800ebf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebf8:	460d      	mov	r5, r1
 800ebfa:	2102      	movs	r1, #2
 800ebfc:	4604      	mov	r4, r0
 800ebfe:	f000 ffad 	bl	800fb5c <ucdr_buffer_alignment>
 800ec02:	4601      	mov	r1, r0
 800ec04:	4620      	mov	r0, r4
 800ec06:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ec0a:	f000 ffeb 	bl	800fbe4 <ucdr_advance_buffer>
 800ec0e:	2102      	movs	r1, #2
 800ec10:	4620      	mov	r0, r4
 800ec12:	f000 ff43 	bl	800fa9c <ucdr_check_buffer_available_for>
 800ec16:	bb60      	cbnz	r0, 800ec72 <ucdr_deserialize_uint16_t+0x7e>
 800ec18:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ec1c:	42be      	cmp	r6, r7
 800ec1e:	d923      	bls.n	800ec68 <ucdr_deserialize_uint16_t+0x74>
 800ec20:	6923      	ldr	r3, [r4, #16]
 800ec22:	60a6      	str	r6, [r4, #8]
 800ec24:	1bf6      	subs	r6, r6, r7
 800ec26:	4433      	add	r3, r6
 800ec28:	f1c6 0902 	rsb	r9, r6, #2
 800ec2c:	6123      	str	r3, [r4, #16]
 800ec2e:	4649      	mov	r1, r9
 800ec30:	4620      	mov	r0, r4
 800ec32:	f000 ff3f 	bl	800fab4 <ucdr_check_final_buffer_behavior>
 800ec36:	2800      	cmp	r0, #0
 800ec38:	d034      	beq.n	800eca4 <ucdr_deserialize_uint16_t+0xb0>
 800ec3a:	7d23      	ldrb	r3, [r4, #20]
 800ec3c:	2b01      	cmp	r3, #1
 800ec3e:	d042      	beq.n	800ecc6 <ucdr_deserialize_uint16_t+0xd2>
 800ec40:	787b      	ldrb	r3, [r7, #1]
 800ec42:	702b      	strb	r3, [r5, #0]
 800ec44:	2e00      	cmp	r6, #0
 800ec46:	d03a      	beq.n	800ecbe <ucdr_deserialize_uint16_t+0xca>
 800ec48:	783b      	ldrb	r3, [r7, #0]
 800ec4a:	706b      	strb	r3, [r5, #1]
 800ec4c:	6923      	ldr	r3, [r4, #16]
 800ec4e:	68a2      	ldr	r2, [r4, #8]
 800ec50:	7da0      	ldrb	r0, [r4, #22]
 800ec52:	2102      	movs	r1, #2
 800ec54:	3302      	adds	r3, #2
 800ec56:	444a      	add	r2, r9
 800ec58:	1b9b      	subs	r3, r3, r6
 800ec5a:	7561      	strb	r1, [r4, #21]
 800ec5c:	60a2      	str	r2, [r4, #8]
 800ec5e:	6123      	str	r3, [r4, #16]
 800ec60:	f080 0001 	eor.w	r0, r0, #1
 800ec64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec68:	2102      	movs	r1, #2
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	f000 ff22 	bl	800fab4 <ucdr_check_final_buffer_behavior>
 800ec70:	b180      	cbz	r0, 800ec94 <ucdr_deserialize_uint16_t+0xa0>
 800ec72:	7d23      	ldrb	r3, [r4, #20]
 800ec74:	2b01      	cmp	r3, #1
 800ec76:	68a3      	ldr	r3, [r4, #8]
 800ec78:	d011      	beq.n	800ec9e <ucdr_deserialize_uint16_t+0xaa>
 800ec7a:	785b      	ldrb	r3, [r3, #1]
 800ec7c:	702b      	strb	r3, [r5, #0]
 800ec7e:	68a3      	ldr	r3, [r4, #8]
 800ec80:	781b      	ldrb	r3, [r3, #0]
 800ec82:	706b      	strb	r3, [r5, #1]
 800ec84:	68a2      	ldr	r2, [r4, #8]
 800ec86:	6923      	ldr	r3, [r4, #16]
 800ec88:	3202      	adds	r2, #2
 800ec8a:	3302      	adds	r3, #2
 800ec8c:	2102      	movs	r1, #2
 800ec8e:	60a2      	str	r2, [r4, #8]
 800ec90:	6123      	str	r3, [r4, #16]
 800ec92:	7561      	strb	r1, [r4, #21]
 800ec94:	7da0      	ldrb	r0, [r4, #22]
 800ec96:	f080 0001 	eor.w	r0, r0, #1
 800ec9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec9e:	881b      	ldrh	r3, [r3, #0]
 800eca0:	802b      	strh	r3, [r5, #0]
 800eca2:	e7ef      	b.n	800ec84 <ucdr_deserialize_uint16_t+0x90>
 800eca4:	68a2      	ldr	r2, [r4, #8]
 800eca6:	6923      	ldr	r3, [r4, #16]
 800eca8:	7da0      	ldrb	r0, [r4, #22]
 800ecaa:	f884 8015 	strb.w	r8, [r4, #21]
 800ecae:	1b92      	subs	r2, r2, r6
 800ecb0:	1b9b      	subs	r3, r3, r6
 800ecb2:	60a2      	str	r2, [r4, #8]
 800ecb4:	6123      	str	r3, [r4, #16]
 800ecb6:	f080 0001 	eor.w	r0, r0, #1
 800ecba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecbe:	68a3      	ldr	r3, [r4, #8]
 800ecc0:	781b      	ldrb	r3, [r3, #0]
 800ecc2:	706b      	strb	r3, [r5, #1]
 800ecc4:	e7c2      	b.n	800ec4c <ucdr_deserialize_uint16_t+0x58>
 800ecc6:	4639      	mov	r1, r7
 800ecc8:	4632      	mov	r2, r6
 800ecca:	4628      	mov	r0, r5
 800eccc:	f00c f993 	bl	801aff6 <memcpy>
 800ecd0:	68a1      	ldr	r1, [r4, #8]
 800ecd2:	464a      	mov	r2, r9
 800ecd4:	19a8      	adds	r0, r5, r6
 800ecd6:	f00c f98e 	bl	801aff6 <memcpy>
 800ecda:	e7b7      	b.n	800ec4c <ucdr_deserialize_uint16_t+0x58>

0800ecdc <ucdr_deserialize_endian_uint16_t>:
 800ecdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ece0:	460e      	mov	r6, r1
 800ece2:	2102      	movs	r1, #2
 800ece4:	4604      	mov	r4, r0
 800ece6:	4615      	mov	r5, r2
 800ece8:	f000 ff38 	bl	800fb5c <ucdr_buffer_alignment>
 800ecec:	4601      	mov	r1, r0
 800ecee:	4620      	mov	r0, r4
 800ecf0:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ecf4:	f000 ff76 	bl	800fbe4 <ucdr_advance_buffer>
 800ecf8:	2102      	movs	r1, #2
 800ecfa:	4620      	mov	r0, r4
 800ecfc:	f000 fece 	bl	800fa9c <ucdr_check_buffer_available_for>
 800ed00:	bb70      	cbnz	r0, 800ed60 <ucdr_deserialize_endian_uint16_t+0x84>
 800ed02:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800ed06:	4547      	cmp	r7, r8
 800ed08:	d925      	bls.n	800ed56 <ucdr_deserialize_endian_uint16_t+0x7a>
 800ed0a:	6923      	ldr	r3, [r4, #16]
 800ed0c:	60a7      	str	r7, [r4, #8]
 800ed0e:	eba7 0708 	sub.w	r7, r7, r8
 800ed12:	443b      	add	r3, r7
 800ed14:	f1c7 0a02 	rsb	sl, r7, #2
 800ed18:	6123      	str	r3, [r4, #16]
 800ed1a:	4651      	mov	r1, sl
 800ed1c:	4620      	mov	r0, r4
 800ed1e:	f000 fec9 	bl	800fab4 <ucdr_check_final_buffer_behavior>
 800ed22:	2800      	cmp	r0, #0
 800ed24:	d034      	beq.n	800ed90 <ucdr_deserialize_endian_uint16_t+0xb4>
 800ed26:	2e01      	cmp	r6, #1
 800ed28:	d043      	beq.n	800edb2 <ucdr_deserialize_endian_uint16_t+0xd6>
 800ed2a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ed2e:	702b      	strb	r3, [r5, #0]
 800ed30:	2f00      	cmp	r7, #0
 800ed32:	d03a      	beq.n	800edaa <ucdr_deserialize_endian_uint16_t+0xce>
 800ed34:	f898 3000 	ldrb.w	r3, [r8]
 800ed38:	706b      	strb	r3, [r5, #1]
 800ed3a:	6923      	ldr	r3, [r4, #16]
 800ed3c:	68a2      	ldr	r2, [r4, #8]
 800ed3e:	7da0      	ldrb	r0, [r4, #22]
 800ed40:	2102      	movs	r1, #2
 800ed42:	3302      	adds	r3, #2
 800ed44:	4452      	add	r2, sl
 800ed46:	1bdb      	subs	r3, r3, r7
 800ed48:	7561      	strb	r1, [r4, #21]
 800ed4a:	60a2      	str	r2, [r4, #8]
 800ed4c:	6123      	str	r3, [r4, #16]
 800ed4e:	f080 0001 	eor.w	r0, r0, #1
 800ed52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed56:	2102      	movs	r1, #2
 800ed58:	4620      	mov	r0, r4
 800ed5a:	f000 feab 	bl	800fab4 <ucdr_check_final_buffer_behavior>
 800ed5e:	b178      	cbz	r0, 800ed80 <ucdr_deserialize_endian_uint16_t+0xa4>
 800ed60:	2e01      	cmp	r6, #1
 800ed62:	68a3      	ldr	r3, [r4, #8]
 800ed64:	d011      	beq.n	800ed8a <ucdr_deserialize_endian_uint16_t+0xae>
 800ed66:	785b      	ldrb	r3, [r3, #1]
 800ed68:	702b      	strb	r3, [r5, #0]
 800ed6a:	68a3      	ldr	r3, [r4, #8]
 800ed6c:	781b      	ldrb	r3, [r3, #0]
 800ed6e:	706b      	strb	r3, [r5, #1]
 800ed70:	68a2      	ldr	r2, [r4, #8]
 800ed72:	6923      	ldr	r3, [r4, #16]
 800ed74:	3202      	adds	r2, #2
 800ed76:	3302      	adds	r3, #2
 800ed78:	2102      	movs	r1, #2
 800ed7a:	60a2      	str	r2, [r4, #8]
 800ed7c:	6123      	str	r3, [r4, #16]
 800ed7e:	7561      	strb	r1, [r4, #21]
 800ed80:	7da0      	ldrb	r0, [r4, #22]
 800ed82:	f080 0001 	eor.w	r0, r0, #1
 800ed86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed8a:	881b      	ldrh	r3, [r3, #0]
 800ed8c:	802b      	strh	r3, [r5, #0]
 800ed8e:	e7ef      	b.n	800ed70 <ucdr_deserialize_endian_uint16_t+0x94>
 800ed90:	68a2      	ldr	r2, [r4, #8]
 800ed92:	6923      	ldr	r3, [r4, #16]
 800ed94:	7da0      	ldrb	r0, [r4, #22]
 800ed96:	f884 9015 	strb.w	r9, [r4, #21]
 800ed9a:	1bd2      	subs	r2, r2, r7
 800ed9c:	1bdb      	subs	r3, r3, r7
 800ed9e:	60a2      	str	r2, [r4, #8]
 800eda0:	6123      	str	r3, [r4, #16]
 800eda2:	f080 0001 	eor.w	r0, r0, #1
 800eda6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edaa:	68a3      	ldr	r3, [r4, #8]
 800edac:	781b      	ldrb	r3, [r3, #0]
 800edae:	706b      	strb	r3, [r5, #1]
 800edb0:	e7c3      	b.n	800ed3a <ucdr_deserialize_endian_uint16_t+0x5e>
 800edb2:	4641      	mov	r1, r8
 800edb4:	463a      	mov	r2, r7
 800edb6:	4628      	mov	r0, r5
 800edb8:	f00c f91d 	bl	801aff6 <memcpy>
 800edbc:	68a1      	ldr	r1, [r4, #8]
 800edbe:	4652      	mov	r2, sl
 800edc0:	19e8      	adds	r0, r5, r7
 800edc2:	f00c f918 	bl	801aff6 <memcpy>
 800edc6:	e7b8      	b.n	800ed3a <ucdr_deserialize_endian_uint16_t+0x5e>

0800edc8 <ucdr_serialize_uint32_t>:
 800edc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edcc:	b082      	sub	sp, #8
 800edce:	4604      	mov	r4, r0
 800edd0:	9101      	str	r1, [sp, #4]
 800edd2:	2104      	movs	r1, #4
 800edd4:	f000 fec2 	bl	800fb5c <ucdr_buffer_alignment>
 800edd8:	4601      	mov	r1, r0
 800edda:	4620      	mov	r0, r4
 800eddc:	7d67      	ldrb	r7, [r4, #21]
 800edde:	f000 ff01 	bl	800fbe4 <ucdr_advance_buffer>
 800ede2:	2104      	movs	r1, #4
 800ede4:	4620      	mov	r0, r4
 800ede6:	f000 fe59 	bl	800fa9c <ucdr_check_buffer_available_for>
 800edea:	2800      	cmp	r0, #0
 800edec:	d139      	bne.n	800ee62 <ucdr_serialize_uint32_t+0x9a>
 800edee:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800edf2:	42ab      	cmp	r3, r5
 800edf4:	d930      	bls.n	800ee58 <ucdr_serialize_uint32_t+0x90>
 800edf6:	1b5e      	subs	r6, r3, r5
 800edf8:	60a3      	str	r3, [r4, #8]
 800edfa:	6923      	ldr	r3, [r4, #16]
 800edfc:	f1c6 0804 	rsb	r8, r6, #4
 800ee00:	4433      	add	r3, r6
 800ee02:	6123      	str	r3, [r4, #16]
 800ee04:	4641      	mov	r1, r8
 800ee06:	4620      	mov	r0, r4
 800ee08:	f000 fe54 	bl	800fab4 <ucdr_check_final_buffer_behavior>
 800ee0c:	2800      	cmp	r0, #0
 800ee0e:	d04c      	beq.n	800eeaa <ucdr_serialize_uint32_t+0xe2>
 800ee10:	7d23      	ldrb	r3, [r4, #20]
 800ee12:	2b01      	cmp	r3, #1
 800ee14:	d063      	beq.n	800eede <ucdr_serialize_uint32_t+0x116>
 800ee16:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ee1a:	702b      	strb	r3, [r5, #0]
 800ee1c:	2e00      	cmp	r6, #0
 800ee1e:	d051      	beq.n	800eec4 <ucdr_serialize_uint32_t+0xfc>
 800ee20:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ee24:	706b      	strb	r3, [r5, #1]
 800ee26:	2e01      	cmp	r6, #1
 800ee28:	d050      	beq.n	800eecc <ucdr_serialize_uint32_t+0x104>
 800ee2a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ee2e:	70ab      	strb	r3, [r5, #2]
 800ee30:	2e02      	cmp	r6, #2
 800ee32:	d04f      	beq.n	800eed4 <ucdr_serialize_uint32_t+0x10c>
 800ee34:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ee38:	70eb      	strb	r3, [r5, #3]
 800ee3a:	6923      	ldr	r3, [r4, #16]
 800ee3c:	68a2      	ldr	r2, [r4, #8]
 800ee3e:	7da0      	ldrb	r0, [r4, #22]
 800ee40:	3304      	adds	r3, #4
 800ee42:	1b9e      	subs	r6, r3, r6
 800ee44:	4442      	add	r2, r8
 800ee46:	2304      	movs	r3, #4
 800ee48:	f080 0001 	eor.w	r0, r0, #1
 800ee4c:	60a2      	str	r2, [r4, #8]
 800ee4e:	6126      	str	r6, [r4, #16]
 800ee50:	7563      	strb	r3, [r4, #21]
 800ee52:	b002      	add	sp, #8
 800ee54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee58:	2104      	movs	r1, #4
 800ee5a:	4620      	mov	r0, r4
 800ee5c:	f000 fe2a 	bl	800fab4 <ucdr_check_final_buffer_behavior>
 800ee60:	b1d0      	cbz	r0, 800ee98 <ucdr_serialize_uint32_t+0xd0>
 800ee62:	7d23      	ldrb	r3, [r4, #20]
 800ee64:	2b01      	cmp	r3, #1
 800ee66:	68a3      	ldr	r3, [r4, #8]
 800ee68:	d01c      	beq.n	800eea4 <ucdr_serialize_uint32_t+0xdc>
 800ee6a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ee6e:	701a      	strb	r2, [r3, #0]
 800ee70:	68a3      	ldr	r3, [r4, #8]
 800ee72:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ee76:	705a      	strb	r2, [r3, #1]
 800ee78:	68a3      	ldr	r3, [r4, #8]
 800ee7a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ee7e:	709a      	strb	r2, [r3, #2]
 800ee80:	68a3      	ldr	r3, [r4, #8]
 800ee82:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ee86:	70da      	strb	r2, [r3, #3]
 800ee88:	68a2      	ldr	r2, [r4, #8]
 800ee8a:	6923      	ldr	r3, [r4, #16]
 800ee8c:	3204      	adds	r2, #4
 800ee8e:	3304      	adds	r3, #4
 800ee90:	2104      	movs	r1, #4
 800ee92:	60a2      	str	r2, [r4, #8]
 800ee94:	6123      	str	r3, [r4, #16]
 800ee96:	7561      	strb	r1, [r4, #21]
 800ee98:	7da0      	ldrb	r0, [r4, #22]
 800ee9a:	f080 0001 	eor.w	r0, r0, #1
 800ee9e:	b002      	add	sp, #8
 800eea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eea4:	9a01      	ldr	r2, [sp, #4]
 800eea6:	601a      	str	r2, [r3, #0]
 800eea8:	e7ee      	b.n	800ee88 <ucdr_serialize_uint32_t+0xc0>
 800eeaa:	68a2      	ldr	r2, [r4, #8]
 800eeac:	6923      	ldr	r3, [r4, #16]
 800eeae:	7da0      	ldrb	r0, [r4, #22]
 800eeb0:	7567      	strb	r7, [r4, #21]
 800eeb2:	1b92      	subs	r2, r2, r6
 800eeb4:	1b9b      	subs	r3, r3, r6
 800eeb6:	f080 0001 	eor.w	r0, r0, #1
 800eeba:	60a2      	str	r2, [r4, #8]
 800eebc:	6123      	str	r3, [r4, #16]
 800eebe:	b002      	add	sp, #8
 800eec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eec4:	68a3      	ldr	r3, [r4, #8]
 800eec6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eeca:	701a      	strb	r2, [r3, #0]
 800eecc:	68a3      	ldr	r3, [r4, #8]
 800eece:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800eed2:	701a      	strb	r2, [r3, #0]
 800eed4:	68a3      	ldr	r3, [r4, #8]
 800eed6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800eeda:	701a      	strb	r2, [r3, #0]
 800eedc:	e7ad      	b.n	800ee3a <ucdr_serialize_uint32_t+0x72>
 800eede:	4628      	mov	r0, r5
 800eee0:	ad01      	add	r5, sp, #4
 800eee2:	4629      	mov	r1, r5
 800eee4:	4632      	mov	r2, r6
 800eee6:	f00c f886 	bl	801aff6 <memcpy>
 800eeea:	68a0      	ldr	r0, [r4, #8]
 800eeec:	4642      	mov	r2, r8
 800eeee:	19a9      	adds	r1, r5, r6
 800eef0:	f00c f881 	bl	801aff6 <memcpy>
 800eef4:	e7a1      	b.n	800ee3a <ucdr_serialize_uint32_t+0x72>
 800eef6:	bf00      	nop

0800eef8 <ucdr_serialize_endian_uint32_t>:
 800eef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eefc:	b083      	sub	sp, #12
 800eefe:	460d      	mov	r5, r1
 800ef00:	2104      	movs	r1, #4
 800ef02:	4604      	mov	r4, r0
 800ef04:	9201      	str	r2, [sp, #4]
 800ef06:	f000 fe29 	bl	800fb5c <ucdr_buffer_alignment>
 800ef0a:	4601      	mov	r1, r0
 800ef0c:	4620      	mov	r0, r4
 800ef0e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ef12:	f000 fe67 	bl	800fbe4 <ucdr_advance_buffer>
 800ef16:	2104      	movs	r1, #4
 800ef18:	4620      	mov	r0, r4
 800ef1a:	f000 fdbf 	bl	800fa9c <ucdr_check_buffer_available_for>
 800ef1e:	2800      	cmp	r0, #0
 800ef20:	d138      	bne.n	800ef94 <ucdr_serialize_endian_uint32_t+0x9c>
 800ef22:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ef26:	42b7      	cmp	r7, r6
 800ef28:	d92f      	bls.n	800ef8a <ucdr_serialize_endian_uint32_t+0x92>
 800ef2a:	6923      	ldr	r3, [r4, #16]
 800ef2c:	60a7      	str	r7, [r4, #8]
 800ef2e:	1bbf      	subs	r7, r7, r6
 800ef30:	443b      	add	r3, r7
 800ef32:	f1c7 0904 	rsb	r9, r7, #4
 800ef36:	6123      	str	r3, [r4, #16]
 800ef38:	4649      	mov	r1, r9
 800ef3a:	4620      	mov	r0, r4
 800ef3c:	f000 fdba 	bl	800fab4 <ucdr_check_final_buffer_behavior>
 800ef40:	2800      	cmp	r0, #0
 800ef42:	d04a      	beq.n	800efda <ucdr_serialize_endian_uint32_t+0xe2>
 800ef44:	2d01      	cmp	r5, #1
 800ef46:	d063      	beq.n	800f010 <ucdr_serialize_endian_uint32_t+0x118>
 800ef48:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ef4c:	7033      	strb	r3, [r6, #0]
 800ef4e:	2f00      	cmp	r7, #0
 800ef50:	d051      	beq.n	800eff6 <ucdr_serialize_endian_uint32_t+0xfe>
 800ef52:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ef56:	7073      	strb	r3, [r6, #1]
 800ef58:	2f01      	cmp	r7, #1
 800ef5a:	d050      	beq.n	800effe <ucdr_serialize_endian_uint32_t+0x106>
 800ef5c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ef60:	70b3      	strb	r3, [r6, #2]
 800ef62:	2f02      	cmp	r7, #2
 800ef64:	d04f      	beq.n	800f006 <ucdr_serialize_endian_uint32_t+0x10e>
 800ef66:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ef6a:	70f3      	strb	r3, [r6, #3]
 800ef6c:	6923      	ldr	r3, [r4, #16]
 800ef6e:	68a2      	ldr	r2, [r4, #8]
 800ef70:	7da0      	ldrb	r0, [r4, #22]
 800ef72:	3304      	adds	r3, #4
 800ef74:	444a      	add	r2, r9
 800ef76:	1bdb      	subs	r3, r3, r7
 800ef78:	2104      	movs	r1, #4
 800ef7a:	f080 0001 	eor.w	r0, r0, #1
 800ef7e:	60a2      	str	r2, [r4, #8]
 800ef80:	6123      	str	r3, [r4, #16]
 800ef82:	7561      	strb	r1, [r4, #21]
 800ef84:	b003      	add	sp, #12
 800ef86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef8a:	2104      	movs	r1, #4
 800ef8c:	4620      	mov	r0, r4
 800ef8e:	f000 fd91 	bl	800fab4 <ucdr_check_final_buffer_behavior>
 800ef92:	b1c8      	cbz	r0, 800efc8 <ucdr_serialize_endian_uint32_t+0xd0>
 800ef94:	2d01      	cmp	r5, #1
 800ef96:	68a3      	ldr	r3, [r4, #8]
 800ef98:	d01c      	beq.n	800efd4 <ucdr_serialize_endian_uint32_t+0xdc>
 800ef9a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ef9e:	701a      	strb	r2, [r3, #0]
 800efa0:	68a3      	ldr	r3, [r4, #8]
 800efa2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800efa6:	705a      	strb	r2, [r3, #1]
 800efa8:	68a3      	ldr	r3, [r4, #8]
 800efaa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800efae:	709a      	strb	r2, [r3, #2]
 800efb0:	68a3      	ldr	r3, [r4, #8]
 800efb2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800efb6:	70da      	strb	r2, [r3, #3]
 800efb8:	68a2      	ldr	r2, [r4, #8]
 800efba:	6923      	ldr	r3, [r4, #16]
 800efbc:	3204      	adds	r2, #4
 800efbe:	3304      	adds	r3, #4
 800efc0:	2104      	movs	r1, #4
 800efc2:	60a2      	str	r2, [r4, #8]
 800efc4:	6123      	str	r3, [r4, #16]
 800efc6:	7561      	strb	r1, [r4, #21]
 800efc8:	7da0      	ldrb	r0, [r4, #22]
 800efca:	f080 0001 	eor.w	r0, r0, #1
 800efce:	b003      	add	sp, #12
 800efd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efd4:	9a01      	ldr	r2, [sp, #4]
 800efd6:	601a      	str	r2, [r3, #0]
 800efd8:	e7ee      	b.n	800efb8 <ucdr_serialize_endian_uint32_t+0xc0>
 800efda:	68a2      	ldr	r2, [r4, #8]
 800efdc:	6923      	ldr	r3, [r4, #16]
 800efde:	7da0      	ldrb	r0, [r4, #22]
 800efe0:	f884 8015 	strb.w	r8, [r4, #21]
 800efe4:	1bd2      	subs	r2, r2, r7
 800efe6:	1bdb      	subs	r3, r3, r7
 800efe8:	f080 0001 	eor.w	r0, r0, #1
 800efec:	60a2      	str	r2, [r4, #8]
 800efee:	6123      	str	r3, [r4, #16]
 800eff0:	b003      	add	sp, #12
 800eff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eff6:	68a3      	ldr	r3, [r4, #8]
 800eff8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800effc:	701a      	strb	r2, [r3, #0]
 800effe:	68a3      	ldr	r3, [r4, #8]
 800f000:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f004:	701a      	strb	r2, [r3, #0]
 800f006:	68a3      	ldr	r3, [r4, #8]
 800f008:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f00c:	701a      	strb	r2, [r3, #0]
 800f00e:	e7ad      	b.n	800ef6c <ucdr_serialize_endian_uint32_t+0x74>
 800f010:	ad01      	add	r5, sp, #4
 800f012:	4629      	mov	r1, r5
 800f014:	463a      	mov	r2, r7
 800f016:	4630      	mov	r0, r6
 800f018:	f00b ffed 	bl	801aff6 <memcpy>
 800f01c:	68a0      	ldr	r0, [r4, #8]
 800f01e:	464a      	mov	r2, r9
 800f020:	19e9      	adds	r1, r5, r7
 800f022:	f00b ffe8 	bl	801aff6 <memcpy>
 800f026:	e7a1      	b.n	800ef6c <ucdr_serialize_endian_uint32_t+0x74>

0800f028 <ucdr_deserialize_uint32_t>:
 800f028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f02c:	460d      	mov	r5, r1
 800f02e:	2104      	movs	r1, #4
 800f030:	4604      	mov	r4, r0
 800f032:	f000 fd93 	bl	800fb5c <ucdr_buffer_alignment>
 800f036:	4601      	mov	r1, r0
 800f038:	4620      	mov	r0, r4
 800f03a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f03e:	f000 fdd1 	bl	800fbe4 <ucdr_advance_buffer>
 800f042:	2104      	movs	r1, #4
 800f044:	4620      	mov	r0, r4
 800f046:	f000 fd29 	bl	800fa9c <ucdr_check_buffer_available_for>
 800f04a:	2800      	cmp	r0, #0
 800f04c:	d138      	bne.n	800f0c0 <ucdr_deserialize_uint32_t+0x98>
 800f04e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f052:	42b7      	cmp	r7, r6
 800f054:	d92f      	bls.n	800f0b6 <ucdr_deserialize_uint32_t+0x8e>
 800f056:	6923      	ldr	r3, [r4, #16]
 800f058:	60a7      	str	r7, [r4, #8]
 800f05a:	1bbf      	subs	r7, r7, r6
 800f05c:	443b      	add	r3, r7
 800f05e:	f1c7 0904 	rsb	r9, r7, #4
 800f062:	6123      	str	r3, [r4, #16]
 800f064:	4649      	mov	r1, r9
 800f066:	4620      	mov	r0, r4
 800f068:	f000 fd24 	bl	800fab4 <ucdr_check_final_buffer_behavior>
 800f06c:	2800      	cmp	r0, #0
 800f06e:	d046      	beq.n	800f0fe <ucdr_deserialize_uint32_t+0xd6>
 800f070:	7d23      	ldrb	r3, [r4, #20]
 800f072:	2b01      	cmp	r3, #1
 800f074:	d05c      	beq.n	800f130 <ucdr_deserialize_uint32_t+0x108>
 800f076:	78f3      	ldrb	r3, [r6, #3]
 800f078:	702b      	strb	r3, [r5, #0]
 800f07a:	2f00      	cmp	r7, #0
 800f07c:	d04c      	beq.n	800f118 <ucdr_deserialize_uint32_t+0xf0>
 800f07e:	78b3      	ldrb	r3, [r6, #2]
 800f080:	706b      	strb	r3, [r5, #1]
 800f082:	2f01      	cmp	r7, #1
 800f084:	f105 0302 	add.w	r3, r5, #2
 800f088:	d04a      	beq.n	800f120 <ucdr_deserialize_uint32_t+0xf8>
 800f08a:	7873      	ldrb	r3, [r6, #1]
 800f08c:	70ab      	strb	r3, [r5, #2]
 800f08e:	2f02      	cmp	r7, #2
 800f090:	f105 0303 	add.w	r3, r5, #3
 800f094:	d048      	beq.n	800f128 <ucdr_deserialize_uint32_t+0x100>
 800f096:	7833      	ldrb	r3, [r6, #0]
 800f098:	70eb      	strb	r3, [r5, #3]
 800f09a:	6923      	ldr	r3, [r4, #16]
 800f09c:	68a2      	ldr	r2, [r4, #8]
 800f09e:	7da0      	ldrb	r0, [r4, #22]
 800f0a0:	2104      	movs	r1, #4
 800f0a2:	3304      	adds	r3, #4
 800f0a4:	444a      	add	r2, r9
 800f0a6:	1bdb      	subs	r3, r3, r7
 800f0a8:	7561      	strb	r1, [r4, #21]
 800f0aa:	60a2      	str	r2, [r4, #8]
 800f0ac:	6123      	str	r3, [r4, #16]
 800f0ae:	f080 0001 	eor.w	r0, r0, #1
 800f0b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0b6:	2104      	movs	r1, #4
 800f0b8:	4620      	mov	r0, r4
 800f0ba:	f000 fcfb 	bl	800fab4 <ucdr_check_final_buffer_behavior>
 800f0be:	b1b0      	cbz	r0, 800f0ee <ucdr_deserialize_uint32_t+0xc6>
 800f0c0:	7d23      	ldrb	r3, [r4, #20]
 800f0c2:	2b01      	cmp	r3, #1
 800f0c4:	68a3      	ldr	r3, [r4, #8]
 800f0c6:	d017      	beq.n	800f0f8 <ucdr_deserialize_uint32_t+0xd0>
 800f0c8:	78db      	ldrb	r3, [r3, #3]
 800f0ca:	702b      	strb	r3, [r5, #0]
 800f0cc:	68a3      	ldr	r3, [r4, #8]
 800f0ce:	789b      	ldrb	r3, [r3, #2]
 800f0d0:	706b      	strb	r3, [r5, #1]
 800f0d2:	68a3      	ldr	r3, [r4, #8]
 800f0d4:	785b      	ldrb	r3, [r3, #1]
 800f0d6:	70ab      	strb	r3, [r5, #2]
 800f0d8:	68a3      	ldr	r3, [r4, #8]
 800f0da:	781b      	ldrb	r3, [r3, #0]
 800f0dc:	70eb      	strb	r3, [r5, #3]
 800f0de:	68a2      	ldr	r2, [r4, #8]
 800f0e0:	6923      	ldr	r3, [r4, #16]
 800f0e2:	3204      	adds	r2, #4
 800f0e4:	3304      	adds	r3, #4
 800f0e6:	2104      	movs	r1, #4
 800f0e8:	60a2      	str	r2, [r4, #8]
 800f0ea:	6123      	str	r3, [r4, #16]
 800f0ec:	7561      	strb	r1, [r4, #21]
 800f0ee:	7da0      	ldrb	r0, [r4, #22]
 800f0f0:	f080 0001 	eor.w	r0, r0, #1
 800f0f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	602b      	str	r3, [r5, #0]
 800f0fc:	e7ef      	b.n	800f0de <ucdr_deserialize_uint32_t+0xb6>
 800f0fe:	68a2      	ldr	r2, [r4, #8]
 800f100:	6923      	ldr	r3, [r4, #16]
 800f102:	7da0      	ldrb	r0, [r4, #22]
 800f104:	f884 8015 	strb.w	r8, [r4, #21]
 800f108:	1bd2      	subs	r2, r2, r7
 800f10a:	1bdb      	subs	r3, r3, r7
 800f10c:	60a2      	str	r2, [r4, #8]
 800f10e:	6123      	str	r3, [r4, #16]
 800f110:	f080 0001 	eor.w	r0, r0, #1
 800f114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f118:	68a3      	ldr	r3, [r4, #8]
 800f11a:	789b      	ldrb	r3, [r3, #2]
 800f11c:	706b      	strb	r3, [r5, #1]
 800f11e:	1cab      	adds	r3, r5, #2
 800f120:	68a2      	ldr	r2, [r4, #8]
 800f122:	7852      	ldrb	r2, [r2, #1]
 800f124:	f803 2b01 	strb.w	r2, [r3], #1
 800f128:	68a2      	ldr	r2, [r4, #8]
 800f12a:	7812      	ldrb	r2, [r2, #0]
 800f12c:	701a      	strb	r2, [r3, #0]
 800f12e:	e7b4      	b.n	800f09a <ucdr_deserialize_uint32_t+0x72>
 800f130:	4631      	mov	r1, r6
 800f132:	463a      	mov	r2, r7
 800f134:	4628      	mov	r0, r5
 800f136:	f00b ff5e 	bl	801aff6 <memcpy>
 800f13a:	68a1      	ldr	r1, [r4, #8]
 800f13c:	464a      	mov	r2, r9
 800f13e:	19e8      	adds	r0, r5, r7
 800f140:	f00b ff59 	bl	801aff6 <memcpy>
 800f144:	e7a9      	b.n	800f09a <ucdr_deserialize_uint32_t+0x72>
 800f146:	bf00      	nop

0800f148 <ucdr_deserialize_endian_uint32_t>:
 800f148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f14c:	460e      	mov	r6, r1
 800f14e:	2104      	movs	r1, #4
 800f150:	4604      	mov	r4, r0
 800f152:	4615      	mov	r5, r2
 800f154:	f000 fd02 	bl	800fb5c <ucdr_buffer_alignment>
 800f158:	4601      	mov	r1, r0
 800f15a:	4620      	mov	r0, r4
 800f15c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f160:	f000 fd40 	bl	800fbe4 <ucdr_advance_buffer>
 800f164:	2104      	movs	r1, #4
 800f166:	4620      	mov	r0, r4
 800f168:	f000 fc98 	bl	800fa9c <ucdr_check_buffer_available_for>
 800f16c:	2800      	cmp	r0, #0
 800f16e:	d13c      	bne.n	800f1ea <ucdr_deserialize_endian_uint32_t+0xa2>
 800f170:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800f174:	42bb      	cmp	r3, r7
 800f176:	d933      	bls.n	800f1e0 <ucdr_deserialize_endian_uint32_t+0x98>
 800f178:	eba3 0807 	sub.w	r8, r3, r7
 800f17c:	60a3      	str	r3, [r4, #8]
 800f17e:	6923      	ldr	r3, [r4, #16]
 800f180:	f1c8 0a04 	rsb	sl, r8, #4
 800f184:	4443      	add	r3, r8
 800f186:	6123      	str	r3, [r4, #16]
 800f188:	4651      	mov	r1, sl
 800f18a:	4620      	mov	r0, r4
 800f18c:	f000 fc92 	bl	800fab4 <ucdr_check_final_buffer_behavior>
 800f190:	2800      	cmp	r0, #0
 800f192:	d048      	beq.n	800f226 <ucdr_deserialize_endian_uint32_t+0xde>
 800f194:	2e01      	cmp	r6, #1
 800f196:	d061      	beq.n	800f25c <ucdr_deserialize_endian_uint32_t+0x114>
 800f198:	78fb      	ldrb	r3, [r7, #3]
 800f19a:	702b      	strb	r3, [r5, #0]
 800f19c:	f1b8 0f00 	cmp.w	r8, #0
 800f1a0:	d050      	beq.n	800f244 <ucdr_deserialize_endian_uint32_t+0xfc>
 800f1a2:	78bb      	ldrb	r3, [r7, #2]
 800f1a4:	706b      	strb	r3, [r5, #1]
 800f1a6:	f1b8 0f01 	cmp.w	r8, #1
 800f1aa:	f105 0302 	add.w	r3, r5, #2
 800f1ae:	d04d      	beq.n	800f24c <ucdr_deserialize_endian_uint32_t+0x104>
 800f1b0:	787b      	ldrb	r3, [r7, #1]
 800f1b2:	70ab      	strb	r3, [r5, #2]
 800f1b4:	f1b8 0f02 	cmp.w	r8, #2
 800f1b8:	f105 0303 	add.w	r3, r5, #3
 800f1bc:	d04a      	beq.n	800f254 <ucdr_deserialize_endian_uint32_t+0x10c>
 800f1be:	783b      	ldrb	r3, [r7, #0]
 800f1c0:	70eb      	strb	r3, [r5, #3]
 800f1c2:	6923      	ldr	r3, [r4, #16]
 800f1c4:	68a2      	ldr	r2, [r4, #8]
 800f1c6:	7da0      	ldrb	r0, [r4, #22]
 800f1c8:	2104      	movs	r1, #4
 800f1ca:	3304      	adds	r3, #4
 800f1cc:	4452      	add	r2, sl
 800f1ce:	eba3 0308 	sub.w	r3, r3, r8
 800f1d2:	7561      	strb	r1, [r4, #21]
 800f1d4:	60a2      	str	r2, [r4, #8]
 800f1d6:	6123      	str	r3, [r4, #16]
 800f1d8:	f080 0001 	eor.w	r0, r0, #1
 800f1dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1e0:	2104      	movs	r1, #4
 800f1e2:	4620      	mov	r0, r4
 800f1e4:	f000 fc66 	bl	800fab4 <ucdr_check_final_buffer_behavior>
 800f1e8:	b1a8      	cbz	r0, 800f216 <ucdr_deserialize_endian_uint32_t+0xce>
 800f1ea:	2e01      	cmp	r6, #1
 800f1ec:	68a3      	ldr	r3, [r4, #8]
 800f1ee:	d017      	beq.n	800f220 <ucdr_deserialize_endian_uint32_t+0xd8>
 800f1f0:	78db      	ldrb	r3, [r3, #3]
 800f1f2:	702b      	strb	r3, [r5, #0]
 800f1f4:	68a3      	ldr	r3, [r4, #8]
 800f1f6:	789b      	ldrb	r3, [r3, #2]
 800f1f8:	706b      	strb	r3, [r5, #1]
 800f1fa:	68a3      	ldr	r3, [r4, #8]
 800f1fc:	785b      	ldrb	r3, [r3, #1]
 800f1fe:	70ab      	strb	r3, [r5, #2]
 800f200:	68a3      	ldr	r3, [r4, #8]
 800f202:	781b      	ldrb	r3, [r3, #0]
 800f204:	70eb      	strb	r3, [r5, #3]
 800f206:	68a2      	ldr	r2, [r4, #8]
 800f208:	6923      	ldr	r3, [r4, #16]
 800f20a:	3204      	adds	r2, #4
 800f20c:	3304      	adds	r3, #4
 800f20e:	2104      	movs	r1, #4
 800f210:	60a2      	str	r2, [r4, #8]
 800f212:	6123      	str	r3, [r4, #16]
 800f214:	7561      	strb	r1, [r4, #21]
 800f216:	7da0      	ldrb	r0, [r4, #22]
 800f218:	f080 0001 	eor.w	r0, r0, #1
 800f21c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	602b      	str	r3, [r5, #0]
 800f224:	e7ef      	b.n	800f206 <ucdr_deserialize_endian_uint32_t+0xbe>
 800f226:	68a2      	ldr	r2, [r4, #8]
 800f228:	6923      	ldr	r3, [r4, #16]
 800f22a:	7da0      	ldrb	r0, [r4, #22]
 800f22c:	f884 9015 	strb.w	r9, [r4, #21]
 800f230:	eba2 0208 	sub.w	r2, r2, r8
 800f234:	eba3 0308 	sub.w	r3, r3, r8
 800f238:	60a2      	str	r2, [r4, #8]
 800f23a:	6123      	str	r3, [r4, #16]
 800f23c:	f080 0001 	eor.w	r0, r0, #1
 800f240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f244:	68a3      	ldr	r3, [r4, #8]
 800f246:	789b      	ldrb	r3, [r3, #2]
 800f248:	706b      	strb	r3, [r5, #1]
 800f24a:	1cab      	adds	r3, r5, #2
 800f24c:	68a2      	ldr	r2, [r4, #8]
 800f24e:	7852      	ldrb	r2, [r2, #1]
 800f250:	f803 2b01 	strb.w	r2, [r3], #1
 800f254:	68a2      	ldr	r2, [r4, #8]
 800f256:	7812      	ldrb	r2, [r2, #0]
 800f258:	701a      	strb	r2, [r3, #0]
 800f25a:	e7b2      	b.n	800f1c2 <ucdr_deserialize_endian_uint32_t+0x7a>
 800f25c:	4639      	mov	r1, r7
 800f25e:	4642      	mov	r2, r8
 800f260:	4628      	mov	r0, r5
 800f262:	f00b fec8 	bl	801aff6 <memcpy>
 800f266:	68a1      	ldr	r1, [r4, #8]
 800f268:	4652      	mov	r2, sl
 800f26a:	eb05 0008 	add.w	r0, r5, r8
 800f26e:	f00b fec2 	bl	801aff6 <memcpy>
 800f272:	e7a6      	b.n	800f1c2 <ucdr_deserialize_endian_uint32_t+0x7a>

0800f274 <ucdr_serialize_uint64_t>:
 800f274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f278:	2108      	movs	r1, #8
 800f27a:	b082      	sub	sp, #8
 800f27c:	4604      	mov	r4, r0
 800f27e:	e9cd 2300 	strd	r2, r3, [sp]
 800f282:	f000 fc6b 	bl	800fb5c <ucdr_buffer_alignment>
 800f286:	4601      	mov	r1, r0
 800f288:	4620      	mov	r0, r4
 800f28a:	7d67      	ldrb	r7, [r4, #21]
 800f28c:	f000 fcaa 	bl	800fbe4 <ucdr_advance_buffer>
 800f290:	2108      	movs	r1, #8
 800f292:	4620      	mov	r0, r4
 800f294:	f000 fc02 	bl	800fa9c <ucdr_check_buffer_available_for>
 800f298:	2800      	cmp	r0, #0
 800f29a:	d14e      	bne.n	800f33a <ucdr_serialize_uint64_t+0xc6>
 800f29c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f2a0:	42ab      	cmp	r3, r5
 800f2a2:	d945      	bls.n	800f330 <ucdr_serialize_uint64_t+0xbc>
 800f2a4:	1b5e      	subs	r6, r3, r5
 800f2a6:	60a3      	str	r3, [r4, #8]
 800f2a8:	6923      	ldr	r3, [r4, #16]
 800f2aa:	f1c6 0808 	rsb	r8, r6, #8
 800f2ae:	4433      	add	r3, r6
 800f2b0:	6123      	str	r3, [r4, #16]
 800f2b2:	4641      	mov	r1, r8
 800f2b4:	4620      	mov	r0, r4
 800f2b6:	f000 fbfd 	bl	800fab4 <ucdr_check_final_buffer_behavior>
 800f2ba:	2800      	cmp	r0, #0
 800f2bc:	d074      	beq.n	800f3a8 <ucdr_serialize_uint64_t+0x134>
 800f2be:	7d23      	ldrb	r3, [r4, #20]
 800f2c0:	2b01      	cmp	r3, #1
 800f2c2:	f000 809b 	beq.w	800f3fc <ucdr_serialize_uint64_t+0x188>
 800f2c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f2ca:	702b      	strb	r3, [r5, #0]
 800f2cc:	2e00      	cmp	r6, #0
 800f2ce:	d078      	beq.n	800f3c2 <ucdr_serialize_uint64_t+0x14e>
 800f2d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f2d4:	706b      	strb	r3, [r5, #1]
 800f2d6:	2e01      	cmp	r6, #1
 800f2d8:	d077      	beq.n	800f3ca <ucdr_serialize_uint64_t+0x156>
 800f2da:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f2de:	70ab      	strb	r3, [r5, #2]
 800f2e0:	2e02      	cmp	r6, #2
 800f2e2:	d076      	beq.n	800f3d2 <ucdr_serialize_uint64_t+0x15e>
 800f2e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f2e8:	70eb      	strb	r3, [r5, #3]
 800f2ea:	2e03      	cmp	r6, #3
 800f2ec:	d075      	beq.n	800f3da <ucdr_serialize_uint64_t+0x166>
 800f2ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f2f2:	712b      	strb	r3, [r5, #4]
 800f2f4:	2e04      	cmp	r6, #4
 800f2f6:	d074      	beq.n	800f3e2 <ucdr_serialize_uint64_t+0x16e>
 800f2f8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800f2fc:	716b      	strb	r3, [r5, #5]
 800f2fe:	2e05      	cmp	r6, #5
 800f300:	d073      	beq.n	800f3ea <ucdr_serialize_uint64_t+0x176>
 800f302:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800f306:	71ab      	strb	r3, [r5, #6]
 800f308:	2e06      	cmp	r6, #6
 800f30a:	d072      	beq.n	800f3f2 <ucdr_serialize_uint64_t+0x17e>
 800f30c:	f89d 3000 	ldrb.w	r3, [sp]
 800f310:	71eb      	strb	r3, [r5, #7]
 800f312:	6923      	ldr	r3, [r4, #16]
 800f314:	68a2      	ldr	r2, [r4, #8]
 800f316:	7da0      	ldrb	r0, [r4, #22]
 800f318:	3308      	adds	r3, #8
 800f31a:	1b9e      	subs	r6, r3, r6
 800f31c:	4442      	add	r2, r8
 800f31e:	2308      	movs	r3, #8
 800f320:	f080 0001 	eor.w	r0, r0, #1
 800f324:	60a2      	str	r2, [r4, #8]
 800f326:	6126      	str	r6, [r4, #16]
 800f328:	7563      	strb	r3, [r4, #21]
 800f32a:	b002      	add	sp, #8
 800f32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f330:	2108      	movs	r1, #8
 800f332:	4620      	mov	r0, r4
 800f334:	f000 fbbe 	bl	800fab4 <ucdr_check_final_buffer_behavior>
 800f338:	b350      	cbz	r0, 800f390 <ucdr_serialize_uint64_t+0x11c>
 800f33a:	7d23      	ldrb	r3, [r4, #20]
 800f33c:	2b01      	cmp	r3, #1
 800f33e:	d02d      	beq.n	800f39c <ucdr_serialize_uint64_t+0x128>
 800f340:	68a3      	ldr	r3, [r4, #8]
 800f342:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f346:	701a      	strb	r2, [r3, #0]
 800f348:	68a3      	ldr	r3, [r4, #8]
 800f34a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f34e:	705a      	strb	r2, [r3, #1]
 800f350:	68a3      	ldr	r3, [r4, #8]
 800f352:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f356:	709a      	strb	r2, [r3, #2]
 800f358:	68a3      	ldr	r3, [r4, #8]
 800f35a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f35e:	70da      	strb	r2, [r3, #3]
 800f360:	68a3      	ldr	r3, [r4, #8]
 800f362:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f366:	711a      	strb	r2, [r3, #4]
 800f368:	68a3      	ldr	r3, [r4, #8]
 800f36a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f36e:	715a      	strb	r2, [r3, #5]
 800f370:	68a3      	ldr	r3, [r4, #8]
 800f372:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f376:	719a      	strb	r2, [r3, #6]
 800f378:	68a3      	ldr	r3, [r4, #8]
 800f37a:	f89d 2000 	ldrb.w	r2, [sp]
 800f37e:	71da      	strb	r2, [r3, #7]
 800f380:	68a2      	ldr	r2, [r4, #8]
 800f382:	6923      	ldr	r3, [r4, #16]
 800f384:	3208      	adds	r2, #8
 800f386:	3308      	adds	r3, #8
 800f388:	2108      	movs	r1, #8
 800f38a:	60a2      	str	r2, [r4, #8]
 800f38c:	6123      	str	r3, [r4, #16]
 800f38e:	7561      	strb	r1, [r4, #21]
 800f390:	7da0      	ldrb	r0, [r4, #22]
 800f392:	f080 0001 	eor.w	r0, r0, #1
 800f396:	b002      	add	sp, #8
 800f398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f39c:	466b      	mov	r3, sp
 800f39e:	cb03      	ldmia	r3!, {r0, r1}
 800f3a0:	68a3      	ldr	r3, [r4, #8]
 800f3a2:	6018      	str	r0, [r3, #0]
 800f3a4:	6059      	str	r1, [r3, #4]
 800f3a6:	e7eb      	b.n	800f380 <ucdr_serialize_uint64_t+0x10c>
 800f3a8:	68a2      	ldr	r2, [r4, #8]
 800f3aa:	6923      	ldr	r3, [r4, #16]
 800f3ac:	7da0      	ldrb	r0, [r4, #22]
 800f3ae:	7567      	strb	r7, [r4, #21]
 800f3b0:	1b92      	subs	r2, r2, r6
 800f3b2:	1b9b      	subs	r3, r3, r6
 800f3b4:	f080 0001 	eor.w	r0, r0, #1
 800f3b8:	60a2      	str	r2, [r4, #8]
 800f3ba:	6123      	str	r3, [r4, #16]
 800f3bc:	b002      	add	sp, #8
 800f3be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3c2:	68a3      	ldr	r3, [r4, #8]
 800f3c4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f3c8:	701a      	strb	r2, [r3, #0]
 800f3ca:	68a3      	ldr	r3, [r4, #8]
 800f3cc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f3d0:	701a      	strb	r2, [r3, #0]
 800f3d2:	68a3      	ldr	r3, [r4, #8]
 800f3d4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f3d8:	701a      	strb	r2, [r3, #0]
 800f3da:	68a3      	ldr	r3, [r4, #8]
 800f3dc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f3e0:	701a      	strb	r2, [r3, #0]
 800f3e2:	68a3      	ldr	r3, [r4, #8]
 800f3e4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f3e8:	701a      	strb	r2, [r3, #0]
 800f3ea:	68a3      	ldr	r3, [r4, #8]
 800f3ec:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f3f0:	701a      	strb	r2, [r3, #0]
 800f3f2:	68a3      	ldr	r3, [r4, #8]
 800f3f4:	f89d 2000 	ldrb.w	r2, [sp]
 800f3f8:	701a      	strb	r2, [r3, #0]
 800f3fa:	e78a      	b.n	800f312 <ucdr_serialize_uint64_t+0x9e>
 800f3fc:	4628      	mov	r0, r5
 800f3fe:	466d      	mov	r5, sp
 800f400:	4629      	mov	r1, r5
 800f402:	4632      	mov	r2, r6
 800f404:	f00b fdf7 	bl	801aff6 <memcpy>
 800f408:	68a0      	ldr	r0, [r4, #8]
 800f40a:	4642      	mov	r2, r8
 800f40c:	19a9      	adds	r1, r5, r6
 800f40e:	f00b fdf2 	bl	801aff6 <memcpy>
 800f412:	e77e      	b.n	800f312 <ucdr_serialize_uint64_t+0x9e>

0800f414 <ucdr_serialize_int16_t>:
 800f414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f418:	b082      	sub	sp, #8
 800f41a:	460b      	mov	r3, r1
 800f41c:	2102      	movs	r1, #2
 800f41e:	4604      	mov	r4, r0
 800f420:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f424:	f000 fb9a 	bl	800fb5c <ucdr_buffer_alignment>
 800f428:	4601      	mov	r1, r0
 800f42a:	4620      	mov	r0, r4
 800f42c:	7d67      	ldrb	r7, [r4, #21]
 800f42e:	f000 fbd9 	bl	800fbe4 <ucdr_advance_buffer>
 800f432:	2102      	movs	r1, #2
 800f434:	4620      	mov	r0, r4
 800f436:	f000 fb31 	bl	800fa9c <ucdr_check_buffer_available_for>
 800f43a:	bb78      	cbnz	r0, 800f49c <ucdr_serialize_int16_t+0x88>
 800f43c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f440:	42ab      	cmp	r3, r5
 800f442:	d926      	bls.n	800f492 <ucdr_serialize_int16_t+0x7e>
 800f444:	1b5e      	subs	r6, r3, r5
 800f446:	60a3      	str	r3, [r4, #8]
 800f448:	6923      	ldr	r3, [r4, #16]
 800f44a:	f1c6 0802 	rsb	r8, r6, #2
 800f44e:	4433      	add	r3, r6
 800f450:	6123      	str	r3, [r4, #16]
 800f452:	4641      	mov	r1, r8
 800f454:	4620      	mov	r0, r4
 800f456:	f000 fb2d 	bl	800fab4 <ucdr_check_final_buffer_behavior>
 800f45a:	2800      	cmp	r0, #0
 800f45c:	d03b      	beq.n	800f4d6 <ucdr_serialize_int16_t+0xc2>
 800f45e:	7d23      	ldrb	r3, [r4, #20]
 800f460:	2b01      	cmp	r3, #1
 800f462:	d04a      	beq.n	800f4fa <ucdr_serialize_int16_t+0xe6>
 800f464:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f468:	702b      	strb	r3, [r5, #0]
 800f46a:	2e00      	cmp	r6, #0
 800f46c:	d040      	beq.n	800f4f0 <ucdr_serialize_int16_t+0xdc>
 800f46e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f472:	706b      	strb	r3, [r5, #1]
 800f474:	6923      	ldr	r3, [r4, #16]
 800f476:	68a2      	ldr	r2, [r4, #8]
 800f478:	7da0      	ldrb	r0, [r4, #22]
 800f47a:	3302      	adds	r3, #2
 800f47c:	1b9e      	subs	r6, r3, r6
 800f47e:	4442      	add	r2, r8
 800f480:	2302      	movs	r3, #2
 800f482:	f080 0001 	eor.w	r0, r0, #1
 800f486:	60a2      	str	r2, [r4, #8]
 800f488:	6126      	str	r6, [r4, #16]
 800f48a:	7563      	strb	r3, [r4, #21]
 800f48c:	b002      	add	sp, #8
 800f48e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f492:	2102      	movs	r1, #2
 800f494:	4620      	mov	r0, r4
 800f496:	f000 fb0d 	bl	800fab4 <ucdr_check_final_buffer_behavior>
 800f49a:	b190      	cbz	r0, 800f4c2 <ucdr_serialize_int16_t+0xae>
 800f49c:	7d23      	ldrb	r3, [r4, #20]
 800f49e:	2b01      	cmp	r3, #1
 800f4a0:	68a3      	ldr	r3, [r4, #8]
 800f4a2:	d014      	beq.n	800f4ce <ucdr_serialize_int16_t+0xba>
 800f4a4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f4a8:	701a      	strb	r2, [r3, #0]
 800f4aa:	68a3      	ldr	r3, [r4, #8]
 800f4ac:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f4b0:	705a      	strb	r2, [r3, #1]
 800f4b2:	68a2      	ldr	r2, [r4, #8]
 800f4b4:	6923      	ldr	r3, [r4, #16]
 800f4b6:	3202      	adds	r2, #2
 800f4b8:	3302      	adds	r3, #2
 800f4ba:	2102      	movs	r1, #2
 800f4bc:	60a2      	str	r2, [r4, #8]
 800f4be:	6123      	str	r3, [r4, #16]
 800f4c0:	7561      	strb	r1, [r4, #21]
 800f4c2:	7da0      	ldrb	r0, [r4, #22]
 800f4c4:	f080 0001 	eor.w	r0, r0, #1
 800f4c8:	b002      	add	sp, #8
 800f4ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4ce:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f4d2:	801a      	strh	r2, [r3, #0]
 800f4d4:	e7ed      	b.n	800f4b2 <ucdr_serialize_int16_t+0x9e>
 800f4d6:	68a2      	ldr	r2, [r4, #8]
 800f4d8:	6923      	ldr	r3, [r4, #16]
 800f4da:	7da0      	ldrb	r0, [r4, #22]
 800f4dc:	7567      	strb	r7, [r4, #21]
 800f4de:	1b92      	subs	r2, r2, r6
 800f4e0:	1b9b      	subs	r3, r3, r6
 800f4e2:	f080 0001 	eor.w	r0, r0, #1
 800f4e6:	60a2      	str	r2, [r4, #8]
 800f4e8:	6123      	str	r3, [r4, #16]
 800f4ea:	b002      	add	sp, #8
 800f4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4f0:	68a3      	ldr	r3, [r4, #8]
 800f4f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f4f6:	701a      	strb	r2, [r3, #0]
 800f4f8:	e7bc      	b.n	800f474 <ucdr_serialize_int16_t+0x60>
 800f4fa:	4628      	mov	r0, r5
 800f4fc:	f10d 0506 	add.w	r5, sp, #6
 800f500:	4629      	mov	r1, r5
 800f502:	4632      	mov	r2, r6
 800f504:	f00b fd77 	bl	801aff6 <memcpy>
 800f508:	68a0      	ldr	r0, [r4, #8]
 800f50a:	4642      	mov	r2, r8
 800f50c:	19a9      	adds	r1, r5, r6
 800f50e:	f00b fd72 	bl	801aff6 <memcpy>
 800f512:	e7af      	b.n	800f474 <ucdr_serialize_int16_t+0x60>

0800f514 <ucdr_deserialize_int16_t>:
 800f514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f518:	460d      	mov	r5, r1
 800f51a:	2102      	movs	r1, #2
 800f51c:	4604      	mov	r4, r0
 800f51e:	f000 fb1d 	bl	800fb5c <ucdr_buffer_alignment>
 800f522:	4601      	mov	r1, r0
 800f524:	4620      	mov	r0, r4
 800f526:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f52a:	f000 fb5b 	bl	800fbe4 <ucdr_advance_buffer>
 800f52e:	2102      	movs	r1, #2
 800f530:	4620      	mov	r0, r4
 800f532:	f000 fab3 	bl	800fa9c <ucdr_check_buffer_available_for>
 800f536:	bb60      	cbnz	r0, 800f592 <ucdr_deserialize_int16_t+0x7e>
 800f538:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f53c:	42be      	cmp	r6, r7
 800f53e:	d923      	bls.n	800f588 <ucdr_deserialize_int16_t+0x74>
 800f540:	6923      	ldr	r3, [r4, #16]
 800f542:	60a6      	str	r6, [r4, #8]
 800f544:	1bf6      	subs	r6, r6, r7
 800f546:	4433      	add	r3, r6
 800f548:	f1c6 0902 	rsb	r9, r6, #2
 800f54c:	6123      	str	r3, [r4, #16]
 800f54e:	4649      	mov	r1, r9
 800f550:	4620      	mov	r0, r4
 800f552:	f000 faaf 	bl	800fab4 <ucdr_check_final_buffer_behavior>
 800f556:	2800      	cmp	r0, #0
 800f558:	d034      	beq.n	800f5c4 <ucdr_deserialize_int16_t+0xb0>
 800f55a:	7d23      	ldrb	r3, [r4, #20]
 800f55c:	2b01      	cmp	r3, #1
 800f55e:	d042      	beq.n	800f5e6 <ucdr_deserialize_int16_t+0xd2>
 800f560:	787b      	ldrb	r3, [r7, #1]
 800f562:	702b      	strb	r3, [r5, #0]
 800f564:	2e00      	cmp	r6, #0
 800f566:	d03a      	beq.n	800f5de <ucdr_deserialize_int16_t+0xca>
 800f568:	783b      	ldrb	r3, [r7, #0]
 800f56a:	706b      	strb	r3, [r5, #1]
 800f56c:	6923      	ldr	r3, [r4, #16]
 800f56e:	68a2      	ldr	r2, [r4, #8]
 800f570:	7da0      	ldrb	r0, [r4, #22]
 800f572:	2102      	movs	r1, #2
 800f574:	3302      	adds	r3, #2
 800f576:	444a      	add	r2, r9
 800f578:	1b9b      	subs	r3, r3, r6
 800f57a:	7561      	strb	r1, [r4, #21]
 800f57c:	60a2      	str	r2, [r4, #8]
 800f57e:	6123      	str	r3, [r4, #16]
 800f580:	f080 0001 	eor.w	r0, r0, #1
 800f584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f588:	2102      	movs	r1, #2
 800f58a:	4620      	mov	r0, r4
 800f58c:	f000 fa92 	bl	800fab4 <ucdr_check_final_buffer_behavior>
 800f590:	b180      	cbz	r0, 800f5b4 <ucdr_deserialize_int16_t+0xa0>
 800f592:	7d23      	ldrb	r3, [r4, #20]
 800f594:	2b01      	cmp	r3, #1
 800f596:	68a3      	ldr	r3, [r4, #8]
 800f598:	d011      	beq.n	800f5be <ucdr_deserialize_int16_t+0xaa>
 800f59a:	785b      	ldrb	r3, [r3, #1]
 800f59c:	702b      	strb	r3, [r5, #0]
 800f59e:	68a3      	ldr	r3, [r4, #8]
 800f5a0:	781b      	ldrb	r3, [r3, #0]
 800f5a2:	706b      	strb	r3, [r5, #1]
 800f5a4:	68a2      	ldr	r2, [r4, #8]
 800f5a6:	6923      	ldr	r3, [r4, #16]
 800f5a8:	3202      	adds	r2, #2
 800f5aa:	3302      	adds	r3, #2
 800f5ac:	2102      	movs	r1, #2
 800f5ae:	60a2      	str	r2, [r4, #8]
 800f5b0:	6123      	str	r3, [r4, #16]
 800f5b2:	7561      	strb	r1, [r4, #21]
 800f5b4:	7da0      	ldrb	r0, [r4, #22]
 800f5b6:	f080 0001 	eor.w	r0, r0, #1
 800f5ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5be:	881b      	ldrh	r3, [r3, #0]
 800f5c0:	802b      	strh	r3, [r5, #0]
 800f5c2:	e7ef      	b.n	800f5a4 <ucdr_deserialize_int16_t+0x90>
 800f5c4:	68a2      	ldr	r2, [r4, #8]
 800f5c6:	6923      	ldr	r3, [r4, #16]
 800f5c8:	7da0      	ldrb	r0, [r4, #22]
 800f5ca:	f884 8015 	strb.w	r8, [r4, #21]
 800f5ce:	1b92      	subs	r2, r2, r6
 800f5d0:	1b9b      	subs	r3, r3, r6
 800f5d2:	60a2      	str	r2, [r4, #8]
 800f5d4:	6123      	str	r3, [r4, #16]
 800f5d6:	f080 0001 	eor.w	r0, r0, #1
 800f5da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5de:	68a3      	ldr	r3, [r4, #8]
 800f5e0:	781b      	ldrb	r3, [r3, #0]
 800f5e2:	706b      	strb	r3, [r5, #1]
 800f5e4:	e7c2      	b.n	800f56c <ucdr_deserialize_int16_t+0x58>
 800f5e6:	4639      	mov	r1, r7
 800f5e8:	4632      	mov	r2, r6
 800f5ea:	4628      	mov	r0, r5
 800f5ec:	f00b fd03 	bl	801aff6 <memcpy>
 800f5f0:	68a1      	ldr	r1, [r4, #8]
 800f5f2:	464a      	mov	r2, r9
 800f5f4:	19a8      	adds	r0, r5, r6
 800f5f6:	f00b fcfe 	bl	801aff6 <memcpy>
 800f5fa:	e7b7      	b.n	800f56c <ucdr_deserialize_int16_t+0x58>

0800f5fc <ucdr_serialize_int32_t>:
 800f5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f600:	b082      	sub	sp, #8
 800f602:	4604      	mov	r4, r0
 800f604:	9101      	str	r1, [sp, #4]
 800f606:	2104      	movs	r1, #4
 800f608:	f000 faa8 	bl	800fb5c <ucdr_buffer_alignment>
 800f60c:	4601      	mov	r1, r0
 800f60e:	4620      	mov	r0, r4
 800f610:	7d67      	ldrb	r7, [r4, #21]
 800f612:	f000 fae7 	bl	800fbe4 <ucdr_advance_buffer>
 800f616:	2104      	movs	r1, #4
 800f618:	4620      	mov	r0, r4
 800f61a:	f000 fa3f 	bl	800fa9c <ucdr_check_buffer_available_for>
 800f61e:	2800      	cmp	r0, #0
 800f620:	d139      	bne.n	800f696 <ucdr_serialize_int32_t+0x9a>
 800f622:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f626:	42ab      	cmp	r3, r5
 800f628:	d930      	bls.n	800f68c <ucdr_serialize_int32_t+0x90>
 800f62a:	1b5e      	subs	r6, r3, r5
 800f62c:	60a3      	str	r3, [r4, #8]
 800f62e:	6923      	ldr	r3, [r4, #16]
 800f630:	f1c6 0804 	rsb	r8, r6, #4
 800f634:	4433      	add	r3, r6
 800f636:	6123      	str	r3, [r4, #16]
 800f638:	4641      	mov	r1, r8
 800f63a:	4620      	mov	r0, r4
 800f63c:	f000 fa3a 	bl	800fab4 <ucdr_check_final_buffer_behavior>
 800f640:	2800      	cmp	r0, #0
 800f642:	d04c      	beq.n	800f6de <ucdr_serialize_int32_t+0xe2>
 800f644:	7d23      	ldrb	r3, [r4, #20]
 800f646:	2b01      	cmp	r3, #1
 800f648:	d063      	beq.n	800f712 <ucdr_serialize_int32_t+0x116>
 800f64a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f64e:	702b      	strb	r3, [r5, #0]
 800f650:	2e00      	cmp	r6, #0
 800f652:	d051      	beq.n	800f6f8 <ucdr_serialize_int32_t+0xfc>
 800f654:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f658:	706b      	strb	r3, [r5, #1]
 800f65a:	2e01      	cmp	r6, #1
 800f65c:	d050      	beq.n	800f700 <ucdr_serialize_int32_t+0x104>
 800f65e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f662:	70ab      	strb	r3, [r5, #2]
 800f664:	2e02      	cmp	r6, #2
 800f666:	d04f      	beq.n	800f708 <ucdr_serialize_int32_t+0x10c>
 800f668:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f66c:	70eb      	strb	r3, [r5, #3]
 800f66e:	6923      	ldr	r3, [r4, #16]
 800f670:	68a2      	ldr	r2, [r4, #8]
 800f672:	7da0      	ldrb	r0, [r4, #22]
 800f674:	3304      	adds	r3, #4
 800f676:	1b9e      	subs	r6, r3, r6
 800f678:	4442      	add	r2, r8
 800f67a:	2304      	movs	r3, #4
 800f67c:	f080 0001 	eor.w	r0, r0, #1
 800f680:	60a2      	str	r2, [r4, #8]
 800f682:	6126      	str	r6, [r4, #16]
 800f684:	7563      	strb	r3, [r4, #21]
 800f686:	b002      	add	sp, #8
 800f688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f68c:	2104      	movs	r1, #4
 800f68e:	4620      	mov	r0, r4
 800f690:	f000 fa10 	bl	800fab4 <ucdr_check_final_buffer_behavior>
 800f694:	b1d0      	cbz	r0, 800f6cc <ucdr_serialize_int32_t+0xd0>
 800f696:	7d23      	ldrb	r3, [r4, #20]
 800f698:	2b01      	cmp	r3, #1
 800f69a:	68a3      	ldr	r3, [r4, #8]
 800f69c:	d01c      	beq.n	800f6d8 <ucdr_serialize_int32_t+0xdc>
 800f69e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f6a2:	701a      	strb	r2, [r3, #0]
 800f6a4:	68a3      	ldr	r3, [r4, #8]
 800f6a6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f6aa:	705a      	strb	r2, [r3, #1]
 800f6ac:	68a3      	ldr	r3, [r4, #8]
 800f6ae:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f6b2:	709a      	strb	r2, [r3, #2]
 800f6b4:	68a3      	ldr	r3, [r4, #8]
 800f6b6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f6ba:	70da      	strb	r2, [r3, #3]
 800f6bc:	68a2      	ldr	r2, [r4, #8]
 800f6be:	6923      	ldr	r3, [r4, #16]
 800f6c0:	3204      	adds	r2, #4
 800f6c2:	3304      	adds	r3, #4
 800f6c4:	2104      	movs	r1, #4
 800f6c6:	60a2      	str	r2, [r4, #8]
 800f6c8:	6123      	str	r3, [r4, #16]
 800f6ca:	7561      	strb	r1, [r4, #21]
 800f6cc:	7da0      	ldrb	r0, [r4, #22]
 800f6ce:	f080 0001 	eor.w	r0, r0, #1
 800f6d2:	b002      	add	sp, #8
 800f6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6d8:	9a01      	ldr	r2, [sp, #4]
 800f6da:	601a      	str	r2, [r3, #0]
 800f6dc:	e7ee      	b.n	800f6bc <ucdr_serialize_int32_t+0xc0>
 800f6de:	68a2      	ldr	r2, [r4, #8]
 800f6e0:	6923      	ldr	r3, [r4, #16]
 800f6e2:	7da0      	ldrb	r0, [r4, #22]
 800f6e4:	7567      	strb	r7, [r4, #21]
 800f6e6:	1b92      	subs	r2, r2, r6
 800f6e8:	1b9b      	subs	r3, r3, r6
 800f6ea:	f080 0001 	eor.w	r0, r0, #1
 800f6ee:	60a2      	str	r2, [r4, #8]
 800f6f0:	6123      	str	r3, [r4, #16]
 800f6f2:	b002      	add	sp, #8
 800f6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6f8:	68a3      	ldr	r3, [r4, #8]
 800f6fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f6fe:	701a      	strb	r2, [r3, #0]
 800f700:	68a3      	ldr	r3, [r4, #8]
 800f702:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f706:	701a      	strb	r2, [r3, #0]
 800f708:	68a3      	ldr	r3, [r4, #8]
 800f70a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f70e:	701a      	strb	r2, [r3, #0]
 800f710:	e7ad      	b.n	800f66e <ucdr_serialize_int32_t+0x72>
 800f712:	4628      	mov	r0, r5
 800f714:	ad01      	add	r5, sp, #4
 800f716:	4629      	mov	r1, r5
 800f718:	4632      	mov	r2, r6
 800f71a:	f00b fc6c 	bl	801aff6 <memcpy>
 800f71e:	68a0      	ldr	r0, [r4, #8]
 800f720:	4642      	mov	r2, r8
 800f722:	19a9      	adds	r1, r5, r6
 800f724:	f00b fc67 	bl	801aff6 <memcpy>
 800f728:	e7a1      	b.n	800f66e <ucdr_serialize_int32_t+0x72>
 800f72a:	bf00      	nop

0800f72c <ucdr_deserialize_int32_t>:
 800f72c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f730:	460d      	mov	r5, r1
 800f732:	2104      	movs	r1, #4
 800f734:	4604      	mov	r4, r0
 800f736:	f000 fa11 	bl	800fb5c <ucdr_buffer_alignment>
 800f73a:	4601      	mov	r1, r0
 800f73c:	4620      	mov	r0, r4
 800f73e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f742:	f000 fa4f 	bl	800fbe4 <ucdr_advance_buffer>
 800f746:	2104      	movs	r1, #4
 800f748:	4620      	mov	r0, r4
 800f74a:	f000 f9a7 	bl	800fa9c <ucdr_check_buffer_available_for>
 800f74e:	2800      	cmp	r0, #0
 800f750:	d138      	bne.n	800f7c4 <ucdr_deserialize_int32_t+0x98>
 800f752:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f756:	42b7      	cmp	r7, r6
 800f758:	d92f      	bls.n	800f7ba <ucdr_deserialize_int32_t+0x8e>
 800f75a:	6923      	ldr	r3, [r4, #16]
 800f75c:	60a7      	str	r7, [r4, #8]
 800f75e:	1bbf      	subs	r7, r7, r6
 800f760:	443b      	add	r3, r7
 800f762:	f1c7 0904 	rsb	r9, r7, #4
 800f766:	6123      	str	r3, [r4, #16]
 800f768:	4649      	mov	r1, r9
 800f76a:	4620      	mov	r0, r4
 800f76c:	f000 f9a2 	bl	800fab4 <ucdr_check_final_buffer_behavior>
 800f770:	2800      	cmp	r0, #0
 800f772:	d046      	beq.n	800f802 <ucdr_deserialize_int32_t+0xd6>
 800f774:	7d23      	ldrb	r3, [r4, #20]
 800f776:	2b01      	cmp	r3, #1
 800f778:	d05c      	beq.n	800f834 <ucdr_deserialize_int32_t+0x108>
 800f77a:	78f3      	ldrb	r3, [r6, #3]
 800f77c:	702b      	strb	r3, [r5, #0]
 800f77e:	2f00      	cmp	r7, #0
 800f780:	d04c      	beq.n	800f81c <ucdr_deserialize_int32_t+0xf0>
 800f782:	78b3      	ldrb	r3, [r6, #2]
 800f784:	706b      	strb	r3, [r5, #1]
 800f786:	2f01      	cmp	r7, #1
 800f788:	f105 0302 	add.w	r3, r5, #2
 800f78c:	d04a      	beq.n	800f824 <ucdr_deserialize_int32_t+0xf8>
 800f78e:	7873      	ldrb	r3, [r6, #1]
 800f790:	70ab      	strb	r3, [r5, #2]
 800f792:	2f02      	cmp	r7, #2
 800f794:	f105 0303 	add.w	r3, r5, #3
 800f798:	d048      	beq.n	800f82c <ucdr_deserialize_int32_t+0x100>
 800f79a:	7833      	ldrb	r3, [r6, #0]
 800f79c:	70eb      	strb	r3, [r5, #3]
 800f79e:	6923      	ldr	r3, [r4, #16]
 800f7a0:	68a2      	ldr	r2, [r4, #8]
 800f7a2:	7da0      	ldrb	r0, [r4, #22]
 800f7a4:	2104      	movs	r1, #4
 800f7a6:	3304      	adds	r3, #4
 800f7a8:	444a      	add	r2, r9
 800f7aa:	1bdb      	subs	r3, r3, r7
 800f7ac:	7561      	strb	r1, [r4, #21]
 800f7ae:	60a2      	str	r2, [r4, #8]
 800f7b0:	6123      	str	r3, [r4, #16]
 800f7b2:	f080 0001 	eor.w	r0, r0, #1
 800f7b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7ba:	2104      	movs	r1, #4
 800f7bc:	4620      	mov	r0, r4
 800f7be:	f000 f979 	bl	800fab4 <ucdr_check_final_buffer_behavior>
 800f7c2:	b1b0      	cbz	r0, 800f7f2 <ucdr_deserialize_int32_t+0xc6>
 800f7c4:	7d23      	ldrb	r3, [r4, #20]
 800f7c6:	2b01      	cmp	r3, #1
 800f7c8:	68a3      	ldr	r3, [r4, #8]
 800f7ca:	d017      	beq.n	800f7fc <ucdr_deserialize_int32_t+0xd0>
 800f7cc:	78db      	ldrb	r3, [r3, #3]
 800f7ce:	702b      	strb	r3, [r5, #0]
 800f7d0:	68a3      	ldr	r3, [r4, #8]
 800f7d2:	789b      	ldrb	r3, [r3, #2]
 800f7d4:	706b      	strb	r3, [r5, #1]
 800f7d6:	68a3      	ldr	r3, [r4, #8]
 800f7d8:	785b      	ldrb	r3, [r3, #1]
 800f7da:	70ab      	strb	r3, [r5, #2]
 800f7dc:	68a3      	ldr	r3, [r4, #8]
 800f7de:	781b      	ldrb	r3, [r3, #0]
 800f7e0:	70eb      	strb	r3, [r5, #3]
 800f7e2:	68a2      	ldr	r2, [r4, #8]
 800f7e4:	6923      	ldr	r3, [r4, #16]
 800f7e6:	3204      	adds	r2, #4
 800f7e8:	3304      	adds	r3, #4
 800f7ea:	2104      	movs	r1, #4
 800f7ec:	60a2      	str	r2, [r4, #8]
 800f7ee:	6123      	str	r3, [r4, #16]
 800f7f0:	7561      	strb	r1, [r4, #21]
 800f7f2:	7da0      	ldrb	r0, [r4, #22]
 800f7f4:	f080 0001 	eor.w	r0, r0, #1
 800f7f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	602b      	str	r3, [r5, #0]
 800f800:	e7ef      	b.n	800f7e2 <ucdr_deserialize_int32_t+0xb6>
 800f802:	68a2      	ldr	r2, [r4, #8]
 800f804:	6923      	ldr	r3, [r4, #16]
 800f806:	7da0      	ldrb	r0, [r4, #22]
 800f808:	f884 8015 	strb.w	r8, [r4, #21]
 800f80c:	1bd2      	subs	r2, r2, r7
 800f80e:	1bdb      	subs	r3, r3, r7
 800f810:	60a2      	str	r2, [r4, #8]
 800f812:	6123      	str	r3, [r4, #16]
 800f814:	f080 0001 	eor.w	r0, r0, #1
 800f818:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f81c:	68a3      	ldr	r3, [r4, #8]
 800f81e:	789b      	ldrb	r3, [r3, #2]
 800f820:	706b      	strb	r3, [r5, #1]
 800f822:	1cab      	adds	r3, r5, #2
 800f824:	68a2      	ldr	r2, [r4, #8]
 800f826:	7852      	ldrb	r2, [r2, #1]
 800f828:	f803 2b01 	strb.w	r2, [r3], #1
 800f82c:	68a2      	ldr	r2, [r4, #8]
 800f82e:	7812      	ldrb	r2, [r2, #0]
 800f830:	701a      	strb	r2, [r3, #0]
 800f832:	e7b4      	b.n	800f79e <ucdr_deserialize_int32_t+0x72>
 800f834:	4631      	mov	r1, r6
 800f836:	463a      	mov	r2, r7
 800f838:	4628      	mov	r0, r5
 800f83a:	f00b fbdc 	bl	801aff6 <memcpy>
 800f83e:	68a1      	ldr	r1, [r4, #8]
 800f840:	464a      	mov	r2, r9
 800f842:	19e8      	adds	r0, r5, r7
 800f844:	f00b fbd7 	bl	801aff6 <memcpy>
 800f848:	e7a9      	b.n	800f79e <ucdr_deserialize_int32_t+0x72>
 800f84a:	bf00      	nop

0800f84c <ucdr_serialize_float>:
 800f84c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f850:	2104      	movs	r1, #4
 800f852:	b082      	sub	sp, #8
 800f854:	4604      	mov	r4, r0
 800f856:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f85a:	f000 f97f 	bl	800fb5c <ucdr_buffer_alignment>
 800f85e:	4601      	mov	r1, r0
 800f860:	4620      	mov	r0, r4
 800f862:	7d67      	ldrb	r7, [r4, #21]
 800f864:	f000 f9be 	bl	800fbe4 <ucdr_advance_buffer>
 800f868:	2104      	movs	r1, #4
 800f86a:	4620      	mov	r0, r4
 800f86c:	f000 f916 	bl	800fa9c <ucdr_check_buffer_available_for>
 800f870:	2800      	cmp	r0, #0
 800f872:	d139      	bne.n	800f8e8 <ucdr_serialize_float+0x9c>
 800f874:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f878:	42ab      	cmp	r3, r5
 800f87a:	d930      	bls.n	800f8de <ucdr_serialize_float+0x92>
 800f87c:	1b5e      	subs	r6, r3, r5
 800f87e:	60a3      	str	r3, [r4, #8]
 800f880:	6923      	ldr	r3, [r4, #16]
 800f882:	f1c6 0804 	rsb	r8, r6, #4
 800f886:	4433      	add	r3, r6
 800f888:	6123      	str	r3, [r4, #16]
 800f88a:	4641      	mov	r1, r8
 800f88c:	4620      	mov	r0, r4
 800f88e:	f000 f911 	bl	800fab4 <ucdr_check_final_buffer_behavior>
 800f892:	2800      	cmp	r0, #0
 800f894:	d04c      	beq.n	800f930 <ucdr_serialize_float+0xe4>
 800f896:	7d23      	ldrb	r3, [r4, #20]
 800f898:	2b01      	cmp	r3, #1
 800f89a:	d063      	beq.n	800f964 <ucdr_serialize_float+0x118>
 800f89c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f8a0:	702b      	strb	r3, [r5, #0]
 800f8a2:	2e00      	cmp	r6, #0
 800f8a4:	d051      	beq.n	800f94a <ucdr_serialize_float+0xfe>
 800f8a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f8aa:	706b      	strb	r3, [r5, #1]
 800f8ac:	2e01      	cmp	r6, #1
 800f8ae:	d050      	beq.n	800f952 <ucdr_serialize_float+0x106>
 800f8b0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f8b4:	70ab      	strb	r3, [r5, #2]
 800f8b6:	2e02      	cmp	r6, #2
 800f8b8:	d04f      	beq.n	800f95a <ucdr_serialize_float+0x10e>
 800f8ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f8be:	70eb      	strb	r3, [r5, #3]
 800f8c0:	6923      	ldr	r3, [r4, #16]
 800f8c2:	68a2      	ldr	r2, [r4, #8]
 800f8c4:	7da0      	ldrb	r0, [r4, #22]
 800f8c6:	3304      	adds	r3, #4
 800f8c8:	1b9e      	subs	r6, r3, r6
 800f8ca:	4442      	add	r2, r8
 800f8cc:	2304      	movs	r3, #4
 800f8ce:	f080 0001 	eor.w	r0, r0, #1
 800f8d2:	60a2      	str	r2, [r4, #8]
 800f8d4:	6126      	str	r6, [r4, #16]
 800f8d6:	7563      	strb	r3, [r4, #21]
 800f8d8:	b002      	add	sp, #8
 800f8da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8de:	2104      	movs	r1, #4
 800f8e0:	4620      	mov	r0, r4
 800f8e2:	f000 f8e7 	bl	800fab4 <ucdr_check_final_buffer_behavior>
 800f8e6:	b1d0      	cbz	r0, 800f91e <ucdr_serialize_float+0xd2>
 800f8e8:	7d23      	ldrb	r3, [r4, #20]
 800f8ea:	2b01      	cmp	r3, #1
 800f8ec:	68a3      	ldr	r3, [r4, #8]
 800f8ee:	d01c      	beq.n	800f92a <ucdr_serialize_float+0xde>
 800f8f0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f8f4:	701a      	strb	r2, [r3, #0]
 800f8f6:	68a3      	ldr	r3, [r4, #8]
 800f8f8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f8fc:	705a      	strb	r2, [r3, #1]
 800f8fe:	68a3      	ldr	r3, [r4, #8]
 800f900:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f904:	709a      	strb	r2, [r3, #2]
 800f906:	68a3      	ldr	r3, [r4, #8]
 800f908:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f90c:	70da      	strb	r2, [r3, #3]
 800f90e:	68a2      	ldr	r2, [r4, #8]
 800f910:	6923      	ldr	r3, [r4, #16]
 800f912:	3204      	adds	r2, #4
 800f914:	3304      	adds	r3, #4
 800f916:	2104      	movs	r1, #4
 800f918:	60a2      	str	r2, [r4, #8]
 800f91a:	6123      	str	r3, [r4, #16]
 800f91c:	7561      	strb	r1, [r4, #21]
 800f91e:	7da0      	ldrb	r0, [r4, #22]
 800f920:	f080 0001 	eor.w	r0, r0, #1
 800f924:	b002      	add	sp, #8
 800f926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f92a:	9a01      	ldr	r2, [sp, #4]
 800f92c:	601a      	str	r2, [r3, #0]
 800f92e:	e7ee      	b.n	800f90e <ucdr_serialize_float+0xc2>
 800f930:	68a2      	ldr	r2, [r4, #8]
 800f932:	6923      	ldr	r3, [r4, #16]
 800f934:	7da0      	ldrb	r0, [r4, #22]
 800f936:	7567      	strb	r7, [r4, #21]
 800f938:	1b92      	subs	r2, r2, r6
 800f93a:	1b9b      	subs	r3, r3, r6
 800f93c:	f080 0001 	eor.w	r0, r0, #1
 800f940:	60a2      	str	r2, [r4, #8]
 800f942:	6123      	str	r3, [r4, #16]
 800f944:	b002      	add	sp, #8
 800f946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f94a:	68a3      	ldr	r3, [r4, #8]
 800f94c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f950:	701a      	strb	r2, [r3, #0]
 800f952:	68a3      	ldr	r3, [r4, #8]
 800f954:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f958:	701a      	strb	r2, [r3, #0]
 800f95a:	68a3      	ldr	r3, [r4, #8]
 800f95c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f960:	701a      	strb	r2, [r3, #0]
 800f962:	e7ad      	b.n	800f8c0 <ucdr_serialize_float+0x74>
 800f964:	4628      	mov	r0, r5
 800f966:	ad01      	add	r5, sp, #4
 800f968:	4629      	mov	r1, r5
 800f96a:	4632      	mov	r2, r6
 800f96c:	f00b fb43 	bl	801aff6 <memcpy>
 800f970:	68a0      	ldr	r0, [r4, #8]
 800f972:	4642      	mov	r2, r8
 800f974:	19a9      	adds	r1, r5, r6
 800f976:	f00b fb3e 	bl	801aff6 <memcpy>
 800f97a:	e7a1      	b.n	800f8c0 <ucdr_serialize_float+0x74>

0800f97c <ucdr_deserialize_float>:
 800f97c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f980:	460d      	mov	r5, r1
 800f982:	2104      	movs	r1, #4
 800f984:	4604      	mov	r4, r0
 800f986:	f000 f8e9 	bl	800fb5c <ucdr_buffer_alignment>
 800f98a:	4601      	mov	r1, r0
 800f98c:	4620      	mov	r0, r4
 800f98e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f992:	f000 f927 	bl	800fbe4 <ucdr_advance_buffer>
 800f996:	2104      	movs	r1, #4
 800f998:	4620      	mov	r0, r4
 800f99a:	f000 f87f 	bl	800fa9c <ucdr_check_buffer_available_for>
 800f99e:	2800      	cmp	r0, #0
 800f9a0:	d138      	bne.n	800fa14 <ucdr_deserialize_float+0x98>
 800f9a2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f9a6:	42b7      	cmp	r7, r6
 800f9a8:	d92f      	bls.n	800fa0a <ucdr_deserialize_float+0x8e>
 800f9aa:	6923      	ldr	r3, [r4, #16]
 800f9ac:	60a7      	str	r7, [r4, #8]
 800f9ae:	1bbf      	subs	r7, r7, r6
 800f9b0:	443b      	add	r3, r7
 800f9b2:	f1c7 0904 	rsb	r9, r7, #4
 800f9b6:	6123      	str	r3, [r4, #16]
 800f9b8:	4649      	mov	r1, r9
 800f9ba:	4620      	mov	r0, r4
 800f9bc:	f000 f87a 	bl	800fab4 <ucdr_check_final_buffer_behavior>
 800f9c0:	2800      	cmp	r0, #0
 800f9c2:	d046      	beq.n	800fa52 <ucdr_deserialize_float+0xd6>
 800f9c4:	7d23      	ldrb	r3, [r4, #20]
 800f9c6:	2b01      	cmp	r3, #1
 800f9c8:	d05c      	beq.n	800fa84 <ucdr_deserialize_float+0x108>
 800f9ca:	78f3      	ldrb	r3, [r6, #3]
 800f9cc:	702b      	strb	r3, [r5, #0]
 800f9ce:	2f00      	cmp	r7, #0
 800f9d0:	d04c      	beq.n	800fa6c <ucdr_deserialize_float+0xf0>
 800f9d2:	78b3      	ldrb	r3, [r6, #2]
 800f9d4:	706b      	strb	r3, [r5, #1]
 800f9d6:	2f01      	cmp	r7, #1
 800f9d8:	f105 0302 	add.w	r3, r5, #2
 800f9dc:	d04a      	beq.n	800fa74 <ucdr_deserialize_float+0xf8>
 800f9de:	7873      	ldrb	r3, [r6, #1]
 800f9e0:	70ab      	strb	r3, [r5, #2]
 800f9e2:	2f02      	cmp	r7, #2
 800f9e4:	f105 0303 	add.w	r3, r5, #3
 800f9e8:	d048      	beq.n	800fa7c <ucdr_deserialize_float+0x100>
 800f9ea:	7833      	ldrb	r3, [r6, #0]
 800f9ec:	70eb      	strb	r3, [r5, #3]
 800f9ee:	6923      	ldr	r3, [r4, #16]
 800f9f0:	68a2      	ldr	r2, [r4, #8]
 800f9f2:	7da0      	ldrb	r0, [r4, #22]
 800f9f4:	2104      	movs	r1, #4
 800f9f6:	3304      	adds	r3, #4
 800f9f8:	444a      	add	r2, r9
 800f9fa:	1bdb      	subs	r3, r3, r7
 800f9fc:	7561      	strb	r1, [r4, #21]
 800f9fe:	60a2      	str	r2, [r4, #8]
 800fa00:	6123      	str	r3, [r4, #16]
 800fa02:	f080 0001 	eor.w	r0, r0, #1
 800fa06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa0a:	2104      	movs	r1, #4
 800fa0c:	4620      	mov	r0, r4
 800fa0e:	f000 f851 	bl	800fab4 <ucdr_check_final_buffer_behavior>
 800fa12:	b1b0      	cbz	r0, 800fa42 <ucdr_deserialize_float+0xc6>
 800fa14:	7d23      	ldrb	r3, [r4, #20]
 800fa16:	2b01      	cmp	r3, #1
 800fa18:	68a3      	ldr	r3, [r4, #8]
 800fa1a:	d017      	beq.n	800fa4c <ucdr_deserialize_float+0xd0>
 800fa1c:	78db      	ldrb	r3, [r3, #3]
 800fa1e:	702b      	strb	r3, [r5, #0]
 800fa20:	68a3      	ldr	r3, [r4, #8]
 800fa22:	789b      	ldrb	r3, [r3, #2]
 800fa24:	706b      	strb	r3, [r5, #1]
 800fa26:	68a3      	ldr	r3, [r4, #8]
 800fa28:	785b      	ldrb	r3, [r3, #1]
 800fa2a:	70ab      	strb	r3, [r5, #2]
 800fa2c:	68a3      	ldr	r3, [r4, #8]
 800fa2e:	781b      	ldrb	r3, [r3, #0]
 800fa30:	70eb      	strb	r3, [r5, #3]
 800fa32:	68a2      	ldr	r2, [r4, #8]
 800fa34:	6923      	ldr	r3, [r4, #16]
 800fa36:	3204      	adds	r2, #4
 800fa38:	3304      	adds	r3, #4
 800fa3a:	2104      	movs	r1, #4
 800fa3c:	60a2      	str	r2, [r4, #8]
 800fa3e:	6123      	str	r3, [r4, #16]
 800fa40:	7561      	strb	r1, [r4, #21]
 800fa42:	7da0      	ldrb	r0, [r4, #22]
 800fa44:	f080 0001 	eor.w	r0, r0, #1
 800fa48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	602b      	str	r3, [r5, #0]
 800fa50:	e7ef      	b.n	800fa32 <ucdr_deserialize_float+0xb6>
 800fa52:	68a2      	ldr	r2, [r4, #8]
 800fa54:	6923      	ldr	r3, [r4, #16]
 800fa56:	7da0      	ldrb	r0, [r4, #22]
 800fa58:	f884 8015 	strb.w	r8, [r4, #21]
 800fa5c:	1bd2      	subs	r2, r2, r7
 800fa5e:	1bdb      	subs	r3, r3, r7
 800fa60:	60a2      	str	r2, [r4, #8]
 800fa62:	6123      	str	r3, [r4, #16]
 800fa64:	f080 0001 	eor.w	r0, r0, #1
 800fa68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa6c:	68a3      	ldr	r3, [r4, #8]
 800fa6e:	789b      	ldrb	r3, [r3, #2]
 800fa70:	706b      	strb	r3, [r5, #1]
 800fa72:	1cab      	adds	r3, r5, #2
 800fa74:	68a2      	ldr	r2, [r4, #8]
 800fa76:	7852      	ldrb	r2, [r2, #1]
 800fa78:	f803 2b01 	strb.w	r2, [r3], #1
 800fa7c:	68a2      	ldr	r2, [r4, #8]
 800fa7e:	7812      	ldrb	r2, [r2, #0]
 800fa80:	701a      	strb	r2, [r3, #0]
 800fa82:	e7b4      	b.n	800f9ee <ucdr_deserialize_float+0x72>
 800fa84:	4631      	mov	r1, r6
 800fa86:	463a      	mov	r2, r7
 800fa88:	4628      	mov	r0, r5
 800fa8a:	f00b fab4 	bl	801aff6 <memcpy>
 800fa8e:	68a1      	ldr	r1, [r4, #8]
 800fa90:	464a      	mov	r2, r9
 800fa92:	19e8      	adds	r0, r5, r7
 800fa94:	f00b faaf 	bl	801aff6 <memcpy>
 800fa98:	e7a9      	b.n	800f9ee <ucdr_deserialize_float+0x72>
 800fa9a:	bf00      	nop

0800fa9c <ucdr_check_buffer_available_for>:
 800fa9c:	7d83      	ldrb	r3, [r0, #22]
 800fa9e:	b93b      	cbnz	r3, 800fab0 <ucdr_check_buffer_available_for+0x14>
 800faa0:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800faa4:	4419      	add	r1, r3
 800faa6:	4288      	cmp	r0, r1
 800faa8:	bf34      	ite	cc
 800faaa:	2000      	movcc	r0, #0
 800faac:	2001      	movcs	r0, #1
 800faae:	4770      	bx	lr
 800fab0:	2000      	movs	r0, #0
 800fab2:	4770      	bx	lr

0800fab4 <ucdr_check_final_buffer_behavior>:
 800fab4:	7d83      	ldrb	r3, [r0, #22]
 800fab6:	b943      	cbnz	r3, 800faca <ucdr_check_final_buffer_behavior+0x16>
 800fab8:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800fabc:	4291      	cmp	r1, r2
 800fabe:	b510      	push	{r4, lr}
 800fac0:	4604      	mov	r4, r0
 800fac2:	d205      	bcs.n	800fad0 <ucdr_check_final_buffer_behavior+0x1c>
 800fac4:	2301      	movs	r3, #1
 800fac6:	4618      	mov	r0, r3
 800fac8:	bd10      	pop	{r4, pc}
 800faca:	2300      	movs	r3, #0
 800facc:	4618      	mov	r0, r3
 800face:	4770      	bx	lr
 800fad0:	6982      	ldr	r2, [r0, #24]
 800fad2:	b13a      	cbz	r2, 800fae4 <ucdr_check_final_buffer_behavior+0x30>
 800fad4:	69c1      	ldr	r1, [r0, #28]
 800fad6:	4790      	blx	r2
 800fad8:	f080 0301 	eor.w	r3, r0, #1
 800fadc:	b2db      	uxtb	r3, r3
 800fade:	75a0      	strb	r0, [r4, #22]
 800fae0:	4618      	mov	r0, r3
 800fae2:	bd10      	pop	{r4, pc}
 800fae4:	2001      	movs	r0, #1
 800fae6:	75a0      	strb	r0, [r4, #22]
 800fae8:	e7fa      	b.n	800fae0 <ucdr_check_final_buffer_behavior+0x2c>
 800faea:	bf00      	nop

0800faec <ucdr_set_on_full_buffer_callback>:
 800faec:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800faf0:	4770      	bx	lr
 800faf2:	bf00      	nop

0800faf4 <ucdr_init_buffer_origin_offset_endian>:
 800faf4:	b410      	push	{r4}
 800faf6:	9c01      	ldr	r4, [sp, #4]
 800faf8:	6001      	str	r1, [r0, #0]
 800fafa:	440a      	add	r2, r1
 800fafc:	6042      	str	r2, [r0, #4]
 800fafe:	190a      	adds	r2, r1, r4
 800fb00:	441c      	add	r4, r3
 800fb02:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800fb06:	6082      	str	r2, [r0, #8]
 800fb08:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800fb0c:	7503      	strb	r3, [r0, #20]
 800fb0e:	2200      	movs	r2, #0
 800fb10:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800fb14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb18:	7542      	strb	r2, [r0, #21]
 800fb1a:	7582      	strb	r2, [r0, #22]
 800fb1c:	4770      	bx	lr
 800fb1e:	bf00      	nop

0800fb20 <ucdr_init_buffer_origin_offset>:
 800fb20:	b510      	push	{r4, lr}
 800fb22:	b082      	sub	sp, #8
 800fb24:	9c04      	ldr	r4, [sp, #16]
 800fb26:	9400      	str	r4, [sp, #0]
 800fb28:	2401      	movs	r4, #1
 800fb2a:	9401      	str	r4, [sp, #4]
 800fb2c:	f7ff ffe2 	bl	800faf4 <ucdr_init_buffer_origin_offset_endian>
 800fb30:	b002      	add	sp, #8
 800fb32:	bd10      	pop	{r4, pc}

0800fb34 <ucdr_init_buffer_origin>:
 800fb34:	b510      	push	{r4, lr}
 800fb36:	b082      	sub	sp, #8
 800fb38:	2400      	movs	r4, #0
 800fb3a:	9400      	str	r4, [sp, #0]
 800fb3c:	f7ff fff0 	bl	800fb20 <ucdr_init_buffer_origin_offset>
 800fb40:	b002      	add	sp, #8
 800fb42:	bd10      	pop	{r4, pc}

0800fb44 <ucdr_init_buffer>:
 800fb44:	2300      	movs	r3, #0
 800fb46:	f7ff bff5 	b.w	800fb34 <ucdr_init_buffer_origin>
 800fb4a:	bf00      	nop

0800fb4c <ucdr_alignment>:
 800fb4c:	fbb0 f3f1 	udiv	r3, r0, r1
 800fb50:	fb03 0011 	mls	r0, r3, r1, r0
 800fb54:	1a08      	subs	r0, r1, r0
 800fb56:	3901      	subs	r1, #1
 800fb58:	4008      	ands	r0, r1
 800fb5a:	4770      	bx	lr

0800fb5c <ucdr_buffer_alignment>:
 800fb5c:	7d43      	ldrb	r3, [r0, #21]
 800fb5e:	428b      	cmp	r3, r1
 800fb60:	d208      	bcs.n	800fb74 <ucdr_buffer_alignment+0x18>
 800fb62:	6900      	ldr	r0, [r0, #16]
 800fb64:	fbb0 f3f1 	udiv	r3, r0, r1
 800fb68:	fb01 0013 	mls	r0, r1, r3, r0
 800fb6c:	1a08      	subs	r0, r1, r0
 800fb6e:	3901      	subs	r1, #1
 800fb70:	4008      	ands	r0, r1
 800fb72:	4770      	bx	lr
 800fb74:	2000      	movs	r0, #0
 800fb76:	4770      	bx	lr

0800fb78 <ucdr_align_to>:
 800fb78:	b538      	push	{r3, r4, r5, lr}
 800fb7a:	4604      	mov	r4, r0
 800fb7c:	460d      	mov	r5, r1
 800fb7e:	f7ff ffed 	bl	800fb5c <ucdr_buffer_alignment>
 800fb82:	68a3      	ldr	r3, [r4, #8]
 800fb84:	6921      	ldr	r1, [r4, #16]
 800fb86:	7565      	strb	r5, [r4, #21]
 800fb88:	181a      	adds	r2, r3, r0
 800fb8a:	6863      	ldr	r3, [r4, #4]
 800fb8c:	4293      	cmp	r3, r2
 800fb8e:	4408      	add	r0, r1
 800fb90:	bf28      	it	cs
 800fb92:	4613      	movcs	r3, r2
 800fb94:	6120      	str	r0, [r4, #16]
 800fb96:	60a3      	str	r3, [r4, #8]
 800fb98:	bd38      	pop	{r3, r4, r5, pc}
 800fb9a:	bf00      	nop

0800fb9c <ucdr_buffer_length>:
 800fb9c:	6882      	ldr	r2, [r0, #8]
 800fb9e:	6800      	ldr	r0, [r0, #0]
 800fba0:	1a10      	subs	r0, r2, r0
 800fba2:	4770      	bx	lr

0800fba4 <ucdr_buffer_remaining>:
 800fba4:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800fba8:	1a10      	subs	r0, r2, r0
 800fbaa:	4770      	bx	lr

0800fbac <ucdr_check_final_buffer_behavior_array>:
 800fbac:	b538      	push	{r3, r4, r5, lr}
 800fbae:	7d83      	ldrb	r3, [r0, #22]
 800fbb0:	b963      	cbnz	r3, 800fbcc <ucdr_check_final_buffer_behavior_array+0x20>
 800fbb2:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800fbb6:	429a      	cmp	r2, r3
 800fbb8:	4604      	mov	r4, r0
 800fbba:	460d      	mov	r5, r1
 800fbbc:	d308      	bcc.n	800fbd0 <ucdr_check_final_buffer_behavior_array+0x24>
 800fbbe:	b139      	cbz	r1, 800fbd0 <ucdr_check_final_buffer_behavior_array+0x24>
 800fbc0:	6983      	ldr	r3, [r0, #24]
 800fbc2:	b163      	cbz	r3, 800fbde <ucdr_check_final_buffer_behavior_array+0x32>
 800fbc4:	69c1      	ldr	r1, [r0, #28]
 800fbc6:	4798      	blx	r3
 800fbc8:	75a0      	strb	r0, [r4, #22]
 800fbca:	b108      	cbz	r0, 800fbd0 <ucdr_check_final_buffer_behavior_array+0x24>
 800fbcc:	2000      	movs	r0, #0
 800fbce:	bd38      	pop	{r3, r4, r5, pc}
 800fbd0:	4620      	mov	r0, r4
 800fbd2:	f7ff ffe7 	bl	800fba4 <ucdr_buffer_remaining>
 800fbd6:	42a8      	cmp	r0, r5
 800fbd8:	bf28      	it	cs
 800fbda:	4628      	movcs	r0, r5
 800fbdc:	bd38      	pop	{r3, r4, r5, pc}
 800fbde:	2301      	movs	r3, #1
 800fbe0:	7583      	strb	r3, [r0, #22]
 800fbe2:	e7f3      	b.n	800fbcc <ucdr_check_final_buffer_behavior_array+0x20>

0800fbe4 <ucdr_advance_buffer>:
 800fbe4:	b538      	push	{r3, r4, r5, lr}
 800fbe6:	4604      	mov	r4, r0
 800fbe8:	460d      	mov	r5, r1
 800fbea:	f7ff ff57 	bl	800fa9c <ucdr_check_buffer_available_for>
 800fbee:	b178      	cbz	r0, 800fc10 <ucdr_advance_buffer+0x2c>
 800fbf0:	6923      	ldr	r3, [r4, #16]
 800fbf2:	68a2      	ldr	r2, [r4, #8]
 800fbf4:	442b      	add	r3, r5
 800fbf6:	6123      	str	r3, [r4, #16]
 800fbf8:	2301      	movs	r3, #1
 800fbfa:	442a      	add	r2, r5
 800fbfc:	7563      	strb	r3, [r4, #21]
 800fbfe:	60a2      	str	r2, [r4, #8]
 800fc00:	bd38      	pop	{r3, r4, r5, pc}
 800fc02:	68a2      	ldr	r2, [r4, #8]
 800fc04:	6923      	ldr	r3, [r4, #16]
 800fc06:	4402      	add	r2, r0
 800fc08:	4403      	add	r3, r0
 800fc0a:	1a2d      	subs	r5, r5, r0
 800fc0c:	60a2      	str	r2, [r4, #8]
 800fc0e:	6123      	str	r3, [r4, #16]
 800fc10:	4629      	mov	r1, r5
 800fc12:	2201      	movs	r2, #1
 800fc14:	4620      	mov	r0, r4
 800fc16:	f7ff ffc9 	bl	800fbac <ucdr_check_final_buffer_behavior_array>
 800fc1a:	2800      	cmp	r0, #0
 800fc1c:	d1f1      	bne.n	800fc02 <ucdr_advance_buffer+0x1e>
 800fc1e:	2301      	movs	r3, #1
 800fc20:	7563      	strb	r3, [r4, #21]
 800fc22:	bd38      	pop	{r3, r4, r5, pc}

0800fc24 <uxr_buffer_delete_entity>:
 800fc24:	b510      	push	{r4, lr}
 800fc26:	2300      	movs	r3, #0
 800fc28:	b08e      	sub	sp, #56	@ 0x38
 800fc2a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800fc2e:	2303      	movs	r3, #3
 800fc30:	9300      	str	r3, [sp, #0]
 800fc32:	2204      	movs	r2, #4
 800fc34:	ab06      	add	r3, sp, #24
 800fc36:	4604      	mov	r4, r0
 800fc38:	9103      	str	r1, [sp, #12]
 800fc3a:	f001 f953 	bl	8010ee4 <uxr_prepare_stream_to_write_submessage>
 800fc3e:	b918      	cbnz	r0, 800fc48 <uxr_buffer_delete_entity+0x24>
 800fc40:	4604      	mov	r4, r0
 800fc42:	4620      	mov	r0, r4
 800fc44:	b00e      	add	sp, #56	@ 0x38
 800fc46:	bd10      	pop	{r4, pc}
 800fc48:	9902      	ldr	r1, [sp, #8]
 800fc4a:	aa05      	add	r2, sp, #20
 800fc4c:	4620      	mov	r0, r4
 800fc4e:	f001 fa7f 	bl	8011150 <uxr_init_base_object_request>
 800fc52:	a905      	add	r1, sp, #20
 800fc54:	4604      	mov	r4, r0
 800fc56:	a806      	add	r0, sp, #24
 800fc58:	f002 fcd0 	bl	80125fc <uxr_serialize_DELETE_Payload>
 800fc5c:	4620      	mov	r0, r4
 800fc5e:	b00e      	add	sp, #56	@ 0x38
 800fc60:	bd10      	pop	{r4, pc}
 800fc62:	bf00      	nop

0800fc64 <uxr_common_create_entity>:
 800fc64:	b510      	push	{r4, lr}
 800fc66:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800fc6a:	b08c      	sub	sp, #48	@ 0x30
 800fc6c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800fc70:	f1bc 0f01 	cmp.w	ip, #1
 800fc74:	bf0c      	ite	eq
 800fc76:	f003 0201 	andeq.w	r2, r3, #1
 800fc7a:	2200      	movne	r2, #0
 800fc7c:	330e      	adds	r3, #14
 800fc7e:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800fc82:	9101      	str	r1, [sp, #4]
 800fc84:	441a      	add	r2, r3
 800fc86:	2301      	movs	r3, #1
 800fc88:	9300      	str	r3, [sp, #0]
 800fc8a:	9903      	ldr	r1, [sp, #12]
 800fc8c:	ab04      	add	r3, sp, #16
 800fc8e:	b292      	uxth	r2, r2
 800fc90:	4604      	mov	r4, r0
 800fc92:	f001 f927 	bl	8010ee4 <uxr_prepare_stream_to_write_submessage>
 800fc96:	b918      	cbnz	r0, 800fca0 <uxr_common_create_entity+0x3c>
 800fc98:	4604      	mov	r4, r0
 800fc9a:	4620      	mov	r0, r4
 800fc9c:	b00c      	add	sp, #48	@ 0x30
 800fc9e:	bd10      	pop	{r4, pc}
 800fca0:	9902      	ldr	r1, [sp, #8]
 800fca2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fca4:	4620      	mov	r0, r4
 800fca6:	f001 fa53 	bl	8011150 <uxr_init_base_object_request>
 800fcaa:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800fcac:	4604      	mov	r4, r0
 800fcae:	a804      	add	r0, sp, #16
 800fcb0:	f002 fc00 	bl	80124b4 <uxr_serialize_CREATE_Payload>
 800fcb4:	4620      	mov	r0, r4
 800fcb6:	b00c      	add	sp, #48	@ 0x30
 800fcb8:	bd10      	pop	{r4, pc}
 800fcba:	bf00      	nop

0800fcbc <uxr_buffer_create_participant_bin>:
 800fcbc:	b570      	push	{r4, r5, r6, lr}
 800fcbe:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800fcc2:	ac11      	add	r4, sp, #68	@ 0x44
 800fcc4:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800fcc8:	2303      	movs	r3, #3
 800fcca:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800fcce:	7223      	strb	r3, [r4, #8]
 800fcd0:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800fcd2:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800fcd6:	2201      	movs	r2, #1
 800fcd8:	2100      	movs	r1, #0
 800fcda:	4605      	mov	r5, r0
 800fcdc:	7122      	strb	r2, [r4, #4]
 800fcde:	f88d 1014 	strb.w	r1, [sp, #20]
 800fce2:	b1cb      	cbz	r3, 800fd18 <uxr_buffer_create_participant_bin+0x5c>
 800fce4:	f88d 201c 	strb.w	r2, [sp, #28]
 800fce8:	9308      	str	r3, [sp, #32]
 800fcea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fcee:	a915      	add	r1, sp, #84	@ 0x54
 800fcf0:	a809      	add	r0, sp, #36	@ 0x24
 800fcf2:	f7ff ff27 	bl	800fb44 <ucdr_init_buffer>
 800fcf6:	a905      	add	r1, sp, #20
 800fcf8:	a809      	add	r0, sp, #36	@ 0x24
 800fcfa:	f001 ffbd 	bl	8011c78 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800fcfe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fd00:	9600      	str	r6, [sp, #0]
 800fd02:	9401      	str	r4, [sp, #4]
 800fd04:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800fd08:	60e3      	str	r3, [r4, #12]
 800fd0a:	4628      	mov	r0, r5
 800fd0c:	b29b      	uxth	r3, r3
 800fd0e:	f7ff ffa9 	bl	800fc64 <uxr_common_create_entity>
 800fd12:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800fd16:	bd70      	pop	{r4, r5, r6, pc}
 800fd18:	f88d 301c 	strb.w	r3, [sp, #28]
 800fd1c:	e7e5      	b.n	800fcea <uxr_buffer_create_participant_bin+0x2e>
 800fd1e:	bf00      	nop

0800fd20 <uxr_buffer_create_topic_bin>:
 800fd20:	b570      	push	{r4, r5, r6, lr}
 800fd22:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800fd26:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fd2a:	9105      	str	r1, [sp, #20]
 800fd2c:	4605      	mov	r5, r0
 800fd2e:	a997      	add	r1, sp, #604	@ 0x25c
 800fd30:	4618      	mov	r0, r3
 800fd32:	2302      	movs	r3, #2
 800fd34:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800fd38:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800fd3c:	f000 f996 	bl	801006c <uxr_object_id_to_raw>
 800fd40:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800fd42:	9306      	str	r3, [sp, #24]
 800fd44:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800fd46:	930a      	str	r3, [sp, #40]	@ 0x28
 800fd48:	2303      	movs	r3, #3
 800fd4a:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800fd4e:	2301      	movs	r3, #1
 800fd50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fd54:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800fd58:	a917      	add	r1, sp, #92	@ 0x5c
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	a80b      	add	r0, sp, #44	@ 0x2c
 800fd5e:	f88d 301c 	strb.w	r3, [sp, #28]
 800fd62:	f7ff feef 	bl	800fb44 <ucdr_init_buffer>
 800fd66:	a906      	add	r1, sp, #24
 800fd68:	a80b      	add	r0, sp, #44	@ 0x2c
 800fd6a:	f001 ffa7 	bl	8011cbc <uxr_serialize_OBJK_Topic_Binary>
 800fd6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd70:	9316      	str	r3, [sp, #88]	@ 0x58
 800fd72:	ac13      	add	r4, sp, #76	@ 0x4c
 800fd74:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fd78:	9600      	str	r6, [sp, #0]
 800fd7a:	9401      	str	r4, [sp, #4]
 800fd7c:	b29b      	uxth	r3, r3
 800fd7e:	4628      	mov	r0, r5
 800fd80:	f7ff ff70 	bl	800fc64 <uxr_common_create_entity>
 800fd84:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800fd88:	bd70      	pop	{r4, r5, r6, pc}
 800fd8a:	bf00      	nop

0800fd8c <uxr_buffer_create_publisher_bin>:
 800fd8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd8e:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800fd92:	4605      	mov	r5, r0
 800fd94:	9105      	str	r1, [sp, #20]
 800fd96:	4618      	mov	r0, r3
 800fd98:	2603      	movs	r6, #3
 800fd9a:	a992      	add	r1, sp, #584	@ 0x248
 800fd9c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fda0:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800fda4:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800fda8:	f000 f960 	bl	801006c <uxr_object_id_to_raw>
 800fdac:	2300      	movs	r3, #0
 800fdae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fdb2:	a912      	add	r1, sp, #72	@ 0x48
 800fdb4:	a806      	add	r0, sp, #24
 800fdb6:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800fdba:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800fdbe:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800fdc2:	f7ff febf 	bl	800fb44 <ucdr_init_buffer>
 800fdc6:	a993      	add	r1, sp, #588	@ 0x24c
 800fdc8:	a806      	add	r0, sp, #24
 800fdca:	f002 f82b 	bl	8011e24 <uxr_serialize_OBJK_Publisher_Binary>
 800fdce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fdd0:	9311      	str	r3, [sp, #68]	@ 0x44
 800fdd2:	ac0e      	add	r4, sp, #56	@ 0x38
 800fdd4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fdd8:	9700      	str	r7, [sp, #0]
 800fdda:	9401      	str	r4, [sp, #4]
 800fddc:	b29b      	uxth	r3, r3
 800fdde:	4628      	mov	r0, r5
 800fde0:	f7ff ff40 	bl	800fc64 <uxr_common_create_entity>
 800fde4:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800fde8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdea:	bf00      	nop

0800fdec <uxr_buffer_create_subscriber_bin>:
 800fdec:	b570      	push	{r4, r5, r6, lr}
 800fdee:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800fdf2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fdf6:	9105      	str	r1, [sp, #20]
 800fdf8:	4605      	mov	r5, r0
 800fdfa:	a992      	add	r1, sp, #584	@ 0x248
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	2304      	movs	r3, #4
 800fe00:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800fe04:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800fe08:	f000 f930 	bl	801006c <uxr_object_id_to_raw>
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fe12:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800fe16:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800fe1a:	a912      	add	r1, sp, #72	@ 0x48
 800fe1c:	2303      	movs	r3, #3
 800fe1e:	a806      	add	r0, sp, #24
 800fe20:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800fe24:	f7ff fe8e 	bl	800fb44 <ucdr_init_buffer>
 800fe28:	a993      	add	r1, sp, #588	@ 0x24c
 800fe2a:	a806      	add	r0, sp, #24
 800fe2c:	f002 f8aa 	bl	8011f84 <uxr_serialize_OBJK_Subscriber_Binary>
 800fe30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fe32:	9311      	str	r3, [sp, #68]	@ 0x44
 800fe34:	ac0e      	add	r4, sp, #56	@ 0x38
 800fe36:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fe3a:	9600      	str	r6, [sp, #0]
 800fe3c:	9401      	str	r4, [sp, #4]
 800fe3e:	b29b      	uxth	r3, r3
 800fe40:	4628      	mov	r0, r5
 800fe42:	f7ff ff0f 	bl	800fc64 <uxr_common_create_entity>
 800fe46:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800fe4a:	bd70      	pop	{r4, r5, r6, pc}

0800fe4c <uxr_buffer_create_datawriter_bin>:
 800fe4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe50:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800fe54:	ac1d      	add	r4, sp, #116	@ 0x74
 800fe56:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fe5a:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800fe5e:	9105      	str	r1, [sp, #20]
 800fe60:	4606      	mov	r6, r0
 800fe62:	a9a1      	add	r1, sp, #644	@ 0x284
 800fe64:	4618      	mov	r0, r3
 800fe66:	2305      	movs	r3, #5
 800fe68:	7123      	strb	r3, [r4, #4]
 800fe6a:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800fe6e:	2703      	movs	r7, #3
 800fe70:	f000 f8fc 	bl	801006c <uxr_object_id_to_raw>
 800fe74:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800fe76:	7227      	strb	r7, [r4, #8]
 800fe78:	a90e      	add	r1, sp, #56	@ 0x38
 800fe7a:	f000 f8f7 	bl	801006c <uxr_object_id_to_raw>
 800fe7e:	2300      	movs	r3, #0
 800fe80:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800fe84:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800fe88:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800fe8c:	3d00      	subs	r5, #0
 800fe8e:	bf18      	it	ne
 800fe90:	2501      	movne	r5, #1
 800fe92:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800fe96:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800fe9a:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800fe9e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fea2:	2301      	movs	r3, #1
 800fea4:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800fea8:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800feac:	bb8a      	cbnz	r2, 800ff12 <uxr_buffer_create_datawriter_bin+0xc6>
 800feae:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800feb2:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800feb6:	f04f 0c13 	mov.w	ip, #19
 800feba:	250b      	movs	r5, #11
 800febc:	2221      	movs	r2, #33	@ 0x21
 800febe:	2111      	movs	r1, #17
 800fec0:	2009      	movs	r0, #9
 800fec2:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800fec6:	b923      	cbnz	r3, 800fed2 <uxr_buffer_create_datawriter_bin+0x86>
 800fec8:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800fecc:	4672      	mov	r2, lr
 800fece:	4661      	mov	r1, ip
 800fed0:	4628      	mov	r0, r5
 800fed2:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800fed6:	2b01      	cmp	r3, #1
 800fed8:	d025      	beq.n	800ff26 <uxr_buffer_create_datawriter_bin+0xda>
 800feda:	2b03      	cmp	r3, #3
 800fedc:	d029      	beq.n	800ff32 <uxr_buffer_create_datawriter_bin+0xe6>
 800fede:	b32b      	cbz	r3, 800ff2c <uxr_buffer_create_datawriter_bin+0xe0>
 800fee0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fee4:	a921      	add	r1, sp, #132	@ 0x84
 800fee6:	a806      	add	r0, sp, #24
 800fee8:	f7ff fe2c 	bl	800fb44 <ucdr_init_buffer>
 800feec:	a90e      	add	r1, sp, #56	@ 0x38
 800feee:	a806      	add	r0, sp, #24
 800fef0:	f002 f8fa 	bl	80120e8 <uxr_serialize_OBJK_DataWriter_Binary>
 800fef4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fef6:	f8cd 8000 	str.w	r8, [sp]
 800fefa:	9401      	str	r4, [sp, #4]
 800fefc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ff00:	60e3      	str	r3, [r4, #12]
 800ff02:	4630      	mov	r0, r6
 800ff04:	b29b      	uxth	r3, r3
 800ff06:	f7ff fead 	bl	800fc64 <uxr_common_create_entity>
 800ff0a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800ff0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff12:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800ff16:	f04f 0c12 	mov.w	ip, #18
 800ff1a:	250a      	movs	r5, #10
 800ff1c:	2220      	movs	r2, #32
 800ff1e:	2110      	movs	r1, #16
 800ff20:	2008      	movs	r0, #8
 800ff22:	2702      	movs	r7, #2
 800ff24:	e7cd      	b.n	800fec2 <uxr_buffer_create_datawriter_bin+0x76>
 800ff26:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800ff2a:	e7d9      	b.n	800fee0 <uxr_buffer_create_datawriter_bin+0x94>
 800ff2c:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800ff30:	e7d6      	b.n	800fee0 <uxr_buffer_create_datawriter_bin+0x94>
 800ff32:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800ff36:	e7d3      	b.n	800fee0 <uxr_buffer_create_datawriter_bin+0x94>

0800ff38 <uxr_buffer_create_datareader_bin>:
 800ff38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff3c:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800ff40:	ac1f      	add	r4, sp, #124	@ 0x7c
 800ff42:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800ff46:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800ff4a:	9105      	str	r1, [sp, #20]
 800ff4c:	4606      	mov	r6, r0
 800ff4e:	a9a3      	add	r1, sp, #652	@ 0x28c
 800ff50:	4618      	mov	r0, r3
 800ff52:	2306      	movs	r3, #6
 800ff54:	7123      	strb	r3, [r4, #4]
 800ff56:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800ff5a:	2703      	movs	r7, #3
 800ff5c:	f000 f886 	bl	801006c <uxr_object_id_to_raw>
 800ff60:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800ff62:	7227      	strb	r7, [r4, #8]
 800ff64:	a90e      	add	r1, sp, #56	@ 0x38
 800ff66:	f000 f881 	bl	801006c <uxr_object_id_to_raw>
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800ff70:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800ff74:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800ff78:	3d00      	subs	r5, #0
 800ff7a:	bf18      	it	ne
 800ff7c:	2501      	movne	r5, #1
 800ff7e:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800ff82:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800ff86:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800ff8a:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800ff8e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ff92:	2301      	movs	r3, #1
 800ff94:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800ff98:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800ff9c:	bb8a      	cbnz	r2, 8010002 <uxr_buffer_create_datareader_bin+0xca>
 800ff9e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ffa2:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800ffa6:	f04f 0c13 	mov.w	ip, #19
 800ffaa:	250b      	movs	r5, #11
 800ffac:	2221      	movs	r2, #33	@ 0x21
 800ffae:	2111      	movs	r1, #17
 800ffb0:	2009      	movs	r0, #9
 800ffb2:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800ffb6:	b923      	cbnz	r3, 800ffc2 <uxr_buffer_create_datareader_bin+0x8a>
 800ffb8:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800ffbc:	4672      	mov	r2, lr
 800ffbe:	4661      	mov	r1, ip
 800ffc0:	4628      	mov	r0, r5
 800ffc2:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800ffc6:	2b01      	cmp	r3, #1
 800ffc8:	d025      	beq.n	8010016 <uxr_buffer_create_datareader_bin+0xde>
 800ffca:	2b03      	cmp	r3, #3
 800ffcc:	d029      	beq.n	8010022 <uxr_buffer_create_datareader_bin+0xea>
 800ffce:	b32b      	cbz	r3, 801001c <uxr_buffer_create_datareader_bin+0xe4>
 800ffd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ffd4:	a923      	add	r1, sp, #140	@ 0x8c
 800ffd6:	a806      	add	r0, sp, #24
 800ffd8:	f7ff fdb4 	bl	800fb44 <ucdr_init_buffer>
 800ffdc:	a90e      	add	r1, sp, #56	@ 0x38
 800ffde:	a806      	add	r0, sp, #24
 800ffe0:	f002 f846 	bl	8012070 <uxr_serialize_OBJK_DataReader_Binary>
 800ffe4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ffe6:	f8cd 8000 	str.w	r8, [sp]
 800ffea:	9401      	str	r4, [sp, #4]
 800ffec:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fff0:	60e3      	str	r3, [r4, #12]
 800fff2:	4630      	mov	r0, r6
 800fff4:	b29b      	uxth	r3, r3
 800fff6:	f7ff fe35 	bl	800fc64 <uxr_common_create_entity>
 800fffa:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800fffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010002:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8010006:	f04f 0c12 	mov.w	ip, #18
 801000a:	250a      	movs	r5, #10
 801000c:	2220      	movs	r2, #32
 801000e:	2110      	movs	r1, #16
 8010010:	2008      	movs	r0, #8
 8010012:	2702      	movs	r7, #2
 8010014:	e7cd      	b.n	800ffb2 <uxr_buffer_create_datareader_bin+0x7a>
 8010016:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801001a:	e7d9      	b.n	800ffd0 <uxr_buffer_create_datareader_bin+0x98>
 801001c:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8010020:	e7d6      	b.n	800ffd0 <uxr_buffer_create_datareader_bin+0x98>
 8010022:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8010026:	e7d3      	b.n	800ffd0 <uxr_buffer_create_datareader_bin+0x98>

08010028 <uxr_object_id>:
 8010028:	b082      	sub	sp, #8
 801002a:	2300      	movs	r3, #0
 801002c:	f88d 1006 	strb.w	r1, [sp, #6]
 8010030:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010034:	f360 030f 	bfi	r3, r0, #0, #16
 8010038:	f362 431f 	bfi	r3, r2, #16, #16
 801003c:	4618      	mov	r0, r3
 801003e:	b002      	add	sp, #8
 8010040:	4770      	bx	lr
 8010042:	bf00      	nop

08010044 <uxr_object_id_from_raw>:
 8010044:	7843      	ldrb	r3, [r0, #1]
 8010046:	7801      	ldrb	r1, [r0, #0]
 8010048:	b082      	sub	sp, #8
 801004a:	f003 020f 	and.w	r2, r3, #15
 801004e:	f88d 2006 	strb.w	r2, [sp, #6]
 8010052:	091b      	lsrs	r3, r3, #4
 8010054:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010058:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 801005c:	2000      	movs	r0, #0
 801005e:	f363 000f 	bfi	r0, r3, #0, #16
 8010062:	f362 401f 	bfi	r0, r2, #16, #16
 8010066:	b002      	add	sp, #8
 8010068:	4770      	bx	lr
 801006a:	bf00      	nop

0801006c <uxr_object_id_to_raw>:
 801006c:	4602      	mov	r2, r0
 801006e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8010072:	b082      	sub	sp, #8
 8010074:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8010078:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 801007c:	f881 c000 	strb.w	ip, [r1]
 8010080:	7048      	strb	r0, [r1, #1]
 8010082:	b002      	add	sp, #8
 8010084:	4770      	bx	lr
 8010086:	bf00      	nop

08010088 <on_get_fragmentation_info>:
 8010088:	b500      	push	{lr}
 801008a:	b08b      	sub	sp, #44	@ 0x2c
 801008c:	4601      	mov	r1, r0
 801008e:	2204      	movs	r2, #4
 8010090:	a802      	add	r0, sp, #8
 8010092:	f7ff fd57 	bl	800fb44 <ucdr_init_buffer>
 8010096:	f10d 0305 	add.w	r3, sp, #5
 801009a:	f10d 0206 	add.w	r2, sp, #6
 801009e:	a901      	add	r1, sp, #4
 80100a0:	a802      	add	r0, sp, #8
 80100a2:	f001 f9d7 	bl	8011454 <uxr_read_submessage_header>
 80100a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80100aa:	2b0d      	cmp	r3, #13
 80100ac:	d003      	beq.n	80100b6 <on_get_fragmentation_info+0x2e>
 80100ae:	2000      	movs	r0, #0
 80100b0:	b00b      	add	sp, #44	@ 0x2c
 80100b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80100b6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80100ba:	f013 0f02 	tst.w	r3, #2
 80100be:	bf14      	ite	ne
 80100c0:	2002      	movne	r0, #2
 80100c2:	2001      	moveq	r0, #1
 80100c4:	b00b      	add	sp, #44	@ 0x2c
 80100c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80100ca:	bf00      	nop

080100cc <read_submessage_get_info>:
 80100cc:	b570      	push	{r4, r5, r6, lr}
 80100ce:	2500      	movs	r5, #0
 80100d0:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 80100d4:	4604      	mov	r4, r0
 80100d6:	f44f 7224 	mov.w	r2, #656	@ 0x290
 80100da:	460e      	mov	r6, r1
 80100dc:	a810      	add	r0, sp, #64	@ 0x40
 80100de:	4629      	mov	r1, r5
 80100e0:	e9cd 5503 	strd	r5, r5, [sp, #12]
 80100e4:	f00a fe64 	bl	801adb0 <memset>
 80100e8:	a903      	add	r1, sp, #12
 80100ea:	4630      	mov	r0, r6
 80100ec:	f002 fa72 	bl	80125d4 <uxr_deserialize_GET_INFO_Payload>
 80100f0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80100f4:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80100f8:	4620      	mov	r0, r4
 80100fa:	f001 f821 	bl	8011140 <uxr_session_header_offset>
 80100fe:	462b      	mov	r3, r5
 8010100:	9000      	str	r0, [sp, #0]
 8010102:	220c      	movs	r2, #12
 8010104:	a905      	add	r1, sp, #20
 8010106:	a808      	add	r0, sp, #32
 8010108:	f7ff fd0a 	bl	800fb20 <ucdr_init_buffer_origin_offset>
 801010c:	a910      	add	r1, sp, #64	@ 0x40
 801010e:	a808      	add	r0, sp, #32
 8010110:	f002 fad2 	bl	80126b8 <uxr_serialize_INFO_Payload>
 8010114:	9b08      	ldr	r3, [sp, #32]
 8010116:	462a      	mov	r2, r5
 8010118:	4629      	mov	r1, r5
 801011a:	4620      	mov	r0, r4
 801011c:	f000 ffba 	bl	8011094 <uxr_stamp_session_header>
 8010120:	a808      	add	r0, sp, #32
 8010122:	f7ff fd3b 	bl	800fb9c <ucdr_buffer_length>
 8010126:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010128:	4602      	mov	r2, r0
 801012a:	a905      	add	r1, sp, #20
 801012c:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010130:	47a0      	blx	r4
 8010132:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8010136:	bd70      	pop	{r4, r5, r6, pc}

08010138 <write_submessage_acknack.isra.0>:
 8010138:	b570      	push	{r4, r5, r6, lr}
 801013a:	b092      	sub	sp, #72	@ 0x48
 801013c:	4605      	mov	r5, r0
 801013e:	460e      	mov	r6, r1
 8010140:	4614      	mov	r4, r2
 8010142:	f000 fffd 	bl	8011140 <uxr_session_header_offset>
 8010146:	a905      	add	r1, sp, #20
 8010148:	9000      	str	r0, [sp, #0]
 801014a:	2300      	movs	r3, #0
 801014c:	a80a      	add	r0, sp, #40	@ 0x28
 801014e:	2211      	movs	r2, #17
 8010150:	f7ff fce6 	bl	800fb20 <ucdr_init_buffer_origin_offset>
 8010154:	2218      	movs	r2, #24
 8010156:	fb02 5404 	mla	r4, r2, r4, r5
 801015a:	2300      	movs	r3, #0
 801015c:	2205      	movs	r2, #5
 801015e:	3450      	adds	r4, #80	@ 0x50
 8010160:	210a      	movs	r1, #10
 8010162:	a80a      	add	r0, sp, #40	@ 0x28
 8010164:	f001 f95c 	bl	8011420 <uxr_buffer_submessage_header>
 8010168:	a903      	add	r1, sp, #12
 801016a:	4620      	mov	r0, r4
 801016c:	f007 fca0 	bl	8017ab0 <uxr_compute_acknack>
 8010170:	ba40      	rev16	r0, r0
 8010172:	f8ad 000e 	strh.w	r0, [sp, #14]
 8010176:	a903      	add	r1, sp, #12
 8010178:	a80a      	add	r0, sp, #40	@ 0x28
 801017a:	f88d 6010 	strb.w	r6, [sp, #16]
 801017e:	f002 fb0b 	bl	8012798 <uxr_serialize_ACKNACK_Payload>
 8010182:	2200      	movs	r2, #0
 8010184:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010186:	4611      	mov	r1, r2
 8010188:	4628      	mov	r0, r5
 801018a:	f000 ff83 	bl	8011094 <uxr_stamp_session_header>
 801018e:	a80a      	add	r0, sp, #40	@ 0x28
 8010190:	f7ff fd04 	bl	800fb9c <ucdr_buffer_length>
 8010194:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8010196:	4602      	mov	r2, r0
 8010198:	a905      	add	r1, sp, #20
 801019a:	e9d3 0400 	ldrd	r0, r4, [r3]
 801019e:	47a0      	blx	r4
 80101a0:	b012      	add	sp, #72	@ 0x48
 80101a2:	bd70      	pop	{r4, r5, r6, pc}
 80101a4:	0000      	movs	r0, r0
	...

080101a8 <uxr_init_session>:
 80101a8:	b510      	push	{r4, lr}
 80101aa:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80101e0 <uxr_init_session+0x38>
 80101ae:	2300      	movs	r3, #0
 80101b0:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 80101b4:	4604      	mov	r4, r0
 80101b6:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 80101ba:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 80101be:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 80101c2:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 80101c6:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 80101ca:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 80101ce:	2181      	movs	r1, #129	@ 0x81
 80101d0:	f000 fecc 	bl	8010f6c <uxr_init_session_info>
 80101d4:	f104 0008 	add.w	r0, r4, #8
 80101d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101dc:	f001 b83c 	b.w	8011258 <uxr_init_stream_storage>
	...

080101e8 <uxr_set_status_callback>:
 80101e8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 80101ec:	4770      	bx	lr
 80101ee:	bf00      	nop

080101f0 <uxr_set_topic_callback>:
 80101f0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 80101f4:	4770      	bx	lr
 80101f6:	bf00      	nop

080101f8 <uxr_set_request_callback>:
 80101f8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 80101fc:	4770      	bx	lr
 80101fe:	bf00      	nop

08010200 <uxr_set_reply_callback>:
 8010200:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8010204:	4770      	bx	lr
 8010206:	bf00      	nop

08010208 <uxr_create_output_best_effort_stream>:
 8010208:	b510      	push	{r4, lr}
 801020a:	b084      	sub	sp, #16
 801020c:	e9cd 2100 	strd	r2, r1, [sp]
 8010210:	4604      	mov	r4, r0
 8010212:	f000 ff95 	bl	8011140 <uxr_session_header_offset>
 8010216:	e9dd 2100 	ldrd	r2, r1, [sp]
 801021a:	4603      	mov	r3, r0
 801021c:	f104 0008 	add.w	r0, r4, #8
 8010220:	b004      	add	sp, #16
 8010222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010226:	f001 b861 	b.w	80112ec <uxr_add_output_best_effort_buffer>
 801022a:	bf00      	nop

0801022c <uxr_create_output_reliable_stream>:
 801022c:	b510      	push	{r4, lr}
 801022e:	b088      	sub	sp, #32
 8010230:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010234:	4604      	mov	r4, r0
 8010236:	9303      	str	r3, [sp, #12]
 8010238:	f000 ff82 	bl	8011140 <uxr_session_header_offset>
 801023c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8010240:	9000      	str	r0, [sp, #0]
 8010242:	9905      	ldr	r1, [sp, #20]
 8010244:	f104 0008 	add.w	r0, r4, #8
 8010248:	f001 f864 	bl	8011314 <uxr_add_output_reliable_buffer>
 801024c:	2200      	movs	r2, #0
 801024e:	b2c3      	uxtb	r3, r0
 8010250:	f363 0207 	bfi	r2, r3, #0, #8
 8010254:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010258:	f363 220f 	bfi	r2, r3, #8, #8
 801025c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010260:	f363 4217 	bfi	r2, r3, #16, #8
 8010264:	0e03      	lsrs	r3, r0, #24
 8010266:	f363 621f 	bfi	r2, r3, #24, #8
 801026a:	4610      	mov	r0, r2
 801026c:	b008      	add	sp, #32
 801026e:	bd10      	pop	{r4, pc}

08010270 <uxr_create_input_best_effort_stream>:
 8010270:	b082      	sub	sp, #8
 8010272:	3008      	adds	r0, #8
 8010274:	b002      	add	sp, #8
 8010276:	f001 b867 	b.w	8011348 <uxr_add_input_best_effort_buffer>
 801027a:	bf00      	nop

0801027c <uxr_create_input_reliable_stream>:
 801027c:	b510      	push	{r4, lr}
 801027e:	b084      	sub	sp, #16
 8010280:	4c0b      	ldr	r4, [pc, #44]	@ (80102b0 <uxr_create_input_reliable_stream+0x34>)
 8010282:	9400      	str	r4, [sp, #0]
 8010284:	3008      	adds	r0, #8
 8010286:	f001 f875 	bl	8011374 <uxr_add_input_reliable_buffer>
 801028a:	2200      	movs	r2, #0
 801028c:	b2c3      	uxtb	r3, r0
 801028e:	f363 0207 	bfi	r2, r3, #0, #8
 8010292:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010296:	f363 220f 	bfi	r2, r3, #8, #8
 801029a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801029e:	f363 4217 	bfi	r2, r3, #16, #8
 80102a2:	0e03      	lsrs	r3, r0, #24
 80102a4:	f363 621f 	bfi	r2, r3, #24, #8
 80102a8:	4610      	mov	r0, r2
 80102aa:	b004      	add	sp, #16
 80102ac:	bd10      	pop	{r4, pc}
 80102ae:	bf00      	nop
 80102b0:	08010089 	.word	0x08010089

080102b4 <uxr_epoch_nanos>:
 80102b4:	b510      	push	{r4, lr}
 80102b6:	4604      	mov	r4, r0
 80102b8:	f001 f912 	bl	80114e0 <uxr_nanos>
 80102bc:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 80102c0:	1ac0      	subs	r0, r0, r3
 80102c2:	eb61 0102 	sbc.w	r1, r1, r2
 80102c6:	bd10      	pop	{r4, pc}

080102c8 <uxr_flash_output_streams>:
 80102c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102cc:	7e03      	ldrb	r3, [r0, #24]
 80102ce:	b084      	sub	sp, #16
 80102d0:	4604      	mov	r4, r0
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d035      	beq.n	8010342 <uxr_flash_output_streams+0x7a>
 80102d6:	f04f 0900 	mov.w	r9, #0
 80102da:	4648      	mov	r0, r9
 80102dc:	f10d 0802 	add.w	r8, sp, #2
 80102e0:	af03      	add	r7, sp, #12
 80102e2:	ae02      	add	r6, sp, #8
 80102e4:	e006      	b.n	80102f4 <uxr_flash_output_streams+0x2c>
 80102e6:	7e23      	ldrb	r3, [r4, #24]
 80102e8:	f109 0901 	add.w	r9, r9, #1
 80102ec:	fa5f f089 	uxtb.w	r0, r9
 80102f0:	4283      	cmp	r3, r0
 80102f2:	d926      	bls.n	8010342 <uxr_flash_output_streams+0x7a>
 80102f4:	2201      	movs	r2, #1
 80102f6:	4611      	mov	r1, r2
 80102f8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80102fc:	f000 ff58 	bl	80111b0 <uxr_stream_id>
 8010300:	3508      	adds	r5, #8
 8010302:	4684      	mov	ip, r0
 8010304:	4643      	mov	r3, r8
 8010306:	463a      	mov	r2, r7
 8010308:	4631      	mov	r1, r6
 801030a:	4628      	mov	r0, r5
 801030c:	f8cd c004 	str.w	ip, [sp, #4]
 8010310:	f007 fc54 	bl	8017bbc <uxr_prepare_best_effort_buffer_to_send>
 8010314:	2800      	cmp	r0, #0
 8010316:	d0e6      	beq.n	80102e6 <uxr_flash_output_streams+0x1e>
 8010318:	9b02      	ldr	r3, [sp, #8]
 801031a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801031e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010322:	4620      	mov	r0, r4
 8010324:	f000 feb6 	bl	8011094 <uxr_stamp_session_header>
 8010328:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801032a:	9a03      	ldr	r2, [sp, #12]
 801032c:	685d      	ldr	r5, [r3, #4]
 801032e:	6818      	ldr	r0, [r3, #0]
 8010330:	9902      	ldr	r1, [sp, #8]
 8010332:	47a8      	blx	r5
 8010334:	f109 0901 	add.w	r9, r9, #1
 8010338:	7e23      	ldrb	r3, [r4, #24]
 801033a:	fa5f f089 	uxtb.w	r0, r9
 801033e:	4283      	cmp	r3, r0
 8010340:	d8d8      	bhi.n	80102f4 <uxr_flash_output_streams+0x2c>
 8010342:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010346:	b38b      	cbz	r3, 80103ac <uxr_flash_output_streams+0xe4>
 8010348:	f04f 0900 	mov.w	r9, #0
 801034c:	f10d 0802 	add.w	r8, sp, #2
 8010350:	af03      	add	r7, sp, #12
 8010352:	ae02      	add	r6, sp, #8
 8010354:	4648      	mov	r0, r9
 8010356:	2201      	movs	r2, #1
 8010358:	2102      	movs	r1, #2
 801035a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 801035e:	f000 ff27 	bl	80111b0 <uxr_stream_id>
 8010362:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8010366:	3520      	adds	r5, #32
 8010368:	9001      	str	r0, [sp, #4]
 801036a:	e00d      	b.n	8010388 <uxr_flash_output_streams+0xc0>
 801036c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010370:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010374:	9b02      	ldr	r3, [sp, #8]
 8010376:	f000 fe8d 	bl	8011094 <uxr_stamp_session_header>
 801037a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801037c:	9a03      	ldr	r2, [sp, #12]
 801037e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8010382:	9902      	ldr	r1, [sp, #8]
 8010384:	6818      	ldr	r0, [r3, #0]
 8010386:	47d0      	blx	sl
 8010388:	4643      	mov	r3, r8
 801038a:	463a      	mov	r2, r7
 801038c:	4631      	mov	r1, r6
 801038e:	4628      	mov	r0, r5
 8010390:	f007 fe32 	bl	8017ff8 <uxr_prepare_next_reliable_buffer_to_send>
 8010394:	4603      	mov	r3, r0
 8010396:	4620      	mov	r0, r4
 8010398:	2b00      	cmp	r3, #0
 801039a:	d1e7      	bne.n	801036c <uxr_flash_output_streams+0xa4>
 801039c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80103a0:	f109 0901 	add.w	r9, r9, #1
 80103a4:	fa5f f089 	uxtb.w	r0, r9
 80103a8:	4283      	cmp	r3, r0
 80103aa:	d8d4      	bhi.n	8010356 <uxr_flash_output_streams+0x8e>
 80103ac:	b004      	add	sp, #16
 80103ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103b2:	bf00      	nop

080103b4 <read_submessage_info>:
 80103b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103b8:	460d      	mov	r5, r1
 80103ba:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80103be:	4669      	mov	r1, sp
 80103c0:	4607      	mov	r7, r0
 80103c2:	4628      	mov	r0, r5
 80103c4:	f002 f814 	bl	80123f0 <uxr_deserialize_BaseObjectReply>
 80103c8:	a902      	add	r1, sp, #8
 80103ca:	4604      	mov	r4, r0
 80103cc:	4628      	mov	r0, r5
 80103ce:	f89d 8005 	ldrb.w	r8, [sp, #5]
 80103d2:	f7fe facb 	bl	800e96c <ucdr_deserialize_bool>
 80103d6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80103da:	4004      	ands	r4, r0
 80103dc:	b2e4      	uxtb	r4, r4
 80103de:	b95b      	cbnz	r3, 80103f8 <read_submessage_info+0x44>
 80103e0:	a987      	add	r1, sp, #540	@ 0x21c
 80103e2:	4628      	mov	r0, r5
 80103e4:	f7fe fac2 	bl	800e96c <ucdr_deserialize_bool>
 80103e8:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 80103ec:	4606      	mov	r6, r0
 80103ee:	b94b      	cbnz	r3, 8010404 <read_submessage_info+0x50>
 80103f0:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80103f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103f8:	a903      	add	r1, sp, #12
 80103fa:	4628      	mov	r0, r5
 80103fc:	f001 fea0 	bl	8012140 <uxr_deserialize_ObjectVariant>
 8010400:	4004      	ands	r4, r0
 8010402:	e7ed      	b.n	80103e0 <read_submessage_info+0x2c>
 8010404:	a988      	add	r1, sp, #544	@ 0x220
 8010406:	4628      	mov	r0, r5
 8010408:	f7fe fade 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 801040c:	4234      	tst	r4, r6
 801040e:	d0ef      	beq.n	80103f0 <read_submessage_info+0x3c>
 8010410:	2800      	cmp	r0, #0
 8010412:	d0ed      	beq.n	80103f0 <read_submessage_info+0x3c>
 8010414:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8010418:	2b0d      	cmp	r3, #13
 801041a:	d1e9      	bne.n	80103f0 <read_submessage_info+0x3c>
 801041c:	a98a      	add	r1, sp, #552	@ 0x228
 801041e:	4628      	mov	r0, r5
 8010420:	f7ff f878 	bl	800f514 <ucdr_deserialize_int16_t>
 8010424:	b140      	cbz	r0, 8010438 <read_submessage_info+0x84>
 8010426:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 801042a:	2b00      	cmp	r3, #0
 801042c:	dd07      	ble.n	801043e <read_submessage_info+0x8a>
 801042e:	f1b8 0f00 	cmp.w	r8, #0
 8010432:	bf14      	ite	ne
 8010434:	2001      	movne	r0, #1
 8010436:	2002      	moveq	r0, #2
 8010438:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 801043c:	e7d8      	b.n	80103f0 <read_submessage_info+0x3c>
 801043e:	2000      	movs	r0, #0
 8010440:	e7fa      	b.n	8010438 <read_submessage_info+0x84>
 8010442:	bf00      	nop

08010444 <read_submessage_list>:
 8010444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010448:	b097      	sub	sp, #92	@ 0x5c
 801044a:	4ec1      	ldr	r6, [pc, #772]	@ (8010750 <read_submessage_list+0x30c>)
 801044c:	9209      	str	r2, [sp, #36]	@ 0x24
 801044e:	4604      	mov	r4, r0
 8010450:	460d      	mov	r5, r1
 8010452:	f04f 0801 	mov.w	r8, #1
 8010456:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801045a:	aa0c      	add	r2, sp, #48	@ 0x30
 801045c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8010460:	4628      	mov	r0, r5
 8010462:	f000 fff7 	bl	8011454 <uxr_read_submessage_header>
 8010466:	2800      	cmp	r0, #0
 8010468:	f000 813e 	beq.w	80106e8 <read_submessage_list+0x2a4>
 801046c:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8010470:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8010474:	3b02      	subs	r3, #2
 8010476:	2b0d      	cmp	r3, #13
 8010478:	d8ed      	bhi.n	8010456 <read_submessage_list+0x12>
 801047a:	a101      	add	r1, pc, #4	@ (adr r1, 8010480 <read_submessage_list+0x3c>)
 801047c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010480:	080106df 	.word	0x080106df
 8010484:	08010457 	.word	0x08010457
 8010488:	080106cf 	.word	0x080106cf
 801048c:	0801066d 	.word	0x0801066d
 8010490:	08010663 	.word	0x08010663
 8010494:	08010457 	.word	0x08010457
 8010498:	08010457 	.word	0x08010457
 801049c:	080105c3 	.word	0x080105c3
 80104a0:	08010553 	.word	0x08010553
 80104a4:	08010513 	.word	0x08010513
 80104a8:	08010457 	.word	0x08010457
 80104ac:	08010457 	.word	0x08010457
 80104b0:	08010457 	.word	0x08010457
 80104b4:	080104b9 	.word	0x080104b9
 80104b8:	a910      	add	r1, sp, #64	@ 0x40
 80104ba:	4628      	mov	r0, r5
 80104bc:	f002 f9bc 	bl	8012838 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80104c0:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 80104c4:	f1b9 0f00 	cmp.w	r9, #0
 80104c8:	f000 8116 	beq.w	80106f8 <read_submessage_list+0x2b4>
 80104cc:	f001 f808 	bl	80114e0 <uxr_nanos>
 80104d0:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 80104d2:	4602      	mov	r2, r0
 80104d4:	460b      	mov	r3, r1
 80104d6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80104d8:	2100      	movs	r1, #0
 80104da:	468c      	mov	ip, r1
 80104dc:	fbc0 7c06 	smlal	r7, ip, r0, r6
 80104e0:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 80104e4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80104e6:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80104e8:	468c      	mov	ip, r1
 80104ea:	fbc0 7c06 	smlal	r7, ip, r0, r6
 80104ee:	46e2      	mov	sl, ip
 80104f0:	46bc      	mov	ip, r7
 80104f2:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 80104f6:	fbc0 7106 	smlal	r7, r1, r0, r6
 80104fa:	e9cd ca02 	strd	ip, sl, [sp, #8]
 80104fe:	e9cd 7100 	strd	r7, r1, [sp]
 8010502:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8010506:	9106      	str	r1, [sp, #24]
 8010508:	4620      	mov	r0, r4
 801050a:	47c8      	blx	r9
 801050c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8010510:	e7a1      	b.n	8010456 <read_submessage_list+0x12>
 8010512:	a910      	add	r1, sp, #64	@ 0x40
 8010514:	4628      	mov	r0, r5
 8010516:	f002 f97d 	bl	8012814 <uxr_deserialize_HEARTBEAT_Payload>
 801051a:	2100      	movs	r1, #0
 801051c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8010520:	f000 fe70 	bl	8011204 <uxr_stream_id_from_raw>
 8010524:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8010528:	900f      	str	r0, [sp, #60]	@ 0x3c
 801052a:	4639      	mov	r1, r7
 801052c:	f104 0008 	add.w	r0, r4, #8
 8010530:	f000 ff56 	bl	80113e0 <uxr_get_input_reliable_stream>
 8010534:	2800      	cmp	r0, #0
 8010536:	d08e      	beq.n	8010456 <read_submessage_list+0x12>
 8010538:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801053c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8010540:	f007 faaa 	bl	8017a98 <uxr_process_heartbeat>
 8010544:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8010548:	463a      	mov	r2, r7
 801054a:	4620      	mov	r0, r4
 801054c:	f7ff fdf4 	bl	8010138 <write_submessage_acknack.isra.0>
 8010550:	e781      	b.n	8010456 <read_submessage_list+0x12>
 8010552:	a910      	add	r1, sp, #64	@ 0x40
 8010554:	4628      	mov	r0, r5
 8010556:	f002 f935 	bl	80127c4 <uxr_deserialize_ACKNACK_Payload>
 801055a:	2100      	movs	r1, #0
 801055c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8010560:	f000 fe50 	bl	8011204 <uxr_stream_id_from_raw>
 8010564:	900d      	str	r0, [sp, #52]	@ 0x34
 8010566:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801056a:	f104 0008 	add.w	r0, r4, #8
 801056e:	f000 ff23 	bl	80113b8 <uxr_get_output_reliable_stream>
 8010572:	4607      	mov	r7, r0
 8010574:	2800      	cmp	r0, #0
 8010576:	f43f af6e 	beq.w	8010456 <read_submessage_list+0x12>
 801057a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 801057e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8010582:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8010586:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801058a:	b289      	uxth	r1, r1
 801058c:	f007 fdde 	bl	801814c <uxr_process_acknack>
 8010590:	4638      	mov	r0, r7
 8010592:	f007 fd9b 	bl	80180cc <uxr_begin_output_nack_buffer_it>
 8010596:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801059a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 801059e:	e006      	b.n	80105ae <read_submessage_list+0x16a>
 80105a0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80105a2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80105a4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80105a8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80105aa:	6818      	ldr	r0, [r3, #0]
 80105ac:	47c8      	blx	r9
 80105ae:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 80105b2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80105b4:	4651      	mov	r1, sl
 80105b6:	4638      	mov	r0, r7
 80105b8:	f007 fd8a 	bl	80180d0 <uxr_next_reliable_nack_buffer_to_send>
 80105bc:	2800      	cmp	r0, #0
 80105be:	d1ef      	bne.n	80105a0 <read_submessage_list+0x15c>
 80105c0:	e749      	b.n	8010456 <read_submessage_list+0x12>
 80105c2:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 80105c6:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 80105ca:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 80105ce:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 80105d2:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 80105d6:	4651      	mov	r1, sl
 80105d8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80105dc:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 80105e0:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 80105e4:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 80105e8:	4628      	mov	r0, r5
 80105ea:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 80105ee:	f001 fe49 	bl	8012284 <uxr_deserialize_BaseObjectRequest>
 80105f2:	4650      	mov	r0, sl
 80105f4:	a90f      	add	r1, sp, #60	@ 0x3c
 80105f6:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 80105fa:	f000 fdc7 	bl	801118c <uxr_parse_base_object_request>
 80105fe:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8010602:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010604:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8010608:	9110      	str	r1, [sp, #64]	@ 0x40
 801060a:	3f04      	subs	r7, #4
 801060c:	f009 090e 	and.w	r9, r9, #14
 8010610:	b2bf      	uxth	r7, r7
 8010612:	f1bb 0f00 	cmp.w	fp, #0
 8010616:	d006      	beq.n	8010626 <read_submessage_list+0x1e2>
 8010618:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801061c:	9300      	str	r3, [sp, #0]
 801061e:	4652      	mov	r2, sl
 8010620:	2300      	movs	r3, #0
 8010622:	4620      	mov	r0, r4
 8010624:	47d8      	blx	fp
 8010626:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8010628:	b16a      	cbz	r2, 8010646 <read_submessage_list+0x202>
 801062a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801062c:	2100      	movs	r1, #0
 801062e:	3802      	subs	r0, #2
 8010630:	e002      	b.n	8010638 <read_submessage_list+0x1f4>
 8010632:	3101      	adds	r1, #1
 8010634:	4291      	cmp	r1, r2
 8010636:	d006      	beq.n	8010646 <read_submessage_list+0x202>
 8010638:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801063c:	4553      	cmp	r3, sl
 801063e:	d1f8      	bne.n	8010632 <read_submessage_list+0x1ee>
 8010640:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8010642:	2200      	movs	r2, #0
 8010644:	545a      	strb	r2, [r3, r1]
 8010646:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801064a:	9102      	str	r1, [sp, #8]
 801064c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801064e:	9101      	str	r1, [sp, #4]
 8010650:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8010652:	9100      	str	r1, [sp, #0]
 8010654:	464b      	mov	r3, r9
 8010656:	463a      	mov	r2, r7
 8010658:	4629      	mov	r1, r5
 801065a:	4620      	mov	r0, r4
 801065c:	f007 fe34 	bl	80182c8 <read_submessage_format>
 8010660:	e6f9      	b.n	8010456 <read_submessage_list+0x12>
 8010662:	4629      	mov	r1, r5
 8010664:	4620      	mov	r0, r4
 8010666:	f7ff fea5 	bl	80103b4 <read_submessage_info>
 801066a:	e6f4      	b.n	8010456 <read_submessage_list+0x12>
 801066c:	2a00      	cmp	r2, #0
 801066e:	d03e      	beq.n	80106ee <read_submessage_list+0x2aa>
 8010670:	a910      	add	r1, sp, #64	@ 0x40
 8010672:	4628      	mov	r0, r5
 8010674:	f002 f802 	bl	801267c <uxr_deserialize_STATUS_Payload>
 8010678:	a90e      	add	r1, sp, #56	@ 0x38
 801067a:	aa0d      	add	r2, sp, #52	@ 0x34
 801067c:	a810      	add	r0, sp, #64	@ 0x40
 801067e:	f000 fd85 	bl	801118c <uxr_parse_base_object_request>
 8010682:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8010686:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010688:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 801068c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8010690:	910f      	str	r1, [sp, #60]	@ 0x3c
 8010692:	f1ba 0f00 	cmp.w	sl, #0
 8010696:	d006      	beq.n	80106a6 <read_submessage_list+0x262>
 8010698:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801069c:	9300      	str	r3, [sp, #0]
 801069e:	463a      	mov	r2, r7
 80106a0:	464b      	mov	r3, r9
 80106a2:	4620      	mov	r0, r4
 80106a4:	47d0      	blx	sl
 80106a6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80106a8:	2a00      	cmp	r2, #0
 80106aa:	f43f aed4 	beq.w	8010456 <read_submessage_list+0x12>
 80106ae:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80106b0:	2100      	movs	r1, #0
 80106b2:	3802      	subs	r0, #2
 80106b4:	e003      	b.n	80106be <read_submessage_list+0x27a>
 80106b6:	3101      	adds	r1, #1
 80106b8:	4291      	cmp	r1, r2
 80106ba:	f43f aecc 	beq.w	8010456 <read_submessage_list+0x12>
 80106be:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80106c2:	42bb      	cmp	r3, r7
 80106c4:	d1f7      	bne.n	80106b6 <read_submessage_list+0x272>
 80106c6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80106c8:	f803 9001 	strb.w	r9, [r3, r1]
 80106cc:	e6c3      	b.n	8010456 <read_submessage_list+0x12>
 80106ce:	2a00      	cmp	r2, #0
 80106d0:	f47f aec1 	bne.w	8010456 <read_submessage_list+0x12>
 80106d4:	4629      	mov	r1, r5
 80106d6:	4620      	mov	r0, r4
 80106d8:	f000 fc9e 	bl	8011018 <uxr_read_create_session_status>
 80106dc:	e6bb      	b.n	8010456 <read_submessage_list+0x12>
 80106de:	4629      	mov	r1, r5
 80106e0:	4620      	mov	r0, r4
 80106e2:	f7ff fcf3 	bl	80100cc <read_submessage_get_info>
 80106e6:	e6b6      	b.n	8010456 <read_submessage_list+0x12>
 80106e8:	b017      	add	sp, #92	@ 0x5c
 80106ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106ee:	4629      	mov	r1, r5
 80106f0:	4620      	mov	r0, r4
 80106f2:	f000 fc9d 	bl	8011030 <uxr_read_delete_session_status>
 80106f6:	e6ae      	b.n	8010456 <read_submessage_list+0x12>
 80106f8:	f000 fef2 	bl	80114e0 <uxr_nanos>
 80106fc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80106fe:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8010700:	464f      	mov	r7, r9
 8010702:	fbc3 2706 	smlal	r2, r7, r3, r6
 8010706:	1812      	adds	r2, r2, r0
 8010708:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801070a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801070c:	eb47 0101 	adc.w	r1, r7, r1
 8010710:	464f      	mov	r7, r9
 8010712:	fbc3 0706 	smlal	r0, r7, r3, r6
 8010716:	463b      	mov	r3, r7
 8010718:	4684      	mov	ip, r0
 801071a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 801071e:	fbc7 0906 	smlal	r0, r9, r7, r6
 8010722:	eb1c 0c00 	adds.w	ip, ip, r0
 8010726:	464f      	mov	r7, r9
 8010728:	eb43 0307 	adc.w	r3, r3, r7
 801072c:	ebb2 0c0c 	subs.w	ip, r2, ip
 8010730:	eb61 0303 	sbc.w	r3, r1, r3
 8010734:	0fda      	lsrs	r2, r3, #31
 8010736:	eb12 020c 	adds.w	r2, r2, ip
 801073a:	f143 0300 	adc.w	r3, r3, #0
 801073e:	0852      	lsrs	r2, r2, #1
 8010740:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8010744:	105b      	asrs	r3, r3, #1
 8010746:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 801074a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 801074e:	e6dd      	b.n	801050c <read_submessage_list+0xc8>
 8010750:	3b9aca00 	.word	0x3b9aca00

08010754 <listen_message_reliably>:
 8010754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010758:	1e0b      	subs	r3, r1, #0
 801075a:	b09d      	sub	sp, #116	@ 0x74
 801075c:	bfb8      	it	lt
 801075e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8010762:	4680      	mov	r8, r0
 8010764:	9305      	str	r3, [sp, #20]
 8010766:	f000 fea1 	bl	80114ac <uxr_millis>
 801076a:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 801076e:	4681      	mov	r9, r0
 8010770:	2a00      	cmp	r2, #0
 8010772:	f000 80a1 	beq.w	80108b8 <listen_message_reliably+0x164>
 8010776:	2600      	movs	r6, #0
 8010778:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801077c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8010780:	9303      	str	r3, [sp, #12]
 8010782:	4630      	mov	r0, r6
 8010784:	460f      	mov	r7, r1
 8010786:	e00f      	b.n	80107a8 <listen_message_reliably+0x54>
 8010788:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 801078c:	9903      	ldr	r1, [sp, #12]
 801078e:	455a      	cmp	r2, fp
 8010790:	f106 0601 	add.w	r6, r6, #1
 8010794:	eb73 0101 	sbcs.w	r1, r3, r1
 8010798:	b2f0      	uxtb	r0, r6
 801079a:	da01      	bge.n	80107a0 <listen_message_reliably+0x4c>
 801079c:	4693      	mov	fp, r2
 801079e:	9303      	str	r3, [sp, #12]
 80107a0:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 80107a4:	4283      	cmp	r3, r0
 80107a6:	d960      	bls.n	801086a <listen_message_reliably+0x116>
 80107a8:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 80107ac:	2102      	movs	r1, #2
 80107ae:	2201      	movs	r2, #1
 80107b0:	f000 fcfe 	bl	80111b0 <uxr_stream_id>
 80107b4:	00e4      	lsls	r4, r4, #3
 80107b6:	f104 0520 	add.w	r5, r4, #32
 80107ba:	4445      	add	r5, r8
 80107bc:	4601      	mov	r1, r0
 80107be:	463b      	mov	r3, r7
 80107c0:	464a      	mov	r2, r9
 80107c2:	4628      	mov	r0, r5
 80107c4:	9109      	str	r1, [sp, #36]	@ 0x24
 80107c6:	f007 fc57 	bl	8018078 <uxr_update_output_stream_heartbeat_timestamp>
 80107ca:	eb08 0304 	add.w	r3, r8, r4
 80107ce:	2800      	cmp	r0, #0
 80107d0:	d0da      	beq.n	8010788 <listen_message_reliably+0x34>
 80107d2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80107d6:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 80107da:	9304      	str	r3, [sp, #16]
 80107dc:	4640      	mov	r0, r8
 80107de:	f000 fcaf 	bl	8011140 <uxr_session_header_offset>
 80107e2:	3501      	adds	r5, #1
 80107e4:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 80107e8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80107ec:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 80107f0:	2300      	movs	r3, #0
 80107f2:	2211      	movs	r2, #17
 80107f4:	9000      	str	r0, [sp, #0]
 80107f6:	a90c      	add	r1, sp, #48	@ 0x30
 80107f8:	4650      	mov	r0, sl
 80107fa:	f7ff f991 	bl	800fb20 <ucdr_init_buffer_origin_offset>
 80107fe:	2300      	movs	r3, #0
 8010800:	2205      	movs	r2, #5
 8010802:	210b      	movs	r1, #11
 8010804:	4650      	mov	r0, sl
 8010806:	f000 fe0b 	bl	8011420 <uxr_buffer_submessage_header>
 801080a:	8968      	ldrh	r0, [r5, #10]
 801080c:	2101      	movs	r1, #1
 801080e:	f007 fe25 	bl	801845c <uxr_seq_num_add>
 8010812:	892b      	ldrh	r3, [r5, #8]
 8010814:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8010818:	4602      	mov	r2, r0
 801081a:	9b04      	ldr	r3, [sp, #16]
 801081c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8010820:	a90a      	add	r1, sp, #40	@ 0x28
 8010822:	4650      	mov	r0, sl
 8010824:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8010828:	f001 ffe0 	bl	80127ec <uxr_serialize_HEARTBEAT_Payload>
 801082c:	2200      	movs	r2, #0
 801082e:	4611      	mov	r1, r2
 8010830:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010832:	4640      	mov	r0, r8
 8010834:	f000 fc2e 	bl	8011094 <uxr_stamp_session_header>
 8010838:	4650      	mov	r0, sl
 801083a:	f7ff f9af 	bl	800fb9c <ucdr_buffer_length>
 801083e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8010842:	4602      	mov	r2, r0
 8010844:	a90c      	add	r1, sp, #48	@ 0x30
 8010846:	e9d3 0500 	ldrd	r0, r5, [r3]
 801084a:	4444      	add	r4, r8
 801084c:	47a8      	blx	r5
 801084e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8010852:	9903      	ldr	r1, [sp, #12]
 8010854:	455a      	cmp	r2, fp
 8010856:	f106 0601 	add.w	r6, r6, #1
 801085a:	eb73 0101 	sbcs.w	r1, r3, r1
 801085e:	b2f0      	uxtb	r0, r6
 8010860:	db9c      	blt.n	801079c <listen_message_reliably+0x48>
 8010862:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8010866:	4283      	cmp	r3, r0
 8010868:	d89e      	bhi.n	80107a8 <listen_message_reliably+0x54>
 801086a:	9a03      	ldr	r2, [sp, #12]
 801086c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010870:	429a      	cmp	r2, r3
 8010872:	bf08      	it	eq
 8010874:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8010878:	d01e      	beq.n	80108b8 <listen_message_reliably+0x164>
 801087a:	ebab 0309 	sub.w	r3, fp, r9
 801087e:	9905      	ldr	r1, [sp, #20]
 8010880:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8010884:	2b00      	cmp	r3, #0
 8010886:	bf08      	it	eq
 8010888:	2301      	moveq	r3, #1
 801088a:	4299      	cmp	r1, r3
 801088c:	bfa8      	it	ge
 801088e:	4619      	movge	r1, r3
 8010890:	6894      	ldr	r4, [r2, #8]
 8010892:	6810      	ldr	r0, [r2, #0]
 8010894:	4689      	mov	r9, r1
 8010896:	460b      	mov	r3, r1
 8010898:	aa08      	add	r2, sp, #32
 801089a:	a907      	add	r1, sp, #28
 801089c:	47a0      	blx	r4
 801089e:	b968      	cbnz	r0, 80108bc <listen_message_reliably+0x168>
 80108a0:	9b05      	ldr	r3, [sp, #20]
 80108a2:	eba3 0309 	sub.w	r3, r3, r9
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	9305      	str	r3, [sp, #20]
 80108aa:	f73f af5c 	bgt.w	8010766 <listen_message_reliably+0x12>
 80108ae:	4604      	mov	r4, r0
 80108b0:	4620      	mov	r0, r4
 80108b2:	b01d      	add	sp, #116	@ 0x74
 80108b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108b8:	9b05      	ldr	r3, [sp, #20]
 80108ba:	e7e0      	b.n	801087e <listen_message_reliably+0x12a>
 80108bc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80108c0:	4604      	mov	r4, r0
 80108c2:	a80c      	add	r0, sp, #48	@ 0x30
 80108c4:	f7ff f93e 	bl	800fb44 <ucdr_init_buffer>
 80108c8:	2500      	movs	r5, #0
 80108ca:	f10d 031a 	add.w	r3, sp, #26
 80108ce:	aa06      	add	r2, sp, #24
 80108d0:	a90c      	add	r1, sp, #48	@ 0x30
 80108d2:	4640      	mov	r0, r8
 80108d4:	f88d 5018 	strb.w	r5, [sp, #24]
 80108d8:	f000 fbf0 	bl	80110bc <uxr_read_session_header>
 80108dc:	b918      	cbnz	r0, 80108e6 <listen_message_reliably+0x192>
 80108de:	4620      	mov	r0, r4
 80108e0:	b01d      	add	sp, #116	@ 0x74
 80108e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108e6:	4629      	mov	r1, r5
 80108e8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80108ec:	f000 fc8a 	bl	8011204 <uxr_stream_id_from_raw>
 80108f0:	f3c0 4507 	ubfx	r5, r0, #16, #8
 80108f4:	2d01      	cmp	r5, #1
 80108f6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80108fa:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 80108fe:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010902:	d04b      	beq.n	801099c <listen_message_reliably+0x248>
 8010904:	2d02      	cmp	r5, #2
 8010906:	d00f      	beq.n	8010928 <listen_message_reliably+0x1d4>
 8010908:	2d00      	cmp	r5, #0
 801090a:	d1e8      	bne.n	80108de <listen_message_reliably+0x18a>
 801090c:	4629      	mov	r1, r5
 801090e:	4628      	mov	r0, r5
 8010910:	f000 fc78 	bl	8011204 <uxr_stream_id_from_raw>
 8010914:	a90c      	add	r1, sp, #48	@ 0x30
 8010916:	4602      	mov	r2, r0
 8010918:	4640      	mov	r0, r8
 801091a:	920a      	str	r2, [sp, #40]	@ 0x28
 801091c:	f7ff fd92 	bl	8010444 <read_submessage_list>
 8010920:	4620      	mov	r0, r4
 8010922:	b01d      	add	sp, #116	@ 0x74
 8010924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010928:	4631      	mov	r1, r6
 801092a:	f108 0008 	add.w	r0, r8, #8
 801092e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8010932:	f000 fd55 	bl	80113e0 <uxr_get_input_reliable_stream>
 8010936:	4607      	mov	r7, r0
 8010938:	b338      	cbz	r0, 801098a <listen_message_reliably+0x236>
 801093a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801093c:	9203      	str	r2, [sp, #12]
 801093e:	a80c      	add	r0, sp, #48	@ 0x30
 8010940:	f7ff f930 	bl	800fba4 <ucdr_buffer_remaining>
 8010944:	4603      	mov	r3, r0
 8010946:	f10d 0019 	add.w	r0, sp, #25
 801094a:	9000      	str	r0, [sp, #0]
 801094c:	9a03      	ldr	r2, [sp, #12]
 801094e:	4651      	mov	r1, sl
 8010950:	4638      	mov	r0, r7
 8010952:	f006 ffa7 	bl	80178a4 <uxr_receive_reliable_message>
 8010956:	b1c0      	cbz	r0, 801098a <listen_message_reliably+0x236>
 8010958:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801095c:	b393      	cbz	r3, 80109c4 <listen_message_reliably+0x270>
 801095e:	ad14      	add	r5, sp, #80	@ 0x50
 8010960:	f04f 0a02 	mov.w	sl, #2
 8010964:	e00a      	b.n	801097c <listen_message_reliably+0x228>
 8010966:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 801096a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 801096e:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8010972:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010974:	4629      	mov	r1, r5
 8010976:	4640      	mov	r0, r8
 8010978:	f7ff fd64 	bl	8010444 <read_submessage_list>
 801097c:	2204      	movs	r2, #4
 801097e:	4629      	mov	r1, r5
 8010980:	4638      	mov	r0, r7
 8010982:	f007 f80f 	bl	80179a4 <uxr_next_input_reliable_buffer_available>
 8010986:	2800      	cmp	r0, #0
 8010988:	d1ed      	bne.n	8010966 <listen_message_reliably+0x212>
 801098a:	4640      	mov	r0, r8
 801098c:	4632      	mov	r2, r6
 801098e:	4649      	mov	r1, r9
 8010990:	f7ff fbd2 	bl	8010138 <write_submessage_acknack.isra.0>
 8010994:	4620      	mov	r0, r4
 8010996:	b01d      	add	sp, #116	@ 0x74
 8010998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801099c:	4631      	mov	r1, r6
 801099e:	f108 0008 	add.w	r0, r8, #8
 80109a2:	f000 fd13 	bl	80113cc <uxr_get_input_best_effort_stream>
 80109a6:	2800      	cmp	r0, #0
 80109a8:	d099      	beq.n	80108de <listen_message_reliably+0x18a>
 80109aa:	4651      	mov	r1, sl
 80109ac:	f006 fee6 	bl	801777c <uxr_receive_best_effort_message>
 80109b0:	2800      	cmp	r0, #0
 80109b2:	d094      	beq.n	80108de <listen_message_reliably+0x18a>
 80109b4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 80109b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80109ba:	a90c      	add	r1, sp, #48	@ 0x30
 80109bc:	4640      	mov	r0, r8
 80109be:	f7ff fd41 	bl	8010444 <read_submessage_list>
 80109c2:	e78c      	b.n	80108de <listen_message_reliably+0x18a>
 80109c4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 80109c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80109ca:	a90c      	add	r1, sp, #48	@ 0x30
 80109cc:	4640      	mov	r0, r8
 80109ce:	f7ff fd39 	bl	8010444 <read_submessage_list>
 80109d2:	e7c4      	b.n	801095e <listen_message_reliably+0x20a>

080109d4 <uxr_run_session_timeout>:
 80109d4:	b570      	push	{r4, r5, r6, lr}
 80109d6:	4604      	mov	r4, r0
 80109d8:	460d      	mov	r5, r1
 80109da:	f000 fd67 	bl	80114ac <uxr_millis>
 80109de:	4606      	mov	r6, r0
 80109e0:	4620      	mov	r0, r4
 80109e2:	f7ff fc71 	bl	80102c8 <uxr_flash_output_streams>
 80109e6:	4629      	mov	r1, r5
 80109e8:	4620      	mov	r0, r4
 80109ea:	f7ff feb3 	bl	8010754 <listen_message_reliably>
 80109ee:	f000 fd5d 	bl	80114ac <uxr_millis>
 80109f2:	1b83      	subs	r3, r0, r6
 80109f4:	1ae9      	subs	r1, r5, r3
 80109f6:	2900      	cmp	r1, #0
 80109f8:	dcf6      	bgt.n	80109e8 <uxr_run_session_timeout+0x14>
 80109fa:	f104 0008 	add.w	r0, r4, #8
 80109fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010a02:	f000 bcf7 	b.w	80113f4 <uxr_output_streams_confirmed>
 8010a06:	bf00      	nop

08010a08 <uxr_run_session_until_data>:
 8010a08:	b570      	push	{r4, r5, r6, lr}
 8010a0a:	4604      	mov	r4, r0
 8010a0c:	460d      	mov	r5, r1
 8010a0e:	f000 fd4d 	bl	80114ac <uxr_millis>
 8010a12:	4606      	mov	r6, r0
 8010a14:	4620      	mov	r0, r4
 8010a16:	f7ff fc57 	bl	80102c8 <uxr_flash_output_streams>
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8010a20:	4629      	mov	r1, r5
 8010a22:	e005      	b.n	8010a30 <uxr_run_session_until_data+0x28>
 8010a24:	f000 fd42 	bl	80114ac <uxr_millis>
 8010a28:	1b83      	subs	r3, r0, r6
 8010a2a:	1ae9      	subs	r1, r5, r3
 8010a2c:	2900      	cmp	r1, #0
 8010a2e:	dd07      	ble.n	8010a40 <uxr_run_session_until_data+0x38>
 8010a30:	4620      	mov	r0, r4
 8010a32:	f7ff fe8f 	bl	8010754 <listen_message_reliably>
 8010a36:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8010a3a:	2800      	cmp	r0, #0
 8010a3c:	d0f2      	beq.n	8010a24 <uxr_run_session_until_data+0x1c>
 8010a3e:	bd70      	pop	{r4, r5, r6, pc}
 8010a40:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8010a44:	bd70      	pop	{r4, r5, r6, pc}
 8010a46:	bf00      	nop

08010a48 <uxr_run_session_until_confirm_delivery>:
 8010a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a4c:	4606      	mov	r6, r0
 8010a4e:	460d      	mov	r5, r1
 8010a50:	f000 fd2c 	bl	80114ac <uxr_millis>
 8010a54:	4607      	mov	r7, r0
 8010a56:	4630      	mov	r0, r6
 8010a58:	f7ff fc36 	bl	80102c8 <uxr_flash_output_streams>
 8010a5c:	2d00      	cmp	r5, #0
 8010a5e:	f106 0808 	add.w	r8, r6, #8
 8010a62:	bfa8      	it	ge
 8010a64:	462c      	movge	r4, r5
 8010a66:	da07      	bge.n	8010a78 <uxr_run_session_until_confirm_delivery+0x30>
 8010a68:	e00e      	b.n	8010a88 <uxr_run_session_until_confirm_delivery+0x40>
 8010a6a:	f7ff fe73 	bl	8010754 <listen_message_reliably>
 8010a6e:	f000 fd1d 	bl	80114ac <uxr_millis>
 8010a72:	1bc3      	subs	r3, r0, r7
 8010a74:	1aec      	subs	r4, r5, r3
 8010a76:	d407      	bmi.n	8010a88 <uxr_run_session_until_confirm_delivery+0x40>
 8010a78:	4640      	mov	r0, r8
 8010a7a:	f000 fcbb 	bl	80113f4 <uxr_output_streams_confirmed>
 8010a7e:	4603      	mov	r3, r0
 8010a80:	4621      	mov	r1, r4
 8010a82:	4630      	mov	r0, r6
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d0f0      	beq.n	8010a6a <uxr_run_session_until_confirm_delivery+0x22>
 8010a88:	4640      	mov	r0, r8
 8010a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010a8e:	f000 bcb1 	b.w	80113f4 <uxr_output_streams_confirmed>
 8010a92:	bf00      	nop

08010a94 <uxr_run_session_until_all_status>:
 8010a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a98:	9c08      	ldr	r4, [sp, #32]
 8010a9a:	4606      	mov	r6, r0
 8010a9c:	460f      	mov	r7, r1
 8010a9e:	4691      	mov	r9, r2
 8010aa0:	461d      	mov	r5, r3
 8010aa2:	f7ff fc11 	bl	80102c8 <uxr_flash_output_streams>
 8010aa6:	b124      	cbz	r4, 8010ab2 <uxr_run_session_until_all_status+0x1e>
 8010aa8:	4622      	mov	r2, r4
 8010aaa:	21ff      	movs	r1, #255	@ 0xff
 8010aac:	4628      	mov	r0, r5
 8010aae:	f00a f97f 	bl	801adb0 <memset>
 8010ab2:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 8010ab6:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8010ab8:	f000 fcf8 	bl	80114ac <uxr_millis>
 8010abc:	3d01      	subs	r5, #1
 8010abe:	f1a9 0902 	sub.w	r9, r9, #2
 8010ac2:	4680      	mov	r8, r0
 8010ac4:	4639      	mov	r1, r7
 8010ac6:	4630      	mov	r0, r6
 8010ac8:	f7ff fe44 	bl	8010754 <listen_message_reliably>
 8010acc:	f000 fcee 	bl	80114ac <uxr_millis>
 8010ad0:	eba0 0008 	sub.w	r0, r0, r8
 8010ad4:	1a39      	subs	r1, r7, r0
 8010ad6:	b344      	cbz	r4, 8010b2a <uxr_run_session_until_all_status+0x96>
 8010ad8:	4628      	mov	r0, r5
 8010ada:	46ac      	mov	ip, r5
 8010adc:	2301      	movs	r3, #1
 8010ade:	e002      	b.n	8010ae6 <uxr_run_session_until_all_status+0x52>
 8010ae0:	42a3      	cmp	r3, r4
 8010ae2:	d20d      	bcs.n	8010b00 <uxr_run_session_until_all_status+0x6c>
 8010ae4:	3301      	adds	r3, #1
 8010ae6:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8010aea:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8010aee:	d1f7      	bne.n	8010ae0 <uxr_run_session_until_all_status+0x4c>
 8010af0:	42a3      	cmp	r3, r4
 8010af2:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8010af6:	d213      	bcs.n	8010b20 <uxr_run_session_until_all_status+0x8c>
 8010af8:	2a00      	cmp	r2, #0
 8010afa:	d0f3      	beq.n	8010ae4 <uxr_run_session_until_all_status+0x50>
 8010afc:	2900      	cmp	r1, #0
 8010afe:	dce2      	bgt.n	8010ac6 <uxr_run_session_until_all_status+0x32>
 8010b00:	2300      	movs	r3, #0
 8010b02:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8010b04:	442c      	add	r4, r5
 8010b06:	e001      	b.n	8010b0c <uxr_run_session_until_all_status+0x78>
 8010b08:	2b01      	cmp	r3, #1
 8010b0a:	d812      	bhi.n	8010b32 <uxr_run_session_until_all_status+0x9e>
 8010b0c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8010b10:	4284      	cmp	r4, r0
 8010b12:	d1f9      	bne.n	8010b08 <uxr_run_session_until_all_status+0x74>
 8010b14:	2b01      	cmp	r3, #1
 8010b16:	bf8c      	ite	hi
 8010b18:	2000      	movhi	r0, #0
 8010b1a:	2001      	movls	r0, #1
 8010b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b20:	2900      	cmp	r1, #0
 8010b22:	dded      	ble.n	8010b00 <uxr_run_session_until_all_status+0x6c>
 8010b24:	2a00      	cmp	r2, #0
 8010b26:	d1ce      	bne.n	8010ac6 <uxr_run_session_until_all_status+0x32>
 8010b28:	e7ea      	b.n	8010b00 <uxr_run_session_until_all_status+0x6c>
 8010b2a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8010b2c:	2001      	movs	r0, #1
 8010b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b32:	2000      	movs	r0, #0
 8010b34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08010b38 <wait_session_status>:
 8010b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b3c:	4604      	mov	r4, r0
 8010b3e:	b09d      	sub	sp, #116	@ 0x74
 8010b40:	20ff      	movs	r0, #255	@ 0xff
 8010b42:	7160      	strb	r0, [r4, #5]
 8010b44:	9303      	str	r3, [sp, #12]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	f000 80b6 	beq.w	8010cb8 <wait_session_status+0x180>
 8010b4c:	468a      	mov	sl, r1
 8010b4e:	4691      	mov	r9, r2
 8010b50:	f04f 0b00 	mov.w	fp, #0
 8010b54:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010b56:	464a      	mov	r2, r9
 8010b58:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010b5c:	4651      	mov	r1, sl
 8010b5e:	47a8      	blx	r5
 8010b60:	f000 fca4 	bl	80114ac <uxr_millis>
 8010b64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010b68:	4605      	mov	r5, r0
 8010b6a:	e009      	b.n	8010b80 <wait_session_status+0x48>
 8010b6c:	f000 fc9e 	bl	80114ac <uxr_millis>
 8010b70:	1b40      	subs	r0, r0, r5
 8010b72:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	dd40      	ble.n	8010bfc <wait_session_status+0xc4>
 8010b7a:	7960      	ldrb	r0, [r4, #5]
 8010b7c:	28ff      	cmp	r0, #255	@ 0xff
 8010b7e:	d145      	bne.n	8010c0c <wait_session_status+0xd4>
 8010b80:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8010b82:	a908      	add	r1, sp, #32
 8010b84:	6896      	ldr	r6, [r2, #8]
 8010b86:	6810      	ldr	r0, [r2, #0]
 8010b88:	aa09      	add	r2, sp, #36	@ 0x24
 8010b8a:	47b0      	blx	r6
 8010b8c:	2800      	cmp	r0, #0
 8010b8e:	d0ed      	beq.n	8010b6c <wait_session_status+0x34>
 8010b90:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8010b94:	a80c      	add	r0, sp, #48	@ 0x30
 8010b96:	f7fe ffd5 	bl	800fb44 <ucdr_init_buffer>
 8010b9a:	2600      	movs	r6, #0
 8010b9c:	f10d 031e 	add.w	r3, sp, #30
 8010ba0:	aa07      	add	r2, sp, #28
 8010ba2:	a90c      	add	r1, sp, #48	@ 0x30
 8010ba4:	4620      	mov	r0, r4
 8010ba6:	f88d 601c 	strb.w	r6, [sp, #28]
 8010baa:	f000 fa87 	bl	80110bc <uxr_read_session_header>
 8010bae:	2800      	cmp	r0, #0
 8010bb0:	d0dc      	beq.n	8010b6c <wait_session_status+0x34>
 8010bb2:	4631      	mov	r1, r6
 8010bb4:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8010bb8:	f000 fb24 	bl	8011204 <uxr_stream_id_from_raw>
 8010bbc:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8010bc0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8010bc4:	9302      	str	r3, [sp, #8]
 8010bc6:	2f01      	cmp	r7, #1
 8010bc8:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8010bcc:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010bd0:	d05c      	beq.n	8010c8c <wait_session_status+0x154>
 8010bd2:	2f02      	cmp	r7, #2
 8010bd4:	d020      	beq.n	8010c18 <wait_session_status+0xe0>
 8010bd6:	2f00      	cmp	r7, #0
 8010bd8:	d1c8      	bne.n	8010b6c <wait_session_status+0x34>
 8010bda:	4639      	mov	r1, r7
 8010bdc:	4638      	mov	r0, r7
 8010bde:	f000 fb11 	bl	8011204 <uxr_stream_id_from_raw>
 8010be2:	a90c      	add	r1, sp, #48	@ 0x30
 8010be4:	4602      	mov	r2, r0
 8010be6:	900b      	str	r0, [sp, #44]	@ 0x2c
 8010be8:	4620      	mov	r0, r4
 8010bea:	f7ff fc2b 	bl	8010444 <read_submessage_list>
 8010bee:	f000 fc5d 	bl	80114ac <uxr_millis>
 8010bf2:	1b40      	subs	r0, r0, r5
 8010bf4:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	dcbe      	bgt.n	8010b7a <wait_session_status+0x42>
 8010bfc:	9b03      	ldr	r3, [sp, #12]
 8010bfe:	7960      	ldrb	r0, [r4, #5]
 8010c00:	f10b 0b01 	add.w	fp, fp, #1
 8010c04:	455b      	cmp	r3, fp
 8010c06:	d001      	beq.n	8010c0c <wait_session_status+0xd4>
 8010c08:	28ff      	cmp	r0, #255	@ 0xff
 8010c0a:	d0a3      	beq.n	8010b54 <wait_session_status+0x1c>
 8010c0c:	38ff      	subs	r0, #255	@ 0xff
 8010c0e:	bf18      	it	ne
 8010c10:	2001      	movne	r0, #1
 8010c12:	b01d      	add	sp, #116	@ 0x74
 8010c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c18:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8010c1c:	9304      	str	r3, [sp, #16]
 8010c1e:	4631      	mov	r1, r6
 8010c20:	f104 0008 	add.w	r0, r4, #8
 8010c24:	f000 fbdc 	bl	80113e0 <uxr_get_input_reliable_stream>
 8010c28:	4680      	mov	r8, r0
 8010c2a:	b348      	cbz	r0, 8010c80 <wait_session_status+0x148>
 8010c2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010c2e:	9205      	str	r2, [sp, #20]
 8010c30:	a80c      	add	r0, sp, #48	@ 0x30
 8010c32:	f7fe ffb7 	bl	800fba4 <ucdr_buffer_remaining>
 8010c36:	4603      	mov	r3, r0
 8010c38:	f10d 001d 	add.w	r0, sp, #29
 8010c3c:	9000      	str	r0, [sp, #0]
 8010c3e:	9a05      	ldr	r2, [sp, #20]
 8010c40:	9902      	ldr	r1, [sp, #8]
 8010c42:	4640      	mov	r0, r8
 8010c44:	f006 fe2e 	bl	80178a4 <uxr_receive_reliable_message>
 8010c48:	b1d0      	cbz	r0, 8010c80 <wait_session_status+0x148>
 8010c4a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d03a      	beq.n	8010cc8 <wait_session_status+0x190>
 8010c52:	9f04      	ldr	r7, [sp, #16]
 8010c54:	e00a      	b.n	8010c6c <wait_session_status+0x134>
 8010c56:	f04f 0302 	mov.w	r3, #2
 8010c5a:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8010c5e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8010c62:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8010c66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010c68:	f7ff fbec 	bl	8010444 <read_submessage_list>
 8010c6c:	a914      	add	r1, sp, #80	@ 0x50
 8010c6e:	2204      	movs	r2, #4
 8010c70:	4640      	mov	r0, r8
 8010c72:	f006 fe97 	bl	80179a4 <uxr_next_input_reliable_buffer_available>
 8010c76:	4603      	mov	r3, r0
 8010c78:	a914      	add	r1, sp, #80	@ 0x50
 8010c7a:	4620      	mov	r0, r4
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d1ea      	bne.n	8010c56 <wait_session_status+0x11e>
 8010c80:	9904      	ldr	r1, [sp, #16]
 8010c82:	4632      	mov	r2, r6
 8010c84:	4620      	mov	r0, r4
 8010c86:	f7ff fa57 	bl	8010138 <write_submessage_acknack.isra.0>
 8010c8a:	e76f      	b.n	8010b6c <wait_session_status+0x34>
 8010c8c:	4631      	mov	r1, r6
 8010c8e:	f104 0008 	add.w	r0, r4, #8
 8010c92:	f000 fb9b 	bl	80113cc <uxr_get_input_best_effort_stream>
 8010c96:	2800      	cmp	r0, #0
 8010c98:	f43f af68 	beq.w	8010b6c <wait_session_status+0x34>
 8010c9c:	9902      	ldr	r1, [sp, #8]
 8010c9e:	f006 fd6d 	bl	801777c <uxr_receive_best_effort_message>
 8010ca2:	2800      	cmp	r0, #0
 8010ca4:	f43f af62 	beq.w	8010b6c <wait_session_status+0x34>
 8010ca8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8010cac:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010cae:	a90c      	add	r1, sp, #48	@ 0x30
 8010cb0:	4620      	mov	r0, r4
 8010cb2:	f7ff fbc7 	bl	8010444 <read_submessage_list>
 8010cb6:	e759      	b.n	8010b6c <wait_session_status+0x34>
 8010cb8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010cba:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010cbe:	47a0      	blx	r4
 8010cc0:	2001      	movs	r0, #1
 8010cc2:	b01d      	add	sp, #116	@ 0x74
 8010cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cc8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8010ccc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010cce:	a90c      	add	r1, sp, #48	@ 0x30
 8010cd0:	4620      	mov	r0, r4
 8010cd2:	f7ff fbb7 	bl	8010444 <read_submessage_list>
 8010cd6:	e7bc      	b.n	8010c52 <wait_session_status+0x11a>

08010cd8 <uxr_delete_session_retries>:
 8010cd8:	b530      	push	{r4, r5, lr}
 8010cda:	b08f      	sub	sp, #60	@ 0x3c
 8010cdc:	4604      	mov	r4, r0
 8010cde:	460d      	mov	r5, r1
 8010ce0:	f000 fa2e 	bl	8011140 <uxr_session_header_offset>
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	2210      	movs	r2, #16
 8010ce8:	9000      	str	r0, [sp, #0]
 8010cea:	a902      	add	r1, sp, #8
 8010cec:	a806      	add	r0, sp, #24
 8010cee:	f7fe ff17 	bl	800fb20 <ucdr_init_buffer_origin_offset>
 8010cf2:	a906      	add	r1, sp, #24
 8010cf4:	4620      	mov	r0, r4
 8010cf6:	f000 f973 	bl	8010fe0 <uxr_buffer_delete_session>
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	4611      	mov	r1, r2
 8010cfe:	9b06      	ldr	r3, [sp, #24]
 8010d00:	4620      	mov	r0, r4
 8010d02:	f000 f9c7 	bl	8011094 <uxr_stamp_session_header>
 8010d06:	a806      	add	r0, sp, #24
 8010d08:	f7fe ff48 	bl	800fb9c <ucdr_buffer_length>
 8010d0c:	462b      	mov	r3, r5
 8010d0e:	4602      	mov	r2, r0
 8010d10:	a902      	add	r1, sp, #8
 8010d12:	4620      	mov	r0, r4
 8010d14:	f7ff ff10 	bl	8010b38 <wait_session_status>
 8010d18:	b118      	cbz	r0, 8010d22 <uxr_delete_session_retries+0x4a>
 8010d1a:	7960      	ldrb	r0, [r4, #5]
 8010d1c:	fab0 f080 	clz	r0, r0
 8010d20:	0940      	lsrs	r0, r0, #5
 8010d22:	b00f      	add	sp, #60	@ 0x3c
 8010d24:	bd30      	pop	{r4, r5, pc}
 8010d26:	bf00      	nop

08010d28 <uxr_create_session>:
 8010d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d2c:	f100 0b08 	add.w	fp, r0, #8
 8010d30:	b0ab      	sub	sp, #172	@ 0xac
 8010d32:	4604      	mov	r4, r0
 8010d34:	4658      	mov	r0, fp
 8010d36:	f000 fa99 	bl	801126c <uxr_reset_stream_storage>
 8010d3a:	4620      	mov	r0, r4
 8010d3c:	f000 fa00 	bl	8011140 <uxr_session_header_offset>
 8010d40:	2300      	movs	r3, #0
 8010d42:	9000      	str	r0, [sp, #0]
 8010d44:	221c      	movs	r2, #28
 8010d46:	a90b      	add	r1, sp, #44	@ 0x2c
 8010d48:	a812      	add	r0, sp, #72	@ 0x48
 8010d4a:	f7fe fee9 	bl	800fb20 <ucdr_init_buffer_origin_offset>
 8010d4e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010d50:	8a1a      	ldrh	r2, [r3, #16]
 8010d52:	3a04      	subs	r2, #4
 8010d54:	b292      	uxth	r2, r2
 8010d56:	a912      	add	r1, sp, #72	@ 0x48
 8010d58:	4620      	mov	r0, r4
 8010d5a:	f000 f917 	bl	8010f8c <uxr_buffer_create_session>
 8010d5e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010d60:	4620      	mov	r0, r4
 8010d62:	f000 f983 	bl	801106c <uxr_stamp_create_session_header>
 8010d66:	a812      	add	r0, sp, #72	@ 0x48
 8010d68:	f7fe ff18 	bl	800fb9c <ucdr_buffer_length>
 8010d6c:	23ff      	movs	r3, #255	@ 0xff
 8010d6e:	7163      	strb	r3, [r4, #5]
 8010d70:	230a      	movs	r3, #10
 8010d72:	46da      	mov	sl, fp
 8010d74:	9303      	str	r3, [sp, #12]
 8010d76:	4683      	mov	fp, r0
 8010d78:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010d7a:	465a      	mov	r2, fp
 8010d7c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010d80:	a90b      	add	r1, sp, #44	@ 0x2c
 8010d82:	47a8      	blx	r5
 8010d84:	f000 fb92 	bl	80114ac <uxr_millis>
 8010d88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010d8c:	4605      	mov	r5, r0
 8010d8e:	e009      	b.n	8010da4 <uxr_create_session+0x7c>
 8010d90:	f000 fb8c 	bl	80114ac <uxr_millis>
 8010d94:	1b40      	subs	r0, r0, r5
 8010d96:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	7962      	ldrb	r2, [r4, #5]
 8010d9e:	dd38      	ble.n	8010e12 <uxr_create_session+0xea>
 8010da0:	2aff      	cmp	r2, #255	@ 0xff
 8010da2:	d13c      	bne.n	8010e1e <uxr_create_session+0xf6>
 8010da4:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8010da6:	a907      	add	r1, sp, #28
 8010da8:	6896      	ldr	r6, [r2, #8]
 8010daa:	6810      	ldr	r0, [r2, #0]
 8010dac:	aa08      	add	r2, sp, #32
 8010dae:	47b0      	blx	r6
 8010db0:	2800      	cmp	r0, #0
 8010db2:	d0ed      	beq.n	8010d90 <uxr_create_session+0x68>
 8010db4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8010db8:	a81a      	add	r0, sp, #104	@ 0x68
 8010dba:	f7fe fec3 	bl	800fb44 <ucdr_init_buffer>
 8010dbe:	2600      	movs	r6, #0
 8010dc0:	f10d 031a 	add.w	r3, sp, #26
 8010dc4:	aa06      	add	r2, sp, #24
 8010dc6:	a91a      	add	r1, sp, #104	@ 0x68
 8010dc8:	4620      	mov	r0, r4
 8010dca:	f88d 6018 	strb.w	r6, [sp, #24]
 8010dce:	f000 f975 	bl	80110bc <uxr_read_session_header>
 8010dd2:	2800      	cmp	r0, #0
 8010dd4:	d0dc      	beq.n	8010d90 <uxr_create_session+0x68>
 8010dd6:	4631      	mov	r1, r6
 8010dd8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8010ddc:	f000 fa12 	bl	8011204 <uxr_stream_id_from_raw>
 8010de0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8010de4:	2e01      	cmp	r6, #1
 8010de6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8010dea:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8010dee:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8010df2:	d053      	beq.n	8010e9c <uxr_create_session+0x174>
 8010df4:	2e02      	cmp	r6, #2
 8010df6:	d018      	beq.n	8010e2a <uxr_create_session+0x102>
 8010df8:	2e00      	cmp	r6, #0
 8010dfa:	d1c9      	bne.n	8010d90 <uxr_create_session+0x68>
 8010dfc:	4631      	mov	r1, r6
 8010dfe:	4630      	mov	r0, r6
 8010e00:	f000 fa00 	bl	8011204 <uxr_stream_id_from_raw>
 8010e04:	a91a      	add	r1, sp, #104	@ 0x68
 8010e06:	4602      	mov	r2, r0
 8010e08:	900a      	str	r0, [sp, #40]	@ 0x28
 8010e0a:	4620      	mov	r0, r4
 8010e0c:	f7ff fb1a 	bl	8010444 <read_submessage_list>
 8010e10:	e7be      	b.n	8010d90 <uxr_create_session+0x68>
 8010e12:	9b03      	ldr	r3, [sp, #12]
 8010e14:	3b01      	subs	r3, #1
 8010e16:	9303      	str	r3, [sp, #12]
 8010e18:	d001      	beq.n	8010e1e <uxr_create_session+0xf6>
 8010e1a:	2aff      	cmp	r2, #255	@ 0xff
 8010e1c:	d0ac      	beq.n	8010d78 <uxr_create_session+0x50>
 8010e1e:	2a00      	cmp	r2, #0
 8010e20:	d051      	beq.n	8010ec6 <uxr_create_session+0x19e>
 8010e22:	2000      	movs	r0, #0
 8010e24:	b02b      	add	sp, #172	@ 0xac
 8010e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e2a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8010e2e:	9304      	str	r3, [sp, #16]
 8010e30:	4639      	mov	r1, r7
 8010e32:	4650      	mov	r0, sl
 8010e34:	f000 fad4 	bl	80113e0 <uxr_get_input_reliable_stream>
 8010e38:	4680      	mov	r8, r0
 8010e3a:	b348      	cbz	r0, 8010e90 <uxr_create_session+0x168>
 8010e3c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010e3e:	9205      	str	r2, [sp, #20]
 8010e40:	a81a      	add	r0, sp, #104	@ 0x68
 8010e42:	f7fe feaf 	bl	800fba4 <ucdr_buffer_remaining>
 8010e46:	4603      	mov	r3, r0
 8010e48:	f10d 0019 	add.w	r0, sp, #25
 8010e4c:	9000      	str	r0, [sp, #0]
 8010e4e:	9a05      	ldr	r2, [sp, #20]
 8010e50:	4649      	mov	r1, r9
 8010e52:	4640      	mov	r0, r8
 8010e54:	f006 fd26 	bl	80178a4 <uxr_receive_reliable_message>
 8010e58:	b1d0      	cbz	r0, 8010e90 <uxr_create_session+0x168>
 8010e5a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d038      	beq.n	8010ed4 <uxr_create_session+0x1ac>
 8010e62:	9e04      	ldr	r6, [sp, #16]
 8010e64:	e00a      	b.n	8010e7c <uxr_create_session+0x154>
 8010e66:	f04f 0302 	mov.w	r3, #2
 8010e6a:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 8010e6e:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 8010e72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010e76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010e78:	f7ff fae4 	bl	8010444 <read_submessage_list>
 8010e7c:	a922      	add	r1, sp, #136	@ 0x88
 8010e7e:	2204      	movs	r2, #4
 8010e80:	4640      	mov	r0, r8
 8010e82:	f006 fd8f 	bl	80179a4 <uxr_next_input_reliable_buffer_available>
 8010e86:	4603      	mov	r3, r0
 8010e88:	a922      	add	r1, sp, #136	@ 0x88
 8010e8a:	4620      	mov	r0, r4
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d1ea      	bne.n	8010e66 <uxr_create_session+0x13e>
 8010e90:	9904      	ldr	r1, [sp, #16]
 8010e92:	463a      	mov	r2, r7
 8010e94:	4620      	mov	r0, r4
 8010e96:	f7ff f94f 	bl	8010138 <write_submessage_acknack.isra.0>
 8010e9a:	e779      	b.n	8010d90 <uxr_create_session+0x68>
 8010e9c:	4639      	mov	r1, r7
 8010e9e:	4650      	mov	r0, sl
 8010ea0:	f000 fa94 	bl	80113cc <uxr_get_input_best_effort_stream>
 8010ea4:	2800      	cmp	r0, #0
 8010ea6:	f43f af73 	beq.w	8010d90 <uxr_create_session+0x68>
 8010eaa:	4649      	mov	r1, r9
 8010eac:	f006 fc66 	bl	801777c <uxr_receive_best_effort_message>
 8010eb0:	2800      	cmp	r0, #0
 8010eb2:	f43f af6d 	beq.w	8010d90 <uxr_create_session+0x68>
 8010eb6:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8010eba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010ebc:	a91a      	add	r1, sp, #104	@ 0x68
 8010ebe:	4620      	mov	r0, r4
 8010ec0:	f7ff fac0 	bl	8010444 <read_submessage_list>
 8010ec4:	e764      	b.n	8010d90 <uxr_create_session+0x68>
 8010ec6:	4650      	mov	r0, sl
 8010ec8:	f000 f9d0 	bl	801126c <uxr_reset_stream_storage>
 8010ecc:	2001      	movs	r0, #1
 8010ece:	b02b      	add	sp, #172	@ 0xac
 8010ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ed4:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8010ed8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010eda:	a91a      	add	r1, sp, #104	@ 0x68
 8010edc:	4620      	mov	r0, r4
 8010ede:	f7ff fab1 	bl	8010444 <read_submessage_list>
 8010ee2:	e7be      	b.n	8010e62 <uxr_create_session+0x13a>

08010ee4 <uxr_prepare_stream_to_write_submessage>:
 8010ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ee8:	b082      	sub	sp, #8
 8010eea:	4682      	mov	sl, r0
 8010eec:	4610      	mov	r0, r2
 8010eee:	4615      	mov	r5, r2
 8010ef0:	461e      	mov	r6, r3
 8010ef2:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8010ef6:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8010efa:	9101      	str	r1, [sp, #4]
 8010efc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8010f00:	f000 face 	bl	80114a0 <uxr_submessage_padding>
 8010f04:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010f08:	f105 0904 	add.w	r9, r5, #4
 8010f0c:	2b01      	cmp	r3, #1
 8010f0e:	4481      	add	r9, r0
 8010f10:	d01d      	beq.n	8010f4e <uxr_prepare_stream_to_write_submessage+0x6a>
 8010f12:	2b02      	cmp	r3, #2
 8010f14:	d116      	bne.n	8010f44 <uxr_prepare_stream_to_write_submessage+0x60>
 8010f16:	4621      	mov	r1, r4
 8010f18:	f10a 0008 	add.w	r0, sl, #8
 8010f1c:	f000 fa4c 	bl	80113b8 <uxr_get_output_reliable_stream>
 8010f20:	4604      	mov	r4, r0
 8010f22:	b158      	cbz	r0, 8010f3c <uxr_prepare_stream_to_write_submessage+0x58>
 8010f24:	4649      	mov	r1, r9
 8010f26:	4632      	mov	r2, r6
 8010f28:	f006 fef8 	bl	8017d1c <uxr_prepare_reliable_buffer_to_write>
 8010f2c:	4604      	mov	r4, r0
 8010f2e:	b12c      	cbz	r4, 8010f3c <uxr_prepare_stream_to_write_submessage+0x58>
 8010f30:	4643      	mov	r3, r8
 8010f32:	b2aa      	uxth	r2, r5
 8010f34:	4639      	mov	r1, r7
 8010f36:	4630      	mov	r0, r6
 8010f38:	f000 fa72 	bl	8011420 <uxr_buffer_submessage_header>
 8010f3c:	4620      	mov	r0, r4
 8010f3e:	b002      	add	sp, #8
 8010f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f44:	2400      	movs	r4, #0
 8010f46:	4620      	mov	r0, r4
 8010f48:	b002      	add	sp, #8
 8010f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f4e:	4621      	mov	r1, r4
 8010f50:	f10a 0008 	add.w	r0, sl, #8
 8010f54:	f000 fa28 	bl	80113a8 <uxr_get_output_best_effort_stream>
 8010f58:	4604      	mov	r4, r0
 8010f5a:	2800      	cmp	r0, #0
 8010f5c:	d0ee      	beq.n	8010f3c <uxr_prepare_stream_to_write_submessage+0x58>
 8010f5e:	4649      	mov	r1, r9
 8010f60:	4632      	mov	r2, r6
 8010f62:	f006 fe0b 	bl	8017b7c <uxr_prepare_best_effort_buffer_to_write>
 8010f66:	4604      	mov	r4, r0
 8010f68:	e7e1      	b.n	8010f2e <uxr_prepare_stream_to_write_submessage+0x4a>
 8010f6a:	bf00      	nop

08010f6c <uxr_init_session_info>:
 8010f6c:	0e13      	lsrs	r3, r2, #24
 8010f6e:	7043      	strb	r3, [r0, #1]
 8010f70:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8010f74:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8010f78:	7001      	strb	r1, [r0, #0]
 8010f7a:	70c3      	strb	r3, [r0, #3]
 8010f7c:	2109      	movs	r1, #9
 8010f7e:	23ff      	movs	r3, #255	@ 0xff
 8010f80:	f880 c002 	strb.w	ip, [r0, #2]
 8010f84:	7102      	strb	r2, [r0, #4]
 8010f86:	80c1      	strh	r1, [r0, #6]
 8010f88:	7143      	strb	r3, [r0, #5]
 8010f8a:	4770      	bx	lr

08010f8c <uxr_buffer_create_session>:
 8010f8c:	b530      	push	{r4, r5, lr}
 8010f8e:	b089      	sub	sp, #36	@ 0x24
 8010f90:	2300      	movs	r3, #0
 8010f92:	4d12      	ldr	r5, [pc, #72]	@ (8010fdc <uxr_buffer_create_session+0x50>)
 8010f94:	9307      	str	r3, [sp, #28]
 8010f96:	f8ad 201c 	strh.w	r2, [sp, #28]
 8010f9a:	2201      	movs	r2, #1
 8010f9c:	9301      	str	r3, [sp, #4]
 8010f9e:	80c2      	strh	r2, [r0, #6]
 8010fa0:	f88d 2004 	strb.w	r2, [sp, #4]
 8010fa4:	682a      	ldr	r2, [r5, #0]
 8010fa6:	9200      	str	r2, [sp, #0]
 8010fa8:	88aa      	ldrh	r2, [r5, #4]
 8010faa:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010fae:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8010fb2:	9202      	str	r2, [sp, #8]
 8010fb4:	460c      	mov	r4, r1
 8010fb6:	7802      	ldrb	r2, [r0, #0]
 8010fb8:	9303      	str	r3, [sp, #12]
 8010fba:	4619      	mov	r1, r3
 8010fbc:	f88d 200c 	strb.w	r2, [sp, #12]
 8010fc0:	4620      	mov	r0, r4
 8010fc2:	2210      	movs	r2, #16
 8010fc4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8010fc8:	9306      	str	r3, [sp, #24]
 8010fca:	f000 fa29 	bl	8011420 <uxr_buffer_submessage_header>
 8010fce:	4669      	mov	r1, sp
 8010fd0:	4620      	mov	r0, r4
 8010fd2:	f001 fa6d 	bl	80124b0 <uxr_serialize_CREATE_CLIENT_Payload>
 8010fd6:	b009      	add	sp, #36	@ 0x24
 8010fd8:	bd30      	pop	{r4, r5, pc}
 8010fda:	bf00      	nop
 8010fdc:	0801fd10 	.word	0x0801fd10

08010fe0 <uxr_buffer_delete_session>:
 8010fe0:	b510      	push	{r4, lr}
 8010fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8011014 <uxr_buffer_delete_session+0x34>)
 8010fe4:	b082      	sub	sp, #8
 8010fe6:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8010fea:	f8ad c006 	strh.w	ip, [sp, #6]
 8010fee:	460c      	mov	r4, r1
 8010ff0:	2202      	movs	r2, #2
 8010ff2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010ff6:	80c2      	strh	r2, [r0, #6]
 8010ff8:	f8ad 3004 	strh.w	r3, [sp, #4]
 8010ffc:	2204      	movs	r2, #4
 8010ffe:	2300      	movs	r3, #0
 8011000:	2103      	movs	r1, #3
 8011002:	4620      	mov	r0, r4
 8011004:	f000 fa0c 	bl	8011420 <uxr_buffer_submessage_header>
 8011008:	a901      	add	r1, sp, #4
 801100a:	4620      	mov	r0, r4
 801100c:	f001 faf6 	bl	80125fc <uxr_serialize_DELETE_Payload>
 8011010:	b002      	add	sp, #8
 8011012:	bd10      	pop	{r4, pc}
 8011014:	0801fd10 	.word	0x0801fd10

08011018 <uxr_read_create_session_status>:
 8011018:	b510      	push	{r4, lr}
 801101a:	b088      	sub	sp, #32
 801101c:	4604      	mov	r4, r0
 801101e:	4608      	mov	r0, r1
 8011020:	a901      	add	r1, sp, #4
 8011022:	f001 fafb 	bl	801261c <uxr_deserialize_STATUS_AGENT_Payload>
 8011026:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801102a:	7163      	strb	r3, [r4, #5]
 801102c:	b008      	add	sp, #32
 801102e:	bd10      	pop	{r4, pc}

08011030 <uxr_read_delete_session_status>:
 8011030:	b510      	push	{r4, lr}
 8011032:	4604      	mov	r4, r0
 8011034:	b084      	sub	sp, #16
 8011036:	4608      	mov	r0, r1
 8011038:	a902      	add	r1, sp, #8
 801103a:	f001 fb1f 	bl	801267c <uxr_deserialize_STATUS_Payload>
 801103e:	88e3      	ldrh	r3, [r4, #6]
 8011040:	2b02      	cmp	r3, #2
 8011042:	d001      	beq.n	8011048 <uxr_read_delete_session_status+0x18>
 8011044:	b004      	add	sp, #16
 8011046:	bd10      	pop	{r4, pc}
 8011048:	f10d 000a 	add.w	r0, sp, #10
 801104c:	f7fe fffa 	bl	8010044 <uxr_object_id_from_raw>
 8011050:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8011054:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8011058:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801105c:	b29b      	uxth	r3, r3
 801105e:	2b02      	cmp	r3, #2
 8011060:	bf04      	itt	eq
 8011062:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8011066:	7163      	strbeq	r3, [r4, #5]
 8011068:	b004      	add	sp, #16
 801106a:	bd10      	pop	{r4, pc}

0801106c <uxr_stamp_create_session_header>:
 801106c:	b510      	push	{r4, lr}
 801106e:	2208      	movs	r2, #8
 8011070:	b08a      	sub	sp, #40	@ 0x28
 8011072:	4604      	mov	r4, r0
 8011074:	eb0d 0002 	add.w	r0, sp, r2
 8011078:	f7fe fd64 	bl	800fb44 <ucdr_init_buffer>
 801107c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011080:	9400      	str	r4, [sp, #0]
 8011082:	2300      	movs	r3, #0
 8011084:	461a      	mov	r2, r3
 8011086:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 801108a:	a802      	add	r0, sp, #8
 801108c:	f000 fbc2 	bl	8011814 <uxr_serialize_message_header>
 8011090:	b00a      	add	sp, #40	@ 0x28
 8011092:	bd10      	pop	{r4, pc}

08011094 <uxr_stamp_session_header>:
 8011094:	b530      	push	{r4, r5, lr}
 8011096:	b08d      	sub	sp, #52	@ 0x34
 8011098:	4604      	mov	r4, r0
 801109a:	460d      	mov	r5, r1
 801109c:	9203      	str	r2, [sp, #12]
 801109e:	4619      	mov	r1, r3
 80110a0:	a804      	add	r0, sp, #16
 80110a2:	2208      	movs	r2, #8
 80110a4:	f7fe fd4e 	bl	800fb44 <ucdr_init_buffer>
 80110a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110ac:	9b03      	ldr	r3, [sp, #12]
 80110ae:	9400      	str	r4, [sp, #0]
 80110b0:	462a      	mov	r2, r5
 80110b2:	a804      	add	r0, sp, #16
 80110b4:	f000 fbae 	bl	8011814 <uxr_serialize_message_header>
 80110b8:	b00d      	add	sp, #52	@ 0x34
 80110ba:	bd30      	pop	{r4, r5, pc}

080110bc <uxr_read_session_header>:
 80110bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110c0:	4607      	mov	r7, r0
 80110c2:	b084      	sub	sp, #16
 80110c4:	4608      	mov	r0, r1
 80110c6:	460c      	mov	r4, r1
 80110c8:	4615      	mov	r5, r2
 80110ca:	461e      	mov	r6, r3
 80110cc:	f7fe fd6a 	bl	800fba4 <ucdr_buffer_remaining>
 80110d0:	2808      	cmp	r0, #8
 80110d2:	d803      	bhi.n	80110dc <uxr_read_session_header+0x20>
 80110d4:	2000      	movs	r0, #0
 80110d6:	b004      	add	sp, #16
 80110d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110dc:	f10d 080c 	add.w	r8, sp, #12
 80110e0:	4633      	mov	r3, r6
 80110e2:	462a      	mov	r2, r5
 80110e4:	f8cd 8000 	str.w	r8, [sp]
 80110e8:	4620      	mov	r0, r4
 80110ea:	f10d 010b 	add.w	r1, sp, #11
 80110ee:	f000 fbaf 	bl	8011850 <uxr_deserialize_message_header>
 80110f2:	783a      	ldrb	r2, [r7, #0]
 80110f4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80110f8:	4293      	cmp	r3, r2
 80110fa:	d1eb      	bne.n	80110d4 <uxr_read_session_header+0x18>
 80110fc:	061b      	lsls	r3, r3, #24
 80110fe:	d41c      	bmi.n	801113a <uxr_read_session_header+0x7e>
 8011100:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8011104:	787b      	ldrb	r3, [r7, #1]
 8011106:	429a      	cmp	r2, r3
 8011108:	d003      	beq.n	8011112 <uxr_read_session_header+0x56>
 801110a:	2001      	movs	r0, #1
 801110c:	f080 0001 	eor.w	r0, r0, #1
 8011110:	e7e1      	b.n	80110d6 <uxr_read_session_header+0x1a>
 8011112:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8011116:	78bb      	ldrb	r3, [r7, #2]
 8011118:	429a      	cmp	r2, r3
 801111a:	f107 0102 	add.w	r1, r7, #2
 801111e:	d1f4      	bne.n	801110a <uxr_read_session_header+0x4e>
 8011120:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8011124:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011128:	429a      	cmp	r2, r3
 801112a:	d1ee      	bne.n	801110a <uxr_read_session_header+0x4e>
 801112c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011130:	784b      	ldrb	r3, [r1, #1]
 8011132:	429a      	cmp	r2, r3
 8011134:	d1e9      	bne.n	801110a <uxr_read_session_header+0x4e>
 8011136:	2000      	movs	r0, #0
 8011138:	e7e8      	b.n	801110c <uxr_read_session_header+0x50>
 801113a:	2001      	movs	r0, #1
 801113c:	e7cb      	b.n	80110d6 <uxr_read_session_header+0x1a>
 801113e:	bf00      	nop

08011140 <uxr_session_header_offset>:
 8011140:	f990 3000 	ldrsb.w	r3, [r0]
 8011144:	2b00      	cmp	r3, #0
 8011146:	bfac      	ite	ge
 8011148:	2008      	movge	r0, #8
 801114a:	2004      	movlt	r0, #4
 801114c:	4770      	bx	lr
 801114e:	bf00      	nop

08011150 <uxr_init_base_object_request>:
 8011150:	b510      	push	{r4, lr}
 8011152:	88c3      	ldrh	r3, [r0, #6]
 8011154:	b082      	sub	sp, #8
 8011156:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 801115a:	9101      	str	r1, [sp, #4]
 801115c:	f1a3 010a 	sub.w	r1, r3, #10
 8011160:	b289      	uxth	r1, r1
 8011162:	42a1      	cmp	r1, r4
 8011164:	d80e      	bhi.n	8011184 <uxr_init_base_object_request+0x34>
 8011166:	3301      	adds	r3, #1
 8011168:	b29c      	uxth	r4, r3
 801116a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801116e:	b2db      	uxtb	r3, r3
 8011170:	80c4      	strh	r4, [r0, #6]
 8011172:	9801      	ldr	r0, [sp, #4]
 8011174:	7011      	strb	r1, [r2, #0]
 8011176:	7053      	strb	r3, [r2, #1]
 8011178:	1c91      	adds	r1, r2, #2
 801117a:	f7fe ff77 	bl	801006c <uxr_object_id_to_raw>
 801117e:	4620      	mov	r0, r4
 8011180:	b002      	add	sp, #8
 8011182:	bd10      	pop	{r4, pc}
 8011184:	230a      	movs	r3, #10
 8011186:	2100      	movs	r1, #0
 8011188:	461c      	mov	r4, r3
 801118a:	e7f1      	b.n	8011170 <uxr_init_base_object_request+0x20>

0801118c <uxr_parse_base_object_request>:
 801118c:	b570      	push	{r4, r5, r6, lr}
 801118e:	4604      	mov	r4, r0
 8011190:	3002      	adds	r0, #2
 8011192:	460d      	mov	r5, r1
 8011194:	4616      	mov	r6, r2
 8011196:	f7fe ff55 	bl	8010044 <uxr_object_id_from_raw>
 801119a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801119e:	8028      	strh	r0, [r5, #0]
 80111a0:	806b      	strh	r3, [r5, #2]
 80111a2:	7822      	ldrb	r2, [r4, #0]
 80111a4:	7863      	ldrb	r3, [r4, #1]
 80111a6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80111aa:	8033      	strh	r3, [r6, #0]
 80111ac:	bd70      	pop	{r4, r5, r6, pc}
 80111ae:	bf00      	nop

080111b0 <uxr_stream_id>:
 80111b0:	2901      	cmp	r1, #1
 80111b2:	b082      	sub	sp, #8
 80111b4:	d01d      	beq.n	80111f2 <uxr_stream_id+0x42>
 80111b6:	2902      	cmp	r1, #2
 80111b8:	f04f 0c00 	mov.w	ip, #0
 80111bc:	d01e      	beq.n	80111fc <uxr_stream_id+0x4c>
 80111be:	2300      	movs	r3, #0
 80111c0:	f36c 0307 	bfi	r3, ip, #0, #8
 80111c4:	f360 230f 	bfi	r3, r0, #8, #8
 80111c8:	f361 4317 	bfi	r3, r1, #16, #8
 80111cc:	f362 631f 	bfi	r3, r2, #24, #8
 80111d0:	b2da      	uxtb	r2, r3
 80111d2:	2000      	movs	r0, #0
 80111d4:	f362 0007 	bfi	r0, r2, #0, #8
 80111d8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80111dc:	f362 200f 	bfi	r0, r2, #8, #8
 80111e0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80111e4:	f362 4017 	bfi	r0, r2, #16, #8
 80111e8:	0e1b      	lsrs	r3, r3, #24
 80111ea:	f363 601f 	bfi	r0, r3, #24, #8
 80111ee:	b002      	add	sp, #8
 80111f0:	4770      	bx	lr
 80111f2:	f100 0c01 	add.w	ip, r0, #1
 80111f6:	fa5f fc8c 	uxtb.w	ip, ip
 80111fa:	e7e0      	b.n	80111be <uxr_stream_id+0xe>
 80111fc:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8011200:	e7dd      	b.n	80111be <uxr_stream_id+0xe>
 8011202:	bf00      	nop

08011204 <uxr_stream_id_from_raw>:
 8011204:	b082      	sub	sp, #8
 8011206:	b130      	cbz	r0, 8011216 <uxr_stream_id_from_raw+0x12>
 8011208:	0603      	lsls	r3, r0, #24
 801120a:	d420      	bmi.n	801124e <uxr_stream_id_from_raw+0x4a>
 801120c:	1e42      	subs	r2, r0, #1
 801120e:	b2d2      	uxtb	r2, r2
 8011210:	f04f 0c01 	mov.w	ip, #1
 8011214:	e001      	b.n	801121a <uxr_stream_id_from_raw+0x16>
 8011216:	4684      	mov	ip, r0
 8011218:	4602      	mov	r2, r0
 801121a:	2300      	movs	r3, #0
 801121c:	f360 0307 	bfi	r3, r0, #0, #8
 8011220:	f362 230f 	bfi	r3, r2, #8, #8
 8011224:	f36c 4317 	bfi	r3, ip, #16, #8
 8011228:	f361 631f 	bfi	r3, r1, #24, #8
 801122c:	b2da      	uxtb	r2, r3
 801122e:	2000      	movs	r0, #0
 8011230:	f362 0007 	bfi	r0, r2, #0, #8
 8011234:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011238:	f362 200f 	bfi	r0, r2, #8, #8
 801123c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011240:	f362 4017 	bfi	r0, r2, #16, #8
 8011244:	0e1b      	lsrs	r3, r3, #24
 8011246:	f363 601f 	bfi	r0, r3, #24, #8
 801124a:	b002      	add	sp, #8
 801124c:	4770      	bx	lr
 801124e:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8011252:	f04f 0c02 	mov.w	ip, #2
 8011256:	e7e0      	b.n	801121a <uxr_stream_id_from_raw+0x16>

08011258 <uxr_init_stream_storage>:
 8011258:	2300      	movs	r3, #0
 801125a:	7403      	strb	r3, [r0, #16]
 801125c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8011260:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8011264:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8011268:	4770      	bx	lr
 801126a:	bf00      	nop

0801126c <uxr_reset_stream_storage>:
 801126c:	b570      	push	{r4, r5, r6, lr}
 801126e:	7c03      	ldrb	r3, [r0, #16]
 8011270:	4604      	mov	r4, r0
 8011272:	b153      	cbz	r3, 801128a <uxr_reset_stream_storage+0x1e>
 8011274:	4606      	mov	r6, r0
 8011276:	2500      	movs	r5, #0
 8011278:	4630      	mov	r0, r6
 801127a:	f006 fc79 	bl	8017b70 <uxr_reset_output_best_effort_stream>
 801127e:	7c23      	ldrb	r3, [r4, #16]
 8011280:	3501      	adds	r5, #1
 8011282:	42ab      	cmp	r3, r5
 8011284:	f106 0610 	add.w	r6, r6, #16
 8011288:	d8f6      	bhi.n	8011278 <uxr_reset_stream_storage+0xc>
 801128a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801128e:	b163      	cbz	r3, 80112aa <uxr_reset_stream_storage+0x3e>
 8011290:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011294:	2500      	movs	r5, #0
 8011296:	4630      	mov	r0, r6
 8011298:	f006 fa6c 	bl	8017774 <uxr_reset_input_best_effort_stream>
 801129c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80112a0:	3501      	adds	r5, #1
 80112a2:	42ab      	cmp	r3, r5
 80112a4:	f106 0602 	add.w	r6, r6, #2
 80112a8:	d8f5      	bhi.n	8011296 <uxr_reset_stream_storage+0x2a>
 80112aa:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80112ae:	b163      	cbz	r3, 80112ca <uxr_reset_stream_storage+0x5e>
 80112b0:	f104 0618 	add.w	r6, r4, #24
 80112b4:	2500      	movs	r5, #0
 80112b6:	4630      	mov	r0, r6
 80112b8:	f006 fd06 	bl	8017cc8 <uxr_reset_output_reliable_stream>
 80112bc:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80112c0:	3501      	adds	r5, #1
 80112c2:	42ab      	cmp	r3, r5
 80112c4:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 80112c8:	d8f5      	bhi.n	80112b6 <uxr_reset_stream_storage+0x4a>
 80112ca:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80112ce:	b163      	cbz	r3, 80112ea <uxr_reset_stream_storage+0x7e>
 80112d0:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80112d4:	2500      	movs	r5, #0
 80112d6:	4630      	mov	r0, r6
 80112d8:	f006 fac0 	bl	801785c <uxr_reset_input_reliable_stream>
 80112dc:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80112e0:	3501      	adds	r5, #1
 80112e2:	42ab      	cmp	r3, r5
 80112e4:	f106 0618 	add.w	r6, r6, #24
 80112e8:	d8f5      	bhi.n	80112d6 <uxr_reset_stream_storage+0x6a>
 80112ea:	bd70      	pop	{r4, r5, r6, pc}

080112ec <uxr_add_output_best_effort_buffer>:
 80112ec:	b510      	push	{r4, lr}
 80112ee:	7c04      	ldrb	r4, [r0, #16]
 80112f0:	f104 0c01 	add.w	ip, r4, #1
 80112f4:	b082      	sub	sp, #8
 80112f6:	f880 c010 	strb.w	ip, [r0, #16]
 80112fa:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80112fe:	f006 fc2d 	bl	8017b5c <uxr_init_output_best_effort_stream>
 8011302:	2201      	movs	r2, #1
 8011304:	4611      	mov	r1, r2
 8011306:	4620      	mov	r0, r4
 8011308:	b002      	add	sp, #8
 801130a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801130e:	f7ff bf4f 	b.w	80111b0 <uxr_stream_id>
 8011312:	bf00      	nop

08011314 <uxr_add_output_reliable_buffer>:
 8011314:	b510      	push	{r4, lr}
 8011316:	b084      	sub	sp, #16
 8011318:	4684      	mov	ip, r0
 801131a:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801131e:	9000      	str	r0, [sp, #0]
 8011320:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8011324:	2028      	movs	r0, #40	@ 0x28
 8011326:	fb00 c004 	mla	r0, r0, r4, ip
 801132a:	f104 0e01 	add.w	lr, r4, #1
 801132e:	3018      	adds	r0, #24
 8011330:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8011334:	f006 fc90 	bl	8017c58 <uxr_init_output_reliable_stream>
 8011338:	2201      	movs	r2, #1
 801133a:	2102      	movs	r1, #2
 801133c:	4620      	mov	r0, r4
 801133e:	b004      	add	sp, #16
 8011340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011344:	f7ff bf34 	b.w	80111b0 <uxr_stream_id>

08011348 <uxr_add_input_best_effort_buffer>:
 8011348:	b510      	push	{r4, lr}
 801134a:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 801134e:	4603      	mov	r3, r0
 8011350:	1c62      	adds	r2, r4, #1
 8011352:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8011356:	b082      	sub	sp, #8
 8011358:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 801135c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011360:	f006 fa04 	bl	801776c <uxr_init_input_best_effort_stream>
 8011364:	2200      	movs	r2, #0
 8011366:	2101      	movs	r1, #1
 8011368:	4620      	mov	r0, r4
 801136a:	b002      	add	sp, #8
 801136c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011370:	f7ff bf1e 	b.w	80111b0 <uxr_stream_id>

08011374 <uxr_add_input_reliable_buffer>:
 8011374:	b510      	push	{r4, lr}
 8011376:	b084      	sub	sp, #16
 8011378:	4684      	mov	ip, r0
 801137a:	9806      	ldr	r0, [sp, #24]
 801137c:	9000      	str	r0, [sp, #0]
 801137e:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8011382:	2018      	movs	r0, #24
 8011384:	fb00 c004 	mla	r0, r0, r4, ip
 8011388:	f104 0e01 	add.w	lr, r4, #1
 801138c:	3048      	adds	r0, #72	@ 0x48
 801138e:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8011392:	f006 fa37 	bl	8017804 <uxr_init_input_reliable_stream>
 8011396:	2200      	movs	r2, #0
 8011398:	2102      	movs	r1, #2
 801139a:	4620      	mov	r0, r4
 801139c:	b004      	add	sp, #16
 801139e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113a2:	f7ff bf05 	b.w	80111b0 <uxr_stream_id>
 80113a6:	bf00      	nop

080113a8 <uxr_get_output_best_effort_stream>:
 80113a8:	7c03      	ldrb	r3, [r0, #16]
 80113aa:	428b      	cmp	r3, r1
 80113ac:	bf8c      	ite	hi
 80113ae:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80113b2:	2000      	movls	r0, #0
 80113b4:	4770      	bx	lr
 80113b6:	bf00      	nop

080113b8 <uxr_get_output_reliable_stream>:
 80113b8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80113bc:	428b      	cmp	r3, r1
 80113be:	bf83      	ittte	hi
 80113c0:	2328      	movhi	r3, #40	@ 0x28
 80113c2:	fb03 0001 	mlahi	r0, r3, r1, r0
 80113c6:	3018      	addhi	r0, #24
 80113c8:	2000      	movls	r0, #0
 80113ca:	4770      	bx	lr

080113cc <uxr_get_input_best_effort_stream>:
 80113cc:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80113d0:	428b      	cmp	r3, r1
 80113d2:	bf86      	itte	hi
 80113d4:	3121      	addhi	r1, #33	@ 0x21
 80113d6:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80113da:	2000      	movls	r0, #0
 80113dc:	4770      	bx	lr
 80113de:	bf00      	nop

080113e0 <uxr_get_input_reliable_stream>:
 80113e0:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 80113e4:	428b      	cmp	r3, r1
 80113e6:	bf83      	ittte	hi
 80113e8:	2318      	movhi	r3, #24
 80113ea:	fb03 0001 	mlahi	r0, r3, r1, r0
 80113ee:	3048      	addhi	r0, #72	@ 0x48
 80113f0:	2000      	movls	r0, #0
 80113f2:	4770      	bx	lr

080113f4 <uxr_output_streams_confirmed>:
 80113f4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80113f8:	b183      	cbz	r3, 801141c <uxr_output_streams_confirmed+0x28>
 80113fa:	b570      	push	{r4, r5, r6, lr}
 80113fc:	4606      	mov	r6, r0
 80113fe:	f100 0518 	add.w	r5, r0, #24
 8011402:	2400      	movs	r4, #0
 8011404:	e001      	b.n	801140a <uxr_output_streams_confirmed+0x16>
 8011406:	3528      	adds	r5, #40	@ 0x28
 8011408:	b138      	cbz	r0, 801141a <uxr_output_streams_confirmed+0x26>
 801140a:	4628      	mov	r0, r5
 801140c:	f006 fecc 	bl	80181a8 <uxr_is_output_up_to_date>
 8011410:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8011414:	3401      	adds	r4, #1
 8011416:	42a3      	cmp	r3, r4
 8011418:	d8f5      	bhi.n	8011406 <uxr_output_streams_confirmed+0x12>
 801141a:	bd70      	pop	{r4, r5, r6, pc}
 801141c:	2001      	movs	r0, #1
 801141e:	4770      	bx	lr

08011420 <uxr_buffer_submessage_header>:
 8011420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011422:	4604      	mov	r4, r0
 8011424:	460e      	mov	r6, r1
 8011426:	2104      	movs	r1, #4
 8011428:	4615      	mov	r5, r2
 801142a:	461f      	mov	r7, r3
 801142c:	f7fe fba4 	bl	800fb78 <ucdr_align_to>
 8011430:	2301      	movs	r3, #1
 8011432:	ea47 0203 	orr.w	r2, r7, r3
 8011436:	4631      	mov	r1, r6
 8011438:	7523      	strb	r3, [r4, #20]
 801143a:	4620      	mov	r0, r4
 801143c:	462b      	mov	r3, r5
 801143e:	f000 fa27 	bl	8011890 <uxr_serialize_submessage_header>
 8011442:	4620      	mov	r0, r4
 8011444:	f7fe fbae 	bl	800fba4 <ucdr_buffer_remaining>
 8011448:	42a8      	cmp	r0, r5
 801144a:	bf34      	ite	cc
 801144c:	2000      	movcc	r0, #0
 801144e:	2001      	movcs	r0, #1
 8011450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011452:	bf00      	nop

08011454 <uxr_read_submessage_header>:
 8011454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011458:	4604      	mov	r4, r0
 801145a:	460d      	mov	r5, r1
 801145c:	2104      	movs	r1, #4
 801145e:	4616      	mov	r6, r2
 8011460:	4698      	mov	r8, r3
 8011462:	f7fe fb89 	bl	800fb78 <ucdr_align_to>
 8011466:	4620      	mov	r0, r4
 8011468:	f7fe fb9c 	bl	800fba4 <ucdr_buffer_remaining>
 801146c:	2803      	cmp	r0, #3
 801146e:	bf8c      	ite	hi
 8011470:	2701      	movhi	r7, #1
 8011472:	2700      	movls	r7, #0
 8011474:	d802      	bhi.n	801147c <uxr_read_submessage_header+0x28>
 8011476:	4638      	mov	r0, r7
 8011478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801147c:	4633      	mov	r3, r6
 801147e:	4642      	mov	r2, r8
 8011480:	4620      	mov	r0, r4
 8011482:	4629      	mov	r1, r5
 8011484:	f000 fa18 	bl	80118b8 <uxr_deserialize_submessage_header>
 8011488:	f898 3000 	ldrb.w	r3, [r8]
 801148c:	f003 0201 	and.w	r2, r3, #1
 8011490:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8011494:	f888 3000 	strb.w	r3, [r8]
 8011498:	7522      	strb	r2, [r4, #20]
 801149a:	4638      	mov	r0, r7
 801149c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080114a0 <uxr_submessage_padding>:
 80114a0:	f010 0003 	ands.w	r0, r0, #3
 80114a4:	bf18      	it	ne
 80114a6:	f1c0 0004 	rsbne	r0, r0, #4
 80114aa:	4770      	bx	lr

080114ac <uxr_millis>:
 80114ac:	b510      	push	{r4, lr}
 80114ae:	b084      	sub	sp, #16
 80114b0:	4669      	mov	r1, sp
 80114b2:	2001      	movs	r0, #1
 80114b4:	f7f3 fcc4 	bl	8004e40 <clock_gettime>
 80114b8:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80114bc:	4906      	ldr	r1, [pc, #24]	@ (80114d8 <uxr_millis+0x2c>)
 80114be:	fba0 0301 	umull	r0, r3, r0, r1
 80114c2:	1900      	adds	r0, r0, r4
 80114c4:	fb01 3102 	mla	r1, r1, r2, r3
 80114c8:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80114cc:	4a03      	ldr	r2, [pc, #12]	@ (80114dc <uxr_millis+0x30>)
 80114ce:	2300      	movs	r3, #0
 80114d0:	f7ef fbf2 	bl	8000cb8 <__aeabi_ldivmod>
 80114d4:	b004      	add	sp, #16
 80114d6:	bd10      	pop	{r4, pc}
 80114d8:	3b9aca00 	.word	0x3b9aca00
 80114dc:	000f4240 	.word	0x000f4240

080114e0 <uxr_nanos>:
 80114e0:	b510      	push	{r4, lr}
 80114e2:	b084      	sub	sp, #16
 80114e4:	4669      	mov	r1, sp
 80114e6:	2001      	movs	r0, #1
 80114e8:	f7f3 fcaa 	bl	8004e40 <clock_gettime>
 80114ec:	4a06      	ldr	r2, [pc, #24]	@ (8011508 <uxr_nanos+0x28>)
 80114ee:	9800      	ldr	r0, [sp, #0]
 80114f0:	9902      	ldr	r1, [sp, #8]
 80114f2:	9c01      	ldr	r4, [sp, #4]
 80114f4:	fba0 0302 	umull	r0, r3, r0, r2
 80114f8:	1840      	adds	r0, r0, r1
 80114fa:	fb02 3304 	mla	r3, r2, r4, r3
 80114fe:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8011502:	b004      	add	sp, #16
 8011504:	bd10      	pop	{r4, pc}
 8011506:	bf00      	nop
 8011508:	3b9aca00 	.word	0x3b9aca00

0801150c <on_full_output_buffer_fragmented>:
 801150c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011510:	460c      	mov	r4, r1
 8011512:	b08a      	sub	sp, #40	@ 0x28
 8011514:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8011518:	4606      	mov	r6, r0
 801151a:	f104 0008 	add.w	r0, r4, #8
 801151e:	f7ff ff4b 	bl	80113b8 <uxr_get_output_reliable_stream>
 8011522:	4605      	mov	r5, r0
 8011524:	f006 fe4a 	bl	80181bc <get_available_free_slots>
 8011528:	b968      	cbnz	r0, 8011546 <on_full_output_buffer_fragmented+0x3a>
 801152a:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 801152e:	4620      	mov	r0, r4
 8011530:	4798      	blx	r3
 8011532:	b918      	cbnz	r0, 801153c <on_full_output_buffer_fragmented+0x30>
 8011534:	2001      	movs	r0, #1
 8011536:	b00a      	add	sp, #40	@ 0x28
 8011538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801153c:	4628      	mov	r0, r5
 801153e:	f006 fe3d 	bl	80181bc <get_available_free_slots>
 8011542:	2800      	cmp	r0, #0
 8011544:	d0f6      	beq.n	8011534 <on_full_output_buffer_fragmented+0x28>
 8011546:	8929      	ldrh	r1, [r5, #8]
 8011548:	89eb      	ldrh	r3, [r5, #14]
 801154a:	7b28      	ldrb	r0, [r5, #12]
 801154c:	686a      	ldr	r2, [r5, #4]
 801154e:	fbb2 f8f1 	udiv	r8, r2, r1
 8011552:	fbb3 f2f1 	udiv	r2, r3, r1
 8011556:	fb01 3112 	mls	r1, r1, r2, r3
 801155a:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 801155e:	b289      	uxth	r1, r1
 8011560:	fb08 f101 	mul.w	r1, r8, r1
 8011564:	30fc      	adds	r0, #252	@ 0xfc
 8011566:	f1a8 0804 	sub.w	r8, r8, #4
 801156a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 801156e:	4440      	add	r0, r8
 8011570:	b287      	uxth	r7, r0
 8011572:	1bdb      	subs	r3, r3, r7
 8011574:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8011578:	682b      	ldr	r3, [r5, #0]
 801157a:	3104      	adds	r1, #4
 801157c:	4419      	add	r1, r3
 801157e:	4642      	mov	r2, r8
 8011580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011584:	9300      	str	r3, [sp, #0]
 8011586:	a802      	add	r0, sp, #8
 8011588:	2300      	movs	r3, #0
 801158a:	f7fe fac9 	bl	800fb20 <ucdr_init_buffer_origin_offset>
 801158e:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8011592:	f102 0308 	add.w	r3, r2, #8
 8011596:	4543      	cmp	r3, r8
 8011598:	d928      	bls.n	80115ec <on_full_output_buffer_fragmented+0xe0>
 801159a:	463a      	mov	r2, r7
 801159c:	2300      	movs	r3, #0
 801159e:	210d      	movs	r1, #13
 80115a0:	a802      	add	r0, sp, #8
 80115a2:	f7ff ff3d 	bl	8011420 <uxr_buffer_submessage_header>
 80115a6:	8929      	ldrh	r1, [r5, #8]
 80115a8:	89eb      	ldrh	r3, [r5, #14]
 80115aa:	fbb3 f2f1 	udiv	r2, r3, r1
 80115ae:	fb01 3312 	mls	r3, r1, r2, r3
 80115b2:	b29b      	uxth	r3, r3
 80115b4:	686a      	ldr	r2, [r5, #4]
 80115b6:	fbb2 f2f1 	udiv	r2, r2, r1
 80115ba:	fb02 f303 	mul.w	r3, r2, r3
 80115be:	682a      	ldr	r2, [r5, #0]
 80115c0:	f842 8003 	str.w	r8, [r2, r3]
 80115c4:	89e8      	ldrh	r0, [r5, #14]
 80115c6:	2101      	movs	r1, #1
 80115c8:	f006 ff48 	bl	801845c <uxr_seq_num_add>
 80115cc:	9904      	ldr	r1, [sp, #16]
 80115ce:	9a03      	ldr	r2, [sp, #12]
 80115d0:	81e8      	strh	r0, [r5, #14]
 80115d2:	1a52      	subs	r2, r2, r1
 80115d4:	4630      	mov	r0, r6
 80115d6:	f7fe fab5 	bl	800fb44 <ucdr_init_buffer>
 80115da:	4630      	mov	r0, r6
 80115dc:	490f      	ldr	r1, [pc, #60]	@ (801161c <on_full_output_buffer_fragmented+0x110>)
 80115de:	4622      	mov	r2, r4
 80115e0:	f7fe fa84 	bl	800faec <ucdr_set_on_full_buffer_callback>
 80115e4:	2000      	movs	r0, #0
 80115e6:	b00a      	add	sp, #40	@ 0x28
 80115e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115ec:	b292      	uxth	r2, r2
 80115ee:	2302      	movs	r3, #2
 80115f0:	210d      	movs	r1, #13
 80115f2:	a802      	add	r0, sp, #8
 80115f4:	f7ff ff14 	bl	8011420 <uxr_buffer_submessage_header>
 80115f8:	8928      	ldrh	r0, [r5, #8]
 80115fa:	89eb      	ldrh	r3, [r5, #14]
 80115fc:	fbb3 f1f0 	udiv	r1, r3, r0
 8011600:	fb00 3311 	mls	r3, r0, r1, r3
 8011604:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8011608:	6869      	ldr	r1, [r5, #4]
 801160a:	fbb1 f1f0 	udiv	r1, r1, r0
 801160e:	b29b      	uxth	r3, r3
 8011610:	fb01 f303 	mul.w	r3, r1, r3
 8011614:	6829      	ldr	r1, [r5, #0]
 8011616:	3208      	adds	r2, #8
 8011618:	50ca      	str	r2, [r1, r3]
 801161a:	e7d3      	b.n	80115c4 <on_full_output_buffer_fragmented+0xb8>
 801161c:	0801150d 	.word	0x0801150d

08011620 <uxr_prepare_output_stream>:
 8011620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011622:	b087      	sub	sp, #28
 8011624:	2707      	movs	r7, #7
 8011626:	9202      	str	r2, [sp, #8]
 8011628:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801162a:	9103      	str	r1, [sp, #12]
 801162c:	2500      	movs	r5, #0
 801162e:	3204      	adds	r2, #4
 8011630:	e9cd 7500 	strd	r7, r5, [sp]
 8011634:	461c      	mov	r4, r3
 8011636:	4606      	mov	r6, r0
 8011638:	f7ff fc54 	bl	8010ee4 <uxr_prepare_stream_to_write_submessage>
 801163c:	f080 0201 	eor.w	r2, r0, #1
 8011640:	b2d2      	uxtb	r2, r2
 8011642:	75a2      	strb	r2, [r4, #22]
 8011644:	b112      	cbz	r2, 801164c <uxr_prepare_output_stream+0x2c>
 8011646:	4628      	mov	r0, r5
 8011648:	b007      	add	sp, #28
 801164a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801164c:	aa05      	add	r2, sp, #20
 801164e:	9902      	ldr	r1, [sp, #8]
 8011650:	4630      	mov	r0, r6
 8011652:	f7ff fd7d 	bl	8011150 <uxr_init_base_object_request>
 8011656:	a905      	add	r1, sp, #20
 8011658:	4605      	mov	r5, r0
 801165a:	4620      	mov	r0, r4
 801165c:	f001 f88c 	bl	8012778 <uxr_serialize_WRITE_DATA_Payload_Data>
 8011660:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8011664:	69a6      	ldr	r6, [r4, #24]
 8011666:	69e7      	ldr	r7, [r4, #28]
 8011668:	1a52      	subs	r2, r2, r1
 801166a:	4620      	mov	r0, r4
 801166c:	f7fe fa6a 	bl	800fb44 <ucdr_init_buffer>
 8011670:	4620      	mov	r0, r4
 8011672:	463a      	mov	r2, r7
 8011674:	4631      	mov	r1, r6
 8011676:	f7fe fa39 	bl	800faec <ucdr_set_on_full_buffer_callback>
 801167a:	4628      	mov	r0, r5
 801167c:	b007      	add	sp, #28
 801167e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011680 <uxr_prepare_output_stream_fragmented>:
 8011680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011684:	b091      	sub	sp, #68	@ 0x44
 8011686:	4605      	mov	r5, r0
 8011688:	9105      	str	r1, [sp, #20]
 801168a:	3008      	adds	r0, #8
 801168c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8011690:	461e      	mov	r6, r3
 8011692:	9204      	str	r2, [sp, #16]
 8011694:	f7ff fe90 	bl	80113b8 <uxr_get_output_reliable_stream>
 8011698:	f89d 3016 	ldrb.w	r3, [sp, #22]
 801169c:	2b01      	cmp	r3, #1
 801169e:	f000 8091 	beq.w	80117c4 <uxr_prepare_output_stream_fragmented+0x144>
 80116a2:	4604      	mov	r4, r0
 80116a4:	2800      	cmp	r0, #0
 80116a6:	f000 808d 	beq.w	80117c4 <uxr_prepare_output_stream_fragmented+0x144>
 80116aa:	f006 fd87 	bl	80181bc <get_available_free_slots>
 80116ae:	2800      	cmp	r0, #0
 80116b0:	f000 8083 	beq.w	80117ba <uxr_prepare_output_stream_fragmented+0x13a>
 80116b4:	8922      	ldrh	r2, [r4, #8]
 80116b6:	89e7      	ldrh	r7, [r4, #14]
 80116b8:	fbb7 f9f2 	udiv	r9, r7, r2
 80116bc:	fb02 7919 	mls	r9, r2, r9, r7
 80116c0:	fa1f f989 	uxth.w	r9, r9
 80116c4:	6863      	ldr	r3, [r4, #4]
 80116c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80116ca:	6823      	ldr	r3, [r4, #0]
 80116cc:	9203      	str	r2, [sp, #12]
 80116ce:	fb02 f909 	mul.w	r9, r2, r9
 80116d2:	f109 0904 	add.w	r9, r9, #4
 80116d6:	4499      	add	r9, r3
 80116d8:	7b23      	ldrb	r3, [r4, #12]
 80116da:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80116de:	4543      	cmp	r3, r8
 80116e0:	f1a2 0b04 	sub.w	fp, r2, #4
 80116e4:	d37a      	bcc.n	80117dc <uxr_prepare_output_stream_fragmented+0x15c>
 80116e6:	f1ab 0a04 	sub.w	sl, fp, #4
 80116ea:	ebaa 0a03 	sub.w	sl, sl, r3
 80116ee:	465a      	mov	r2, fp
 80116f0:	2300      	movs	r3, #0
 80116f2:	4649      	mov	r1, r9
 80116f4:	a808      	add	r0, sp, #32
 80116f6:	f8cd 8000 	str.w	r8, [sp]
 80116fa:	f7fe fa11 	bl	800fb20 <ucdr_init_buffer_origin_offset>
 80116fe:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8011700:	fa1f fa8a 	uxth.w	sl, sl
 8011704:	4652      	mov	r2, sl
 8011706:	f103 0a08 	add.w	sl, r3, #8
 801170a:	45da      	cmp	sl, fp
 801170c:	bf34      	ite	cc
 801170e:	2302      	movcc	r3, #2
 8011710:	2300      	movcs	r3, #0
 8011712:	210d      	movs	r1, #13
 8011714:	a808      	add	r0, sp, #32
 8011716:	f7ff fe83 	bl	8011420 <uxr_buffer_submessage_header>
 801171a:	8921      	ldrh	r1, [r4, #8]
 801171c:	fbb7 f2f1 	udiv	r2, r7, r1
 8011720:	fb01 7212 	mls	r2, r1, r2, r7
 8011724:	b292      	uxth	r2, r2
 8011726:	6863      	ldr	r3, [r4, #4]
 8011728:	fbb3 f3f1 	udiv	r3, r3, r1
 801172c:	fb02 f303 	mul.w	r3, r2, r3
 8011730:	6822      	ldr	r2, [r4, #0]
 8011732:	4638      	mov	r0, r7
 8011734:	f842 b003 	str.w	fp, [r2, r3]
 8011738:	2101      	movs	r1, #1
 801173a:	f006 fe8f 	bl	801845c <uxr_seq_num_add>
 801173e:	9b03      	ldr	r3, [sp, #12]
 8011740:	f108 0104 	add.w	r1, r8, #4
 8011744:	f1a3 0208 	sub.w	r2, r3, #8
 8011748:	eba2 0208 	sub.w	r2, r2, r8
 801174c:	4449      	add	r1, r9
 801174e:	4607      	mov	r7, r0
 8011750:	4630      	mov	r0, r6
 8011752:	f7fe f9f7 	bl	800fb44 <ucdr_init_buffer>
 8011756:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8011758:	81e7      	strh	r7, [r4, #14]
 801175a:	1d1a      	adds	r2, r3, #4
 801175c:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8011760:	bf28      	it	cs
 8011762:	2200      	movcs	r2, #0
 8011764:	2300      	movs	r3, #0
 8011766:	b292      	uxth	r2, r2
 8011768:	2107      	movs	r1, #7
 801176a:	4630      	mov	r0, r6
 801176c:	f7ff fe58 	bl	8011420 <uxr_buffer_submessage_header>
 8011770:	9904      	ldr	r1, [sp, #16]
 8011772:	aa07      	add	r2, sp, #28
 8011774:	4628      	mov	r0, r5
 8011776:	f7ff fceb 	bl	8011150 <uxr_init_base_object_request>
 801177a:	4604      	mov	r4, r0
 801177c:	b318      	cbz	r0, 80117c6 <uxr_prepare_output_stream_fragmented+0x146>
 801177e:	a907      	add	r1, sp, #28
 8011780:	4630      	mov	r0, r6
 8011782:	f000 fff9 	bl	8012778 <uxr_serialize_WRITE_DATA_Payload_Data>
 8011786:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801178a:	4630      	mov	r0, r6
 801178c:	1a52      	subs	r2, r2, r1
 801178e:	f7fe f9d9 	bl	800fb44 <ucdr_init_buffer>
 8011792:	9b05      	ldr	r3, [sp, #20]
 8011794:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8011798:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801179a:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 801179e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80117a0:	491b      	ldr	r1, [pc, #108]	@ (8011810 <uxr_prepare_output_stream_fragmented+0x190>)
 80117a2:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 80117a6:	4630      	mov	r0, r6
 80117a8:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 80117ac:	462a      	mov	r2, r5
 80117ae:	f7fe f99d 	bl	800faec <ucdr_set_on_full_buffer_callback>
 80117b2:	4620      	mov	r0, r4
 80117b4:	b011      	add	sp, #68	@ 0x44
 80117b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117ba:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80117bc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80117be:	4628      	mov	r0, r5
 80117c0:	4798      	blx	r3
 80117c2:	b920      	cbnz	r0, 80117ce <uxr_prepare_output_stream_fragmented+0x14e>
 80117c4:	2400      	movs	r4, #0
 80117c6:	4620      	mov	r0, r4
 80117c8:	b011      	add	sp, #68	@ 0x44
 80117ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117ce:	4620      	mov	r0, r4
 80117d0:	f006 fcf4 	bl	80181bc <get_available_free_slots>
 80117d4:	2800      	cmp	r0, #0
 80117d6:	f47f af6d 	bne.w	80116b4 <uxr_prepare_output_stream_fragmented+0x34>
 80117da:	e7f3      	b.n	80117c4 <uxr_prepare_output_stream_fragmented+0x144>
 80117dc:	4638      	mov	r0, r7
 80117de:	2101      	movs	r1, #1
 80117e0:	f006 fe3c 	bl	801845c <uxr_seq_num_add>
 80117e4:	8921      	ldrh	r1, [r4, #8]
 80117e6:	fbb0 f2f1 	udiv	r2, r0, r1
 80117ea:	fb01 0912 	mls	r9, r1, r2, r0
 80117ee:	fa1f f289 	uxth.w	r2, r9
 80117f2:	6863      	ldr	r3, [r4, #4]
 80117f4:	fbb3 f9f1 	udiv	r9, r3, r1
 80117f8:	6823      	ldr	r3, [r4, #0]
 80117fa:	fb02 f909 	mul.w	r9, r2, r9
 80117fe:	f109 0904 	add.w	r9, r9, #4
 8011802:	4499      	add	r9, r3
 8011804:	4607      	mov	r7, r0
 8011806:	7b23      	ldrb	r3, [r4, #12]
 8011808:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801180c:	e76b      	b.n	80116e6 <uxr_prepare_output_stream_fragmented+0x66>
 801180e:	bf00      	nop
 8011810:	0801150d 	.word	0x0801150d

08011814 <uxr_serialize_message_header>:
 8011814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011816:	b083      	sub	sp, #12
 8011818:	4616      	mov	r6, r2
 801181a:	4604      	mov	r4, r0
 801181c:	9301      	str	r3, [sp, #4]
 801181e:	460d      	mov	r5, r1
 8011820:	9f08      	ldr	r7, [sp, #32]
 8011822:	f7fd f8bb 	bl	800e99c <ucdr_serialize_uint8_t>
 8011826:	4631      	mov	r1, r6
 8011828:	4620      	mov	r0, r4
 801182a:	f7fd f8b7 	bl	800e99c <ucdr_serialize_uint8_t>
 801182e:	9a01      	ldr	r2, [sp, #4]
 8011830:	2101      	movs	r1, #1
 8011832:	4620      	mov	r0, r4
 8011834:	f7fd f95e 	bl	800eaf4 <ucdr_serialize_endian_uint16_t>
 8011838:	062b      	lsls	r3, r5, #24
 801183a:	d501      	bpl.n	8011840 <uxr_serialize_message_header+0x2c>
 801183c:	b003      	add	sp, #12
 801183e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011840:	2204      	movs	r2, #4
 8011842:	4639      	mov	r1, r7
 8011844:	4620      	mov	r0, r4
 8011846:	b003      	add	sp, #12
 8011848:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801184c:	f005 bd94 	b.w	8017378 <ucdr_serialize_array_uint8_t>

08011850 <uxr_deserialize_message_header>:
 8011850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011852:	b083      	sub	sp, #12
 8011854:	4616      	mov	r6, r2
 8011856:	4604      	mov	r4, r0
 8011858:	9301      	str	r3, [sp, #4]
 801185a:	460d      	mov	r5, r1
 801185c:	9f08      	ldr	r7, [sp, #32]
 801185e:	f7fd f8b3 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 8011862:	4631      	mov	r1, r6
 8011864:	4620      	mov	r0, r4
 8011866:	f7fd f8af 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 801186a:	9a01      	ldr	r2, [sp, #4]
 801186c:	2101      	movs	r1, #1
 801186e:	4620      	mov	r0, r4
 8011870:	f7fd fa34 	bl	800ecdc <ucdr_deserialize_endian_uint16_t>
 8011874:	f995 3000 	ldrsb.w	r3, [r5]
 8011878:	2b00      	cmp	r3, #0
 801187a:	da01      	bge.n	8011880 <uxr_deserialize_message_header+0x30>
 801187c:	b003      	add	sp, #12
 801187e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011880:	2204      	movs	r2, #4
 8011882:	4639      	mov	r1, r7
 8011884:	4620      	mov	r0, r4
 8011886:	b003      	add	sp, #12
 8011888:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801188c:	f005 bdd8 	b.w	8017440 <ucdr_deserialize_array_uint8_t>

08011890 <uxr_serialize_submessage_header>:
 8011890:	b530      	push	{r4, r5, lr}
 8011892:	b083      	sub	sp, #12
 8011894:	4615      	mov	r5, r2
 8011896:	4604      	mov	r4, r0
 8011898:	9301      	str	r3, [sp, #4]
 801189a:	f7fd f87f 	bl	800e99c <ucdr_serialize_uint8_t>
 801189e:	4629      	mov	r1, r5
 80118a0:	4620      	mov	r0, r4
 80118a2:	f7fd f87b 	bl	800e99c <ucdr_serialize_uint8_t>
 80118a6:	9a01      	ldr	r2, [sp, #4]
 80118a8:	2101      	movs	r1, #1
 80118aa:	4620      	mov	r0, r4
 80118ac:	b003      	add	sp, #12
 80118ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80118b2:	f7fd b91f 	b.w	800eaf4 <ucdr_serialize_endian_uint16_t>
 80118b6:	bf00      	nop

080118b8 <uxr_deserialize_submessage_header>:
 80118b8:	b530      	push	{r4, r5, lr}
 80118ba:	b083      	sub	sp, #12
 80118bc:	4615      	mov	r5, r2
 80118be:	4604      	mov	r4, r0
 80118c0:	9301      	str	r3, [sp, #4]
 80118c2:	f7fd f881 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 80118c6:	4629      	mov	r1, r5
 80118c8:	4620      	mov	r0, r4
 80118ca:	f7fd f87d 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 80118ce:	9a01      	ldr	r2, [sp, #4]
 80118d0:	2101      	movs	r1, #1
 80118d2:	4620      	mov	r0, r4
 80118d4:	b003      	add	sp, #12
 80118d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80118da:	f7fd b9ff 	b.w	800ecdc <ucdr_deserialize_endian_uint16_t>
 80118de:	bf00      	nop

080118e0 <uxr_serialize_CLIENT_Representation>:
 80118e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118e4:	2204      	movs	r2, #4
 80118e6:	460e      	mov	r6, r1
 80118e8:	4605      	mov	r5, r0
 80118ea:	f005 fd45 	bl	8017378 <ucdr_serialize_array_uint8_t>
 80118ee:	2202      	movs	r2, #2
 80118f0:	4607      	mov	r7, r0
 80118f2:	1d31      	adds	r1, r6, #4
 80118f4:	4628      	mov	r0, r5
 80118f6:	f005 fd3f 	bl	8017378 <ucdr_serialize_array_uint8_t>
 80118fa:	4038      	ands	r0, r7
 80118fc:	2202      	movs	r2, #2
 80118fe:	1db1      	adds	r1, r6, #6
 8011900:	b2c7      	uxtb	r7, r0
 8011902:	4628      	mov	r0, r5
 8011904:	f005 fd38 	bl	8017378 <ucdr_serialize_array_uint8_t>
 8011908:	2204      	movs	r2, #4
 801190a:	4007      	ands	r7, r0
 801190c:	f106 0108 	add.w	r1, r6, #8
 8011910:	4628      	mov	r0, r5
 8011912:	f005 fd31 	bl	8017378 <ucdr_serialize_array_uint8_t>
 8011916:	7b31      	ldrb	r1, [r6, #12]
 8011918:	4007      	ands	r7, r0
 801191a:	4628      	mov	r0, r5
 801191c:	f7fd f83e 	bl	800e99c <ucdr_serialize_uint8_t>
 8011920:	7b71      	ldrb	r1, [r6, #13]
 8011922:	4007      	ands	r7, r0
 8011924:	4628      	mov	r0, r5
 8011926:	f7fd f80b 	bl	800e940 <ucdr_serialize_bool>
 801192a:	7b73      	ldrb	r3, [r6, #13]
 801192c:	ea07 0800 	and.w	r8, r7, r0
 8011930:	b93b      	cbnz	r3, 8011942 <uxr_serialize_CLIENT_Representation+0x62>
 8011932:	8bb1      	ldrh	r1, [r6, #28]
 8011934:	4628      	mov	r0, r5
 8011936:	f7fd f85d 	bl	800e9f4 <ucdr_serialize_uint16_t>
 801193a:	ea08 0000 	and.w	r0, r8, r0
 801193e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011942:	6931      	ldr	r1, [r6, #16]
 8011944:	4628      	mov	r0, r5
 8011946:	f7fd fa3f 	bl	800edc8 <ucdr_serialize_uint32_t>
 801194a:	6933      	ldr	r3, [r6, #16]
 801194c:	b1e3      	cbz	r3, 8011988 <uxr_serialize_CLIENT_Representation+0xa8>
 801194e:	b1c0      	cbz	r0, 8011982 <uxr_serialize_CLIENT_Representation+0xa2>
 8011950:	4637      	mov	r7, r6
 8011952:	f04f 0900 	mov.w	r9, #0
 8011956:	e001      	b.n	801195c <uxr_serialize_CLIENT_Representation+0x7c>
 8011958:	3708      	adds	r7, #8
 801195a:	b194      	cbz	r4, 8011982 <uxr_serialize_CLIENT_Representation+0xa2>
 801195c:	6979      	ldr	r1, [r7, #20]
 801195e:	4628      	mov	r0, r5
 8011960:	f005 fe2a 	bl	80175b8 <ucdr_serialize_string>
 8011964:	69b9      	ldr	r1, [r7, #24]
 8011966:	4604      	mov	r4, r0
 8011968:	4628      	mov	r0, r5
 801196a:	f005 fe25 	bl	80175b8 <ucdr_serialize_string>
 801196e:	6933      	ldr	r3, [r6, #16]
 8011970:	f109 0901 	add.w	r9, r9, #1
 8011974:	4004      	ands	r4, r0
 8011976:	4599      	cmp	r9, r3
 8011978:	b2e4      	uxtb	r4, r4
 801197a:	d3ed      	bcc.n	8011958 <uxr_serialize_CLIENT_Representation+0x78>
 801197c:	ea08 0804 	and.w	r8, r8, r4
 8011980:	e7d7      	b.n	8011932 <uxr_serialize_CLIENT_Representation+0x52>
 8011982:	f04f 0800 	mov.w	r8, #0
 8011986:	e7d4      	b.n	8011932 <uxr_serialize_CLIENT_Representation+0x52>
 8011988:	ea08 0800 	and.w	r8, r8, r0
 801198c:	e7d1      	b.n	8011932 <uxr_serialize_CLIENT_Representation+0x52>
 801198e:	bf00      	nop

08011990 <uxr_deserialize_CLIENT_Representation>:
 8011990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011994:	2204      	movs	r2, #4
 8011996:	460c      	mov	r4, r1
 8011998:	4605      	mov	r5, r0
 801199a:	f005 fd51 	bl	8017440 <ucdr_deserialize_array_uint8_t>
 801199e:	2202      	movs	r2, #2
 80119a0:	4607      	mov	r7, r0
 80119a2:	1d21      	adds	r1, r4, #4
 80119a4:	4628      	mov	r0, r5
 80119a6:	f005 fd4b 	bl	8017440 <ucdr_deserialize_array_uint8_t>
 80119aa:	4038      	ands	r0, r7
 80119ac:	2202      	movs	r2, #2
 80119ae:	1da1      	adds	r1, r4, #6
 80119b0:	b2c6      	uxtb	r6, r0
 80119b2:	4628      	mov	r0, r5
 80119b4:	f005 fd44 	bl	8017440 <ucdr_deserialize_array_uint8_t>
 80119b8:	2204      	movs	r2, #4
 80119ba:	4006      	ands	r6, r0
 80119bc:	f104 0108 	add.w	r1, r4, #8
 80119c0:	4628      	mov	r0, r5
 80119c2:	f005 fd3d 	bl	8017440 <ucdr_deserialize_array_uint8_t>
 80119c6:	f104 010c 	add.w	r1, r4, #12
 80119ca:	4006      	ands	r6, r0
 80119cc:	4628      	mov	r0, r5
 80119ce:	f7fc fffb 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 80119d2:	f104 010d 	add.w	r1, r4, #13
 80119d6:	ea06 0700 	and.w	r7, r6, r0
 80119da:	4628      	mov	r0, r5
 80119dc:	f7fc ffc6 	bl	800e96c <ucdr_deserialize_bool>
 80119e0:	7b63      	ldrb	r3, [r4, #13]
 80119e2:	4007      	ands	r7, r0
 80119e4:	b93b      	cbnz	r3, 80119f6 <uxr_deserialize_CLIENT_Representation+0x66>
 80119e6:	f104 011c 	add.w	r1, r4, #28
 80119ea:	4628      	mov	r0, r5
 80119ec:	f7fd f902 	bl	800ebf4 <ucdr_deserialize_uint16_t>
 80119f0:	4038      	ands	r0, r7
 80119f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119f6:	f104 0110 	add.w	r1, r4, #16
 80119fa:	4628      	mov	r0, r5
 80119fc:	f7fd fb14 	bl	800f028 <ucdr_deserialize_uint32_t>
 8011a00:	6923      	ldr	r3, [r4, #16]
 8011a02:	2b01      	cmp	r3, #1
 8011a04:	d903      	bls.n	8011a0e <uxr_deserialize_CLIENT_Representation+0x7e>
 8011a06:	2301      	movs	r3, #1
 8011a08:	75ab      	strb	r3, [r5, #22]
 8011a0a:	2700      	movs	r7, #0
 8011a0c:	e7eb      	b.n	80119e6 <uxr_deserialize_CLIENT_Representation+0x56>
 8011a0e:	b30b      	cbz	r3, 8011a54 <uxr_deserialize_CLIENT_Representation+0xc4>
 8011a10:	2800      	cmp	r0, #0
 8011a12:	d0fa      	beq.n	8011a0a <uxr_deserialize_CLIENT_Representation+0x7a>
 8011a14:	46a0      	mov	r8, r4
 8011a16:	f04f 0900 	mov.w	r9, #0
 8011a1a:	e001      	b.n	8011a20 <uxr_deserialize_CLIENT_Representation+0x90>
 8011a1c:	2e00      	cmp	r6, #0
 8011a1e:	d0f4      	beq.n	8011a0a <uxr_deserialize_CLIENT_Representation+0x7a>
 8011a20:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011a24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011a28:	4628      	mov	r0, r5
 8011a2a:	f005 fdd5 	bl	80175d8 <ucdr_deserialize_string>
 8011a2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011a32:	4606      	mov	r6, r0
 8011a34:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8011a38:	4628      	mov	r0, r5
 8011a3a:	f005 fdcd 	bl	80175d8 <ucdr_deserialize_string>
 8011a3e:	6923      	ldr	r3, [r4, #16]
 8011a40:	f109 0901 	add.w	r9, r9, #1
 8011a44:	4006      	ands	r6, r0
 8011a46:	4599      	cmp	r9, r3
 8011a48:	f108 0808 	add.w	r8, r8, #8
 8011a4c:	b2f6      	uxtb	r6, r6
 8011a4e:	d3e5      	bcc.n	8011a1c <uxr_deserialize_CLIENT_Representation+0x8c>
 8011a50:	4037      	ands	r7, r6
 8011a52:	e7c8      	b.n	80119e6 <uxr_deserialize_CLIENT_Representation+0x56>
 8011a54:	4007      	ands	r7, r0
 8011a56:	e7c6      	b.n	80119e6 <uxr_deserialize_CLIENT_Representation+0x56>

08011a58 <uxr_serialize_AGENT_Representation>:
 8011a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a5c:	2204      	movs	r2, #4
 8011a5e:	460f      	mov	r7, r1
 8011a60:	4605      	mov	r5, r0
 8011a62:	f005 fc89 	bl	8017378 <ucdr_serialize_array_uint8_t>
 8011a66:	2202      	movs	r2, #2
 8011a68:	4604      	mov	r4, r0
 8011a6a:	1d39      	adds	r1, r7, #4
 8011a6c:	4628      	mov	r0, r5
 8011a6e:	f005 fc83 	bl	8017378 <ucdr_serialize_array_uint8_t>
 8011a72:	4020      	ands	r0, r4
 8011a74:	2202      	movs	r2, #2
 8011a76:	1db9      	adds	r1, r7, #6
 8011a78:	b2c4      	uxtb	r4, r0
 8011a7a:	4628      	mov	r0, r5
 8011a7c:	f005 fc7c 	bl	8017378 <ucdr_serialize_array_uint8_t>
 8011a80:	7a39      	ldrb	r1, [r7, #8]
 8011a82:	4004      	ands	r4, r0
 8011a84:	4628      	mov	r0, r5
 8011a86:	f7fc ff5b 	bl	800e940 <ucdr_serialize_bool>
 8011a8a:	7a3b      	ldrb	r3, [r7, #8]
 8011a8c:	ea00 0804 	and.w	r8, r0, r4
 8011a90:	b913      	cbnz	r3, 8011a98 <uxr_serialize_AGENT_Representation+0x40>
 8011a92:	4640      	mov	r0, r8
 8011a94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a98:	68f9      	ldr	r1, [r7, #12]
 8011a9a:	4628      	mov	r0, r5
 8011a9c:	f7fd f994 	bl	800edc8 <ucdr_serialize_uint32_t>
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	b303      	cbz	r3, 8011ae6 <uxr_serialize_AGENT_Representation+0x8e>
 8011aa4:	b1d0      	cbz	r0, 8011adc <uxr_serialize_AGENT_Representation+0x84>
 8011aa6:	463e      	mov	r6, r7
 8011aa8:	f04f 0900 	mov.w	r9, #0
 8011aac:	e001      	b.n	8011ab2 <uxr_serialize_AGENT_Representation+0x5a>
 8011aae:	3608      	adds	r6, #8
 8011ab0:	b1a4      	cbz	r4, 8011adc <uxr_serialize_AGENT_Representation+0x84>
 8011ab2:	6931      	ldr	r1, [r6, #16]
 8011ab4:	4628      	mov	r0, r5
 8011ab6:	f005 fd7f 	bl	80175b8 <ucdr_serialize_string>
 8011aba:	6971      	ldr	r1, [r6, #20]
 8011abc:	4604      	mov	r4, r0
 8011abe:	4628      	mov	r0, r5
 8011ac0:	f005 fd7a 	bl	80175b8 <ucdr_serialize_string>
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	f109 0901 	add.w	r9, r9, #1
 8011aca:	4004      	ands	r4, r0
 8011acc:	4599      	cmp	r9, r3
 8011ace:	b2e4      	uxtb	r4, r4
 8011ad0:	d3ed      	bcc.n	8011aae <uxr_serialize_AGENT_Representation+0x56>
 8011ad2:	ea08 0804 	and.w	r8, r8, r4
 8011ad6:	4640      	mov	r0, r8
 8011ad8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011adc:	f04f 0800 	mov.w	r8, #0
 8011ae0:	4640      	mov	r0, r8
 8011ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ae6:	ea08 0800 	and.w	r8, r8, r0
 8011aea:	e7d2      	b.n	8011a92 <uxr_serialize_AGENT_Representation+0x3a>

08011aec <uxr_serialize_DATAWRITER_Representation>:
 8011aec:	b570      	push	{r4, r5, r6, lr}
 8011aee:	460d      	mov	r5, r1
 8011af0:	7809      	ldrb	r1, [r1, #0]
 8011af2:	4606      	mov	r6, r0
 8011af4:	f7fc ff52 	bl	800e99c <ucdr_serialize_uint8_t>
 8011af8:	4604      	mov	r4, r0
 8011afa:	b130      	cbz	r0, 8011b0a <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011afc:	782b      	ldrb	r3, [r5, #0]
 8011afe:	2b02      	cmp	r3, #2
 8011b00:	d00c      	beq.n	8011b1c <uxr_serialize_DATAWRITER_Representation+0x30>
 8011b02:	2b03      	cmp	r3, #3
 8011b04:	d010      	beq.n	8011b28 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8011b06:	2b01      	cmp	r3, #1
 8011b08:	d008      	beq.n	8011b1c <uxr_serialize_DATAWRITER_Representation+0x30>
 8011b0a:	2202      	movs	r2, #2
 8011b0c:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8011b10:	4630      	mov	r0, r6
 8011b12:	f005 fc31 	bl	8017378 <ucdr_serialize_array_uint8_t>
 8011b16:	4020      	ands	r0, r4
 8011b18:	b2c0      	uxtb	r0, r0
 8011b1a:	bd70      	pop	{r4, r5, r6, pc}
 8011b1c:	6869      	ldr	r1, [r5, #4]
 8011b1e:	4630      	mov	r0, r6
 8011b20:	f005 fd4a 	bl	80175b8 <ucdr_serialize_string>
 8011b24:	4604      	mov	r4, r0
 8011b26:	e7f0      	b.n	8011b0a <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011b28:	4629      	mov	r1, r5
 8011b2a:	4630      	mov	r0, r6
 8011b2c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8011b30:	3104      	adds	r1, #4
 8011b32:	f005 fd15 	bl	8017560 <ucdr_serialize_sequence_uint8_t>
 8011b36:	4604      	mov	r4, r0
 8011b38:	e7e7      	b.n	8011b0a <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011b3a:	bf00      	nop

08011b3c <uxr_serialize_ObjectVariant.part.0>:
 8011b3c:	b570      	push	{r4, r5, r6, lr}
 8011b3e:	780b      	ldrb	r3, [r1, #0]
 8011b40:	3b01      	subs	r3, #1
 8011b42:	460c      	mov	r4, r1
 8011b44:	4605      	mov	r5, r0
 8011b46:	2b0d      	cmp	r3, #13
 8011b48:	d854      	bhi.n	8011bf4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8011b4a:	e8df f003 	tbb	[pc, r3]
 8011b4e:	0730      	.short	0x0730
 8011b50:	07071b1b 	.word	0x07071b1b
 8011b54:	0c530707 	.word	0x0c530707
 8011b58:	494e0c0c 	.word	0x494e0c0c
 8011b5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011b60:	3104      	adds	r1, #4
 8011b62:	f7ff bfc3 	b.w	8011aec <uxr_serialize_DATAWRITER_Representation>
 8011b66:	7909      	ldrb	r1, [r1, #4]
 8011b68:	f7fc ff18 	bl	800e99c <ucdr_serialize_uint8_t>
 8011b6c:	b1e8      	cbz	r0, 8011baa <uxr_serialize_ObjectVariant.part.0+0x6e>
 8011b6e:	7923      	ldrb	r3, [r4, #4]
 8011b70:	2b01      	cmp	r3, #1
 8011b72:	d001      	beq.n	8011b78 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8011b74:	2b02      	cmp	r3, #2
 8011b76:	d13d      	bne.n	8011bf4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8011b78:	68a1      	ldr	r1, [r4, #8]
 8011b7a:	4628      	mov	r0, r5
 8011b7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011b80:	f005 bd1a 	b.w	80175b8 <ucdr_serialize_string>
 8011b84:	7909      	ldrb	r1, [r1, #4]
 8011b86:	f7fc ff09 	bl	800e99c <ucdr_serialize_uint8_t>
 8011b8a:	4606      	mov	r6, r0
 8011b8c:	b120      	cbz	r0, 8011b98 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8011b8e:	7923      	ldrb	r3, [r4, #4]
 8011b90:	2b02      	cmp	r3, #2
 8011b92:	d039      	beq.n	8011c08 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8011b94:	2b03      	cmp	r3, #3
 8011b96:	d02f      	beq.n	8011bf8 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8011b98:	2202      	movs	r2, #2
 8011b9a:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8011b9e:	4628      	mov	r0, r5
 8011ba0:	f005 fbea 	bl	8017378 <ucdr_serialize_array_uint8_t>
 8011ba4:	4030      	ands	r0, r6
 8011ba6:	b2c0      	uxtb	r0, r0
 8011ba8:	bd70      	pop	{r4, r5, r6, pc}
 8011baa:	2000      	movs	r0, #0
 8011bac:	bd70      	pop	{r4, r5, r6, pc}
 8011bae:	7909      	ldrb	r1, [r1, #4]
 8011bb0:	f7fc fef4 	bl	800e99c <ucdr_serialize_uint8_t>
 8011bb4:	4606      	mov	r6, r0
 8011bb6:	b158      	cbz	r0, 8011bd0 <uxr_serialize_ObjectVariant.part.0+0x94>
 8011bb8:	7923      	ldrb	r3, [r4, #4]
 8011bba:	2b02      	cmp	r3, #2
 8011bbc:	d003      	beq.n	8011bc6 <uxr_serialize_ObjectVariant.part.0+0x8a>
 8011bbe:	2b03      	cmp	r3, #3
 8011bc0:	d028      	beq.n	8011c14 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8011bc2:	2b01      	cmp	r3, #1
 8011bc4:	d104      	bne.n	8011bd0 <uxr_serialize_ObjectVariant.part.0+0x94>
 8011bc6:	68a1      	ldr	r1, [r4, #8]
 8011bc8:	4628      	mov	r0, r5
 8011bca:	f005 fcf5 	bl	80175b8 <ucdr_serialize_string>
 8011bce:	4606      	mov	r6, r0
 8011bd0:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8011bd4:	4628      	mov	r0, r5
 8011bd6:	f7fd fc1d 	bl	800f414 <ucdr_serialize_int16_t>
 8011bda:	4030      	ands	r0, r6
 8011bdc:	b2c0      	uxtb	r0, r0
 8011bde:	bd70      	pop	{r4, r5, r6, pc}
 8011be0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011be4:	3104      	adds	r1, #4
 8011be6:	f7ff be7b 	b.w	80118e0 <uxr_serialize_CLIENT_Representation>
 8011bea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011bee:	3104      	adds	r1, #4
 8011bf0:	f7ff bf32 	b.w	8011a58 <uxr_serialize_AGENT_Representation>
 8011bf4:	2001      	movs	r0, #1
 8011bf6:	bd70      	pop	{r4, r5, r6, pc}
 8011bf8:	68a2      	ldr	r2, [r4, #8]
 8011bfa:	f104 010c 	add.w	r1, r4, #12
 8011bfe:	4628      	mov	r0, r5
 8011c00:	f005 fcae 	bl	8017560 <ucdr_serialize_sequence_uint8_t>
 8011c04:	4606      	mov	r6, r0
 8011c06:	e7c7      	b.n	8011b98 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8011c08:	68a1      	ldr	r1, [r4, #8]
 8011c0a:	4628      	mov	r0, r5
 8011c0c:	f005 fcd4 	bl	80175b8 <ucdr_serialize_string>
 8011c10:	4606      	mov	r6, r0
 8011c12:	e7c1      	b.n	8011b98 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8011c14:	68a2      	ldr	r2, [r4, #8]
 8011c16:	f104 010c 	add.w	r1, r4, #12
 8011c1a:	4628      	mov	r0, r5
 8011c1c:	f005 fca0 	bl	8017560 <ucdr_serialize_sequence_uint8_t>
 8011c20:	4606      	mov	r6, r0
 8011c22:	e7d5      	b.n	8011bd0 <uxr_serialize_ObjectVariant.part.0+0x94>

08011c24 <uxr_deserialize_DATAWRITER_Representation>:
 8011c24:	b570      	push	{r4, r5, r6, lr}
 8011c26:	4606      	mov	r6, r0
 8011c28:	460d      	mov	r5, r1
 8011c2a:	f7fc fecd 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 8011c2e:	4604      	mov	r4, r0
 8011c30:	b130      	cbz	r0, 8011c40 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8011c32:	782b      	ldrb	r3, [r5, #0]
 8011c34:	2b02      	cmp	r3, #2
 8011c36:	d00c      	beq.n	8011c52 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8011c38:	2b03      	cmp	r3, #3
 8011c3a:	d012      	beq.n	8011c62 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8011c3c:	2b01      	cmp	r3, #1
 8011c3e:	d008      	beq.n	8011c52 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8011c40:	2202      	movs	r2, #2
 8011c42:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8011c46:	4630      	mov	r0, r6
 8011c48:	f005 fbfa 	bl	8017440 <ucdr_deserialize_array_uint8_t>
 8011c4c:	4020      	ands	r0, r4
 8011c4e:	b2c0      	uxtb	r0, r0
 8011c50:	bd70      	pop	{r4, r5, r6, pc}
 8011c52:	6869      	ldr	r1, [r5, #4]
 8011c54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011c58:	4630      	mov	r0, r6
 8011c5a:	f005 fcbd 	bl	80175d8 <ucdr_deserialize_string>
 8011c5e:	4604      	mov	r4, r0
 8011c60:	e7ee      	b.n	8011c40 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8011c62:	1d2b      	adds	r3, r5, #4
 8011c64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011c68:	f105 0108 	add.w	r1, r5, #8
 8011c6c:	4630      	mov	r0, r6
 8011c6e:	f005 fc89 	bl	8017584 <ucdr_deserialize_sequence_uint8_t>
 8011c72:	4604      	mov	r4, r0
 8011c74:	e7e4      	b.n	8011c40 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8011c76:	bf00      	nop

08011c78 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8011c78:	b570      	push	{r4, r5, r6, lr}
 8011c7a:	460d      	mov	r5, r1
 8011c7c:	7809      	ldrb	r1, [r1, #0]
 8011c7e:	4606      	mov	r6, r0
 8011c80:	f7fc fe5e 	bl	800e940 <ucdr_serialize_bool>
 8011c84:	782b      	ldrb	r3, [r5, #0]
 8011c86:	4604      	mov	r4, r0
 8011c88:	b94b      	cbnz	r3, 8011c9e <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8011c8a:	7a29      	ldrb	r1, [r5, #8]
 8011c8c:	4630      	mov	r0, r6
 8011c8e:	f7fc fe57 	bl	800e940 <ucdr_serialize_bool>
 8011c92:	7a2b      	ldrb	r3, [r5, #8]
 8011c94:	4004      	ands	r4, r0
 8011c96:	b2e4      	uxtb	r4, r4
 8011c98:	b943      	cbnz	r3, 8011cac <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8011c9a:	4620      	mov	r0, r4
 8011c9c:	bd70      	pop	{r4, r5, r6, pc}
 8011c9e:	6869      	ldr	r1, [r5, #4]
 8011ca0:	4630      	mov	r0, r6
 8011ca2:	f005 fc89 	bl	80175b8 <ucdr_serialize_string>
 8011ca6:	4004      	ands	r4, r0
 8011ca8:	b2e4      	uxtb	r4, r4
 8011caa:	e7ee      	b.n	8011c8a <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8011cac:	68e9      	ldr	r1, [r5, #12]
 8011cae:	4630      	mov	r0, r6
 8011cb0:	f005 fc82 	bl	80175b8 <ucdr_serialize_string>
 8011cb4:	4004      	ands	r4, r0
 8011cb6:	4620      	mov	r0, r4
 8011cb8:	bd70      	pop	{r4, r5, r6, pc}
 8011cba:	bf00      	nop

08011cbc <uxr_serialize_OBJK_Topic_Binary>:
 8011cbc:	b570      	push	{r4, r5, r6, lr}
 8011cbe:	460d      	mov	r5, r1
 8011cc0:	6809      	ldr	r1, [r1, #0]
 8011cc2:	4606      	mov	r6, r0
 8011cc4:	f005 fc78 	bl	80175b8 <ucdr_serialize_string>
 8011cc8:	7929      	ldrb	r1, [r5, #4]
 8011cca:	4604      	mov	r4, r0
 8011ccc:	4630      	mov	r0, r6
 8011cce:	f7fc fe37 	bl	800e940 <ucdr_serialize_bool>
 8011cd2:	792b      	ldrb	r3, [r5, #4]
 8011cd4:	4004      	ands	r4, r0
 8011cd6:	b2e4      	uxtb	r4, r4
 8011cd8:	b943      	cbnz	r3, 8011cec <uxr_serialize_OBJK_Topic_Binary+0x30>
 8011cda:	7b29      	ldrb	r1, [r5, #12]
 8011cdc:	4630      	mov	r0, r6
 8011cde:	f7fc fe2f 	bl	800e940 <ucdr_serialize_bool>
 8011ce2:	7b2b      	ldrb	r3, [r5, #12]
 8011ce4:	4004      	ands	r4, r0
 8011ce6:	b93b      	cbnz	r3, 8011cf8 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8011ce8:	4620      	mov	r0, r4
 8011cea:	bd70      	pop	{r4, r5, r6, pc}
 8011cec:	68a9      	ldr	r1, [r5, #8]
 8011cee:	4630      	mov	r0, r6
 8011cf0:	f005 fc62 	bl	80175b8 <ucdr_serialize_string>
 8011cf4:	4004      	ands	r4, r0
 8011cf6:	e7f0      	b.n	8011cda <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8011cf8:	6929      	ldr	r1, [r5, #16]
 8011cfa:	4630      	mov	r0, r6
 8011cfc:	f005 fc5c 	bl	80175b8 <ucdr_serialize_string>
 8011d00:	4004      	ands	r4, r0
 8011d02:	b2e4      	uxtb	r4, r4
 8011d04:	4620      	mov	r0, r4
 8011d06:	bd70      	pop	{r4, r5, r6, pc}

08011d08 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8011d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d0c:	460c      	mov	r4, r1
 8011d0e:	7809      	ldrb	r1, [r1, #0]
 8011d10:	4606      	mov	r6, r0
 8011d12:	f7fc fe15 	bl	800e940 <ucdr_serialize_bool>
 8011d16:	7823      	ldrb	r3, [r4, #0]
 8011d18:	4605      	mov	r5, r0
 8011d1a:	b96b      	cbnz	r3, 8011d38 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8011d1c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8011d20:	4630      	mov	r0, r6
 8011d22:	f7fc fe0d 	bl	800e940 <ucdr_serialize_bool>
 8011d26:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8011d2a:	4005      	ands	r5, r0
 8011d2c:	b2ed      	uxtb	r5, r5
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d169      	bne.n	8011e06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8011d32:	4628      	mov	r0, r5
 8011d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d38:	6861      	ldr	r1, [r4, #4]
 8011d3a:	4630      	mov	r0, r6
 8011d3c:	f7fd f844 	bl	800edc8 <ucdr_serialize_uint32_t>
 8011d40:	6863      	ldr	r3, [r4, #4]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d06b      	beq.n	8011e1e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8011d46:	2800      	cmp	r0, #0
 8011d48:	d067      	beq.n	8011e1a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011d4a:	68a1      	ldr	r1, [r4, #8]
 8011d4c:	4630      	mov	r0, r6
 8011d4e:	f005 fc33 	bl	80175b8 <ucdr_serialize_string>
 8011d52:	6863      	ldr	r3, [r4, #4]
 8011d54:	2b01      	cmp	r3, #1
 8011d56:	d953      	bls.n	8011e00 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011d58:	2800      	cmp	r0, #0
 8011d5a:	d05e      	beq.n	8011e1a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011d5c:	68e1      	ldr	r1, [r4, #12]
 8011d5e:	4630      	mov	r0, r6
 8011d60:	f005 fc2a 	bl	80175b8 <ucdr_serialize_string>
 8011d64:	6863      	ldr	r3, [r4, #4]
 8011d66:	2b02      	cmp	r3, #2
 8011d68:	d94a      	bls.n	8011e00 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011d6a:	2800      	cmp	r0, #0
 8011d6c:	d055      	beq.n	8011e1a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011d6e:	6921      	ldr	r1, [r4, #16]
 8011d70:	4630      	mov	r0, r6
 8011d72:	f005 fc21 	bl	80175b8 <ucdr_serialize_string>
 8011d76:	6863      	ldr	r3, [r4, #4]
 8011d78:	2b03      	cmp	r3, #3
 8011d7a:	d941      	bls.n	8011e00 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011d7c:	2800      	cmp	r0, #0
 8011d7e:	d04c      	beq.n	8011e1a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011d80:	6961      	ldr	r1, [r4, #20]
 8011d82:	4630      	mov	r0, r6
 8011d84:	f005 fc18 	bl	80175b8 <ucdr_serialize_string>
 8011d88:	6863      	ldr	r3, [r4, #4]
 8011d8a:	2b04      	cmp	r3, #4
 8011d8c:	d938      	bls.n	8011e00 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011d8e:	2800      	cmp	r0, #0
 8011d90:	d043      	beq.n	8011e1a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011d92:	69a1      	ldr	r1, [r4, #24]
 8011d94:	4630      	mov	r0, r6
 8011d96:	f005 fc0f 	bl	80175b8 <ucdr_serialize_string>
 8011d9a:	6863      	ldr	r3, [r4, #4]
 8011d9c:	2b05      	cmp	r3, #5
 8011d9e:	d92f      	bls.n	8011e00 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011da0:	2800      	cmp	r0, #0
 8011da2:	d03a      	beq.n	8011e1a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011da4:	69e1      	ldr	r1, [r4, #28]
 8011da6:	4630      	mov	r0, r6
 8011da8:	f005 fc06 	bl	80175b8 <ucdr_serialize_string>
 8011dac:	6863      	ldr	r3, [r4, #4]
 8011dae:	2b06      	cmp	r3, #6
 8011db0:	d926      	bls.n	8011e00 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011db2:	b390      	cbz	r0, 8011e1a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011db4:	6a21      	ldr	r1, [r4, #32]
 8011db6:	4630      	mov	r0, r6
 8011db8:	f005 fbfe 	bl	80175b8 <ucdr_serialize_string>
 8011dbc:	6863      	ldr	r3, [r4, #4]
 8011dbe:	2b07      	cmp	r3, #7
 8011dc0:	d91e      	bls.n	8011e00 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011dc2:	b350      	cbz	r0, 8011e1a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011dc4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8011dc6:	4630      	mov	r0, r6
 8011dc8:	f005 fbf6 	bl	80175b8 <ucdr_serialize_string>
 8011dcc:	6863      	ldr	r3, [r4, #4]
 8011dce:	2b08      	cmp	r3, #8
 8011dd0:	d916      	bls.n	8011e00 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011dd2:	b310      	cbz	r0, 8011e1a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011dd4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8011dd6:	4630      	mov	r0, r6
 8011dd8:	f005 fbee 	bl	80175b8 <ucdr_serialize_string>
 8011ddc:	6863      	ldr	r3, [r4, #4]
 8011dde:	2b09      	cmp	r3, #9
 8011de0:	d90e      	bls.n	8011e00 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011de2:	b1d0      	cbz	r0, 8011e1a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011de4:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8011de8:	2709      	movs	r7, #9
 8011dea:	e000      	b.n	8011dee <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8011dec:	b1a8      	cbz	r0, 8011e1a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011dee:	f858 1b04 	ldr.w	r1, [r8], #4
 8011df2:	4630      	mov	r0, r6
 8011df4:	f005 fbe0 	bl	80175b8 <ucdr_serialize_string>
 8011df8:	6862      	ldr	r2, [r4, #4]
 8011dfa:	3701      	adds	r7, #1
 8011dfc:	4297      	cmp	r7, r2
 8011dfe:	d3f5      	bcc.n	8011dec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8011e00:	4005      	ands	r5, r0
 8011e02:	b2ed      	uxtb	r5, r5
 8011e04:	e78a      	b.n	8011d1c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8011e06:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011e08:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8011e0c:	4630      	mov	r0, r6
 8011e0e:	f005 fba7 	bl	8017560 <ucdr_serialize_sequence_uint8_t>
 8011e12:	4005      	ands	r5, r0
 8011e14:	4628      	mov	r0, r5
 8011e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e1a:	2500      	movs	r5, #0
 8011e1c:	e77e      	b.n	8011d1c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8011e1e:	4028      	ands	r0, r5
 8011e20:	b2c5      	uxtb	r5, r0
 8011e22:	e77b      	b.n	8011d1c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08011e24 <uxr_serialize_OBJK_Publisher_Binary>:
 8011e24:	b570      	push	{r4, r5, r6, lr}
 8011e26:	460d      	mov	r5, r1
 8011e28:	7809      	ldrb	r1, [r1, #0]
 8011e2a:	4606      	mov	r6, r0
 8011e2c:	f7fc fd88 	bl	800e940 <ucdr_serialize_bool>
 8011e30:	782b      	ldrb	r3, [r5, #0]
 8011e32:	4604      	mov	r4, r0
 8011e34:	b94b      	cbnz	r3, 8011e4a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8011e36:	7a29      	ldrb	r1, [r5, #8]
 8011e38:	4630      	mov	r0, r6
 8011e3a:	f7fc fd81 	bl	800e940 <ucdr_serialize_bool>
 8011e3e:	7a2b      	ldrb	r3, [r5, #8]
 8011e40:	4004      	ands	r4, r0
 8011e42:	b2e4      	uxtb	r4, r4
 8011e44:	b943      	cbnz	r3, 8011e58 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8011e46:	4620      	mov	r0, r4
 8011e48:	bd70      	pop	{r4, r5, r6, pc}
 8011e4a:	6869      	ldr	r1, [r5, #4]
 8011e4c:	4630      	mov	r0, r6
 8011e4e:	f005 fbb3 	bl	80175b8 <ucdr_serialize_string>
 8011e52:	4004      	ands	r4, r0
 8011e54:	b2e4      	uxtb	r4, r4
 8011e56:	e7ee      	b.n	8011e36 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8011e58:	f105 010c 	add.w	r1, r5, #12
 8011e5c:	4630      	mov	r0, r6
 8011e5e:	f7ff ff53 	bl	8011d08 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8011e62:	4004      	ands	r4, r0
 8011e64:	4620      	mov	r0, r4
 8011e66:	bd70      	pop	{r4, r5, r6, pc}

08011e68 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8011e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e6c:	460c      	mov	r4, r1
 8011e6e:	7809      	ldrb	r1, [r1, #0]
 8011e70:	4606      	mov	r6, r0
 8011e72:	f7fc fd65 	bl	800e940 <ucdr_serialize_bool>
 8011e76:	7823      	ldrb	r3, [r4, #0]
 8011e78:	4605      	mov	r5, r0
 8011e7a:	b96b      	cbnz	r3, 8011e98 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8011e7c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8011e80:	4630      	mov	r0, r6
 8011e82:	f7fc fd5d 	bl	800e940 <ucdr_serialize_bool>
 8011e86:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8011e8a:	4005      	ands	r5, r0
 8011e8c:	b2ed      	uxtb	r5, r5
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d169      	bne.n	8011f66 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8011e92:	4628      	mov	r0, r5
 8011e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e98:	6861      	ldr	r1, [r4, #4]
 8011e9a:	4630      	mov	r0, r6
 8011e9c:	f7fc ff94 	bl	800edc8 <ucdr_serialize_uint32_t>
 8011ea0:	6863      	ldr	r3, [r4, #4]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d06b      	beq.n	8011f7e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8011ea6:	2800      	cmp	r0, #0
 8011ea8:	d067      	beq.n	8011f7a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011eaa:	68a1      	ldr	r1, [r4, #8]
 8011eac:	4630      	mov	r0, r6
 8011eae:	f005 fb83 	bl	80175b8 <ucdr_serialize_string>
 8011eb2:	6863      	ldr	r3, [r4, #4]
 8011eb4:	2b01      	cmp	r3, #1
 8011eb6:	d953      	bls.n	8011f60 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011eb8:	2800      	cmp	r0, #0
 8011eba:	d05e      	beq.n	8011f7a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011ebc:	68e1      	ldr	r1, [r4, #12]
 8011ebe:	4630      	mov	r0, r6
 8011ec0:	f005 fb7a 	bl	80175b8 <ucdr_serialize_string>
 8011ec4:	6863      	ldr	r3, [r4, #4]
 8011ec6:	2b02      	cmp	r3, #2
 8011ec8:	d94a      	bls.n	8011f60 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011eca:	2800      	cmp	r0, #0
 8011ecc:	d055      	beq.n	8011f7a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011ece:	6921      	ldr	r1, [r4, #16]
 8011ed0:	4630      	mov	r0, r6
 8011ed2:	f005 fb71 	bl	80175b8 <ucdr_serialize_string>
 8011ed6:	6863      	ldr	r3, [r4, #4]
 8011ed8:	2b03      	cmp	r3, #3
 8011eda:	d941      	bls.n	8011f60 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011edc:	2800      	cmp	r0, #0
 8011ede:	d04c      	beq.n	8011f7a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011ee0:	6961      	ldr	r1, [r4, #20]
 8011ee2:	4630      	mov	r0, r6
 8011ee4:	f005 fb68 	bl	80175b8 <ucdr_serialize_string>
 8011ee8:	6863      	ldr	r3, [r4, #4]
 8011eea:	2b04      	cmp	r3, #4
 8011eec:	d938      	bls.n	8011f60 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011eee:	2800      	cmp	r0, #0
 8011ef0:	d043      	beq.n	8011f7a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011ef2:	69a1      	ldr	r1, [r4, #24]
 8011ef4:	4630      	mov	r0, r6
 8011ef6:	f005 fb5f 	bl	80175b8 <ucdr_serialize_string>
 8011efa:	6863      	ldr	r3, [r4, #4]
 8011efc:	2b05      	cmp	r3, #5
 8011efe:	d92f      	bls.n	8011f60 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011f00:	2800      	cmp	r0, #0
 8011f02:	d03a      	beq.n	8011f7a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011f04:	69e1      	ldr	r1, [r4, #28]
 8011f06:	4630      	mov	r0, r6
 8011f08:	f005 fb56 	bl	80175b8 <ucdr_serialize_string>
 8011f0c:	6863      	ldr	r3, [r4, #4]
 8011f0e:	2b06      	cmp	r3, #6
 8011f10:	d926      	bls.n	8011f60 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011f12:	b390      	cbz	r0, 8011f7a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011f14:	6a21      	ldr	r1, [r4, #32]
 8011f16:	4630      	mov	r0, r6
 8011f18:	f005 fb4e 	bl	80175b8 <ucdr_serialize_string>
 8011f1c:	6863      	ldr	r3, [r4, #4]
 8011f1e:	2b07      	cmp	r3, #7
 8011f20:	d91e      	bls.n	8011f60 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011f22:	b350      	cbz	r0, 8011f7a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011f24:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8011f26:	4630      	mov	r0, r6
 8011f28:	f005 fb46 	bl	80175b8 <ucdr_serialize_string>
 8011f2c:	6863      	ldr	r3, [r4, #4]
 8011f2e:	2b08      	cmp	r3, #8
 8011f30:	d916      	bls.n	8011f60 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011f32:	b310      	cbz	r0, 8011f7a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011f34:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8011f36:	4630      	mov	r0, r6
 8011f38:	f005 fb3e 	bl	80175b8 <ucdr_serialize_string>
 8011f3c:	6863      	ldr	r3, [r4, #4]
 8011f3e:	2b09      	cmp	r3, #9
 8011f40:	d90e      	bls.n	8011f60 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011f42:	b1d0      	cbz	r0, 8011f7a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011f44:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8011f48:	2709      	movs	r7, #9
 8011f4a:	e000      	b.n	8011f4e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8011f4c:	b1a8      	cbz	r0, 8011f7a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011f4e:	f858 1b04 	ldr.w	r1, [r8], #4
 8011f52:	4630      	mov	r0, r6
 8011f54:	f005 fb30 	bl	80175b8 <ucdr_serialize_string>
 8011f58:	6862      	ldr	r2, [r4, #4]
 8011f5a:	3701      	adds	r7, #1
 8011f5c:	4297      	cmp	r7, r2
 8011f5e:	d3f5      	bcc.n	8011f4c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8011f60:	4005      	ands	r5, r0
 8011f62:	b2ed      	uxtb	r5, r5
 8011f64:	e78a      	b.n	8011e7c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8011f66:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011f68:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8011f6c:	4630      	mov	r0, r6
 8011f6e:	f005 faf7 	bl	8017560 <ucdr_serialize_sequence_uint8_t>
 8011f72:	4005      	ands	r5, r0
 8011f74:	4628      	mov	r0, r5
 8011f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f7a:	2500      	movs	r5, #0
 8011f7c:	e77e      	b.n	8011e7c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8011f7e:	4028      	ands	r0, r5
 8011f80:	b2c5      	uxtb	r5, r0
 8011f82:	e77b      	b.n	8011e7c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08011f84 <uxr_serialize_OBJK_Subscriber_Binary>:
 8011f84:	b570      	push	{r4, r5, r6, lr}
 8011f86:	460d      	mov	r5, r1
 8011f88:	7809      	ldrb	r1, [r1, #0]
 8011f8a:	4606      	mov	r6, r0
 8011f8c:	f7fc fcd8 	bl	800e940 <ucdr_serialize_bool>
 8011f90:	782b      	ldrb	r3, [r5, #0]
 8011f92:	4604      	mov	r4, r0
 8011f94:	b94b      	cbnz	r3, 8011faa <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8011f96:	7a29      	ldrb	r1, [r5, #8]
 8011f98:	4630      	mov	r0, r6
 8011f9a:	f7fc fcd1 	bl	800e940 <ucdr_serialize_bool>
 8011f9e:	7a2b      	ldrb	r3, [r5, #8]
 8011fa0:	4004      	ands	r4, r0
 8011fa2:	b2e4      	uxtb	r4, r4
 8011fa4:	b943      	cbnz	r3, 8011fb8 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8011fa6:	4620      	mov	r0, r4
 8011fa8:	bd70      	pop	{r4, r5, r6, pc}
 8011faa:	6869      	ldr	r1, [r5, #4]
 8011fac:	4630      	mov	r0, r6
 8011fae:	f005 fb03 	bl	80175b8 <ucdr_serialize_string>
 8011fb2:	4004      	ands	r4, r0
 8011fb4:	b2e4      	uxtb	r4, r4
 8011fb6:	e7ee      	b.n	8011f96 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8011fb8:	f105 010c 	add.w	r1, r5, #12
 8011fbc:	4630      	mov	r0, r6
 8011fbe:	f7ff ff53 	bl	8011e68 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8011fc2:	4004      	ands	r4, r0
 8011fc4:	4620      	mov	r0, r4
 8011fc6:	bd70      	pop	{r4, r5, r6, pc}

08011fc8 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8011fc8:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8011fcc:	4688      	mov	r8, r1
 8011fce:	8809      	ldrh	r1, [r1, #0]
 8011fd0:	4681      	mov	r9, r0
 8011fd2:	f7fc fd0f 	bl	800e9f4 <ucdr_serialize_uint16_t>
 8011fd6:	f898 1002 	ldrb.w	r1, [r8, #2]
 8011fda:	4606      	mov	r6, r0
 8011fdc:	4648      	mov	r0, r9
 8011fde:	f7fc fcaf 	bl	800e940 <ucdr_serialize_bool>
 8011fe2:	f898 3002 	ldrb.w	r3, [r8, #2]
 8011fe6:	4006      	ands	r6, r0
 8011fe8:	b2f5      	uxtb	r5, r6
 8011fea:	b9eb      	cbnz	r3, 8012028 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8011fec:	f898 1006 	ldrb.w	r1, [r8, #6]
 8011ff0:	4648      	mov	r0, r9
 8011ff2:	f7fc fca5 	bl	800e940 <ucdr_serialize_bool>
 8011ff6:	f898 3006 	ldrb.w	r3, [r8, #6]
 8011ffa:	4005      	ands	r5, r0
 8011ffc:	bb7b      	cbnz	r3, 801205e <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8011ffe:	f898 100c 	ldrb.w	r1, [r8, #12]
 8012002:	4648      	mov	r0, r9
 8012004:	f7fc fc9c 	bl	800e940 <ucdr_serialize_bool>
 8012008:	f898 300c 	ldrb.w	r3, [r8, #12]
 801200c:	4005      	ands	r5, r0
 801200e:	b9f3      	cbnz	r3, 801204e <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8012010:	f898 1014 	ldrb.w	r1, [r8, #20]
 8012014:	4648      	mov	r0, r9
 8012016:	f7fc fc93 	bl	800e940 <ucdr_serialize_bool>
 801201a:	f898 3014 	ldrb.w	r3, [r8, #20]
 801201e:	4005      	ands	r5, r0
 8012020:	b94b      	cbnz	r3, 8012036 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8012022:	4628      	mov	r0, r5
 8012024:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012028:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 801202c:	4648      	mov	r0, r9
 801202e:	f7fc fce1 	bl	800e9f4 <ucdr_serialize_uint16_t>
 8012032:	4005      	ands	r5, r0
 8012034:	e7da      	b.n	8011fec <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8012036:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801203a:	f108 011c 	add.w	r1, r8, #28
 801203e:	4648      	mov	r0, r9
 8012040:	f005 fa8e 	bl	8017560 <ucdr_serialize_sequence_uint8_t>
 8012044:	4028      	ands	r0, r5
 8012046:	b2c5      	uxtb	r5, r0
 8012048:	4628      	mov	r0, r5
 801204a:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801204e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012052:	4648      	mov	r0, r9
 8012054:	f7fc feb8 	bl	800edc8 <ucdr_serialize_uint32_t>
 8012058:	4028      	ands	r0, r5
 801205a:	b2c5      	uxtb	r5, r0
 801205c:	e7d8      	b.n	8012010 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801205e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8012062:	4648      	mov	r0, r9
 8012064:	f7fc feb0 	bl	800edc8 <ucdr_serialize_uint32_t>
 8012068:	4028      	ands	r0, r5
 801206a:	b2c5      	uxtb	r5, r0
 801206c:	e7c7      	b.n	8011ffe <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801206e:	bf00      	nop

08012070 <uxr_serialize_OBJK_DataReader_Binary>:
 8012070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012072:	2202      	movs	r2, #2
 8012074:	460c      	mov	r4, r1
 8012076:	4606      	mov	r6, r0
 8012078:	f005 f97e 	bl	8017378 <ucdr_serialize_array_uint8_t>
 801207c:	78a1      	ldrb	r1, [r4, #2]
 801207e:	4605      	mov	r5, r0
 8012080:	4630      	mov	r0, r6
 8012082:	f7fc fc5d 	bl	800e940 <ucdr_serialize_bool>
 8012086:	78a3      	ldrb	r3, [r4, #2]
 8012088:	4005      	ands	r5, r0
 801208a:	b2ed      	uxtb	r5, r5
 801208c:	b90b      	cbnz	r3, 8012092 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801208e:	4628      	mov	r0, r5
 8012090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012092:	f104 0108 	add.w	r1, r4, #8
 8012096:	4630      	mov	r0, r6
 8012098:	f7ff ff96 	bl	8011fc8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801209c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80120a0:	4607      	mov	r7, r0
 80120a2:	4630      	mov	r0, r6
 80120a4:	f7fc fc4c 	bl	800e940 <ucdr_serialize_bool>
 80120a8:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80120ac:	4038      	ands	r0, r7
 80120ae:	b2c7      	uxtb	r7, r0
 80120b0:	b95b      	cbnz	r3, 80120ca <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 80120b2:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 80120b6:	4630      	mov	r0, r6
 80120b8:	f7fc fc42 	bl	800e940 <ucdr_serialize_bool>
 80120bc:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80120c0:	4007      	ands	r7, r0
 80120c2:	b94b      	cbnz	r3, 80120d8 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 80120c4:	403d      	ands	r5, r7
 80120c6:	4628      	mov	r0, r5
 80120c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120ca:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 80120ce:	4630      	mov	r0, r6
 80120d0:	f7fd f8d0 	bl	800f274 <ucdr_serialize_uint64_t>
 80120d4:	4007      	ands	r7, r0
 80120d6:	e7ec      	b.n	80120b2 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 80120d8:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80120da:	4630      	mov	r0, r6
 80120dc:	f005 fa6c 	bl	80175b8 <ucdr_serialize_string>
 80120e0:	4007      	ands	r7, r0
 80120e2:	b2ff      	uxtb	r7, r7
 80120e4:	e7ee      	b.n	80120c4 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 80120e6:	bf00      	nop

080120e8 <uxr_serialize_OBJK_DataWriter_Binary>:
 80120e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120ea:	2202      	movs	r2, #2
 80120ec:	460d      	mov	r5, r1
 80120ee:	4606      	mov	r6, r0
 80120f0:	f005 f942 	bl	8017378 <ucdr_serialize_array_uint8_t>
 80120f4:	78a9      	ldrb	r1, [r5, #2]
 80120f6:	4604      	mov	r4, r0
 80120f8:	4630      	mov	r0, r6
 80120fa:	f7fc fc21 	bl	800e940 <ucdr_serialize_bool>
 80120fe:	78ab      	ldrb	r3, [r5, #2]
 8012100:	4004      	ands	r4, r0
 8012102:	b2e4      	uxtb	r4, r4
 8012104:	b90b      	cbnz	r3, 801210a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8012106:	4620      	mov	r0, r4
 8012108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801210a:	f105 0108 	add.w	r1, r5, #8
 801210e:	4630      	mov	r0, r6
 8012110:	f7ff ff5a 	bl	8011fc8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012114:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8012118:	4607      	mov	r7, r0
 801211a:	4630      	mov	r0, r6
 801211c:	f7fc fc10 	bl	800e940 <ucdr_serialize_bool>
 8012120:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8012124:	4038      	ands	r0, r7
 8012126:	b2c7      	uxtb	r7, r0
 8012128:	b913      	cbnz	r3, 8012130 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801212a:	403c      	ands	r4, r7
 801212c:	4620      	mov	r0, r4
 801212e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012130:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8012134:	4630      	mov	r0, r6
 8012136:	f7fd f89d 	bl	800f274 <ucdr_serialize_uint64_t>
 801213a:	4007      	ands	r7, r0
 801213c:	e7f5      	b.n	801212a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801213e:	bf00      	nop

08012140 <uxr_deserialize_ObjectVariant>:
 8012140:	b570      	push	{r4, r5, r6, lr}
 8012142:	4605      	mov	r5, r0
 8012144:	460e      	mov	r6, r1
 8012146:	f7fc fc3f 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 801214a:	b168      	cbz	r0, 8012168 <uxr_deserialize_ObjectVariant+0x28>
 801214c:	7833      	ldrb	r3, [r6, #0]
 801214e:	3b01      	subs	r3, #1
 8012150:	4604      	mov	r4, r0
 8012152:	2b0d      	cmp	r3, #13
 8012154:	d809      	bhi.n	801216a <uxr_deserialize_ObjectVariant+0x2a>
 8012156:	e8df f003 	tbb	[pc, r3]
 801215a:	0a41      	.short	0x0a41
 801215c:	0a0a2323 	.word	0x0a0a2323
 8012160:	10080a0a 	.word	0x10080a0a
 8012164:	565c1010 	.word	0x565c1010
 8012168:	2400      	movs	r4, #0
 801216a:	4620      	mov	r0, r4
 801216c:	bd70      	pop	{r4, r5, r6, pc}
 801216e:	1d31      	adds	r1, r6, #4
 8012170:	4628      	mov	r0, r5
 8012172:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012176:	f7ff bd55 	b.w	8011c24 <uxr_deserialize_DATAWRITER_Representation>
 801217a:	1d31      	adds	r1, r6, #4
 801217c:	4628      	mov	r0, r5
 801217e:	f7fc fc23 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 8012182:	2800      	cmp	r0, #0
 8012184:	d0f0      	beq.n	8012168 <uxr_deserialize_ObjectVariant+0x28>
 8012186:	7933      	ldrb	r3, [r6, #4]
 8012188:	2b01      	cmp	r3, #1
 801218a:	d001      	beq.n	8012190 <uxr_deserialize_ObjectVariant+0x50>
 801218c:	2b02      	cmp	r3, #2
 801218e:	d1ec      	bne.n	801216a <uxr_deserialize_ObjectVariant+0x2a>
 8012190:	68b1      	ldr	r1, [r6, #8]
 8012192:	4628      	mov	r0, r5
 8012194:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012198:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801219c:	f005 ba1c 	b.w	80175d8 <ucdr_deserialize_string>
 80121a0:	1d31      	adds	r1, r6, #4
 80121a2:	4628      	mov	r0, r5
 80121a4:	f7fc fc10 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 80121a8:	4604      	mov	r4, r0
 80121aa:	b170      	cbz	r0, 80121ca <uxr_deserialize_ObjectVariant+0x8a>
 80121ac:	7933      	ldrb	r3, [r6, #4]
 80121ae:	2b02      	cmp	r3, #2
 80121b0:	d04c      	beq.n	801224c <uxr_deserialize_ObjectVariant+0x10c>
 80121b2:	2b03      	cmp	r3, #3
 80121b4:	d109      	bne.n	80121ca <uxr_deserialize_ObjectVariant+0x8a>
 80121b6:	f106 0308 	add.w	r3, r6, #8
 80121ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80121be:	f106 010c 	add.w	r1, r6, #12
 80121c2:	4628      	mov	r0, r5
 80121c4:	f005 f9de 	bl	8017584 <ucdr_deserialize_sequence_uint8_t>
 80121c8:	4604      	mov	r4, r0
 80121ca:	2202      	movs	r2, #2
 80121cc:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80121d0:	4628      	mov	r0, r5
 80121d2:	f005 f935 	bl	8017440 <ucdr_deserialize_array_uint8_t>
 80121d6:	4020      	ands	r0, r4
 80121d8:	b2c4      	uxtb	r4, r0
 80121da:	e7c6      	b.n	801216a <uxr_deserialize_ObjectVariant+0x2a>
 80121dc:	1d31      	adds	r1, r6, #4
 80121de:	4628      	mov	r0, r5
 80121e0:	f7fc fbf2 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 80121e4:	4604      	mov	r4, r0
 80121e6:	b130      	cbz	r0, 80121f6 <uxr_deserialize_ObjectVariant+0xb6>
 80121e8:	7933      	ldrb	r3, [r6, #4]
 80121ea:	2b02      	cmp	r3, #2
 80121ec:	d036      	beq.n	801225c <uxr_deserialize_ObjectVariant+0x11c>
 80121ee:	2b03      	cmp	r3, #3
 80121f0:	d03c      	beq.n	801226c <uxr_deserialize_ObjectVariant+0x12c>
 80121f2:	2b01      	cmp	r3, #1
 80121f4:	d032      	beq.n	801225c <uxr_deserialize_ObjectVariant+0x11c>
 80121f6:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80121fa:	4628      	mov	r0, r5
 80121fc:	f7fd f98a 	bl	800f514 <ucdr_deserialize_int16_t>
 8012200:	4020      	ands	r0, r4
 8012202:	b2c4      	uxtb	r4, r0
 8012204:	e7b1      	b.n	801216a <uxr_deserialize_ObjectVariant+0x2a>
 8012206:	1d31      	adds	r1, r6, #4
 8012208:	4628      	mov	r0, r5
 801220a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801220e:	f7ff bbbf 	b.w	8011990 <uxr_deserialize_CLIENT_Representation>
 8012212:	2204      	movs	r2, #4
 8012214:	18b1      	adds	r1, r6, r2
 8012216:	4628      	mov	r0, r5
 8012218:	f005 f912 	bl	8017440 <ucdr_deserialize_array_uint8_t>
 801221c:	2202      	movs	r2, #2
 801221e:	f106 0108 	add.w	r1, r6, #8
 8012222:	4604      	mov	r4, r0
 8012224:	4628      	mov	r0, r5
 8012226:	f005 f90b 	bl	8017440 <ucdr_deserialize_array_uint8_t>
 801222a:	2202      	movs	r2, #2
 801222c:	4004      	ands	r4, r0
 801222e:	f106 010a 	add.w	r1, r6, #10
 8012232:	4628      	mov	r0, r5
 8012234:	f005 f904 	bl	8017440 <ucdr_deserialize_array_uint8_t>
 8012238:	b2e4      	uxtb	r4, r4
 801223a:	4603      	mov	r3, r0
 801223c:	f106 010c 	add.w	r1, r6, #12
 8012240:	4628      	mov	r0, r5
 8012242:	401c      	ands	r4, r3
 8012244:	f7fc fb92 	bl	800e96c <ucdr_deserialize_bool>
 8012248:	4004      	ands	r4, r0
 801224a:	e78e      	b.n	801216a <uxr_deserialize_ObjectVariant+0x2a>
 801224c:	68b1      	ldr	r1, [r6, #8]
 801224e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012252:	4628      	mov	r0, r5
 8012254:	f005 f9c0 	bl	80175d8 <ucdr_deserialize_string>
 8012258:	4604      	mov	r4, r0
 801225a:	e7b6      	b.n	80121ca <uxr_deserialize_ObjectVariant+0x8a>
 801225c:	68b1      	ldr	r1, [r6, #8]
 801225e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012262:	4628      	mov	r0, r5
 8012264:	f005 f9b8 	bl	80175d8 <ucdr_deserialize_string>
 8012268:	4604      	mov	r4, r0
 801226a:	e7c4      	b.n	80121f6 <uxr_deserialize_ObjectVariant+0xb6>
 801226c:	f106 0308 	add.w	r3, r6, #8
 8012270:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012274:	f106 010c 	add.w	r1, r6, #12
 8012278:	4628      	mov	r0, r5
 801227a:	f005 f983 	bl	8017584 <ucdr_deserialize_sequence_uint8_t>
 801227e:	4604      	mov	r4, r0
 8012280:	e7b9      	b.n	80121f6 <uxr_deserialize_ObjectVariant+0xb6>
 8012282:	bf00      	nop

08012284 <uxr_deserialize_BaseObjectRequest>:
 8012284:	b570      	push	{r4, r5, r6, lr}
 8012286:	2202      	movs	r2, #2
 8012288:	4605      	mov	r5, r0
 801228a:	460e      	mov	r6, r1
 801228c:	f005 f8d8 	bl	8017440 <ucdr_deserialize_array_uint8_t>
 8012290:	2202      	movs	r2, #2
 8012292:	4604      	mov	r4, r0
 8012294:	18b1      	adds	r1, r6, r2
 8012296:	4628      	mov	r0, r5
 8012298:	f005 f8d2 	bl	8017440 <ucdr_deserialize_array_uint8_t>
 801229c:	4020      	ands	r0, r4
 801229e:	b2c0      	uxtb	r0, r0
 80122a0:	bd70      	pop	{r4, r5, r6, pc}
 80122a2:	bf00      	nop

080122a4 <uxr_serialize_ActivityInfoVariant>:
 80122a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122a8:	460d      	mov	r5, r1
 80122aa:	7809      	ldrb	r1, [r1, #0]
 80122ac:	4607      	mov	r7, r0
 80122ae:	f7fc fb75 	bl	800e99c <ucdr_serialize_uint8_t>
 80122b2:	4681      	mov	r9, r0
 80122b4:	b138      	cbz	r0, 80122c6 <uxr_serialize_ActivityInfoVariant+0x22>
 80122b6:	782b      	ldrb	r3, [r5, #0]
 80122b8:	2b06      	cmp	r3, #6
 80122ba:	f000 8082 	beq.w	80123c2 <uxr_serialize_ActivityInfoVariant+0x11e>
 80122be:	2b0d      	cmp	r3, #13
 80122c0:	d016      	beq.n	80122f0 <uxr_serialize_ActivityInfoVariant+0x4c>
 80122c2:	2b05      	cmp	r3, #5
 80122c4:	d002      	beq.n	80122cc <uxr_serialize_ActivityInfoVariant+0x28>
 80122c6:	4648      	mov	r0, r9
 80122c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122cc:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80122d0:	4638      	mov	r0, r7
 80122d2:	f7fd f89f 	bl	800f414 <ucdr_serialize_int16_t>
 80122d6:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80122da:	4681      	mov	r9, r0
 80122dc:	4638      	mov	r0, r7
 80122de:	f7fc ffc9 	bl	800f274 <ucdr_serialize_uint64_t>
 80122e2:	ea09 0000 	and.w	r0, r9, r0
 80122e6:	fa5f f980 	uxtb.w	r9, r0
 80122ea:	4648      	mov	r0, r9
 80122ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122f0:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80122f4:	4638      	mov	r0, r7
 80122f6:	f7fd f88d 	bl	800f414 <ucdr_serialize_int16_t>
 80122fa:	68e9      	ldr	r1, [r5, #12]
 80122fc:	4681      	mov	r9, r0
 80122fe:	4638      	mov	r0, r7
 8012300:	f7fc fd62 	bl	800edc8 <ucdr_serialize_uint32_t>
 8012304:	68eb      	ldr	r3, [r5, #12]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d0eb      	beq.n	80122e2 <uxr_serialize_ActivityInfoVariant+0x3e>
 801230a:	b320      	cbz	r0, 8012356 <uxr_serialize_ActivityInfoVariant+0xb2>
 801230c:	f105 080c 	add.w	r8, r5, #12
 8012310:	2600      	movs	r6, #0
 8012312:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8012316:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 801231a:	f89a 1010 	ldrb.w	r1, [sl, #16]
 801231e:	4638      	mov	r0, r7
 8012320:	f7fc fb3c 	bl	800e99c <ucdr_serialize_uint8_t>
 8012324:	2800      	cmp	r0, #0
 8012326:	d053      	beq.n	80123d0 <uxr_serialize_ActivityInfoVariant+0x12c>
 8012328:	f89a 3010 	ldrb.w	r3, [sl, #16]
 801232c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8012330:	0074      	lsls	r4, r6, #1
 8012332:	00c9      	lsls	r1, r1, #3
 8012334:	2b03      	cmp	r3, #3
 8012336:	d854      	bhi.n	80123e2 <uxr_serialize_ActivityInfoVariant+0x13e>
 8012338:	e8df f003 	tbb	[pc, r3]
 801233c:	02102132 	.word	0x02102132
 8012340:	4441      	add	r1, r8
 8012342:	4638      	mov	r0, r7
 8012344:	6889      	ldr	r1, [r1, #8]
 8012346:	f005 f937 	bl	80175b8 <ucdr_serialize_string>
 801234a:	68ea      	ldr	r2, [r5, #12]
 801234c:	3601      	adds	r6, #1
 801234e:	4296      	cmp	r6, r2
 8012350:	d242      	bcs.n	80123d8 <uxr_serialize_ActivityInfoVariant+0x134>
 8012352:	2800      	cmp	r0, #0
 8012354:	d1dd      	bne.n	8012312 <uxr_serialize_ActivityInfoVariant+0x6e>
 8012356:	f04f 0900 	mov.w	r9, #0
 801235a:	e7b4      	b.n	80122c6 <uxr_serialize_ActivityInfoVariant+0x22>
 801235c:	3108      	adds	r1, #8
 801235e:	4441      	add	r1, r8
 8012360:	2210      	movs	r2, #16
 8012362:	4638      	mov	r0, r7
 8012364:	f005 f808 	bl	8017378 <ucdr_serialize_array_uint8_t>
 8012368:	4434      	add	r4, r6
 801236a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801236e:	4604      	mov	r4, r0
 8012370:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012372:	4638      	mov	r0, r7
 8012374:	f7fc fd28 	bl	800edc8 <ucdr_serialize_uint32_t>
 8012378:	4020      	ands	r0, r4
 801237a:	b2c0      	uxtb	r0, r0
 801237c:	e7e5      	b.n	801234a <uxr_serialize_ActivityInfoVariant+0xa6>
 801237e:	3108      	adds	r1, #8
 8012380:	4441      	add	r1, r8
 8012382:	2204      	movs	r2, #4
 8012384:	4638      	mov	r0, r7
 8012386:	f004 fff7 	bl	8017378 <ucdr_serialize_array_uint8_t>
 801238a:	4434      	add	r4, r6
 801238c:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8012390:	4604      	mov	r4, r0
 8012392:	8b19      	ldrh	r1, [r3, #24]
 8012394:	4638      	mov	r0, r7
 8012396:	f7fc fb2d 	bl	800e9f4 <ucdr_serialize_uint16_t>
 801239a:	4020      	ands	r0, r4
 801239c:	b2c0      	uxtb	r0, r0
 801239e:	e7d4      	b.n	801234a <uxr_serialize_ActivityInfoVariant+0xa6>
 80123a0:	3108      	adds	r1, #8
 80123a2:	4441      	add	r1, r8
 80123a4:	2202      	movs	r2, #2
 80123a6:	4638      	mov	r0, r7
 80123a8:	f004 ffe6 	bl	8017378 <ucdr_serialize_array_uint8_t>
 80123ac:	4434      	add	r4, r6
 80123ae:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80123b2:	4604      	mov	r4, r0
 80123b4:	7d99      	ldrb	r1, [r3, #22]
 80123b6:	4638      	mov	r0, r7
 80123b8:	f7fc faf0 	bl	800e99c <ucdr_serialize_uint8_t>
 80123bc:	4020      	ands	r0, r4
 80123be:	b2c0      	uxtb	r0, r0
 80123c0:	e7c3      	b.n	801234a <uxr_serialize_ActivityInfoVariant+0xa6>
 80123c2:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80123c6:	4638      	mov	r0, r7
 80123c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123cc:	f7fd b822 	b.w	800f414 <ucdr_serialize_int16_t>
 80123d0:	68ea      	ldr	r2, [r5, #12]
 80123d2:	3601      	adds	r6, #1
 80123d4:	42b2      	cmp	r2, r6
 80123d6:	d8be      	bhi.n	8012356 <uxr_serialize_ActivityInfoVariant+0xb2>
 80123d8:	ea09 0900 	and.w	r9, r9, r0
 80123dc:	fa5f f989 	uxtb.w	r9, r9
 80123e0:	e771      	b.n	80122c6 <uxr_serialize_ActivityInfoVariant+0x22>
 80123e2:	68eb      	ldr	r3, [r5, #12]
 80123e4:	3601      	adds	r6, #1
 80123e6:	429e      	cmp	r6, r3
 80123e8:	f10a 0a18 	add.w	sl, sl, #24
 80123ec:	d395      	bcc.n	801231a <uxr_serialize_ActivityInfoVariant+0x76>
 80123ee:	e76a      	b.n	80122c6 <uxr_serialize_ActivityInfoVariant+0x22>

080123f0 <uxr_deserialize_BaseObjectReply>:
 80123f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123f4:	2202      	movs	r2, #2
 80123f6:	4606      	mov	r6, r0
 80123f8:	460f      	mov	r7, r1
 80123fa:	f005 f821 	bl	8017440 <ucdr_deserialize_array_uint8_t>
 80123fe:	2202      	movs	r2, #2
 8012400:	18b9      	adds	r1, r7, r2
 8012402:	4605      	mov	r5, r0
 8012404:	4630      	mov	r0, r6
 8012406:	f005 f81b 	bl	8017440 <ucdr_deserialize_array_uint8_t>
 801240a:	1d39      	adds	r1, r7, #4
 801240c:	4680      	mov	r8, r0
 801240e:	4630      	mov	r0, r6
 8012410:	f7fc fada 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 8012414:	1d79      	adds	r1, r7, #5
 8012416:	4604      	mov	r4, r0
 8012418:	4630      	mov	r0, r6
 801241a:	f7fc fad5 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 801241e:	ea05 0508 	and.w	r5, r5, r8
 8012422:	402c      	ands	r4, r5
 8012424:	4020      	ands	r0, r4
 8012426:	b2c0      	uxtb	r0, r0
 8012428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801242c <uxr_serialize_ReadSpecification>:
 801242c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012430:	460e      	mov	r6, r1
 8012432:	7809      	ldrb	r1, [r1, #0]
 8012434:	4607      	mov	r7, r0
 8012436:	f7fc fab1 	bl	800e99c <ucdr_serialize_uint8_t>
 801243a:	7871      	ldrb	r1, [r6, #1]
 801243c:	4604      	mov	r4, r0
 801243e:	4638      	mov	r0, r7
 8012440:	f7fc faac 	bl	800e99c <ucdr_serialize_uint8_t>
 8012444:	78b1      	ldrb	r1, [r6, #2]
 8012446:	4004      	ands	r4, r0
 8012448:	4638      	mov	r0, r7
 801244a:	f7fc fa79 	bl	800e940 <ucdr_serialize_bool>
 801244e:	78b3      	ldrb	r3, [r6, #2]
 8012450:	b2e4      	uxtb	r4, r4
 8012452:	4004      	ands	r4, r0
 8012454:	b94b      	cbnz	r3, 801246a <uxr_serialize_ReadSpecification+0x3e>
 8012456:	7a31      	ldrb	r1, [r6, #8]
 8012458:	4638      	mov	r0, r7
 801245a:	f7fc fa71 	bl	800e940 <ucdr_serialize_bool>
 801245e:	7a33      	ldrb	r3, [r6, #8]
 8012460:	4004      	ands	r4, r0
 8012462:	b943      	cbnz	r3, 8012476 <uxr_serialize_ReadSpecification+0x4a>
 8012464:	4620      	mov	r0, r4
 8012466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801246a:	6871      	ldr	r1, [r6, #4]
 801246c:	4638      	mov	r0, r7
 801246e:	f005 f8a3 	bl	80175b8 <ucdr_serialize_string>
 8012472:	4004      	ands	r4, r0
 8012474:	e7ef      	b.n	8012456 <uxr_serialize_ReadSpecification+0x2a>
 8012476:	8971      	ldrh	r1, [r6, #10]
 8012478:	4638      	mov	r0, r7
 801247a:	f7fc fabb 	bl	800e9f4 <ucdr_serialize_uint16_t>
 801247e:	89b1      	ldrh	r1, [r6, #12]
 8012480:	4605      	mov	r5, r0
 8012482:	4638      	mov	r0, r7
 8012484:	f7fc fab6 	bl	800e9f4 <ucdr_serialize_uint16_t>
 8012488:	89f1      	ldrh	r1, [r6, #14]
 801248a:	4005      	ands	r5, r0
 801248c:	4638      	mov	r0, r7
 801248e:	f7fc fab1 	bl	800e9f4 <ucdr_serialize_uint16_t>
 8012492:	8a31      	ldrh	r1, [r6, #16]
 8012494:	4680      	mov	r8, r0
 8012496:	4638      	mov	r0, r7
 8012498:	f7fc faac 	bl	800e9f4 <ucdr_serialize_uint16_t>
 801249c:	b2ed      	uxtb	r5, r5
 801249e:	4025      	ands	r5, r4
 80124a0:	ea08 0505 	and.w	r5, r8, r5
 80124a4:	ea00 0405 	and.w	r4, r0, r5
 80124a8:	4620      	mov	r0, r4
 80124aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124ae:	bf00      	nop

080124b0 <uxr_serialize_CREATE_CLIENT_Payload>:
 80124b0:	f7ff ba16 	b.w	80118e0 <uxr_serialize_CLIENT_Representation>

080124b4 <uxr_serialize_CREATE_Payload>:
 80124b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124b6:	2202      	movs	r2, #2
 80124b8:	4607      	mov	r7, r0
 80124ba:	460e      	mov	r6, r1
 80124bc:	f004 ff5c 	bl	8017378 <ucdr_serialize_array_uint8_t>
 80124c0:	2202      	movs	r2, #2
 80124c2:	18b1      	adds	r1, r6, r2
 80124c4:	4605      	mov	r5, r0
 80124c6:	4638      	mov	r0, r7
 80124c8:	f004 ff56 	bl	8017378 <ucdr_serialize_array_uint8_t>
 80124cc:	7931      	ldrb	r1, [r6, #4]
 80124ce:	4604      	mov	r4, r0
 80124d0:	4638      	mov	r0, r7
 80124d2:	f7fc fa63 	bl	800e99c <ucdr_serialize_uint8_t>
 80124d6:	b170      	cbz	r0, 80124f6 <uxr_serialize_CREATE_Payload+0x42>
 80124d8:	7933      	ldrb	r3, [r6, #4]
 80124da:	402c      	ands	r4, r5
 80124dc:	3b01      	subs	r3, #1
 80124de:	b2e4      	uxtb	r4, r4
 80124e0:	2b0d      	cmp	r3, #13
 80124e2:	d809      	bhi.n	80124f8 <uxr_serialize_CREATE_Payload+0x44>
 80124e4:	e8df f003 	tbb	[pc, r3]
 80124e8:	23230a4c 	.word	0x23230a4c
 80124ec:	0a0a0a0a 	.word	0x0a0a0a0a
 80124f0:	12121208 	.word	0x12121208
 80124f4:	3e45      	.short	0x3e45
 80124f6:	2400      	movs	r4, #0
 80124f8:	4620      	mov	r0, r4
 80124fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80124fc:	f106 0108 	add.w	r1, r6, #8
 8012500:	4638      	mov	r0, r7
 8012502:	f7ff faf3 	bl	8011aec <uxr_serialize_DATAWRITER_Representation>
 8012506:	4004      	ands	r4, r0
 8012508:	4620      	mov	r0, r4
 801250a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801250c:	7a31      	ldrb	r1, [r6, #8]
 801250e:	4638      	mov	r0, r7
 8012510:	f7fc fa44 	bl	800e99c <ucdr_serialize_uint8_t>
 8012514:	2800      	cmp	r0, #0
 8012516:	d0ee      	beq.n	80124f6 <uxr_serialize_CREATE_Payload+0x42>
 8012518:	7a33      	ldrb	r3, [r6, #8]
 801251a:	2b01      	cmp	r3, #1
 801251c:	d001      	beq.n	8012522 <uxr_serialize_CREATE_Payload+0x6e>
 801251e:	2b02      	cmp	r3, #2
 8012520:	d1ea      	bne.n	80124f8 <uxr_serialize_CREATE_Payload+0x44>
 8012522:	68f1      	ldr	r1, [r6, #12]
 8012524:	4638      	mov	r0, r7
 8012526:	f005 f847 	bl	80175b8 <ucdr_serialize_string>
 801252a:	4004      	ands	r4, r0
 801252c:	e7e4      	b.n	80124f8 <uxr_serialize_CREATE_Payload+0x44>
 801252e:	7a31      	ldrb	r1, [r6, #8]
 8012530:	4638      	mov	r0, r7
 8012532:	f7fc fa33 	bl	800e99c <ucdr_serialize_uint8_t>
 8012536:	4605      	mov	r5, r0
 8012538:	b158      	cbz	r0, 8012552 <uxr_serialize_CREATE_Payload+0x9e>
 801253a:	7a33      	ldrb	r3, [r6, #8]
 801253c:	2b02      	cmp	r3, #2
 801253e:	d034      	beq.n	80125aa <uxr_serialize_CREATE_Payload+0xf6>
 8012540:	2b03      	cmp	r3, #3
 8012542:	d106      	bne.n	8012552 <uxr_serialize_CREATE_Payload+0x9e>
 8012544:	68f2      	ldr	r2, [r6, #12]
 8012546:	f106 0110 	add.w	r1, r6, #16
 801254a:	4638      	mov	r0, r7
 801254c:	f005 f808 	bl	8017560 <ucdr_serialize_sequence_uint8_t>
 8012550:	4605      	mov	r5, r0
 8012552:	2202      	movs	r2, #2
 8012554:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8012558:	4638      	mov	r0, r7
 801255a:	f004 ff0d 	bl	8017378 <ucdr_serialize_array_uint8_t>
 801255e:	4028      	ands	r0, r5
 8012560:	4004      	ands	r4, r0
 8012562:	e7c9      	b.n	80124f8 <uxr_serialize_CREATE_Payload+0x44>
 8012564:	f106 0108 	add.w	r1, r6, #8
 8012568:	4638      	mov	r0, r7
 801256a:	f7ff f9b9 	bl	80118e0 <uxr_serialize_CLIENT_Representation>
 801256e:	4004      	ands	r4, r0
 8012570:	e7c2      	b.n	80124f8 <uxr_serialize_CREATE_Payload+0x44>
 8012572:	f106 0108 	add.w	r1, r6, #8
 8012576:	4638      	mov	r0, r7
 8012578:	f7ff fa6e 	bl	8011a58 <uxr_serialize_AGENT_Representation>
 801257c:	4004      	ands	r4, r0
 801257e:	e7bb      	b.n	80124f8 <uxr_serialize_CREATE_Payload+0x44>
 8012580:	7a31      	ldrb	r1, [r6, #8]
 8012582:	4638      	mov	r0, r7
 8012584:	f7fc fa0a 	bl	800e99c <ucdr_serialize_uint8_t>
 8012588:	4605      	mov	r5, r0
 801258a:	b130      	cbz	r0, 801259a <uxr_serialize_CREATE_Payload+0xe6>
 801258c:	7a33      	ldrb	r3, [r6, #8]
 801258e:	2b02      	cmp	r3, #2
 8012590:	d011      	beq.n	80125b6 <uxr_serialize_CREATE_Payload+0x102>
 8012592:	2b03      	cmp	r3, #3
 8012594:	d015      	beq.n	80125c2 <uxr_serialize_CREATE_Payload+0x10e>
 8012596:	2b01      	cmp	r3, #1
 8012598:	d00d      	beq.n	80125b6 <uxr_serialize_CREATE_Payload+0x102>
 801259a:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 801259e:	4638      	mov	r0, r7
 80125a0:	f7fc ff38 	bl	800f414 <ucdr_serialize_int16_t>
 80125a4:	4028      	ands	r0, r5
 80125a6:	4004      	ands	r4, r0
 80125a8:	e7a6      	b.n	80124f8 <uxr_serialize_CREATE_Payload+0x44>
 80125aa:	68f1      	ldr	r1, [r6, #12]
 80125ac:	4638      	mov	r0, r7
 80125ae:	f005 f803 	bl	80175b8 <ucdr_serialize_string>
 80125b2:	4605      	mov	r5, r0
 80125b4:	e7cd      	b.n	8012552 <uxr_serialize_CREATE_Payload+0x9e>
 80125b6:	68f1      	ldr	r1, [r6, #12]
 80125b8:	4638      	mov	r0, r7
 80125ba:	f004 fffd 	bl	80175b8 <ucdr_serialize_string>
 80125be:	4605      	mov	r5, r0
 80125c0:	e7eb      	b.n	801259a <uxr_serialize_CREATE_Payload+0xe6>
 80125c2:	68f2      	ldr	r2, [r6, #12]
 80125c4:	f106 0110 	add.w	r1, r6, #16
 80125c8:	4638      	mov	r0, r7
 80125ca:	f004 ffc9 	bl	8017560 <ucdr_serialize_sequence_uint8_t>
 80125ce:	4605      	mov	r5, r0
 80125d0:	e7e3      	b.n	801259a <uxr_serialize_CREATE_Payload+0xe6>
 80125d2:	bf00      	nop

080125d4 <uxr_deserialize_GET_INFO_Payload>:
 80125d4:	b570      	push	{r4, r5, r6, lr}
 80125d6:	2202      	movs	r2, #2
 80125d8:	4605      	mov	r5, r0
 80125da:	460e      	mov	r6, r1
 80125dc:	f004 ff30 	bl	8017440 <ucdr_deserialize_array_uint8_t>
 80125e0:	2202      	movs	r2, #2
 80125e2:	18b1      	adds	r1, r6, r2
 80125e4:	4604      	mov	r4, r0
 80125e6:	4628      	mov	r0, r5
 80125e8:	f004 ff2a 	bl	8017440 <ucdr_deserialize_array_uint8_t>
 80125ec:	1d31      	adds	r1, r6, #4
 80125ee:	4004      	ands	r4, r0
 80125f0:	4628      	mov	r0, r5
 80125f2:	f7fc fd19 	bl	800f028 <ucdr_deserialize_uint32_t>
 80125f6:	b2e4      	uxtb	r4, r4
 80125f8:	4020      	ands	r0, r4
 80125fa:	bd70      	pop	{r4, r5, r6, pc}

080125fc <uxr_serialize_DELETE_Payload>:
 80125fc:	b570      	push	{r4, r5, r6, lr}
 80125fe:	2202      	movs	r2, #2
 8012600:	4605      	mov	r5, r0
 8012602:	460e      	mov	r6, r1
 8012604:	f004 feb8 	bl	8017378 <ucdr_serialize_array_uint8_t>
 8012608:	2202      	movs	r2, #2
 801260a:	4604      	mov	r4, r0
 801260c:	18b1      	adds	r1, r6, r2
 801260e:	4628      	mov	r0, r5
 8012610:	f004 feb2 	bl	8017378 <ucdr_serialize_array_uint8_t>
 8012614:	4020      	ands	r0, r4
 8012616:	b2c0      	uxtb	r0, r0
 8012618:	bd70      	pop	{r4, r5, r6, pc}
 801261a:	bf00      	nop

0801261c <uxr_deserialize_STATUS_AGENT_Payload>:
 801261c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012620:	4605      	mov	r5, r0
 8012622:	460e      	mov	r6, r1
 8012624:	f7fc f9d0 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 8012628:	1c71      	adds	r1, r6, #1
 801262a:	4604      	mov	r4, r0
 801262c:	4628      	mov	r0, r5
 801262e:	f7fc f9cb 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 8012632:	2204      	movs	r2, #4
 8012634:	18b1      	adds	r1, r6, r2
 8012636:	4680      	mov	r8, r0
 8012638:	4628      	mov	r0, r5
 801263a:	f004 ff01 	bl	8017440 <ucdr_deserialize_array_uint8_t>
 801263e:	f106 0108 	add.w	r1, r6, #8
 8012642:	4607      	mov	r7, r0
 8012644:	2202      	movs	r2, #2
 8012646:	4628      	mov	r0, r5
 8012648:	f004 fefa 	bl	8017440 <ucdr_deserialize_array_uint8_t>
 801264c:	ea04 0308 	and.w	r3, r4, r8
 8012650:	b2db      	uxtb	r3, r3
 8012652:	ea03 0407 	and.w	r4, r3, r7
 8012656:	2202      	movs	r2, #2
 8012658:	4607      	mov	r7, r0
 801265a:	f106 010a 	add.w	r1, r6, #10
 801265e:	4628      	mov	r0, r5
 8012660:	f004 feee 	bl	8017440 <ucdr_deserialize_array_uint8_t>
 8012664:	f106 010c 	add.w	r1, r6, #12
 8012668:	4603      	mov	r3, r0
 801266a:	4628      	mov	r0, r5
 801266c:	461d      	mov	r5, r3
 801266e:	f7fc f97d 	bl	800e96c <ucdr_deserialize_bool>
 8012672:	403c      	ands	r4, r7
 8012674:	4025      	ands	r5, r4
 8012676:	4028      	ands	r0, r5
 8012678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801267c <uxr_deserialize_STATUS_Payload>:
 801267c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012680:	2202      	movs	r2, #2
 8012682:	4606      	mov	r6, r0
 8012684:	460f      	mov	r7, r1
 8012686:	f004 fedb 	bl	8017440 <ucdr_deserialize_array_uint8_t>
 801268a:	2202      	movs	r2, #2
 801268c:	18b9      	adds	r1, r7, r2
 801268e:	4605      	mov	r5, r0
 8012690:	4630      	mov	r0, r6
 8012692:	f004 fed5 	bl	8017440 <ucdr_deserialize_array_uint8_t>
 8012696:	1d39      	adds	r1, r7, #4
 8012698:	4680      	mov	r8, r0
 801269a:	4630      	mov	r0, r6
 801269c:	f7fc f994 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 80126a0:	1d79      	adds	r1, r7, #5
 80126a2:	4604      	mov	r4, r0
 80126a4:	4630      	mov	r0, r6
 80126a6:	f7fc f98f 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 80126aa:	ea05 0508 	and.w	r5, r5, r8
 80126ae:	402c      	ands	r4, r5
 80126b0:	4020      	ands	r0, r4
 80126b2:	b2c0      	uxtb	r0, r0
 80126b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080126b8 <uxr_serialize_INFO_Payload>:
 80126b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126bc:	2202      	movs	r2, #2
 80126be:	460c      	mov	r4, r1
 80126c0:	4605      	mov	r5, r0
 80126c2:	f004 fe59 	bl	8017378 <ucdr_serialize_array_uint8_t>
 80126c6:	2202      	movs	r2, #2
 80126c8:	18a1      	adds	r1, r4, r2
 80126ca:	4680      	mov	r8, r0
 80126cc:	4628      	mov	r0, r5
 80126ce:	f004 fe53 	bl	8017378 <ucdr_serialize_array_uint8_t>
 80126d2:	7921      	ldrb	r1, [r4, #4]
 80126d4:	4607      	mov	r7, r0
 80126d6:	4628      	mov	r0, r5
 80126d8:	f7fc f960 	bl	800e99c <ucdr_serialize_uint8_t>
 80126dc:	7961      	ldrb	r1, [r4, #5]
 80126de:	4606      	mov	r6, r0
 80126e0:	4628      	mov	r0, r5
 80126e2:	f7fc f95b 	bl	800e99c <ucdr_serialize_uint8_t>
 80126e6:	ea08 0807 	and.w	r8, r8, r7
 80126ea:	ea06 0608 	and.w	r6, r6, r8
 80126ee:	4006      	ands	r6, r0
 80126f0:	7a21      	ldrb	r1, [r4, #8]
 80126f2:	4628      	mov	r0, r5
 80126f4:	f7fc f924 	bl	800e940 <ucdr_serialize_bool>
 80126f8:	7a23      	ldrb	r3, [r4, #8]
 80126fa:	b2f7      	uxtb	r7, r6
 80126fc:	4606      	mov	r6, r0
 80126fe:	b96b      	cbnz	r3, 801271c <uxr_serialize_INFO_Payload+0x64>
 8012700:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8012704:	4628      	mov	r0, r5
 8012706:	f7fc f91b 	bl	800e940 <ucdr_serialize_bool>
 801270a:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801270e:	4030      	ands	r0, r6
 8012710:	b2c6      	uxtb	r6, r0
 8012712:	b983      	cbnz	r3, 8012736 <uxr_serialize_INFO_Payload+0x7e>
 8012714:	ea06 0007 	and.w	r0, r6, r7
 8012718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801271c:	7b21      	ldrb	r1, [r4, #12]
 801271e:	4628      	mov	r0, r5
 8012720:	f7fc f93c 	bl	800e99c <ucdr_serialize_uint8_t>
 8012724:	b188      	cbz	r0, 801274a <uxr_serialize_INFO_Payload+0x92>
 8012726:	f104 010c 	add.w	r1, r4, #12
 801272a:	4628      	mov	r0, r5
 801272c:	f7ff fa06 	bl	8011b3c <uxr_serialize_ObjectVariant.part.0>
 8012730:	4030      	ands	r0, r6
 8012732:	b2c6      	uxtb	r6, r0
 8012734:	e7e4      	b.n	8012700 <uxr_serialize_INFO_Payload+0x48>
 8012736:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 801273a:	4628      	mov	r0, r5
 801273c:	f7ff fdb2 	bl	80122a4 <uxr_serialize_ActivityInfoVariant>
 8012740:	4006      	ands	r6, r0
 8012742:	ea06 0007 	and.w	r0, r6, r7
 8012746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801274a:	4606      	mov	r6, r0
 801274c:	e7d8      	b.n	8012700 <uxr_serialize_INFO_Payload+0x48>
 801274e:	bf00      	nop

08012750 <uxr_serialize_READ_DATA_Payload>:
 8012750:	b570      	push	{r4, r5, r6, lr}
 8012752:	2202      	movs	r2, #2
 8012754:	4605      	mov	r5, r0
 8012756:	460e      	mov	r6, r1
 8012758:	f004 fe0e 	bl	8017378 <ucdr_serialize_array_uint8_t>
 801275c:	2202      	movs	r2, #2
 801275e:	18b1      	adds	r1, r6, r2
 8012760:	4604      	mov	r4, r0
 8012762:	4628      	mov	r0, r5
 8012764:	f004 fe08 	bl	8017378 <ucdr_serialize_array_uint8_t>
 8012768:	1d31      	adds	r1, r6, #4
 801276a:	4004      	ands	r4, r0
 801276c:	4628      	mov	r0, r5
 801276e:	f7ff fe5d 	bl	801242c <uxr_serialize_ReadSpecification>
 8012772:	b2e4      	uxtb	r4, r4
 8012774:	4020      	ands	r0, r4
 8012776:	bd70      	pop	{r4, r5, r6, pc}

08012778 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8012778:	b570      	push	{r4, r5, r6, lr}
 801277a:	2202      	movs	r2, #2
 801277c:	4605      	mov	r5, r0
 801277e:	460e      	mov	r6, r1
 8012780:	f004 fdfa 	bl	8017378 <ucdr_serialize_array_uint8_t>
 8012784:	2202      	movs	r2, #2
 8012786:	4604      	mov	r4, r0
 8012788:	18b1      	adds	r1, r6, r2
 801278a:	4628      	mov	r0, r5
 801278c:	f004 fdf4 	bl	8017378 <ucdr_serialize_array_uint8_t>
 8012790:	4020      	ands	r0, r4
 8012792:	b2c0      	uxtb	r0, r0
 8012794:	bd70      	pop	{r4, r5, r6, pc}
 8012796:	bf00      	nop

08012798 <uxr_serialize_ACKNACK_Payload>:
 8012798:	b570      	push	{r4, r5, r6, lr}
 801279a:	460c      	mov	r4, r1
 801279c:	460e      	mov	r6, r1
 801279e:	f834 1b02 	ldrh.w	r1, [r4], #2
 80127a2:	4605      	mov	r5, r0
 80127a4:	f7fc f926 	bl	800e9f4 <ucdr_serialize_uint16_t>
 80127a8:	2202      	movs	r2, #2
 80127aa:	4621      	mov	r1, r4
 80127ac:	4604      	mov	r4, r0
 80127ae:	4628      	mov	r0, r5
 80127b0:	f004 fde2 	bl	8017378 <ucdr_serialize_array_uint8_t>
 80127b4:	7931      	ldrb	r1, [r6, #4]
 80127b6:	4004      	ands	r4, r0
 80127b8:	4628      	mov	r0, r5
 80127ba:	f7fc f8ef 	bl	800e99c <ucdr_serialize_uint8_t>
 80127be:	b2e4      	uxtb	r4, r4
 80127c0:	4020      	ands	r0, r4
 80127c2:	bd70      	pop	{r4, r5, r6, pc}

080127c4 <uxr_deserialize_ACKNACK_Payload>:
 80127c4:	b570      	push	{r4, r5, r6, lr}
 80127c6:	4605      	mov	r5, r0
 80127c8:	460e      	mov	r6, r1
 80127ca:	f7fc fa13 	bl	800ebf4 <ucdr_deserialize_uint16_t>
 80127ce:	2202      	movs	r2, #2
 80127d0:	18b1      	adds	r1, r6, r2
 80127d2:	4604      	mov	r4, r0
 80127d4:	4628      	mov	r0, r5
 80127d6:	f004 fe33 	bl	8017440 <ucdr_deserialize_array_uint8_t>
 80127da:	1d31      	adds	r1, r6, #4
 80127dc:	4004      	ands	r4, r0
 80127de:	4628      	mov	r0, r5
 80127e0:	f7fc f8f2 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 80127e4:	b2e4      	uxtb	r4, r4
 80127e6:	4020      	ands	r0, r4
 80127e8:	bd70      	pop	{r4, r5, r6, pc}
 80127ea:	bf00      	nop

080127ec <uxr_serialize_HEARTBEAT_Payload>:
 80127ec:	b570      	push	{r4, r5, r6, lr}
 80127ee:	460d      	mov	r5, r1
 80127f0:	8809      	ldrh	r1, [r1, #0]
 80127f2:	4606      	mov	r6, r0
 80127f4:	f7fc f8fe 	bl	800e9f4 <ucdr_serialize_uint16_t>
 80127f8:	8869      	ldrh	r1, [r5, #2]
 80127fa:	4604      	mov	r4, r0
 80127fc:	4630      	mov	r0, r6
 80127fe:	f7fc f8f9 	bl	800e9f4 <ucdr_serialize_uint16_t>
 8012802:	7929      	ldrb	r1, [r5, #4]
 8012804:	4004      	ands	r4, r0
 8012806:	4630      	mov	r0, r6
 8012808:	f7fc f8c8 	bl	800e99c <ucdr_serialize_uint8_t>
 801280c:	b2e4      	uxtb	r4, r4
 801280e:	4020      	ands	r0, r4
 8012810:	bd70      	pop	{r4, r5, r6, pc}
 8012812:	bf00      	nop

08012814 <uxr_deserialize_HEARTBEAT_Payload>:
 8012814:	b570      	push	{r4, r5, r6, lr}
 8012816:	4605      	mov	r5, r0
 8012818:	460e      	mov	r6, r1
 801281a:	f7fc f9eb 	bl	800ebf4 <ucdr_deserialize_uint16_t>
 801281e:	1cb1      	adds	r1, r6, #2
 8012820:	4604      	mov	r4, r0
 8012822:	4628      	mov	r0, r5
 8012824:	f7fc f9e6 	bl	800ebf4 <ucdr_deserialize_uint16_t>
 8012828:	1d31      	adds	r1, r6, #4
 801282a:	4004      	ands	r4, r0
 801282c:	4628      	mov	r0, r5
 801282e:	f7fc f8cb 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 8012832:	b2e4      	uxtb	r4, r4
 8012834:	4020      	ands	r0, r4
 8012836:	bd70      	pop	{r4, r5, r6, pc}

08012838 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8012838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801283c:	4605      	mov	r5, r0
 801283e:	460e      	mov	r6, r1
 8012840:	f7fc ff74 	bl	800f72c <ucdr_deserialize_int32_t>
 8012844:	1d31      	adds	r1, r6, #4
 8012846:	4607      	mov	r7, r0
 8012848:	4628      	mov	r0, r5
 801284a:	f7fc fbed 	bl	800f028 <ucdr_deserialize_uint32_t>
 801284e:	f106 0108 	add.w	r1, r6, #8
 8012852:	4680      	mov	r8, r0
 8012854:	4628      	mov	r0, r5
 8012856:	f7fc ff69 	bl	800f72c <ucdr_deserialize_int32_t>
 801285a:	f106 010c 	add.w	r1, r6, #12
 801285e:	4604      	mov	r4, r0
 8012860:	4628      	mov	r0, r5
 8012862:	f7fc fbe1 	bl	800f028 <ucdr_deserialize_uint32_t>
 8012866:	ea07 0708 	and.w	r7, r7, r8
 801286a:	403c      	ands	r4, r7
 801286c:	f106 0110 	add.w	r1, r6, #16
 8012870:	4004      	ands	r4, r0
 8012872:	4628      	mov	r0, r5
 8012874:	f7fc ff5a 	bl	800f72c <ucdr_deserialize_int32_t>
 8012878:	f106 0114 	add.w	r1, r6, #20
 801287c:	4607      	mov	r7, r0
 801287e:	4628      	mov	r0, r5
 8012880:	f7fc fbd2 	bl	800f028 <ucdr_deserialize_uint32_t>
 8012884:	b2e4      	uxtb	r4, r4
 8012886:	403c      	ands	r4, r7
 8012888:	4020      	ands	r0, r4
 801288a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801288e:	bf00      	nop

08012890 <uxr_serialize_SampleIdentity>:
 8012890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012894:	220c      	movs	r2, #12
 8012896:	4604      	mov	r4, r0
 8012898:	460d      	mov	r5, r1
 801289a:	f004 fd6d 	bl	8017378 <ucdr_serialize_array_uint8_t>
 801289e:	2203      	movs	r2, #3
 80128a0:	f105 010c 	add.w	r1, r5, #12
 80128a4:	4607      	mov	r7, r0
 80128a6:	4620      	mov	r0, r4
 80128a8:	f004 fd66 	bl	8017378 <ucdr_serialize_array_uint8_t>
 80128ac:	7be9      	ldrb	r1, [r5, #15]
 80128ae:	4680      	mov	r8, r0
 80128b0:	4620      	mov	r0, r4
 80128b2:	f7fc f873 	bl	800e99c <ucdr_serialize_uint8_t>
 80128b6:	6929      	ldr	r1, [r5, #16]
 80128b8:	4606      	mov	r6, r0
 80128ba:	4620      	mov	r0, r4
 80128bc:	f7fc fe9e 	bl	800f5fc <ucdr_serialize_int32_t>
 80128c0:	6969      	ldr	r1, [r5, #20]
 80128c2:	4603      	mov	r3, r0
 80128c4:	4620      	mov	r0, r4
 80128c6:	ea07 0708 	and.w	r7, r7, r8
 80128ca:	461c      	mov	r4, r3
 80128cc:	f7fc fa7c 	bl	800edc8 <ucdr_serialize_uint32_t>
 80128d0:	403e      	ands	r6, r7
 80128d2:	4034      	ands	r4, r6
 80128d4:	4020      	ands	r0, r4
 80128d6:	b2c0      	uxtb	r0, r0
 80128d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080128dc <uxr_deserialize_SampleIdentity>:
 80128dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128e0:	220c      	movs	r2, #12
 80128e2:	4604      	mov	r4, r0
 80128e4:	460d      	mov	r5, r1
 80128e6:	f004 fdab 	bl	8017440 <ucdr_deserialize_array_uint8_t>
 80128ea:	2203      	movs	r2, #3
 80128ec:	f105 010c 	add.w	r1, r5, #12
 80128f0:	4607      	mov	r7, r0
 80128f2:	4620      	mov	r0, r4
 80128f4:	f004 fda4 	bl	8017440 <ucdr_deserialize_array_uint8_t>
 80128f8:	f105 010f 	add.w	r1, r5, #15
 80128fc:	4680      	mov	r8, r0
 80128fe:	4620      	mov	r0, r4
 8012900:	f7fc f862 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 8012904:	f105 0110 	add.w	r1, r5, #16
 8012908:	4606      	mov	r6, r0
 801290a:	4620      	mov	r0, r4
 801290c:	f7fc ff0e 	bl	800f72c <ucdr_deserialize_int32_t>
 8012910:	f105 0114 	add.w	r1, r5, #20
 8012914:	4603      	mov	r3, r0
 8012916:	4620      	mov	r0, r4
 8012918:	ea07 0708 	and.w	r7, r7, r8
 801291c:	461c      	mov	r4, r3
 801291e:	f7fc fb83 	bl	800f028 <ucdr_deserialize_uint32_t>
 8012922:	403e      	ands	r6, r7
 8012924:	4034      	ands	r4, r6
 8012926:	4020      	ands	r0, r4
 8012928:	b2c0      	uxtb	r0, r0
 801292a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801292e:	bf00      	nop

08012930 <rcl_client_get_rmw_handle>:
 8012930:	b118      	cbz	r0, 801293a <rcl_client_get_rmw_handle+0xa>
 8012932:	6800      	ldr	r0, [r0, #0]
 8012934:	b108      	cbz	r0, 801293a <rcl_client_get_rmw_handle+0xa>
 8012936:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801293a:	4770      	bx	lr

0801293c <rcl_send_request>:
 801293c:	b570      	push	{r4, r5, r6, lr}
 801293e:	b082      	sub	sp, #8
 8012940:	b1e8      	cbz	r0, 801297e <rcl_send_request+0x42>
 8012942:	4604      	mov	r4, r0
 8012944:	6800      	ldr	r0, [r0, #0]
 8012946:	b1d0      	cbz	r0, 801297e <rcl_send_request+0x42>
 8012948:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 801294c:	b1bb      	cbz	r3, 801297e <rcl_send_request+0x42>
 801294e:	460e      	mov	r6, r1
 8012950:	b1d1      	cbz	r1, 8012988 <rcl_send_request+0x4c>
 8012952:	4615      	mov	r5, r2
 8012954:	b1c2      	cbz	r2, 8012988 <rcl_send_request+0x4c>
 8012956:	2105      	movs	r1, #5
 8012958:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801295c:	f002 fd70 	bl	8015440 <__atomic_load_8>
 8012960:	6823      	ldr	r3, [r4, #0]
 8012962:	e9c5 0100 	strd	r0, r1, [r5]
 8012966:	462a      	mov	r2, r5
 8012968:	4631      	mov	r1, r6
 801296a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801296e:	f003 ff1b 	bl	80167a8 <rmw_send_request>
 8012972:	4606      	mov	r6, r0
 8012974:	b160      	cbz	r0, 8012990 <rcl_send_request+0x54>
 8012976:	2601      	movs	r6, #1
 8012978:	4630      	mov	r0, r6
 801297a:	b002      	add	sp, #8
 801297c:	bd70      	pop	{r4, r5, r6, pc}
 801297e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8012982:	4630      	mov	r0, r6
 8012984:	b002      	add	sp, #8
 8012986:	bd70      	pop	{r4, r5, r6, pc}
 8012988:	260b      	movs	r6, #11
 801298a:	4630      	mov	r0, r6
 801298c:	b002      	add	sp, #8
 801298e:	bd70      	pop	{r4, r5, r6, pc}
 8012990:	6820      	ldr	r0, [r4, #0]
 8012992:	2105      	movs	r1, #5
 8012994:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012998:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801299c:	9100      	str	r1, [sp, #0]
 801299e:	f002 fdbb 	bl	8015518 <__atomic_exchange_8>
 80129a2:	4630      	mov	r0, r6
 80129a4:	b002      	add	sp, #8
 80129a6:	bd70      	pop	{r4, r5, r6, pc}

080129a8 <rcl_take_response>:
 80129a8:	b570      	push	{r4, r5, r6, lr}
 80129aa:	468e      	mov	lr, r1
 80129ac:	460c      	mov	r4, r1
 80129ae:	4616      	mov	r6, r2
 80129b0:	4605      	mov	r5, r0
 80129b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80129b6:	b08c      	sub	sp, #48	@ 0x30
 80129b8:	f10d 0c18 	add.w	ip, sp, #24
 80129bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80129c0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80129c4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80129c8:	b35d      	cbz	r5, 8012a22 <rcl_take_response+0x7a>
 80129ca:	682b      	ldr	r3, [r5, #0]
 80129cc:	b34b      	cbz	r3, 8012a22 <rcl_take_response+0x7a>
 80129ce:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80129d2:	b330      	cbz	r0, 8012a22 <rcl_take_response+0x7a>
 80129d4:	b346      	cbz	r6, 8012a28 <rcl_take_response+0x80>
 80129d6:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8012a30 <rcl_take_response+0x88>
 80129da:	2300      	movs	r3, #0
 80129dc:	f88d 3007 	strb.w	r3, [sp, #7]
 80129e0:	4632      	mov	r2, r6
 80129e2:	f10d 0307 	add.w	r3, sp, #7
 80129e6:	a902      	add	r1, sp, #8
 80129e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80129ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 80129f0:	f003 ffe2 	bl	80169b8 <rmw_take_response>
 80129f4:	4605      	mov	r5, r0
 80129f6:	b9c8      	cbnz	r0, 8012a2c <rcl_take_response+0x84>
 80129f8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80129fc:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8012a00:	2a00      	cmp	r2, #0
 8012a02:	bf08      	it	eq
 8012a04:	461d      	moveq	r5, r3
 8012a06:	f10d 0e18 	add.w	lr, sp, #24
 8012a0a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012a0e:	46a4      	mov	ip, r4
 8012a10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012a14:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012a18:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012a1c:	4628      	mov	r0, r5
 8012a1e:	b00c      	add	sp, #48	@ 0x30
 8012a20:	bd70      	pop	{r4, r5, r6, pc}
 8012a22:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8012a26:	e7ee      	b.n	8012a06 <rcl_take_response+0x5e>
 8012a28:	250b      	movs	r5, #11
 8012a2a:	e7ec      	b.n	8012a06 <rcl_take_response+0x5e>
 8012a2c:	2501      	movs	r5, #1
 8012a2e:	e7ea      	b.n	8012a06 <rcl_take_response+0x5e>
	...

08012a38 <rcl_client_is_valid>:
 8012a38:	b130      	cbz	r0, 8012a48 <rcl_client_is_valid+0x10>
 8012a3a:	6800      	ldr	r0, [r0, #0]
 8012a3c:	b120      	cbz	r0, 8012a48 <rcl_client_is_valid+0x10>
 8012a3e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012a42:	3800      	subs	r0, #0
 8012a44:	bf18      	it	ne
 8012a46:	2001      	movne	r0, #1
 8012a48:	4770      	bx	lr
 8012a4a:	bf00      	nop

08012a4c <rcl_convert_rmw_ret_to_rcl_ret>:
 8012a4c:	280b      	cmp	r0, #11
 8012a4e:	dc0d      	bgt.n	8012a6c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8012a50:	2800      	cmp	r0, #0
 8012a52:	db09      	blt.n	8012a68 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012a54:	280b      	cmp	r0, #11
 8012a56:	d807      	bhi.n	8012a68 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012a58:	e8df f000 	tbb	[pc, r0]
 8012a5c:	07060607 	.word	0x07060607
 8012a60:	06060606 	.word	0x06060606
 8012a64:	07070606 	.word	0x07070606
 8012a68:	2001      	movs	r0, #1
 8012a6a:	4770      	bx	lr
 8012a6c:	28cb      	cmp	r0, #203	@ 0xcb
 8012a6e:	bf18      	it	ne
 8012a70:	2001      	movne	r0, #1
 8012a72:	4770      	bx	lr

08012a74 <rcl_get_zero_initialized_context>:
 8012a74:	4a03      	ldr	r2, [pc, #12]	@ (8012a84 <rcl_get_zero_initialized_context+0x10>)
 8012a76:	4603      	mov	r3, r0
 8012a78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012a7c:	e883 0003 	stmia.w	r3, {r0, r1}
 8012a80:	4618      	mov	r0, r3
 8012a82:	4770      	bx	lr
 8012a84:	080200b4 	.word	0x080200b4

08012a88 <rcl_context_is_valid>:
 8012a88:	b118      	cbz	r0, 8012a92 <rcl_context_is_valid+0xa>
 8012a8a:	6840      	ldr	r0, [r0, #4]
 8012a8c:	3800      	subs	r0, #0
 8012a8e:	bf18      	it	ne
 8012a90:	2001      	movne	r0, #1
 8012a92:	4770      	bx	lr

08012a94 <__cleanup_context>:
 8012a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a98:	4606      	mov	r6, r0
 8012a9a:	6800      	ldr	r0, [r0, #0]
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	6073      	str	r3, [r6, #4]
 8012aa0:	2800      	cmp	r0, #0
 8012aa2:	d049      	beq.n	8012b38 <__cleanup_context+0xa4>
 8012aa4:	6947      	ldr	r7, [r0, #20]
 8012aa6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8012aaa:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8012aae:	b137      	cbz	r7, 8012abe <__cleanup_context+0x2a>
 8012ab0:	3014      	adds	r0, #20
 8012ab2:	f000 f9bb 	bl	8012e2c <rcl_init_options_fini>
 8012ab6:	4607      	mov	r7, r0
 8012ab8:	2800      	cmp	r0, #0
 8012aba:	d144      	bne.n	8012b46 <__cleanup_context+0xb2>
 8012abc:	6830      	ldr	r0, [r6, #0]
 8012abe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012ac0:	b143      	cbz	r3, 8012ad4 <__cleanup_context+0x40>
 8012ac2:	3028      	adds	r0, #40	@ 0x28
 8012ac4:	f003 fcb8 	bl	8016438 <rmw_context_fini>
 8012ac8:	b118      	cbz	r0, 8012ad2 <__cleanup_context+0x3e>
 8012aca:	2f00      	cmp	r7, #0
 8012acc:	d03e      	beq.n	8012b4c <__cleanup_context+0xb8>
 8012ace:	f7fb f92b 	bl	800dd28 <rcutils_reset_error>
 8012ad2:	6830      	ldr	r0, [r6, #0]
 8012ad4:	6a03      	ldr	r3, [r0, #32]
 8012ad6:	b1db      	cbz	r3, 8012b10 <__cleanup_context+0x7c>
 8012ad8:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8012adc:	2a01      	cmp	r2, #1
 8012ade:	f17c 0100 	sbcs.w	r1, ip, #0
 8012ae2:	db11      	blt.n	8012b08 <__cleanup_context+0x74>
 8012ae4:	2400      	movs	r4, #0
 8012ae6:	4625      	mov	r5, r4
 8012ae8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012aec:	4649      	mov	r1, r9
 8012aee:	b1b8      	cbz	r0, 8012b20 <__cleanup_context+0x8c>
 8012af0:	47c0      	blx	r8
 8012af2:	6833      	ldr	r3, [r6, #0]
 8012af4:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8012af8:	3401      	adds	r4, #1
 8012afa:	f145 0500 	adc.w	r5, r5, #0
 8012afe:	4294      	cmp	r4, r2
 8012b00:	eb75 010c 	sbcs.w	r1, r5, ip
 8012b04:	6a1b      	ldr	r3, [r3, #32]
 8012b06:	dbef      	blt.n	8012ae8 <__cleanup_context+0x54>
 8012b08:	4618      	mov	r0, r3
 8012b0a:	4649      	mov	r1, r9
 8012b0c:	47c0      	blx	r8
 8012b0e:	6830      	ldr	r0, [r6, #0]
 8012b10:	4649      	mov	r1, r9
 8012b12:	47c0      	blx	r8
 8012b14:	2300      	movs	r3, #0
 8012b16:	e9c6 3300 	strd	r3, r3, [r6]
 8012b1a:	4638      	mov	r0, r7
 8012b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b20:	3401      	adds	r4, #1
 8012b22:	f145 0500 	adc.w	r5, r5, #0
 8012b26:	4294      	cmp	r4, r2
 8012b28:	eb75 010c 	sbcs.w	r1, r5, ip
 8012b2c:	dbdc      	blt.n	8012ae8 <__cleanup_context+0x54>
 8012b2e:	4618      	mov	r0, r3
 8012b30:	4649      	mov	r1, r9
 8012b32:	47c0      	blx	r8
 8012b34:	6830      	ldr	r0, [r6, #0]
 8012b36:	e7eb      	b.n	8012b10 <__cleanup_context+0x7c>
 8012b38:	4607      	mov	r7, r0
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	e9c6 3300 	strd	r3, r3, [r6]
 8012b40:	4638      	mov	r0, r7
 8012b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b46:	f7fb f8ef 	bl	800dd28 <rcutils_reset_error>
 8012b4a:	e7b7      	b.n	8012abc <__cleanup_context+0x28>
 8012b4c:	f7ff ff7e 	bl	8012a4c <rcl_convert_rmw_ret_to_rcl_ret>
 8012b50:	4607      	mov	r7, r0
 8012b52:	e7bc      	b.n	8012ace <__cleanup_context+0x3a>

08012b54 <rcl_init>:
 8012b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b58:	1e05      	subs	r5, r0, #0
 8012b5a:	b09e      	sub	sp, #120	@ 0x78
 8012b5c:	460e      	mov	r6, r1
 8012b5e:	4690      	mov	r8, r2
 8012b60:	461f      	mov	r7, r3
 8012b62:	f340 809c 	ble.w	8012c9e <rcl_init+0x14a>
 8012b66:	2900      	cmp	r1, #0
 8012b68:	f000 809c 	beq.w	8012ca4 <rcl_init+0x150>
 8012b6c:	f1a1 0e04 	sub.w	lr, r1, #4
 8012b70:	f04f 0c00 	mov.w	ip, #0
 8012b74:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8012b78:	f10c 0c01 	add.w	ip, ip, #1
 8012b7c:	2c00      	cmp	r4, #0
 8012b7e:	f000 8091 	beq.w	8012ca4 <rcl_init+0x150>
 8012b82:	4565      	cmp	r5, ip
 8012b84:	d1f6      	bne.n	8012b74 <rcl_init+0x20>
 8012b86:	f1b8 0f00 	cmp.w	r8, #0
 8012b8a:	f000 808b 	beq.w	8012ca4 <rcl_init+0x150>
 8012b8e:	f8d8 4000 	ldr.w	r4, [r8]
 8012b92:	2c00      	cmp	r4, #0
 8012b94:	f000 8086 	beq.w	8012ca4 <rcl_init+0x150>
 8012b98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012b9a:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8012b9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012ba2:	6823      	ldr	r3, [r4, #0]
 8012ba4:	f8cc 3000 	str.w	r3, [ip]
 8012ba8:	a819      	add	r0, sp, #100	@ 0x64
 8012baa:	f7fb f899 	bl	800dce0 <rcutils_allocator_is_valid>
 8012bae:	2800      	cmp	r0, #0
 8012bb0:	d078      	beq.n	8012ca4 <rcl_init+0x150>
 8012bb2:	2f00      	cmp	r7, #0
 8012bb4:	d076      	beq.n	8012ca4 <rcl_init+0x150>
 8012bb6:	683b      	ldr	r3, [r7, #0]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d178      	bne.n	8012cae <rcl_init+0x15a>
 8012bbc:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8012bc0:	2178      	movs	r1, #120	@ 0x78
 8012bc2:	2001      	movs	r0, #1
 8012bc4:	4798      	blx	r3
 8012bc6:	4604      	mov	r4, r0
 8012bc8:	6038      	str	r0, [r7, #0]
 8012bca:	2800      	cmp	r0, #0
 8012bcc:	f000 80b6 	beq.w	8012d3c <rcl_init+0x1e8>
 8012bd0:	a802      	add	r0, sp, #8
 8012bd2:	f002 ff85 	bl	8015ae0 <rmw_get_zero_initialized_context>
 8012bd6:	a902      	add	r1, sp, #8
 8012bd8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8012bdc:	2250      	movs	r2, #80	@ 0x50
 8012bde:	ac19      	add	r4, sp, #100	@ 0x64
 8012be0:	f008 fa09 	bl	801aff6 <memcpy>
 8012be4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012be6:	f8d7 e000 	ldr.w	lr, [r7]
 8012bea:	46f4      	mov	ip, lr
 8012bec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012bf0:	6823      	ldr	r3, [r4, #0]
 8012bf2:	f8cc 3000 	str.w	r3, [ip]
 8012bf6:	f10e 0114 	add.w	r1, lr, #20
 8012bfa:	4640      	mov	r0, r8
 8012bfc:	f000 f940 	bl	8012e80 <rcl_init_options_copy>
 8012c00:	4604      	mov	r4, r0
 8012c02:	2800      	cmp	r0, #0
 8012c04:	d144      	bne.n	8012c90 <rcl_init+0x13c>
 8012c06:	f8d7 9000 	ldr.w	r9, [r7]
 8012c0a:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8012c0e:	f8c9 0020 	str.w	r0, [r9, #32]
 8012c12:	f8c9 5018 	str.w	r5, [r9, #24]
 8012c16:	f8c9 801c 	str.w	r8, [r9, #28]
 8012c1a:	2d00      	cmp	r5, #0
 8012c1c:	d04e      	beq.n	8012cbc <rcl_init+0x168>
 8012c1e:	2e00      	cmp	r6, #0
 8012c20:	d04c      	beq.n	8012cbc <rcl_init+0x168>
 8012c22:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8012c26:	2104      	movs	r1, #4
 8012c28:	4628      	mov	r0, r5
 8012c2a:	4798      	blx	r3
 8012c2c:	f8c9 0020 	str.w	r0, [r9, #32]
 8012c30:	f8d7 9000 	ldr.w	r9, [r7]
 8012c34:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8012c38:	46ca      	mov	sl, r9
 8012c3a:	b343      	cbz	r3, 8012c8e <rcl_init+0x13a>
 8012c3c:	2d01      	cmp	r5, #1
 8012c3e:	f178 0300 	sbcs.w	r3, r8, #0
 8012c42:	db3b      	blt.n	8012cbc <rcl_init+0x168>
 8012c44:	2400      	movs	r4, #0
 8012c46:	3e04      	subs	r6, #4
 8012c48:	46a1      	mov	r9, r4
 8012c4a:	e00b      	b.n	8012c64 <rcl_init+0x110>
 8012c4c:	6831      	ldr	r1, [r6, #0]
 8012c4e:	f008 f9d2 	bl	801aff6 <memcpy>
 8012c52:	3401      	adds	r4, #1
 8012c54:	f149 0900 	adc.w	r9, r9, #0
 8012c58:	45c8      	cmp	r8, r9
 8012c5a:	bf08      	it	eq
 8012c5c:	42a5      	cmpeq	r5, r4
 8012c5e:	d02b      	beq.n	8012cb8 <rcl_init+0x164>
 8012c60:	f8d7 a000 	ldr.w	sl, [r7]
 8012c64:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8012c68:	f7ed fb1a 	bl	80002a0 <strlen>
 8012c6c:	1c42      	adds	r2, r0, #1
 8012c6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012c70:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8012c72:	f8da a020 	ldr.w	sl, [sl, #32]
 8012c76:	9201      	str	r2, [sp, #4]
 8012c78:	4610      	mov	r0, r2
 8012c7a:	4798      	blx	r3
 8012c7c:	683b      	ldr	r3, [r7, #0]
 8012c7e:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8012c82:	6a1b      	ldr	r3, [r3, #32]
 8012c84:	9a01      	ldr	r2, [sp, #4]
 8012c86:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012c8a:	2800      	cmp	r0, #0
 8012c8c:	d1de      	bne.n	8012c4c <rcl_init+0xf8>
 8012c8e:	240a      	movs	r4, #10
 8012c90:	4638      	mov	r0, r7
 8012c92:	f7ff feff 	bl	8012a94 <__cleanup_context>
 8012c96:	4620      	mov	r0, r4
 8012c98:	b01e      	add	sp, #120	@ 0x78
 8012c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c9e:	2900      	cmp	r1, #0
 8012ca0:	f43f af71 	beq.w	8012b86 <rcl_init+0x32>
 8012ca4:	240b      	movs	r4, #11
 8012ca6:	4620      	mov	r0, r4
 8012ca8:	b01e      	add	sp, #120	@ 0x78
 8012caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cae:	2464      	movs	r4, #100	@ 0x64
 8012cb0:	4620      	mov	r0, r4
 8012cb2:	b01e      	add	sp, #120	@ 0x78
 8012cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cb8:	f8d7 9000 	ldr.w	r9, [r7]
 8012cbc:	4926      	ldr	r1, [pc, #152]	@ (8012d58 <rcl_init+0x204>)
 8012cbe:	680b      	ldr	r3, [r1, #0]
 8012cc0:	3301      	adds	r3, #1
 8012cc2:	d036      	beq.n	8012d32 <rcl_init+0x1de>
 8012cc4:	600b      	str	r3, [r1, #0]
 8012cc6:	461a      	mov	r2, r3
 8012cc8:	2400      	movs	r4, #0
 8012cca:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8012cce:	607b      	str	r3, [r7, #4]
 8012cd0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8012cd2:	3301      	adds	r3, #1
 8012cd4:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8012cd8:	d034      	beq.n	8012d44 <rcl_init+0x1f0>
 8012cda:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8012cde:	b93b      	cbnz	r3, 8012cf0 <rcl_init+0x19c>
 8012ce0:	3030      	adds	r0, #48	@ 0x30
 8012ce2:	f000 f939 	bl	8012f58 <rcl_get_localhost_only>
 8012ce6:	4604      	mov	r4, r0
 8012ce8:	2800      	cmp	r0, #0
 8012cea:	d1d1      	bne.n	8012c90 <rcl_init+0x13c>
 8012cec:	683b      	ldr	r3, [r7, #0]
 8012cee:	6958      	ldr	r0, [r3, #20]
 8012cf0:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8012cf2:	aa18      	add	r2, sp, #96	@ 0x60
 8012cf4:	a917      	add	r1, sp, #92	@ 0x5c
 8012cf6:	f001 f841 	bl	8013d7c <rcl_validate_enclave_name>
 8012cfa:	4604      	mov	r4, r0
 8012cfc:	2800      	cmp	r0, #0
 8012cfe:	d1c7      	bne.n	8012c90 <rcl_init+0x13c>
 8012d00:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012d02:	b9eb      	cbnz	r3, 8012d40 <rcl_init+0x1ec>
 8012d04:	6839      	ldr	r1, [r7, #0]
 8012d06:	694b      	ldr	r3, [r1, #20]
 8012d08:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8012d0a:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8012d0e:	f000 fc3d 	bl	801358c <rcl_get_security_options_from_environment>
 8012d12:	4604      	mov	r4, r0
 8012d14:	2800      	cmp	r0, #0
 8012d16:	d1bb      	bne.n	8012c90 <rcl_init+0x13c>
 8012d18:	6839      	ldr	r1, [r7, #0]
 8012d1a:	6948      	ldr	r0, [r1, #20]
 8012d1c:	3128      	adds	r1, #40	@ 0x28
 8012d1e:	3018      	adds	r0, #24
 8012d20:	f003 fa54 	bl	80161cc <rmw_init>
 8012d24:	4604      	mov	r4, r0
 8012d26:	2800      	cmp	r0, #0
 8012d28:	d0bd      	beq.n	8012ca6 <rcl_init+0x152>
 8012d2a:	f7ff fe8f 	bl	8012a4c <rcl_convert_rmw_ret_to_rcl_ret>
 8012d2e:	4604      	mov	r4, r0
 8012d30:	e7ae      	b.n	8012c90 <rcl_init+0x13c>
 8012d32:	2201      	movs	r2, #1
 8012d34:	461c      	mov	r4, r3
 8012d36:	600a      	str	r2, [r1, #0]
 8012d38:	4613      	mov	r3, r2
 8012d3a:	e7c6      	b.n	8012cca <rcl_init+0x176>
 8012d3c:	240a      	movs	r4, #10
 8012d3e:	e7b2      	b.n	8012ca6 <rcl_init+0x152>
 8012d40:	2401      	movs	r4, #1
 8012d42:	e7a5      	b.n	8012c90 <rcl_init+0x13c>
 8012d44:	3024      	adds	r0, #36	@ 0x24
 8012d46:	f006 f83b 	bl	8018dc0 <rcl_get_default_domain_id>
 8012d4a:	4604      	mov	r4, r0
 8012d4c:	2800      	cmp	r0, #0
 8012d4e:	d19f      	bne.n	8012c90 <rcl_init+0x13c>
 8012d50:	683b      	ldr	r3, [r7, #0]
 8012d52:	6958      	ldr	r0, [r3, #20]
 8012d54:	e7c1      	b.n	8012cda <rcl_init+0x186>
 8012d56:	bf00      	nop
 8012d58:	20011afc 	.word	0x20011afc

08012d5c <rcl_get_zero_initialized_init_options>:
 8012d5c:	2000      	movs	r0, #0
 8012d5e:	4770      	bx	lr

08012d60 <rcl_init_options_init>:
 8012d60:	b084      	sub	sp, #16
 8012d62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d64:	b097      	sub	sp, #92	@ 0x5c
 8012d66:	ae1d      	add	r6, sp, #116	@ 0x74
 8012d68:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8012d6c:	2800      	cmp	r0, #0
 8012d6e:	d058      	beq.n	8012e22 <rcl_init_options_init+0xc2>
 8012d70:	6803      	ldr	r3, [r0, #0]
 8012d72:	4605      	mov	r5, r0
 8012d74:	b133      	cbz	r3, 8012d84 <rcl_init_options_init+0x24>
 8012d76:	2464      	movs	r4, #100	@ 0x64
 8012d78:	4620      	mov	r0, r4
 8012d7a:	b017      	add	sp, #92	@ 0x5c
 8012d7c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012d80:	b004      	add	sp, #16
 8012d82:	4770      	bx	lr
 8012d84:	4630      	mov	r0, r6
 8012d86:	f7fa ffab 	bl	800dce0 <rcutils_allocator_is_valid>
 8012d8a:	2800      	cmp	r0, #0
 8012d8c:	d049      	beq.n	8012e22 <rcl_init_options_init+0xc2>
 8012d8e:	46b4      	mov	ip, r6
 8012d90:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012d94:	ac11      	add	r4, sp, #68	@ 0x44
 8012d96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012d98:	f8dc 3000 	ldr.w	r3, [ip]
 8012d9c:	6023      	str	r3, [r4, #0]
 8012d9e:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8012da0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012da2:	2050      	movs	r0, #80	@ 0x50
 8012da4:	4798      	blx	r3
 8012da6:	4604      	mov	r4, r0
 8012da8:	6028      	str	r0, [r5, #0]
 8012daa:	2800      	cmp	r0, #0
 8012dac:	d03b      	beq.n	8012e26 <rcl_init_options_init+0xc6>
 8012dae:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8012db2:	4686      	mov	lr, r0
 8012db4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012db8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012dbc:	f8dc 3000 	ldr.w	r3, [ip]
 8012dc0:	f8ce 3000 	str.w	r3, [lr]
 8012dc4:	a802      	add	r0, sp, #8
 8012dc6:	f002 fe9b 	bl	8015b00 <rmw_get_zero_initialized_init_options>
 8012dca:	f10d 0e08 	add.w	lr, sp, #8
 8012dce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012dd2:	f104 0c18 	add.w	ip, r4, #24
 8012dd6:	682f      	ldr	r7, [r5, #0]
 8012dd8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012ddc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012de0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012de4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012de8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012dec:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012df0:	ac20      	add	r4, sp, #128	@ 0x80
 8012df2:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012df6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012dfa:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012dfe:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8012e02:	f107 0018 	add.w	r0, r7, #24
 8012e06:	f003 f8e9 	bl	8015fdc <rmw_init_options_init>
 8012e0a:	4604      	mov	r4, r0
 8012e0c:	2800      	cmp	r0, #0
 8012e0e:	d0b3      	beq.n	8012d78 <rcl_init_options_init+0x18>
 8012e10:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8012e12:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8012e14:	6828      	ldr	r0, [r5, #0]
 8012e16:	4798      	blx	r3
 8012e18:	4620      	mov	r0, r4
 8012e1a:	f7ff fe17 	bl	8012a4c <rcl_convert_rmw_ret_to_rcl_ret>
 8012e1e:	4604      	mov	r4, r0
 8012e20:	e7aa      	b.n	8012d78 <rcl_init_options_init+0x18>
 8012e22:	240b      	movs	r4, #11
 8012e24:	e7a8      	b.n	8012d78 <rcl_init_options_init+0x18>
 8012e26:	240a      	movs	r4, #10
 8012e28:	e7a6      	b.n	8012d78 <rcl_init_options_init+0x18>
 8012e2a:	bf00      	nop

08012e2c <rcl_init_options_fini>:
 8012e2c:	b530      	push	{r4, r5, lr}
 8012e2e:	b087      	sub	sp, #28
 8012e30:	b1f0      	cbz	r0, 8012e70 <rcl_init_options_fini+0x44>
 8012e32:	6803      	ldr	r3, [r0, #0]
 8012e34:	4604      	mov	r4, r0
 8012e36:	b1db      	cbz	r3, 8012e70 <rcl_init_options_fini+0x44>
 8012e38:	469c      	mov	ip, r3
 8012e3a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012e3e:	f10d 0e04 	add.w	lr, sp, #4
 8012e42:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012e46:	f8dc 3000 	ldr.w	r3, [ip]
 8012e4a:	f8ce 3000 	str.w	r3, [lr]
 8012e4e:	a801      	add	r0, sp, #4
 8012e50:	f7fa ff46 	bl	800dce0 <rcutils_allocator_is_valid>
 8012e54:	b160      	cbz	r0, 8012e70 <rcl_init_options_fini+0x44>
 8012e56:	6820      	ldr	r0, [r4, #0]
 8012e58:	3018      	adds	r0, #24
 8012e5a:	f003 f96f 	bl	801613c <rmw_init_options_fini>
 8012e5e:	4605      	mov	r5, r0
 8012e60:	b950      	cbnz	r0, 8012e78 <rcl_init_options_fini+0x4c>
 8012e62:	6820      	ldr	r0, [r4, #0]
 8012e64:	9b02      	ldr	r3, [sp, #8]
 8012e66:	9905      	ldr	r1, [sp, #20]
 8012e68:	4798      	blx	r3
 8012e6a:	4628      	mov	r0, r5
 8012e6c:	b007      	add	sp, #28
 8012e6e:	bd30      	pop	{r4, r5, pc}
 8012e70:	250b      	movs	r5, #11
 8012e72:	4628      	mov	r0, r5
 8012e74:	b007      	add	sp, #28
 8012e76:	bd30      	pop	{r4, r5, pc}
 8012e78:	f7ff fde8 	bl	8012a4c <rcl_convert_rmw_ret_to_rcl_ret>
 8012e7c:	4605      	mov	r5, r0
 8012e7e:	e7f8      	b.n	8012e72 <rcl_init_options_fini+0x46>

08012e80 <rcl_init_options_copy>:
 8012e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e84:	b094      	sub	sp, #80	@ 0x50
 8012e86:	2800      	cmp	r0, #0
 8012e88:	d058      	beq.n	8012f3c <rcl_init_options_copy+0xbc>
 8012e8a:	4604      	mov	r4, r0
 8012e8c:	6800      	ldr	r0, [r0, #0]
 8012e8e:	2800      	cmp	r0, #0
 8012e90:	d054      	beq.n	8012f3c <rcl_init_options_copy+0xbc>
 8012e92:	460e      	mov	r6, r1
 8012e94:	f7fa ff24 	bl	800dce0 <rcutils_allocator_is_valid>
 8012e98:	2800      	cmp	r0, #0
 8012e9a:	d04f      	beq.n	8012f3c <rcl_init_options_copy+0xbc>
 8012e9c:	2e00      	cmp	r6, #0
 8012e9e:	d04d      	beq.n	8012f3c <rcl_init_options_copy+0xbc>
 8012ea0:	6833      	ldr	r3, [r6, #0]
 8012ea2:	b123      	cbz	r3, 8012eae <rcl_init_options_copy+0x2e>
 8012ea4:	2464      	movs	r4, #100	@ 0x64
 8012ea6:	4620      	mov	r0, r4
 8012ea8:	b014      	add	sp, #80	@ 0x50
 8012eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012eae:	6827      	ldr	r7, [r4, #0]
 8012eb0:	46bc      	mov	ip, r7
 8012eb2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012eb6:	ad0f      	add	r5, sp, #60	@ 0x3c
 8012eb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012eba:	f8dc 3000 	ldr.w	r3, [ip]
 8012ebe:	f8d7 8000 	ldr.w	r8, [r7]
 8012ec2:	602b      	str	r3, [r5, #0]
 8012ec4:	4619      	mov	r1, r3
 8012ec6:	2050      	movs	r0, #80	@ 0x50
 8012ec8:	47c0      	blx	r8
 8012eca:	4605      	mov	r5, r0
 8012ecc:	6030      	str	r0, [r6, #0]
 8012ece:	b3d0      	cbz	r0, 8012f46 <rcl_init_options_copy+0xc6>
 8012ed0:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8012ed4:	4686      	mov	lr, r0
 8012ed6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012eda:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012ede:	f8dc 3000 	ldr.w	r3, [ip]
 8012ee2:	f8ce 3000 	str.w	r3, [lr]
 8012ee6:	4668      	mov	r0, sp
 8012ee8:	f002 fe0a 	bl	8015b00 <rmw_get_zero_initialized_init_options>
 8012eec:	46ee      	mov	lr, sp
 8012eee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012ef2:	f105 0c18 	add.w	ip, r5, #24
 8012ef6:	6824      	ldr	r4, [r4, #0]
 8012ef8:	6835      	ldr	r5, [r6, #0]
 8012efa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012efe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012f02:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012f06:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012f0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012f0e:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012f12:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012f16:	f104 0018 	add.w	r0, r4, #24
 8012f1a:	f105 0118 	add.w	r1, r5, #24
 8012f1e:	f003 f8c5 	bl	80160ac <rmw_init_options_copy>
 8012f22:	4604      	mov	r4, r0
 8012f24:	2800      	cmp	r0, #0
 8012f26:	d0be      	beq.n	8012ea6 <rcl_init_options_copy+0x26>
 8012f28:	f7fa fee8 	bl	800dcfc <rcutils_get_error_string>
 8012f2c:	f7fa fefc 	bl	800dd28 <rcutils_reset_error>
 8012f30:	4630      	mov	r0, r6
 8012f32:	f7ff ff7b 	bl	8012e2c <rcl_init_options_fini>
 8012f36:	b140      	cbz	r0, 8012f4a <rcl_init_options_copy+0xca>
 8012f38:	4604      	mov	r4, r0
 8012f3a:	e7b4      	b.n	8012ea6 <rcl_init_options_copy+0x26>
 8012f3c:	240b      	movs	r4, #11
 8012f3e:	4620      	mov	r0, r4
 8012f40:	b014      	add	sp, #80	@ 0x50
 8012f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f46:	240a      	movs	r4, #10
 8012f48:	e7ad      	b.n	8012ea6 <rcl_init_options_copy+0x26>
 8012f4a:	4620      	mov	r0, r4
 8012f4c:	b014      	add	sp, #80	@ 0x50
 8012f4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f52:	f7ff bd7b 	b.w	8012a4c <rcl_convert_rmw_ret_to_rcl_ret>
 8012f56:	bf00      	nop

08012f58 <rcl_get_localhost_only>:
 8012f58:	b510      	push	{r4, lr}
 8012f5a:	b082      	sub	sp, #8
 8012f5c:	2300      	movs	r3, #0
 8012f5e:	9301      	str	r3, [sp, #4]
 8012f60:	b1b8      	cbz	r0, 8012f92 <rcl_get_localhost_only+0x3a>
 8012f62:	4604      	mov	r4, r0
 8012f64:	a901      	add	r1, sp, #4
 8012f66:	480c      	ldr	r0, [pc, #48]	@ (8012f98 <rcl_get_localhost_only+0x40>)
 8012f68:	f002 fb0e 	bl	8015588 <rcutils_get_env>
 8012f6c:	b110      	cbz	r0, 8012f74 <rcl_get_localhost_only+0x1c>
 8012f6e:	2001      	movs	r0, #1
 8012f70:	b002      	add	sp, #8
 8012f72:	bd10      	pop	{r4, pc}
 8012f74:	9b01      	ldr	r3, [sp, #4]
 8012f76:	b113      	cbz	r3, 8012f7e <rcl_get_localhost_only+0x26>
 8012f78:	781a      	ldrb	r2, [r3, #0]
 8012f7a:	2a31      	cmp	r2, #49	@ 0x31
 8012f7c:	d004      	beq.n	8012f88 <rcl_get_localhost_only+0x30>
 8012f7e:	2302      	movs	r3, #2
 8012f80:	2000      	movs	r0, #0
 8012f82:	7023      	strb	r3, [r4, #0]
 8012f84:	b002      	add	sp, #8
 8012f86:	bd10      	pop	{r4, pc}
 8012f88:	785b      	ldrb	r3, [r3, #1]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d1f7      	bne.n	8012f7e <rcl_get_localhost_only+0x26>
 8012f8e:	2301      	movs	r3, #1
 8012f90:	e7f6      	b.n	8012f80 <rcl_get_localhost_only+0x28>
 8012f92:	200b      	movs	r0, #11
 8012f94:	b002      	add	sp, #8
 8012f96:	bd10      	pop	{r4, pc}
 8012f98:	080200bc 	.word	0x080200bc

08012f9c <rcl_get_zero_initialized_node>:
 8012f9c:	4a03      	ldr	r2, [pc, #12]	@ (8012fac <rcl_get_zero_initialized_node+0x10>)
 8012f9e:	4603      	mov	r3, r0
 8012fa0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012fa4:	e883 0003 	stmia.w	r3, {r0, r1}
 8012fa8:	4618      	mov	r0, r3
 8012faa:	4770      	bx	lr
 8012fac:	080200e4 	.word	0x080200e4

08012fb0 <rcl_node_init>:
 8012fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fb4:	b0a9      	sub	sp, #164	@ 0xa4
 8012fb6:	4604      	mov	r4, r0
 8012fb8:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8012fbc:	a823      	add	r0, sp, #140	@ 0x8c
 8012fbe:	460e      	mov	r6, r1
 8012fc0:	4615      	mov	r5, r2
 8012fc2:	461f      	mov	r7, r3
 8012fc4:	f006 f924 	bl	8019210 <rcl_guard_condition_get_default_options>
 8012fc8:	f1b8 0f00 	cmp.w	r8, #0
 8012fcc:	f000 80e6 	beq.w	801319c <rcl_node_init+0x1ec>
 8012fd0:	4640      	mov	r0, r8
 8012fd2:	f7fa fe85 	bl	800dce0 <rcutils_allocator_is_valid>
 8012fd6:	2800      	cmp	r0, #0
 8012fd8:	f000 80e0 	beq.w	801319c <rcl_node_init+0x1ec>
 8012fdc:	2e00      	cmp	r6, #0
 8012fde:	f000 80dd 	beq.w	801319c <rcl_node_init+0x1ec>
 8012fe2:	2d00      	cmp	r5, #0
 8012fe4:	f000 80da 	beq.w	801319c <rcl_node_init+0x1ec>
 8012fe8:	2c00      	cmp	r4, #0
 8012fea:	f000 80d7 	beq.w	801319c <rcl_node_init+0x1ec>
 8012fee:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8012ff2:	f1b9 0f00 	cmp.w	r9, #0
 8012ff6:	f040 80fd 	bne.w	80131f4 <rcl_node_init+0x244>
 8012ffa:	2f00      	cmp	r7, #0
 8012ffc:	f000 80ce 	beq.w	801319c <rcl_node_init+0x1ec>
 8013000:	4638      	mov	r0, r7
 8013002:	f7ff fd41 	bl	8012a88 <rcl_context_is_valid>
 8013006:	4682      	mov	sl, r0
 8013008:	2800      	cmp	r0, #0
 801300a:	f000 80cd 	beq.w	80131a8 <rcl_node_init+0x1f8>
 801300e:	464a      	mov	r2, r9
 8013010:	a922      	add	r1, sp, #136	@ 0x88
 8013012:	4630      	mov	r0, r6
 8013014:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8013018:	f002 ff14 	bl	8015e44 <rmw_validate_node_name>
 801301c:	4681      	mov	r9, r0
 801301e:	2800      	cmp	r0, #0
 8013020:	f040 80be 	bne.w	80131a0 <rcl_node_init+0x1f0>
 8013024:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8013026:	2800      	cmp	r0, #0
 8013028:	f040 80f0 	bne.w	801320c <rcl_node_init+0x25c>
 801302c:	4628      	mov	r0, r5
 801302e:	f7ed f937 	bl	80002a0 <strlen>
 8013032:	2800      	cmp	r0, #0
 8013034:	f040 80bb 	bne.w	80131ae <rcl_node_init+0x1fe>
 8013038:	4d7c      	ldr	r5, [pc, #496]	@ (801322c <rcl_node_init+0x27c>)
 801303a:	a922      	add	r1, sp, #136	@ 0x88
 801303c:	2200      	movs	r2, #0
 801303e:	4628      	mov	r0, r5
 8013040:	f002 fee2 	bl	8015e08 <rmw_validate_namespace>
 8013044:	4681      	mov	r9, r0
 8013046:	2800      	cmp	r0, #0
 8013048:	f040 80aa 	bne.w	80131a0 <rcl_node_init+0x1f0>
 801304c:	4682      	mov	sl, r0
 801304e:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8013050:	2800      	cmp	r0, #0
 8013052:	f040 80e0 	bne.w	8013216 <rcl_node_init+0x266>
 8013056:	f8d8 3000 	ldr.w	r3, [r8]
 801305a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801305e:	2078      	movs	r0, #120	@ 0x78
 8013060:	4798      	blx	r3
 8013062:	4681      	mov	r9, r0
 8013064:	6060      	str	r0, [r4, #4]
 8013066:	2800      	cmp	r0, #0
 8013068:	f000 80ca 	beq.w	8013200 <rcl_node_init+0x250>
 801306c:	2200      	movs	r2, #0
 801306e:	2300      	movs	r3, #0
 8013070:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8013074:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8013078:	a808      	add	r0, sp, #32
 801307a:	f000 f907 	bl	801328c <rcl_node_get_default_options>
 801307e:	a908      	add	r1, sp, #32
 8013080:	4648      	mov	r0, r9
 8013082:	2268      	movs	r2, #104	@ 0x68
 8013084:	f007 ffb7 	bl	801aff6 <memcpy>
 8013088:	6861      	ldr	r1, [r4, #4]
 801308a:	6027      	str	r7, [r4, #0]
 801308c:	4640      	mov	r0, r8
 801308e:	f000 f90b 	bl	80132a8 <rcl_node_options_copy>
 8013092:	2800      	cmp	r0, #0
 8013094:	d158      	bne.n	8013148 <rcl_node_init+0x198>
 8013096:	4628      	mov	r0, r5
 8013098:	f7ed f902 	bl	80002a0 <strlen>
 801309c:	4428      	add	r0, r5
 801309e:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80130a2:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80130a6:	2b2f      	cmp	r3, #47	@ 0x2f
 80130a8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80130ac:	9300      	str	r3, [sp, #0]
 80130ae:	bf0c      	ite	eq
 80130b0:	4b5f      	ldreq	r3, [pc, #380]	@ (8013230 <rcl_node_init+0x280>)
 80130b2:	4b60      	ldrne	r3, [pc, #384]	@ (8013234 <rcl_node_init+0x284>)
 80130b4:	9302      	str	r3, [sp, #8]
 80130b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80130ba:	9301      	str	r3, [sp, #4]
 80130bc:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80130c0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80130c4:	f002 fa88 	bl	80155d8 <rcutils_format_string_limit>
 80130c8:	6823      	ldr	r3, [r4, #0]
 80130ca:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 80130ce:	6818      	ldr	r0, [r3, #0]
 80130d0:	4631      	mov	r1, r6
 80130d2:	3028      	adds	r0, #40	@ 0x28
 80130d4:	462a      	mov	r2, r5
 80130d6:	6866      	ldr	r6, [r4, #4]
 80130d8:	f003 facc 	bl	8016674 <rmw_create_node>
 80130dc:	6863      	ldr	r3, [r4, #4]
 80130de:	66b0      	str	r0, [r6, #104]	@ 0x68
 80130e0:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80130e2:	2800      	cmp	r0, #0
 80130e4:	d032      	beq.n	801314c <rcl_node_init+0x19c>
 80130e6:	f003 fb59 	bl	801679c <rmw_node_get_graph_guard_condition>
 80130ea:	4681      	mov	r9, r0
 80130ec:	b360      	cbz	r0, 8013148 <rcl_node_init+0x198>
 80130ee:	f8d8 3000 	ldr.w	r3, [r8]
 80130f2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80130f6:	6866      	ldr	r6, [r4, #4]
 80130f8:	2008      	movs	r0, #8
 80130fa:	4798      	blx	r3
 80130fc:	6863      	ldr	r3, [r4, #4]
 80130fe:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8013100:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8013104:	f1bb 0f00 	cmp.w	fp, #0
 8013108:	d020      	beq.n	801314c <rcl_node_init+0x19c>
 801310a:	a806      	add	r0, sp, #24
 801310c:	f005 fff0 	bl	80190f0 <rcl_get_zero_initialized_guard_condition>
 8013110:	a806      	add	r0, sp, #24
 8013112:	c803      	ldmia	r0, {r0, r1}
 8013114:	6863      	ldr	r3, [r4, #4]
 8013116:	46c4      	mov	ip, r8
 8013118:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 801311c:	e88b 0003 	stmia.w	fp, {r0, r1}
 8013120:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013124:	ae23      	add	r6, sp, #140	@ 0x8c
 8013126:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013128:	f8dc 3000 	ldr.w	r3, [ip]
 801312c:	6033      	str	r3, [r6, #0]
 801312e:	ab28      	add	r3, sp, #160	@ 0xa0
 8013130:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8013134:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013138:	4649      	mov	r1, r9
 801313a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801313c:	463a      	mov	r2, r7
 801313e:	4670      	mov	r0, lr
 8013140:	f005 ffe0 	bl	8019104 <rcl_guard_condition_init_from_rmw>
 8013144:	4681      	mov	r9, r0
 8013146:	b328      	cbz	r0, 8013194 <rcl_node_init+0x1e4>
 8013148:	6863      	ldr	r3, [r4, #4]
 801314a:	b1f3      	cbz	r3, 801318a <rcl_node_init+0x1da>
 801314c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801314e:	b128      	cbz	r0, 801315c <rcl_node_init+0x1ac>
 8013150:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013154:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013158:	4798      	blx	r3
 801315a:	6863      	ldr	r3, [r4, #4]
 801315c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801315e:	b110      	cbz	r0, 8013166 <rcl_node_init+0x1b6>
 8013160:	f003 faa0 	bl	80166a4 <rmw_destroy_node>
 8013164:	6863      	ldr	r3, [r4, #4]
 8013166:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8013168:	b148      	cbz	r0, 801317e <rcl_node_init+0x1ce>
 801316a:	f006 f82b 	bl	80191c4 <rcl_guard_condition_fini>
 801316e:	6863      	ldr	r3, [r4, #4]
 8013170:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013174:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8013176:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801317a:	4798      	blx	r3
 801317c:	6863      	ldr	r3, [r4, #4]
 801317e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013182:	4618      	mov	r0, r3
 8013184:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013188:	4798      	blx	r3
 801318a:	2300      	movs	r3, #0
 801318c:	e9c4 3300 	strd	r3, r3, [r4]
 8013190:	f04f 0901 	mov.w	r9, #1
 8013194:	f1ba 0f00 	cmp.w	sl, #0
 8013198:	d125      	bne.n	80131e6 <rcl_node_init+0x236>
 801319a:	e001      	b.n	80131a0 <rcl_node_init+0x1f0>
 801319c:	f04f 090b 	mov.w	r9, #11
 80131a0:	4648      	mov	r0, r9
 80131a2:	b029      	add	sp, #164	@ 0xa4
 80131a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131a8:	f04f 0965 	mov.w	r9, #101	@ 0x65
 80131ac:	e7f8      	b.n	80131a0 <rcl_node_init+0x1f0>
 80131ae:	782b      	ldrb	r3, [r5, #0]
 80131b0:	2b2f      	cmp	r3, #47	@ 0x2f
 80131b2:	f43f af42 	beq.w	801303a <rcl_node_init+0x8a>
 80131b6:	9503      	str	r5, [sp, #12]
 80131b8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80131bc:	9300      	str	r3, [sp, #0]
 80131be:	4b1e      	ldr	r3, [pc, #120]	@ (8013238 <rcl_node_init+0x288>)
 80131c0:	9302      	str	r3, [sp, #8]
 80131c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80131c6:	9301      	str	r3, [sp, #4]
 80131c8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80131cc:	f002 fa04 	bl	80155d8 <rcutils_format_string_limit>
 80131d0:	4605      	mov	r5, r0
 80131d2:	b340      	cbz	r0, 8013226 <rcl_node_init+0x276>
 80131d4:	2200      	movs	r2, #0
 80131d6:	a922      	add	r1, sp, #136	@ 0x88
 80131d8:	9222      	str	r2, [sp, #136]	@ 0x88
 80131da:	f002 fe15 	bl	8015e08 <rmw_validate_namespace>
 80131de:	4681      	mov	r9, r0
 80131e0:	2800      	cmp	r0, #0
 80131e2:	f43f af34 	beq.w	801304e <rcl_node_init+0x9e>
 80131e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80131ea:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80131ee:	4628      	mov	r0, r5
 80131f0:	4798      	blx	r3
 80131f2:	e7d5      	b.n	80131a0 <rcl_node_init+0x1f0>
 80131f4:	f04f 0964 	mov.w	r9, #100	@ 0x64
 80131f8:	4648      	mov	r0, r9
 80131fa:	b029      	add	sp, #164	@ 0xa4
 80131fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013200:	f04f 090a 	mov.w	r9, #10
 8013204:	f1ba 0f00 	cmp.w	sl, #0
 8013208:	d1ed      	bne.n	80131e6 <rcl_node_init+0x236>
 801320a:	e7c9      	b.n	80131a0 <rcl_node_init+0x1f0>
 801320c:	f002 fe6c 	bl	8015ee8 <rmw_node_name_validation_result_string>
 8013210:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8013214:	e7c4      	b.n	80131a0 <rcl_node_init+0x1f0>
 8013216:	f002 fe09 	bl	8015e2c <rmw_namespace_validation_result_string>
 801321a:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 801321e:	f1ba 0f00 	cmp.w	sl, #0
 8013222:	d1e0      	bne.n	80131e6 <rcl_node_init+0x236>
 8013224:	e7bc      	b.n	80131a0 <rcl_node_init+0x1f0>
 8013226:	f04f 090a 	mov.w	r9, #10
 801322a:	e7b9      	b.n	80131a0 <rcl_node_init+0x1f0>
 801322c:	080200d4 	.word	0x080200d4
 8013230:	0801ff58 	.word	0x0801ff58
 8013234:	080200dc 	.word	0x080200dc
 8013238:	080200d8 	.word	0x080200d8

0801323c <rcl_node_is_valid>:
 801323c:	b130      	cbz	r0, 801324c <rcl_node_is_valid+0x10>
 801323e:	6843      	ldr	r3, [r0, #4]
 8013240:	b123      	cbz	r3, 801324c <rcl_node_is_valid+0x10>
 8013242:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013244:	b113      	cbz	r3, 801324c <rcl_node_is_valid+0x10>
 8013246:	6800      	ldr	r0, [r0, #0]
 8013248:	f7ff bc1e 	b.w	8012a88 <rcl_context_is_valid>
 801324c:	2000      	movs	r0, #0
 801324e:	4770      	bx	lr

08013250 <rcl_node_get_name>:
 8013250:	b120      	cbz	r0, 801325c <rcl_node_get_name+0xc>
 8013252:	6840      	ldr	r0, [r0, #4]
 8013254:	b110      	cbz	r0, 801325c <rcl_node_get_name+0xc>
 8013256:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013258:	b100      	cbz	r0, 801325c <rcl_node_get_name+0xc>
 801325a:	6880      	ldr	r0, [r0, #8]
 801325c:	4770      	bx	lr
 801325e:	bf00      	nop

08013260 <rcl_node_get_namespace>:
 8013260:	b120      	cbz	r0, 801326c <rcl_node_get_namespace+0xc>
 8013262:	6840      	ldr	r0, [r0, #4]
 8013264:	b110      	cbz	r0, 801326c <rcl_node_get_namespace+0xc>
 8013266:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013268:	b100      	cbz	r0, 801326c <rcl_node_get_namespace+0xc>
 801326a:	68c0      	ldr	r0, [r0, #12]
 801326c:	4770      	bx	lr
 801326e:	bf00      	nop

08013270 <rcl_node_get_options>:
 8013270:	b128      	cbz	r0, 801327e <rcl_node_get_options+0xe>
 8013272:	6840      	ldr	r0, [r0, #4]
 8013274:	b118      	cbz	r0, 801327e <rcl_node_get_options+0xe>
 8013276:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8013278:	2b00      	cmp	r3, #0
 801327a:	bf08      	it	eq
 801327c:	2000      	moveq	r0, #0
 801327e:	4770      	bx	lr

08013280 <rcl_node_get_rmw_handle>:
 8013280:	b110      	cbz	r0, 8013288 <rcl_node_get_rmw_handle+0x8>
 8013282:	6840      	ldr	r0, [r0, #4]
 8013284:	b100      	cbz	r0, 8013288 <rcl_node_get_rmw_handle+0x8>
 8013286:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013288:	4770      	bx	lr
 801328a:	bf00      	nop

0801328c <rcl_node_get_default_options>:
 801328c:	b510      	push	{r4, lr}
 801328e:	2268      	movs	r2, #104	@ 0x68
 8013290:	4604      	mov	r4, r0
 8013292:	2100      	movs	r1, #0
 8013294:	f007 fd8c 	bl	801adb0 <memset>
 8013298:	4620      	mov	r0, r4
 801329a:	f7fa fd13 	bl	800dcc4 <rcutils_get_default_allocator>
 801329e:	2301      	movs	r3, #1
 80132a0:	7523      	strb	r3, [r4, #20]
 80132a2:	4620      	mov	r0, r4
 80132a4:	bd10      	pop	{r4, pc}
 80132a6:	bf00      	nop

080132a8 <rcl_node_options_copy>:
 80132a8:	b1d0      	cbz	r0, 80132e0 <rcl_node_options_copy+0x38>
 80132aa:	b570      	push	{r4, r5, r6, lr}
 80132ac:	460c      	mov	r4, r1
 80132ae:	b1a9      	cbz	r1, 80132dc <rcl_node_options_copy+0x34>
 80132b0:	4288      	cmp	r0, r1
 80132b2:	4684      	mov	ip, r0
 80132b4:	d012      	beq.n	80132dc <rcl_node_options_copy+0x34>
 80132b6:	4605      	mov	r5, r0
 80132b8:	8a86      	ldrh	r6, [r0, #20]
 80132ba:	468e      	mov	lr, r1
 80132bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80132be:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80132c2:	682b      	ldr	r3, [r5, #0]
 80132c4:	f8ce 3000 	str.w	r3, [lr]
 80132c8:	f10c 0118 	add.w	r1, ip, #24
 80132cc:	2250      	movs	r2, #80	@ 0x50
 80132ce:	82a6      	strh	r6, [r4, #20]
 80132d0:	f104 0018 	add.w	r0, r4, #24
 80132d4:	f007 fe8f 	bl	801aff6 <memcpy>
 80132d8:	2000      	movs	r0, #0
 80132da:	bd70      	pop	{r4, r5, r6, pc}
 80132dc:	200b      	movs	r0, #11
 80132de:	bd70      	pop	{r4, r5, r6, pc}
 80132e0:	200b      	movs	r0, #11
 80132e2:	4770      	bx	lr

080132e4 <rcl_node_resolve_name>:
 80132e4:	b082      	sub	sp, #8
 80132e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132ea:	b091      	sub	sp, #68	@ 0x44
 80132ec:	ac1a      	add	r4, sp, #104	@ 0x68
 80132ee:	e884 000c 	stmia.w	r4, {r2, r3}
 80132f2:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 80132f6:	2800      	cmp	r0, #0
 80132f8:	d03b      	beq.n	8013372 <rcl_node_resolve_name+0x8e>
 80132fa:	460c      	mov	r4, r1
 80132fc:	4605      	mov	r5, r0
 80132fe:	f7ff ffb7 	bl	8013270 <rcl_node_get_options>
 8013302:	2800      	cmp	r0, #0
 8013304:	d037      	beq.n	8013376 <rcl_node_resolve_name+0x92>
 8013306:	4628      	mov	r0, r5
 8013308:	f7ff ffa2 	bl	8013250 <rcl_node_get_name>
 801330c:	4606      	mov	r6, r0
 801330e:	4628      	mov	r0, r5
 8013310:	f7ff ffa6 	bl	8013260 <rcl_node_get_namespace>
 8013314:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8013318:	4681      	mov	r9, r0
 801331a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801331e:	ad0b      	add	r5, sp, #44	@ 0x2c
 8013320:	46ac      	mov	ip, r5
 8013322:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013326:	f8de 3000 	ldr.w	r3, [lr]
 801332a:	f8cc 3000 	str.w	r3, [ip]
 801332e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013330:	b1fb      	cbz	r3, 8013372 <rcl_node_resolve_name+0x8e>
 8013332:	468a      	mov	sl, r1
 8013334:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8013338:	f002 faa6 	bl	8015888 <rcutils_get_zero_initialized_string_map>
 801333c:	ab10      	add	r3, sp, #64	@ 0x40
 801333e:	9008      	str	r0, [sp, #32]
 8013340:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8013344:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013348:	2100      	movs	r1, #0
 801334a:	e895 000c 	ldmia.w	r5, {r2, r3}
 801334e:	a808      	add	r0, sp, #32
 8013350:	f002 fb12 	bl	8015978 <rcutils_string_map_init>
 8013354:	4607      	mov	r7, r0
 8013356:	b180      	cbz	r0, 801337a <rcl_node_resolve_name+0x96>
 8013358:	f7fa fcd0 	bl	800dcfc <rcutils_get_error_string>
 801335c:	f7fa fce4 	bl	800dd28 <rcutils_reset_error>
 8013360:	2f0a      	cmp	r7, #10
 8013362:	bf18      	it	ne
 8013364:	2701      	movne	r7, #1
 8013366:	4638      	mov	r0, r7
 8013368:	b011      	add	sp, #68	@ 0x44
 801336a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801336e:	b002      	add	sp, #8
 8013370:	4770      	bx	lr
 8013372:	270b      	movs	r7, #11
 8013374:	e7f7      	b.n	8013366 <rcl_node_resolve_name+0x82>
 8013376:	2701      	movs	r7, #1
 8013378:	e7f5      	b.n	8013366 <rcl_node_resolve_name+0x82>
 801337a:	9009      	str	r0, [sp, #36]	@ 0x24
 801337c:	9007      	str	r0, [sp, #28]
 801337e:	a808      	add	r0, sp, #32
 8013380:	f005 feb0 	bl	80190e4 <rcl_get_default_topic_name_substitutions>
 8013384:	4607      	mov	r7, r0
 8013386:	b1a8      	cbz	r0, 80133b4 <rcl_node_resolve_name+0xd0>
 8013388:	280a      	cmp	r0, #10
 801338a:	9c07      	ldr	r4, [sp, #28]
 801338c:	d000      	beq.n	8013390 <rcl_node_resolve_name+0xac>
 801338e:	2701      	movs	r7, #1
 8013390:	a808      	add	r0, sp, #32
 8013392:	f002 fb31 	bl	80159f8 <rcutils_string_map_fini>
 8013396:	2800      	cmp	r0, #0
 8013398:	d13d      	bne.n	8013416 <rcl_node_resolve_name+0x132>
 801339a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801339c:	4659      	mov	r1, fp
 801339e:	47d0      	blx	sl
 80133a0:	4659      	mov	r1, fp
 80133a2:	4620      	mov	r0, r4
 80133a4:	47d0      	blx	sl
 80133a6:	f1b8 0f00 	cmp.w	r8, #0
 80133aa:	d0dc      	beq.n	8013366 <rcl_node_resolve_name+0x82>
 80133ac:	2f67      	cmp	r7, #103	@ 0x67
 80133ae:	bf08      	it	eq
 80133b0:	2768      	moveq	r7, #104	@ 0x68
 80133b2:	e7d8      	b.n	8013366 <rcl_node_resolve_name+0x82>
 80133b4:	ab09      	add	r3, sp, #36	@ 0x24
 80133b6:	9305      	str	r3, [sp, #20]
 80133b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80133ba:	46ec      	mov	ip, sp
 80133bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80133c0:	682b      	ldr	r3, [r5, #0]
 80133c2:	f8cc 3000 	str.w	r3, [ip]
 80133c6:	464a      	mov	r2, r9
 80133c8:	4631      	mov	r1, r6
 80133ca:	4620      	mov	r0, r4
 80133cc:	ab08      	add	r3, sp, #32
 80133ce:	f005 fd2b 	bl	8018e28 <rcl_expand_topic_name>
 80133d2:	4607      	mov	r7, r0
 80133d4:	b9b8      	cbnz	r0, 8013406 <rcl_node_resolve_name+0x122>
 80133d6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80133d8:	9009      	str	r0, [sp, #36]	@ 0x24
 80133da:	4602      	mov	r2, r0
 80133dc:	a90a      	add	r1, sp, #40	@ 0x28
 80133de:	4620      	mov	r0, r4
 80133e0:	f002 fc4e 	bl	8015c80 <rmw_validate_full_topic_name>
 80133e4:	b988      	cbnz	r0, 801340a <rcl_node_resolve_name+0x126>
 80133e6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80133e8:	b9d5      	cbnz	r5, 8013420 <rcl_node_resolve_name+0x13c>
 80133ea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80133ec:	a808      	add	r0, sp, #32
 80133ee:	601c      	str	r4, [r3, #0]
 80133f0:	f002 fb02 	bl	80159f8 <rcutils_string_map_fini>
 80133f4:	4607      	mov	r7, r0
 80133f6:	b1a8      	cbz	r0, 8013424 <rcl_node_resolve_name+0x140>
 80133f8:	f7fa fc80 	bl	800dcfc <rcutils_get_error_string>
 80133fc:	462c      	mov	r4, r5
 80133fe:	f7fa fc93 	bl	800dd28 <rcutils_reset_error>
 8013402:	2701      	movs	r7, #1
 8013404:	e7c9      	b.n	801339a <rcl_node_resolve_name+0xb6>
 8013406:	9c07      	ldr	r4, [sp, #28]
 8013408:	e7c2      	b.n	8013390 <rcl_node_resolve_name+0xac>
 801340a:	f7fa fc77 	bl	800dcfc <rcutils_get_error_string>
 801340e:	2701      	movs	r7, #1
 8013410:	f7fa fc8a 	bl	800dd28 <rcutils_reset_error>
 8013414:	e7bc      	b.n	8013390 <rcl_node_resolve_name+0xac>
 8013416:	f7fa fc71 	bl	800dcfc <rcutils_get_error_string>
 801341a:	f7fa fc85 	bl	800dd28 <rcutils_reset_error>
 801341e:	e7bc      	b.n	801339a <rcl_node_resolve_name+0xb6>
 8013420:	2767      	movs	r7, #103	@ 0x67
 8013422:	e7b5      	b.n	8013390 <rcl_node_resolve_name+0xac>
 8013424:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013426:	4659      	mov	r1, fp
 8013428:	47d0      	blx	sl
 801342a:	4659      	mov	r1, fp
 801342c:	4638      	mov	r0, r7
 801342e:	47d0      	blx	sl
 8013430:	e799      	b.n	8013366 <rcl_node_resolve_name+0x82>
 8013432:	bf00      	nop

08013434 <exact_match_lookup>:
 8013434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013436:	f102 0708 	add.w	r7, r2, #8
 801343a:	460b      	mov	r3, r1
 801343c:	4614      	mov	r4, r2
 801343e:	4606      	mov	r6, r0
 8013440:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8013444:	b085      	sub	sp, #20
 8013446:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801344a:	4618      	mov	r0, r3
 801344c:	4919      	ldr	r1, [pc, #100]	@ (80134b4 <exact_match_lookup+0x80>)
 801344e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8013452:	f002 f8b3 	bl	80155bc <rcutils_join_path>
 8013456:	7833      	ldrb	r3, [r6, #0]
 8013458:	2b2f      	cmp	r3, #47	@ 0x2f
 801345a:	4605      	mov	r5, r0
 801345c:	d023      	beq.n	80134a6 <exact_match_lookup+0x72>
 801345e:	f104 030c 	add.w	r3, r4, #12
 8013462:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013466:	e88d 0003 	stmia.w	sp, {r0, r1}
 801346a:	1c70      	adds	r0, r6, #1
 801346c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013470:	f002 f8aa 	bl	80155c8 <rcutils_to_native_path>
 8013474:	4606      	mov	r6, r0
 8013476:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801347a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801347e:	4631      	mov	r1, r6
 8013480:	e894 000c 	ldmia.w	r4, {r2, r3}
 8013484:	4628      	mov	r0, r5
 8013486:	f002 f899 	bl	80155bc <rcutils_join_path>
 801348a:	6862      	ldr	r2, [r4, #4]
 801348c:	6921      	ldr	r1, [r4, #16]
 801348e:	4603      	mov	r3, r0
 8013490:	4630      	mov	r0, r6
 8013492:	461e      	mov	r6, r3
 8013494:	4790      	blx	r2
 8013496:	4628      	mov	r0, r5
 8013498:	6863      	ldr	r3, [r4, #4]
 801349a:	6921      	ldr	r1, [r4, #16]
 801349c:	4798      	blx	r3
 801349e:	4635      	mov	r5, r6
 80134a0:	4628      	mov	r0, r5
 80134a2:	b005      	add	sp, #20
 80134a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134a6:	7873      	ldrb	r3, [r6, #1]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d1d8      	bne.n	801345e <exact_match_lookup+0x2a>
 80134ac:	4628      	mov	r0, r5
 80134ae:	b005      	add	sp, #20
 80134b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134b2:	bf00      	nop
 80134b4:	08020128 	.word	0x08020128

080134b8 <rcl_get_secure_root>:
 80134b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80134bc:	b085      	sub	sp, #20
 80134be:	b168      	cbz	r0, 80134dc <rcl_get_secure_root+0x24>
 80134c0:	4607      	mov	r7, r0
 80134c2:	4608      	mov	r0, r1
 80134c4:	460c      	mov	r4, r1
 80134c6:	f7fa fc0b 	bl	800dce0 <rcutils_allocator_is_valid>
 80134ca:	b138      	cbz	r0, 80134dc <rcl_get_secure_root+0x24>
 80134cc:	2300      	movs	r3, #0
 80134ce:	482d      	ldr	r0, [pc, #180]	@ (8013584 <rcl_get_secure_root+0xcc>)
 80134d0:	9303      	str	r3, [sp, #12]
 80134d2:	a903      	add	r1, sp, #12
 80134d4:	f002 f858 	bl	8015588 <rcutils_get_env>
 80134d8:	4605      	mov	r5, r0
 80134da:	b120      	cbz	r0, 80134e6 <rcl_get_secure_root+0x2e>
 80134dc:	2500      	movs	r5, #0
 80134de:	4628      	mov	r0, r5
 80134e0:	b005      	add	sp, #20
 80134e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80134e6:	9b03      	ldr	r3, [sp, #12]
 80134e8:	781a      	ldrb	r2, [r3, #0]
 80134ea:	2a00      	cmp	r2, #0
 80134ec:	d0f6      	beq.n	80134dc <rcl_get_secure_root+0x24>
 80134ee:	f104 090c 	add.w	r9, r4, #12
 80134f2:	e899 0003 	ldmia.w	r9, {r0, r1}
 80134f6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80134fa:	4618      	mov	r0, r3
 80134fc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013500:	f002 f984 	bl	801580c <rcutils_strdup>
 8013504:	4680      	mov	r8, r0
 8013506:	2800      	cmp	r0, #0
 8013508:	d0e8      	beq.n	80134dc <rcl_get_secure_root+0x24>
 801350a:	481f      	ldr	r0, [pc, #124]	@ (8013588 <rcl_get_secure_root+0xd0>)
 801350c:	9503      	str	r5, [sp, #12]
 801350e:	a903      	add	r1, sp, #12
 8013510:	f002 f83a 	bl	8015588 <rcutils_get_env>
 8013514:	b160      	cbz	r0, 8013530 <rcl_get_secure_root+0x78>
 8013516:	2600      	movs	r6, #0
 8013518:	6863      	ldr	r3, [r4, #4]
 801351a:	6921      	ldr	r1, [r4, #16]
 801351c:	4630      	mov	r0, r6
 801351e:	4798      	blx	r3
 8013520:	4640      	mov	r0, r8
 8013522:	6863      	ldr	r3, [r4, #4]
 8013524:	6921      	ldr	r1, [r4, #16]
 8013526:	4798      	blx	r3
 8013528:	4628      	mov	r0, r5
 801352a:	b005      	add	sp, #20
 801352c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013530:	9b03      	ldr	r3, [sp, #12]
 8013532:	781e      	ldrb	r6, [r3, #0]
 8013534:	b1f6      	cbz	r6, 8013574 <rcl_get_secure_root+0xbc>
 8013536:	e899 0003 	ldmia.w	r9, {r0, r1}
 801353a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801353e:	4618      	mov	r0, r3
 8013540:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013544:	f002 f962 	bl	801580c <rcutils_strdup>
 8013548:	4606      	mov	r6, r0
 801354a:	2800      	cmp	r0, #0
 801354c:	d0e3      	beq.n	8013516 <rcl_get_secure_root+0x5e>
 801354e:	4622      	mov	r2, r4
 8013550:	4641      	mov	r1, r8
 8013552:	f7ff ff6f 	bl	8013434 <exact_match_lookup>
 8013556:	4605      	mov	r5, r0
 8013558:	2d00      	cmp	r5, #0
 801355a:	d0dd      	beq.n	8013518 <rcl_get_secure_root+0x60>
 801355c:	4628      	mov	r0, r5
 801355e:	f002 f82b 	bl	80155b8 <rcutils_is_directory>
 8013562:	4603      	mov	r3, r0
 8013564:	2800      	cmp	r0, #0
 8013566:	d1d7      	bne.n	8013518 <rcl_get_secure_root+0x60>
 8013568:	4628      	mov	r0, r5
 801356a:	6921      	ldr	r1, [r4, #16]
 801356c:	461d      	mov	r5, r3
 801356e:	6863      	ldr	r3, [r4, #4]
 8013570:	4798      	blx	r3
 8013572:	e7d1      	b.n	8013518 <rcl_get_secure_root+0x60>
 8013574:	4622      	mov	r2, r4
 8013576:	4638      	mov	r0, r7
 8013578:	4641      	mov	r1, r8
 801357a:	f7ff ff5b 	bl	8013434 <exact_match_lookup>
 801357e:	4605      	mov	r5, r0
 8013580:	e7ea      	b.n	8013558 <rcl_get_secure_root+0xa0>
 8013582:	bf00      	nop
 8013584:	08020134 	.word	0x08020134
 8013588:	0802014c 	.word	0x0802014c

0801358c <rcl_get_security_options_from_environment>:
 801358c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013590:	b082      	sub	sp, #8
 8013592:	2300      	movs	r3, #0
 8013594:	4606      	mov	r6, r0
 8013596:	460f      	mov	r7, r1
 8013598:	4820      	ldr	r0, [pc, #128]	@ (801361c <rcl_get_security_options_from_environment+0x90>)
 801359a:	9301      	str	r3, [sp, #4]
 801359c:	a901      	add	r1, sp, #4
 801359e:	4690      	mov	r8, r2
 80135a0:	f001 fff2 	bl	8015588 <rcutils_get_env>
 80135a4:	b120      	cbz	r0, 80135b0 <rcl_get_security_options_from_environment+0x24>
 80135a6:	2501      	movs	r5, #1
 80135a8:	4628      	mov	r0, r5
 80135aa:	b002      	add	sp, #8
 80135ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135b0:	491b      	ldr	r1, [pc, #108]	@ (8013620 <rcl_get_security_options_from_environment+0x94>)
 80135b2:	4604      	mov	r4, r0
 80135b4:	9801      	ldr	r0, [sp, #4]
 80135b6:	f7ec fe13 	bl	80001e0 <strcmp>
 80135ba:	4605      	mov	r5, r0
 80135bc:	b9e8      	cbnz	r0, 80135fa <rcl_get_security_options_from_environment+0x6e>
 80135be:	9001      	str	r0, [sp, #4]
 80135c0:	f1b8 0f00 	cmp.w	r8, #0
 80135c4:	d020      	beq.n	8013608 <rcl_get_security_options_from_environment+0x7c>
 80135c6:	4817      	ldr	r0, [pc, #92]	@ (8013624 <rcl_get_security_options_from_environment+0x98>)
 80135c8:	a901      	add	r1, sp, #4
 80135ca:	f001 ffdd 	bl	8015588 <rcutils_get_env>
 80135ce:	2800      	cmp	r0, #0
 80135d0:	d1e9      	bne.n	80135a6 <rcl_get_security_options_from_environment+0x1a>
 80135d2:	4915      	ldr	r1, [pc, #84]	@ (8013628 <rcl_get_security_options_from_environment+0x9c>)
 80135d4:	9801      	ldr	r0, [sp, #4]
 80135d6:	f7ec fe03 	bl	80001e0 <strcmp>
 80135da:	fab0 f080 	clz	r0, r0
 80135de:	0940      	lsrs	r0, r0, #5
 80135e0:	f888 0000 	strb.w	r0, [r8]
 80135e4:	4639      	mov	r1, r7
 80135e6:	4630      	mov	r0, r6
 80135e8:	f7ff ff66 	bl	80134b8 <rcl_get_secure_root>
 80135ec:	b170      	cbz	r0, 801360c <rcl_get_security_options_from_environment+0x80>
 80135ee:	f8c8 0004 	str.w	r0, [r8, #4]
 80135f2:	4628      	mov	r0, r5
 80135f4:	b002      	add	sp, #8
 80135f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135fa:	4625      	mov	r5, r4
 80135fc:	4628      	mov	r0, r5
 80135fe:	f888 4000 	strb.w	r4, [r8]
 8013602:	b002      	add	sp, #8
 8013604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013608:	250b      	movs	r5, #11
 801360a:	e7cd      	b.n	80135a8 <rcl_get_security_options_from_environment+0x1c>
 801360c:	f898 5000 	ldrb.w	r5, [r8]
 8013610:	f1a5 0501 	sub.w	r5, r5, #1
 8013614:	fab5 f585 	clz	r5, r5
 8013618:	096d      	lsrs	r5, r5, #5
 801361a:	e7c5      	b.n	80135a8 <rcl_get_security_options_from_environment+0x1c>
 801361c:	080200ec 	.word	0x080200ec
 8013620:	08020100 	.word	0x08020100
 8013624:	08020108 	.word	0x08020108
 8013628:	08020120 	.word	0x08020120

0801362c <rcl_service_get_rmw_handle>:
 801362c:	b118      	cbz	r0, 8013636 <rcl_service_get_rmw_handle+0xa>
 801362e:	6800      	ldr	r0, [r0, #0]
 8013630:	b108      	cbz	r0, 8013636 <rcl_service_get_rmw_handle+0xa>
 8013632:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013636:	4770      	bx	lr

08013638 <rcl_take_request>:
 8013638:	b570      	push	{r4, r5, r6, lr}
 801363a:	468e      	mov	lr, r1
 801363c:	460c      	mov	r4, r1
 801363e:	4616      	mov	r6, r2
 8013640:	4605      	mov	r5, r0
 8013642:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013646:	b08c      	sub	sp, #48	@ 0x30
 8013648:	f10d 0c18 	add.w	ip, sp, #24
 801364c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013650:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013654:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013658:	b30d      	cbz	r5, 801369e <rcl_take_request+0x66>
 801365a:	682b      	ldr	r3, [r5, #0]
 801365c:	b1fb      	cbz	r3, 801369e <rcl_take_request+0x66>
 801365e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013662:	b1e0      	cbz	r0, 801369e <rcl_take_request+0x66>
 8013664:	b336      	cbz	r6, 80136b4 <rcl_take_request+0x7c>
 8013666:	2300      	movs	r3, #0
 8013668:	f88d 3007 	strb.w	r3, [sp, #7]
 801366c:	4632      	mov	r2, r6
 801366e:	f10d 0307 	add.w	r3, sp, #7
 8013672:	a902      	add	r1, sp, #8
 8013674:	f003 f8e6 	bl	8016844 <rmw_take_request>
 8013678:	4605      	mov	r5, r0
 801367a:	b198      	cbz	r0, 80136a4 <rcl_take_request+0x6c>
 801367c:	280a      	cmp	r0, #10
 801367e:	bf18      	it	ne
 8013680:	2501      	movne	r5, #1
 8013682:	f10d 0e18 	add.w	lr, sp, #24
 8013686:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801368a:	46a4      	mov	ip, r4
 801368c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013690:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013694:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013698:	4628      	mov	r0, r5
 801369a:	b00c      	add	sp, #48	@ 0x30
 801369c:	bd70      	pop	{r4, r5, r6, pc}
 801369e:	f44f 7516 	mov.w	r5, #600	@ 0x258
 80136a2:	e7ee      	b.n	8013682 <rcl_take_request+0x4a>
 80136a4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80136a8:	f240 2359 	movw	r3, #601	@ 0x259
 80136ac:	2a00      	cmp	r2, #0
 80136ae:	bf08      	it	eq
 80136b0:	461d      	moveq	r5, r3
 80136b2:	e7e6      	b.n	8013682 <rcl_take_request+0x4a>
 80136b4:	250b      	movs	r5, #11
 80136b6:	e7e4      	b.n	8013682 <rcl_take_request+0x4a>

080136b8 <rcl_send_response>:
 80136b8:	b170      	cbz	r0, 80136d8 <rcl_send_response+0x20>
 80136ba:	6800      	ldr	r0, [r0, #0]
 80136bc:	b160      	cbz	r0, 80136d8 <rcl_send_response+0x20>
 80136be:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80136c2:	b148      	cbz	r0, 80136d8 <rcl_send_response+0x20>
 80136c4:	b159      	cbz	r1, 80136de <rcl_send_response+0x26>
 80136c6:	b510      	push	{r4, lr}
 80136c8:	b15a      	cbz	r2, 80136e2 <rcl_send_response+0x2a>
 80136ca:	f003 f919 	bl	8016900 <rmw_send_response>
 80136ce:	b110      	cbz	r0, 80136d6 <rcl_send_response+0x1e>
 80136d0:	2802      	cmp	r0, #2
 80136d2:	bf18      	it	ne
 80136d4:	2001      	movne	r0, #1
 80136d6:	bd10      	pop	{r4, pc}
 80136d8:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80136dc:	4770      	bx	lr
 80136de:	200b      	movs	r0, #11
 80136e0:	4770      	bx	lr
 80136e2:	200b      	movs	r0, #11
 80136e4:	bd10      	pop	{r4, pc}
 80136e6:	bf00      	nop

080136e8 <rcl_service_is_valid>:
 80136e8:	b130      	cbz	r0, 80136f8 <rcl_service_is_valid+0x10>
 80136ea:	6800      	ldr	r0, [r0, #0]
 80136ec:	b120      	cbz	r0, 80136f8 <rcl_service_is_valid+0x10>
 80136ee:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80136f2:	3800      	subs	r0, #0
 80136f4:	bf18      	it	ne
 80136f6:	2001      	movne	r0, #1
 80136f8:	4770      	bx	lr
 80136fa:	bf00      	nop

080136fc <rcl_get_zero_initialized_subscription>:
 80136fc:	4b01      	ldr	r3, [pc, #4]	@ (8013704 <rcl_get_zero_initialized_subscription+0x8>)
 80136fe:	6818      	ldr	r0, [r3, #0]
 8013700:	4770      	bx	lr
 8013702:	bf00      	nop
 8013704:	0802016c 	.word	0x0802016c

08013708 <rcl_subscription_init>:
 8013708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801370c:	b089      	sub	sp, #36	@ 0x24
 801370e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8013710:	b1d6      	cbz	r6, 8013748 <rcl_subscription_init+0x40>
 8013712:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 8013716:	4604      	mov	r4, r0
 8013718:	4648      	mov	r0, r9
 801371a:	460d      	mov	r5, r1
 801371c:	4690      	mov	r8, r2
 801371e:	461f      	mov	r7, r3
 8013720:	f7fa fade 	bl	800dce0 <rcutils_allocator_is_valid>
 8013724:	b180      	cbz	r0, 8013748 <rcl_subscription_init+0x40>
 8013726:	b17c      	cbz	r4, 8013748 <rcl_subscription_init+0x40>
 8013728:	4628      	mov	r0, r5
 801372a:	f7ff fd87 	bl	801323c <rcl_node_is_valid>
 801372e:	2800      	cmp	r0, #0
 8013730:	d054      	beq.n	80137dc <rcl_subscription_init+0xd4>
 8013732:	f1b8 0f00 	cmp.w	r8, #0
 8013736:	d007      	beq.n	8013748 <rcl_subscription_init+0x40>
 8013738:	b137      	cbz	r7, 8013748 <rcl_subscription_init+0x40>
 801373a:	6823      	ldr	r3, [r4, #0]
 801373c:	b14b      	cbz	r3, 8013752 <rcl_subscription_init+0x4a>
 801373e:	2764      	movs	r7, #100	@ 0x64
 8013740:	4638      	mov	r0, r7
 8013742:	b009      	add	sp, #36	@ 0x24
 8013744:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013748:	270b      	movs	r7, #11
 801374a:	4638      	mov	r0, r7
 801374c:	b009      	add	sp, #36	@ 0x24
 801374e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013752:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8013756:	aa07      	add	r2, sp, #28
 8013758:	9205      	str	r2, [sp, #20]
 801375a:	9307      	str	r3, [sp, #28]
 801375c:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8013760:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013764:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013768:	4639      	mov	r1, r7
 801376a:	e899 000c 	ldmia.w	r9, {r2, r3}
 801376e:	4628      	mov	r0, r5
 8013770:	f7ff fdb8 	bl	80132e4 <rcl_node_resolve_name>
 8013774:	4607      	mov	r7, r0
 8013776:	2800      	cmp	r0, #0
 8013778:	d15f      	bne.n	801383a <rcl_subscription_init+0x132>
 801377a:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 801377e:	21c8      	movs	r1, #200	@ 0xc8
 8013780:	2001      	movs	r0, #1
 8013782:	4798      	blx	r3
 8013784:	6020      	str	r0, [r4, #0]
 8013786:	2800      	cmp	r0, #0
 8013788:	d05d      	beq.n	8013846 <rcl_subscription_init+0x13e>
 801378a:	4628      	mov	r0, r5
 801378c:	f7ff fd78 	bl	8013280 <rcl_node_get_rmw_handle>
 8013790:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8013794:	9300      	str	r3, [sp, #0]
 8013796:	9a07      	ldr	r2, [sp, #28]
 8013798:	6827      	ldr	r7, [r4, #0]
 801379a:	4641      	mov	r1, r8
 801379c:	4633      	mov	r3, r6
 801379e:	f003 f999 	bl	8016ad4 <rmw_create_subscription>
 80137a2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 80137a6:	6827      	ldr	r7, [r4, #0]
 80137a8:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 80137ac:	b348      	cbz	r0, 8013802 <rcl_subscription_init+0xfa>
 80137ae:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80137b2:	f003 fa71 	bl	8016c98 <rmw_subscription_get_actual_qos>
 80137b6:	4607      	mov	r7, r0
 80137b8:	b9a8      	cbnz	r0, 80137e6 <rcl_subscription_init+0xde>
 80137ba:	6820      	ldr	r0, [r4, #0]
 80137bc:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 80137c0:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 80137c4:	2270      	movs	r2, #112	@ 0x70
 80137c6:	4631      	mov	r1, r6
 80137c8:	f007 fc15 	bl	801aff6 <memcpy>
 80137cc:	9807      	ldr	r0, [sp, #28]
 80137ce:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80137d0:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80137d2:	4798      	blx	r3
 80137d4:	4638      	mov	r0, r7
 80137d6:	b009      	add	sp, #36	@ 0x24
 80137d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80137dc:	27c8      	movs	r7, #200	@ 0xc8
 80137de:	4638      	mov	r0, r7
 80137e0:	b009      	add	sp, #36	@ 0x24
 80137e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80137e6:	6827      	ldr	r7, [r4, #0]
 80137e8:	b32f      	cbz	r7, 8013836 <rcl_subscription_init+0x12e>
 80137ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80137ee:	b14b      	cbz	r3, 8013804 <rcl_subscription_init+0xfc>
 80137f0:	4628      	mov	r0, r5
 80137f2:	f7ff fd45 	bl	8013280 <rcl_node_get_rmw_handle>
 80137f6:	6823      	ldr	r3, [r4, #0]
 80137f8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80137fc:	f003 fa5c 	bl	8016cb8 <rmw_destroy_subscription>
 8013800:	6827      	ldr	r7, [r4, #0]
 8013802:	b197      	cbz	r7, 801382a <rcl_subscription_init+0x122>
 8013804:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8013808:	4628      	mov	r0, r5
 801380a:	f7fa fa69 	bl	800dce0 <rcutils_allocator_is_valid>
 801380e:	b158      	cbz	r0, 8013828 <rcl_subscription_init+0x120>
 8013810:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8013812:	b148      	cbz	r0, 8013828 <rcl_subscription_init+0x120>
 8013814:	4629      	mov	r1, r5
 8013816:	f002 f987 	bl	8015b28 <rmw_subscription_content_filter_options_fini>
 801381a:	4605      	mov	r5, r0
 801381c:	b9b8      	cbnz	r0, 801384e <rcl_subscription_init+0x146>
 801381e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013820:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8013822:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8013824:	4798      	blx	r3
 8013826:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8013828:	6827      	ldr	r7, [r4, #0]
 801382a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 801382c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801382e:	4638      	mov	r0, r7
 8013830:	4798      	blx	r3
 8013832:	2300      	movs	r3, #0
 8013834:	6023      	str	r3, [r4, #0]
 8013836:	2701      	movs	r7, #1
 8013838:	e7c8      	b.n	80137cc <rcl_subscription_init+0xc4>
 801383a:	2867      	cmp	r0, #103	@ 0x67
 801383c:	d0c6      	beq.n	80137cc <rcl_subscription_init+0xc4>
 801383e:	2869      	cmp	r0, #105	@ 0x69
 8013840:	d003      	beq.n	801384a <rcl_subscription_init+0x142>
 8013842:	280a      	cmp	r0, #10
 8013844:	d1f7      	bne.n	8013836 <rcl_subscription_init+0x12e>
 8013846:	270a      	movs	r7, #10
 8013848:	e7c0      	b.n	80137cc <rcl_subscription_init+0xc4>
 801384a:	2767      	movs	r7, #103	@ 0x67
 801384c:	e7be      	b.n	80137cc <rcl_subscription_init+0xc4>
 801384e:	f7ff f8fd 	bl	8012a4c <rcl_convert_rmw_ret_to_rcl_ret>
 8013852:	6827      	ldr	r7, [r4, #0]
 8013854:	e7e9      	b.n	801382a <rcl_subscription_init+0x122>
 8013856:	bf00      	nop

08013858 <rcl_subscription_get_default_options>:
 8013858:	b570      	push	{r4, r5, r6, lr}
 801385a:	4d14      	ldr	r5, [pc, #80]	@ (80138ac <rcl_subscription_get_default_options+0x54>)
 801385c:	4914      	ldr	r1, [pc, #80]	@ (80138b0 <rcl_subscription_get_default_options+0x58>)
 801385e:	b08a      	sub	sp, #40	@ 0x28
 8013860:	4604      	mov	r4, r0
 8013862:	2250      	movs	r2, #80	@ 0x50
 8013864:	4628      	mov	r0, r5
 8013866:	f007 fbc6 	bl	801aff6 <memcpy>
 801386a:	a804      	add	r0, sp, #16
 801386c:	f7fa fa2a 	bl	800dcc4 <rcutils_get_default_allocator>
 8013870:	f10d 0c10 	add.w	ip, sp, #16
 8013874:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013878:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 801387c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013880:	466e      	mov	r6, sp
 8013882:	f8dc 3000 	ldr.w	r3, [ip]
 8013886:	f8ce 3000 	str.w	r3, [lr]
 801388a:	4630      	mov	r0, r6
 801388c:	f002 f966 	bl	8015b5c <rmw_get_default_subscription_options>
 8013890:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8013894:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8013898:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801389c:	2270      	movs	r2, #112	@ 0x70
 801389e:	4629      	mov	r1, r5
 80138a0:	4620      	mov	r0, r4
 80138a2:	f007 fba8 	bl	801aff6 <memcpy>
 80138a6:	4620      	mov	r0, r4
 80138a8:	b00a      	add	sp, #40	@ 0x28
 80138aa:	bd70      	pop	{r4, r5, r6, pc}
 80138ac:	20011b00 	.word	0x20011b00
 80138b0:	08020170 	.word	0x08020170

080138b4 <rcl_take>:
 80138b4:	2800      	cmp	r0, #0
 80138b6:	d04a      	beq.n	801394e <rcl_take+0x9a>
 80138b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138bc:	4604      	mov	r4, r0
 80138be:	6800      	ldr	r0, [r0, #0]
 80138c0:	b0a4      	sub	sp, #144	@ 0x90
 80138c2:	2800      	cmp	r0, #0
 80138c4:	d03b      	beq.n	801393e <rcl_take+0x8a>
 80138c6:	461f      	mov	r7, r3
 80138c8:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d036      	beq.n	801393e <rcl_take+0x8a>
 80138d0:	460e      	mov	r6, r1
 80138d2:	2900      	cmp	r1, #0
 80138d4:	d039      	beq.n	801394a <rcl_take+0x96>
 80138d6:	4615      	mov	r5, r2
 80138d8:	2a00      	cmp	r2, #0
 80138da:	d03c      	beq.n	8013956 <rcl_take+0xa2>
 80138dc:	a802      	add	r0, sp, #8
 80138de:	f002 f9c7 	bl	8015c70 <rmw_get_zero_initialized_message_info>
 80138e2:	f10d 0c08 	add.w	ip, sp, #8
 80138e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80138ea:	46ae      	mov	lr, r5
 80138ec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80138f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80138f4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80138f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80138fc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013900:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8013904:	f04f 0800 	mov.w	r8, #0
 8013908:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 801390c:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8013910:	6822      	ldr	r2, [r4, #0]
 8013912:	462b      	mov	r3, r5
 8013914:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8013918:	9700      	str	r7, [sp, #0]
 801391a:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 801391e:	4631      	mov	r1, r6
 8013920:	f003 fa2a 	bl	8016d78 <rmw_take_with_info>
 8013924:	4603      	mov	r3, r0
 8013926:	b9c0      	cbnz	r0, 801395a <rcl_take+0xa6>
 8013928:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 801392c:	f240 1291 	movw	r2, #401	@ 0x191
 8013930:	2900      	cmp	r1, #0
 8013932:	bf08      	it	eq
 8013934:	4613      	moveq	r3, r2
 8013936:	4618      	mov	r0, r3
 8013938:	b024      	add	sp, #144	@ 0x90
 801393a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801393e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8013942:	4618      	mov	r0, r3
 8013944:	b024      	add	sp, #144	@ 0x90
 8013946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801394a:	230b      	movs	r3, #11
 801394c:	e7f3      	b.n	8013936 <rcl_take+0x82>
 801394e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8013952:	4618      	mov	r0, r3
 8013954:	4770      	bx	lr
 8013956:	ad14      	add	r5, sp, #80	@ 0x50
 8013958:	e7c0      	b.n	80138dc <rcl_take+0x28>
 801395a:	f7ff f877 	bl	8012a4c <rcl_convert_rmw_ret_to_rcl_ret>
 801395e:	4603      	mov	r3, r0
 8013960:	e7e9      	b.n	8013936 <rcl_take+0x82>
 8013962:	bf00      	nop

08013964 <rcl_subscription_get_rmw_handle>:
 8013964:	b118      	cbz	r0, 801396e <rcl_subscription_get_rmw_handle+0xa>
 8013966:	6800      	ldr	r0, [r0, #0]
 8013968:	b108      	cbz	r0, 801396e <rcl_subscription_get_rmw_handle+0xa>
 801396a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801396e:	4770      	bx	lr

08013970 <rcl_subscription_is_valid>:
 8013970:	b130      	cbz	r0, 8013980 <rcl_subscription_is_valid+0x10>
 8013972:	6800      	ldr	r0, [r0, #0]
 8013974:	b120      	cbz	r0, 8013980 <rcl_subscription_is_valid+0x10>
 8013976:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801397a:	3800      	subs	r0, #0
 801397c:	bf18      	it	ne
 801397e:	2001      	movne	r0, #1
 8013980:	4770      	bx	lr
 8013982:	bf00      	nop

08013984 <rcl_get_system_time>:
 8013984:	4608      	mov	r0, r1
 8013986:	f7fa b9eb 	b.w	800dd60 <rcutils_system_time_now>
 801398a:	bf00      	nop

0801398c <rcl_get_steady_time>:
 801398c:	4608      	mov	r0, r1
 801398e:	f7fa ba0f 	b.w	800ddb0 <rcutils_steady_time_now>
 8013992:	bf00      	nop

08013994 <rcl_get_ros_time>:
 8013994:	7a03      	ldrb	r3, [r0, #8]
 8013996:	b510      	push	{r4, lr}
 8013998:	460c      	mov	r4, r1
 801399a:	b133      	cbz	r3, 80139aa <rcl_get_ros_time+0x16>
 801399c:	2105      	movs	r1, #5
 801399e:	f001 fd4f 	bl	8015440 <__atomic_load_8>
 80139a2:	e9c4 0100 	strd	r0, r1, [r4]
 80139a6:	2000      	movs	r0, #0
 80139a8:	bd10      	pop	{r4, pc}
 80139aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80139ae:	4608      	mov	r0, r1
 80139b0:	f7fa b9d6 	b.w	800dd60 <rcutils_system_time_now>

080139b4 <rcl_clock_init>:
 80139b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139b6:	4605      	mov	r5, r0
 80139b8:	4610      	mov	r0, r2
 80139ba:	4614      	mov	r4, r2
 80139bc:	460e      	mov	r6, r1
 80139be:	f7fa f98f 	bl	800dce0 <rcutils_allocator_is_valid>
 80139c2:	b128      	cbz	r0, 80139d0 <rcl_clock_init+0x1c>
 80139c4:	2d03      	cmp	r5, #3
 80139c6:	d803      	bhi.n	80139d0 <rcl_clock_init+0x1c>
 80139c8:	e8df f005 	tbb	[pc, r5]
 80139cc:	06532e1d 	.word	0x06532e1d
 80139d0:	f04f 0c0b 	mov.w	ip, #11
 80139d4:	4660      	mov	r0, ip
 80139d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139d8:	2e00      	cmp	r6, #0
 80139da:	d0f9      	beq.n	80139d0 <rcl_clock_init+0x1c>
 80139dc:	2c00      	cmp	r4, #0
 80139de:	d0f7      	beq.n	80139d0 <rcl_clock_init+0x1c>
 80139e0:	2300      	movs	r3, #0
 80139e2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80139e6:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8013a9c <rcl_clock_init+0xe8>
 80139ea:	6133      	str	r3, [r6, #16]
 80139ec:	f106 0514 	add.w	r5, r6, #20
 80139f0:	469c      	mov	ip, r3
 80139f2:	2703      	movs	r7, #3
 80139f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80139f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80139f8:	6823      	ldr	r3, [r4, #0]
 80139fa:	602b      	str	r3, [r5, #0]
 80139fc:	7037      	strb	r7, [r6, #0]
 80139fe:	f8c6 e00c 	str.w	lr, [r6, #12]
 8013a02:	4660      	mov	r0, ip
 8013a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a06:	2e00      	cmp	r6, #0
 8013a08:	d0e2      	beq.n	80139d0 <rcl_clock_init+0x1c>
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	7033      	strb	r3, [r6, #0]
 8013a0e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8013a12:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8013a16:	469c      	mov	ip, r3
 8013a18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013a1a:	f106 0514 	add.w	r5, r6, #20
 8013a1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013a20:	6823      	ldr	r3, [r4, #0]
 8013a22:	602b      	str	r3, [r5, #0]
 8013a24:	4660      	mov	r0, ip
 8013a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a28:	2e00      	cmp	r6, #0
 8013a2a:	d0d1      	beq.n	80139d0 <rcl_clock_init+0x1c>
 8013a2c:	2c00      	cmp	r4, #0
 8013a2e:	d0cf      	beq.n	80139d0 <rcl_clock_init+0x1c>
 8013a30:	2700      	movs	r7, #0
 8013a32:	7037      	strb	r7, [r6, #0]
 8013a34:	46a4      	mov	ip, r4
 8013a36:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013a3a:	f106 0514 	add.w	r5, r6, #20
 8013a3e:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8013a42:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8013a46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013a48:	f8dc 3000 	ldr.w	r3, [ip]
 8013a4c:	602b      	str	r3, [r5, #0]
 8013a4e:	6921      	ldr	r1, [r4, #16]
 8013a50:	6823      	ldr	r3, [r4, #0]
 8013a52:	2010      	movs	r0, #16
 8013a54:	4798      	blx	r3
 8013a56:	6130      	str	r0, [r6, #16]
 8013a58:	b1d0      	cbz	r0, 8013a90 <rcl_clock_init+0xdc>
 8013a5a:	2200      	movs	r2, #0
 8013a5c:	2300      	movs	r3, #0
 8013a5e:	e9c0 2300 	strd	r2, r3, [r0]
 8013a62:	2301      	movs	r3, #1
 8013a64:	7207      	strb	r7, [r0, #8]
 8013a66:	4a0c      	ldr	r2, [pc, #48]	@ (8013a98 <rcl_clock_init+0xe4>)
 8013a68:	7033      	strb	r3, [r6, #0]
 8013a6a:	46bc      	mov	ip, r7
 8013a6c:	60f2      	str	r2, [r6, #12]
 8013a6e:	4660      	mov	r0, ip
 8013a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a72:	2e00      	cmp	r6, #0
 8013a74:	d0ac      	beq.n	80139d0 <rcl_clock_init+0x1c>
 8013a76:	2c00      	cmp	r4, #0
 8013a78:	d0aa      	beq.n	80139d0 <rcl_clock_init+0x1c>
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8013a80:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8013aa0 <rcl_clock_init+0xec>
 8013a84:	6133      	str	r3, [r6, #16]
 8013a86:	f106 0514 	add.w	r5, r6, #20
 8013a8a:	469c      	mov	ip, r3
 8013a8c:	2702      	movs	r7, #2
 8013a8e:	e7b1      	b.n	80139f4 <rcl_clock_init+0x40>
 8013a90:	f04f 0c0a 	mov.w	ip, #10
 8013a94:	e79e      	b.n	80139d4 <rcl_clock_init+0x20>
 8013a96:	bf00      	nop
 8013a98:	08013995 	.word	0x08013995
 8013a9c:	0801398d 	.word	0x0801398d
 8013aa0:	08013985 	.word	0x08013985

08013aa4 <rcl_clock_get_now>:
 8013aa4:	b140      	cbz	r0, 8013ab8 <rcl_clock_get_now+0x14>
 8013aa6:	b139      	cbz	r1, 8013ab8 <rcl_clock_get_now+0x14>
 8013aa8:	7803      	ldrb	r3, [r0, #0]
 8013aaa:	b11b      	cbz	r3, 8013ab4 <rcl_clock_get_now+0x10>
 8013aac:	68c3      	ldr	r3, [r0, #12]
 8013aae:	b10b      	cbz	r3, 8013ab4 <rcl_clock_get_now+0x10>
 8013ab0:	6900      	ldr	r0, [r0, #16]
 8013ab2:	4718      	bx	r3
 8013ab4:	2001      	movs	r0, #1
 8013ab6:	4770      	bx	lr
 8013ab8:	200b      	movs	r0, #11
 8013aba:	4770      	bx	lr

08013abc <rcl_timer_call>:
 8013abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ac0:	b087      	sub	sp, #28
 8013ac2:	2800      	cmp	r0, #0
 8013ac4:	d06d      	beq.n	8013ba2 <rcl_timer_call+0xe6>
 8013ac6:	6803      	ldr	r3, [r0, #0]
 8013ac8:	4604      	mov	r4, r0
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d063      	beq.n	8013b96 <rcl_timer_call+0xda>
 8013ace:	f3bf 8f5b 	dmb	ish
 8013ad2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013ad6:	f3bf 8f5b 	dmb	ish
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d150      	bne.n	8013b80 <rcl_timer_call+0xc4>
 8013ade:	6803      	ldr	r3, [r0, #0]
 8013ae0:	a904      	add	r1, sp, #16
 8013ae2:	6818      	ldr	r0, [r3, #0]
 8013ae4:	f7ff ffde 	bl	8013aa4 <rcl_clock_get_now>
 8013ae8:	4605      	mov	r5, r0
 8013aea:	2800      	cmp	r0, #0
 8013aec:	d14a      	bne.n	8013b84 <rcl_timer_call+0xc8>
 8013aee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	db4a      	blt.n	8013b8c <rcl_timer_call+0xd0>
 8013af6:	6820      	ldr	r0, [r4, #0]
 8013af8:	f04f 0a05 	mov.w	sl, #5
 8013afc:	f8cd a000 	str.w	sl, [sp]
 8013b00:	3020      	adds	r0, #32
 8013b02:	f001 fd09 	bl	8015518 <__atomic_exchange_8>
 8013b06:	6823      	ldr	r3, [r4, #0]
 8013b08:	f3bf 8f5b 	dmb	ish
 8013b0c:	4680      	mov	r8, r0
 8013b0e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8013b12:	f3bf 8f5b 	dmb	ish
 8013b16:	6820      	ldr	r0, [r4, #0]
 8013b18:	4689      	mov	r9, r1
 8013b1a:	3028      	adds	r0, #40	@ 0x28
 8013b1c:	4651      	mov	r1, sl
 8013b1e:	f001 fc8f 	bl	8015440 <__atomic_load_8>
 8013b22:	4606      	mov	r6, r0
 8013b24:	6820      	ldr	r0, [r4, #0]
 8013b26:	460f      	mov	r7, r1
 8013b28:	3018      	adds	r0, #24
 8013b2a:	4651      	mov	r1, sl
 8013b2c:	f001 fc88 	bl	8015440 <__atomic_load_8>
 8013b30:	1836      	adds	r6, r6, r0
 8013b32:	4602      	mov	r2, r0
 8013b34:	4682      	mov	sl, r0
 8013b36:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8013b3a:	eb47 0701 	adc.w	r7, r7, r1
 8013b3e:	4286      	cmp	r6, r0
 8013b40:	460b      	mov	r3, r1
 8013b42:	eb77 010c 	sbcs.w	r1, r7, ip
 8013b46:	da04      	bge.n	8013b52 <rcl_timer_call+0x96>
 8013b48:	ea53 0102 	orrs.w	r1, r3, r2
 8013b4c:	d12e      	bne.n	8013bac <rcl_timer_call+0xf0>
 8013b4e:	4606      	mov	r6, r0
 8013b50:	4667      	mov	r7, ip
 8013b52:	6820      	ldr	r0, [r4, #0]
 8013b54:	2105      	movs	r1, #5
 8013b56:	4632      	mov	r2, r6
 8013b58:	463b      	mov	r3, r7
 8013b5a:	3028      	adds	r0, #40	@ 0x28
 8013b5c:	9100      	str	r1, [sp, #0]
 8013b5e:	f001 fca5 	bl	80154ac <__atomic_store_8>
 8013b62:	f1bb 0f00 	cmp.w	fp, #0
 8013b66:	d00d      	beq.n	8013b84 <rcl_timer_call+0xc8>
 8013b68:	9a04      	ldr	r2, [sp, #16]
 8013b6a:	9b05      	ldr	r3, [sp, #20]
 8013b6c:	ebb2 0208 	subs.w	r2, r2, r8
 8013b70:	4620      	mov	r0, r4
 8013b72:	eb63 0309 	sbc.w	r3, r3, r9
 8013b76:	47d8      	blx	fp
 8013b78:	4628      	mov	r0, r5
 8013b7a:	b007      	add	sp, #28
 8013b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b80:	f240 3521 	movw	r5, #801	@ 0x321
 8013b84:	4628      	mov	r0, r5
 8013b86:	b007      	add	sp, #28
 8013b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b8c:	2501      	movs	r5, #1
 8013b8e:	4628      	mov	r0, r5
 8013b90:	b007      	add	sp, #28
 8013b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b96:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8013b9a:	4628      	mov	r0, r5
 8013b9c:	b007      	add	sp, #28
 8013b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ba2:	250b      	movs	r5, #11
 8013ba4:	4628      	mov	r0, r5
 8013ba6:	b007      	add	sp, #28
 8013ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bac:	1b80      	subs	r0, r0, r6
 8013bae:	eb6c 0107 	sbc.w	r1, ip, r7
 8013bb2:	3801      	subs	r0, #1
 8013bb4:	f161 0100 	sbc.w	r1, r1, #0
 8013bb8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8013bbc:	f7ed f87c 	bl	8000cb8 <__aeabi_ldivmod>
 8013bc0:	9b02      	ldr	r3, [sp, #8]
 8013bc2:	3001      	adds	r0, #1
 8013bc4:	f141 0100 	adc.w	r1, r1, #0
 8013bc8:	fb00 f303 	mul.w	r3, r0, r3
 8013bcc:	fb01 330a 	mla	r3, r1, sl, r3
 8013bd0:	fba0 0a0a 	umull	r0, sl, r0, sl
 8013bd4:	1986      	adds	r6, r0, r6
 8013bd6:	4453      	add	r3, sl
 8013bd8:	eb43 0707 	adc.w	r7, r3, r7
 8013bdc:	e7b9      	b.n	8013b52 <rcl_timer_call+0x96>
 8013bde:	bf00      	nop

08013be0 <rcl_timer_is_ready>:
 8013be0:	b570      	push	{r4, r5, r6, lr}
 8013be2:	b082      	sub	sp, #8
 8013be4:	b378      	cbz	r0, 8013c46 <rcl_timer_is_ready+0x66>
 8013be6:	6803      	ldr	r3, [r0, #0]
 8013be8:	4604      	mov	r4, r0
 8013bea:	b383      	cbz	r3, 8013c4e <rcl_timer_is_ready+0x6e>
 8013bec:	460d      	mov	r5, r1
 8013bee:	b351      	cbz	r1, 8013c46 <rcl_timer_is_ready+0x66>
 8013bf0:	f3bf 8f5b 	dmb	ish
 8013bf4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013bf8:	f3bf 8f5b 	dmb	ish
 8013bfc:	b953      	cbnz	r3, 8013c14 <rcl_timer_is_ready+0x34>
 8013bfe:	6803      	ldr	r3, [r0, #0]
 8013c00:	4669      	mov	r1, sp
 8013c02:	6818      	ldr	r0, [r3, #0]
 8013c04:	f7ff ff4e 	bl	8013aa4 <rcl_clock_get_now>
 8013c08:	4606      	mov	r6, r0
 8013c0a:	b140      	cbz	r0, 8013c1e <rcl_timer_is_ready+0x3e>
 8013c0c:	f240 3321 	movw	r3, #801	@ 0x321
 8013c10:	4298      	cmp	r0, r3
 8013c12:	d101      	bne.n	8013c18 <rcl_timer_is_ready+0x38>
 8013c14:	2600      	movs	r6, #0
 8013c16:	702e      	strb	r6, [r5, #0]
 8013c18:	4630      	mov	r0, r6
 8013c1a:	b002      	add	sp, #8
 8013c1c:	bd70      	pop	{r4, r5, r6, pc}
 8013c1e:	6820      	ldr	r0, [r4, #0]
 8013c20:	2105      	movs	r1, #5
 8013c22:	3028      	adds	r0, #40	@ 0x28
 8013c24:	f001 fc0c 	bl	8015440 <__atomic_load_8>
 8013c28:	9b00      	ldr	r3, [sp, #0]
 8013c2a:	1ac0      	subs	r0, r0, r3
 8013c2c:	9b01      	ldr	r3, [sp, #4]
 8013c2e:	eb61 0103 	sbc.w	r1, r1, r3
 8013c32:	2801      	cmp	r0, #1
 8013c34:	f171 0300 	sbcs.w	r3, r1, #0
 8013c38:	bfb4      	ite	lt
 8013c3a:	2301      	movlt	r3, #1
 8013c3c:	2300      	movge	r3, #0
 8013c3e:	4630      	mov	r0, r6
 8013c40:	702b      	strb	r3, [r5, #0]
 8013c42:	b002      	add	sp, #8
 8013c44:	bd70      	pop	{r4, r5, r6, pc}
 8013c46:	260b      	movs	r6, #11
 8013c48:	4630      	mov	r0, r6
 8013c4a:	b002      	add	sp, #8
 8013c4c:	bd70      	pop	{r4, r5, r6, pc}
 8013c4e:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8013c52:	e7e1      	b.n	8013c18 <rcl_timer_is_ready+0x38>

08013c54 <rcl_timer_get_time_until_next_call>:
 8013c54:	b570      	push	{r4, r5, r6, lr}
 8013c56:	b082      	sub	sp, #8
 8013c58:	b330      	cbz	r0, 8013ca8 <rcl_timer_get_time_until_next_call+0x54>
 8013c5a:	6803      	ldr	r3, [r0, #0]
 8013c5c:	4604      	mov	r4, r0
 8013c5e:	b33b      	cbz	r3, 8013cb0 <rcl_timer_get_time_until_next_call+0x5c>
 8013c60:	460d      	mov	r5, r1
 8013c62:	b309      	cbz	r1, 8013ca8 <rcl_timer_get_time_until_next_call+0x54>
 8013c64:	f3bf 8f5b 	dmb	ish
 8013c68:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013c6c:	f3bf 8f5b 	dmb	ish
 8013c70:	b9ab      	cbnz	r3, 8013c9e <rcl_timer_get_time_until_next_call+0x4a>
 8013c72:	6803      	ldr	r3, [r0, #0]
 8013c74:	4669      	mov	r1, sp
 8013c76:	6818      	ldr	r0, [r3, #0]
 8013c78:	f7ff ff14 	bl	8013aa4 <rcl_clock_get_now>
 8013c7c:	4606      	mov	r6, r0
 8013c7e:	b958      	cbnz	r0, 8013c98 <rcl_timer_get_time_until_next_call+0x44>
 8013c80:	6820      	ldr	r0, [r4, #0]
 8013c82:	2105      	movs	r1, #5
 8013c84:	3028      	adds	r0, #40	@ 0x28
 8013c86:	f001 fbdb 	bl	8015440 <__atomic_load_8>
 8013c8a:	9b00      	ldr	r3, [sp, #0]
 8013c8c:	1ac0      	subs	r0, r0, r3
 8013c8e:	9b01      	ldr	r3, [sp, #4]
 8013c90:	6028      	str	r0, [r5, #0]
 8013c92:	eb61 0103 	sbc.w	r1, r1, r3
 8013c96:	6069      	str	r1, [r5, #4]
 8013c98:	4630      	mov	r0, r6
 8013c9a:	b002      	add	sp, #8
 8013c9c:	bd70      	pop	{r4, r5, r6, pc}
 8013c9e:	f240 3621 	movw	r6, #801	@ 0x321
 8013ca2:	4630      	mov	r0, r6
 8013ca4:	b002      	add	sp, #8
 8013ca6:	bd70      	pop	{r4, r5, r6, pc}
 8013ca8:	260b      	movs	r6, #11
 8013caa:	4630      	mov	r0, r6
 8013cac:	b002      	add	sp, #8
 8013cae:	bd70      	pop	{r4, r5, r6, pc}
 8013cb0:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8013cb4:	e7f0      	b.n	8013c98 <rcl_timer_get_time_until_next_call+0x44>
 8013cb6:	bf00      	nop

08013cb8 <rcl_timer_get_guard_condition>:
 8013cb8:	b130      	cbz	r0, 8013cc8 <rcl_timer_get_guard_condition+0x10>
 8013cba:	6800      	ldr	r0, [r0, #0]
 8013cbc:	b120      	cbz	r0, 8013cc8 <rcl_timer_get_guard_condition+0x10>
 8013cbe:	68c3      	ldr	r3, [r0, #12]
 8013cc0:	b10b      	cbz	r3, 8013cc6 <rcl_timer_get_guard_condition+0xe>
 8013cc2:	3008      	adds	r0, #8
 8013cc4:	4770      	bx	lr
 8013cc6:	4618      	mov	r0, r3
 8013cc8:	4770      	bx	lr
 8013cca:	bf00      	nop

08013ccc <rcl_validate_enclave_name_with_size>:
 8013ccc:	b378      	cbz	r0, 8013d2e <rcl_validate_enclave_name_with_size+0x62>
 8013cce:	b570      	push	{r4, r5, r6, lr}
 8013cd0:	4615      	mov	r5, r2
 8013cd2:	b0c2      	sub	sp, #264	@ 0x108
 8013cd4:	b302      	cbz	r2, 8013d18 <rcl_validate_enclave_name_with_size+0x4c>
 8013cd6:	461e      	mov	r6, r3
 8013cd8:	466a      	mov	r2, sp
 8013cda:	ab01      	add	r3, sp, #4
 8013cdc:	460c      	mov	r4, r1
 8013cde:	f002 f845 	bl	8015d6c <rmw_validate_namespace_with_size>
 8013ce2:	4684      	mov	ip, r0
 8013ce4:	b9e8      	cbnz	r0, 8013d22 <rcl_validate_enclave_name_with_size+0x56>
 8013ce6:	9b00      	ldr	r3, [sp, #0]
 8013ce8:	b923      	cbnz	r3, 8013cf4 <rcl_validate_enclave_name_with_size+0x28>
 8013cea:	2300      	movs	r3, #0
 8013cec:	602b      	str	r3, [r5, #0]
 8013cee:	4660      	mov	r0, ip
 8013cf0:	b042      	add	sp, #264	@ 0x108
 8013cf2:	bd70      	pop	{r4, r5, r6, pc}
 8013cf4:	2b07      	cmp	r3, #7
 8013cf6:	d007      	beq.n	8013d08 <rcl_validate_enclave_name_with_size+0x3c>
 8013cf8:	1e5a      	subs	r2, r3, #1
 8013cfa:	2a05      	cmp	r2, #5
 8013cfc:	d833      	bhi.n	8013d66 <rcl_validate_enclave_name_with_size+0x9a>
 8013cfe:	e8df f002 	tbb	[pc, r2]
 8013d02:	2c2f      	.short	0x2c2f
 8013d04:	1a232629 	.word	0x1a232629
 8013d08:	2cff      	cmp	r4, #255	@ 0xff
 8013d0a:	d9ee      	bls.n	8013cea <rcl_validate_enclave_name_with_size+0x1e>
 8013d0c:	602b      	str	r3, [r5, #0]
 8013d0e:	2e00      	cmp	r6, #0
 8013d10:	d0ed      	beq.n	8013cee <rcl_validate_enclave_name_with_size+0x22>
 8013d12:	23fe      	movs	r3, #254	@ 0xfe
 8013d14:	6033      	str	r3, [r6, #0]
 8013d16:	e7ea      	b.n	8013cee <rcl_validate_enclave_name_with_size+0x22>
 8013d18:	f04f 0c0b 	mov.w	ip, #11
 8013d1c:	4660      	mov	r0, ip
 8013d1e:	b042      	add	sp, #264	@ 0x108
 8013d20:	bd70      	pop	{r4, r5, r6, pc}
 8013d22:	f7fe fe93 	bl	8012a4c <rcl_convert_rmw_ret_to_rcl_ret>
 8013d26:	4684      	mov	ip, r0
 8013d28:	4660      	mov	r0, ip
 8013d2a:	b042      	add	sp, #264	@ 0x108
 8013d2c:	bd70      	pop	{r4, r5, r6, pc}
 8013d2e:	f04f 0c0b 	mov.w	ip, #11
 8013d32:	4660      	mov	r0, ip
 8013d34:	4770      	bx	lr
 8013d36:	2306      	movs	r3, #6
 8013d38:	602b      	str	r3, [r5, #0]
 8013d3a:	2e00      	cmp	r6, #0
 8013d3c:	d0d7      	beq.n	8013cee <rcl_validate_enclave_name_with_size+0x22>
 8013d3e:	9b01      	ldr	r3, [sp, #4]
 8013d40:	6033      	str	r3, [r6, #0]
 8013d42:	4660      	mov	r0, ip
 8013d44:	b042      	add	sp, #264	@ 0x108
 8013d46:	bd70      	pop	{r4, r5, r6, pc}
 8013d48:	2305      	movs	r3, #5
 8013d4a:	602b      	str	r3, [r5, #0]
 8013d4c:	e7f5      	b.n	8013d3a <rcl_validate_enclave_name_with_size+0x6e>
 8013d4e:	2304      	movs	r3, #4
 8013d50:	602b      	str	r3, [r5, #0]
 8013d52:	e7f2      	b.n	8013d3a <rcl_validate_enclave_name_with_size+0x6e>
 8013d54:	2303      	movs	r3, #3
 8013d56:	602b      	str	r3, [r5, #0]
 8013d58:	e7ef      	b.n	8013d3a <rcl_validate_enclave_name_with_size+0x6e>
 8013d5a:	2302      	movs	r3, #2
 8013d5c:	602b      	str	r3, [r5, #0]
 8013d5e:	e7ec      	b.n	8013d3a <rcl_validate_enclave_name_with_size+0x6e>
 8013d60:	2301      	movs	r3, #1
 8013d62:	602b      	str	r3, [r5, #0]
 8013d64:	e7e9      	b.n	8013d3a <rcl_validate_enclave_name_with_size+0x6e>
 8013d66:	4a04      	ldr	r2, [pc, #16]	@ (8013d78 <rcl_validate_enclave_name_with_size+0xac>)
 8013d68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8013d6c:	a802      	add	r0, sp, #8
 8013d6e:	f001 fd21 	bl	80157b4 <rcutils_snprintf>
 8013d72:	f04f 0c01 	mov.w	ip, #1
 8013d76:	e7ba      	b.n	8013cee <rcl_validate_enclave_name_with_size+0x22>
 8013d78:	080201c0 	.word	0x080201c0

08013d7c <rcl_validate_enclave_name>:
 8013d7c:	b168      	cbz	r0, 8013d9a <rcl_validate_enclave_name+0x1e>
 8013d7e:	b570      	push	{r4, r5, r6, lr}
 8013d80:	460d      	mov	r5, r1
 8013d82:	4616      	mov	r6, r2
 8013d84:	4604      	mov	r4, r0
 8013d86:	f7ec fa8b 	bl	80002a0 <strlen>
 8013d8a:	4633      	mov	r3, r6
 8013d8c:	4601      	mov	r1, r0
 8013d8e:	462a      	mov	r2, r5
 8013d90:	4620      	mov	r0, r4
 8013d92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d96:	f7ff bf99 	b.w	8013ccc <rcl_validate_enclave_name_with_size>
 8013d9a:	200b      	movs	r0, #11
 8013d9c:	4770      	bx	lr
 8013d9e:	bf00      	nop

08013da0 <rcl_get_zero_initialized_wait_set>:
 8013da0:	b510      	push	{r4, lr}
 8013da2:	4c08      	ldr	r4, [pc, #32]	@ (8013dc4 <rcl_get_zero_initialized_wait_set+0x24>)
 8013da4:	4686      	mov	lr, r0
 8013da6:	4684      	mov	ip, r0
 8013da8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013daa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013dae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013db0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013db4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013db6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013dba:	6823      	ldr	r3, [r4, #0]
 8013dbc:	f8cc 3000 	str.w	r3, [ip]
 8013dc0:	4670      	mov	r0, lr
 8013dc2:	bd10      	pop	{r4, pc}
 8013dc4:	08020220 	.word	0x08020220

08013dc8 <rcl_wait_set_is_valid>:
 8013dc8:	b118      	cbz	r0, 8013dd2 <rcl_wait_set_is_valid+0xa>
 8013dca:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8013dcc:	3800      	subs	r0, #0
 8013dce:	bf18      	it	ne
 8013dd0:	2001      	movne	r0, #1
 8013dd2:	4770      	bx	lr

08013dd4 <rcl_wait_set_fini>:
 8013dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dd8:	b082      	sub	sp, #8
 8013dda:	2800      	cmp	r0, #0
 8013ddc:	f000 8095 	beq.w	8013f0a <rcl_wait_set_fini+0x136>
 8013de0:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8013de2:	4604      	mov	r4, r0
 8013de4:	2e00      	cmp	r6, #0
 8013de6:	f000 808c 	beq.w	8013f02 <rcl_wait_set_fini+0x12e>
 8013dea:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8013dec:	f003 f9b2 	bl	8017154 <rmw_destroy_wait_set>
 8013df0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013df2:	1e06      	subs	r6, r0, #0
 8013df4:	bf18      	it	ne
 8013df6:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8013dfa:	2d00      	cmp	r5, #0
 8013dfc:	f000 8081 	beq.w	8013f02 <rcl_wait_set_fini+0x12e>
 8013e00:	6820      	ldr	r0, [r4, #0]
 8013e02:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8013e06:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013e08:	2700      	movs	r7, #0
 8013e0a:	6067      	str	r7, [r4, #4]
 8013e0c:	602f      	str	r7, [r5, #0]
 8013e0e:	b120      	cbz	r0, 8013e1a <rcl_wait_set_fini+0x46>
 8013e10:	9101      	str	r1, [sp, #4]
 8013e12:	47c0      	blx	r8
 8013e14:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013e16:	9901      	ldr	r1, [sp, #4]
 8013e18:	6027      	str	r7, [r4, #0]
 8013e1a:	68a8      	ldr	r0, [r5, #8]
 8013e1c:	b120      	cbz	r0, 8013e28 <rcl_wait_set_fini+0x54>
 8013e1e:	47c0      	blx	r8
 8013e20:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013e22:	2300      	movs	r3, #0
 8013e24:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8013e28:	68a0      	ldr	r0, [r4, #8]
 8013e2a:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8013e2c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013e2e:	f04f 0800 	mov.w	r8, #0
 8013e32:	f8c4 800c 	str.w	r8, [r4, #12]
 8013e36:	f8c5 800c 	str.w	r8, [r5, #12]
 8013e3a:	b128      	cbz	r0, 8013e48 <rcl_wait_set_fini+0x74>
 8013e3c:	47b8      	blx	r7
 8013e3e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013e40:	f8c4 8008 	str.w	r8, [r4, #8]
 8013e44:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8013e46:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013e48:	6968      	ldr	r0, [r5, #20]
 8013e4a:	f04f 0800 	mov.w	r8, #0
 8013e4e:	f8c5 8010 	str.w	r8, [r5, #16]
 8013e52:	b128      	cbz	r0, 8013e60 <rcl_wait_set_fini+0x8c>
 8013e54:	47b8      	blx	r7
 8013e56:	f8c5 8014 	str.w	r8, [r5, #20]
 8013e5a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013e5c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8013e5e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013e60:	6920      	ldr	r0, [r4, #16]
 8013e62:	f04f 0800 	mov.w	r8, #0
 8013e66:	f8c4 8014 	str.w	r8, [r4, #20]
 8013e6a:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8013e6e:	b128      	cbz	r0, 8013e7c <rcl_wait_set_fini+0xa8>
 8013e70:	47b8      	blx	r7
 8013e72:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013e74:	f8c4 8010 	str.w	r8, [r4, #16]
 8013e78:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8013e7a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013e7c:	69a0      	ldr	r0, [r4, #24]
 8013e7e:	f04f 0800 	mov.w	r8, #0
 8013e82:	f8c4 801c 	str.w	r8, [r4, #28]
 8013e86:	f8c5 8018 	str.w	r8, [r5, #24]
 8013e8a:	b128      	cbz	r0, 8013e98 <rcl_wait_set_fini+0xc4>
 8013e8c:	9101      	str	r1, [sp, #4]
 8013e8e:	47b8      	blx	r7
 8013e90:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013e92:	9901      	ldr	r1, [sp, #4]
 8013e94:	f8c4 8018 	str.w	r8, [r4, #24]
 8013e98:	6a28      	ldr	r0, [r5, #32]
 8013e9a:	b120      	cbz	r0, 8013ea6 <rcl_wait_set_fini+0xd2>
 8013e9c:	47b8      	blx	r7
 8013e9e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013ea0:	2300      	movs	r3, #0
 8013ea2:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8013ea6:	6a20      	ldr	r0, [r4, #32]
 8013ea8:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8013eac:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013eae:	2700      	movs	r7, #0
 8013eb0:	6267      	str	r7, [r4, #36]	@ 0x24
 8013eb2:	626f      	str	r7, [r5, #36]	@ 0x24
 8013eb4:	b120      	cbz	r0, 8013ec0 <rcl_wait_set_fini+0xec>
 8013eb6:	9101      	str	r1, [sp, #4]
 8013eb8:	47c0      	blx	r8
 8013eba:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013ebc:	9901      	ldr	r1, [sp, #4]
 8013ebe:	6227      	str	r7, [r4, #32]
 8013ec0:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8013ec2:	b120      	cbz	r0, 8013ece <rcl_wait_set_fini+0xfa>
 8013ec4:	47c0      	blx	r8
 8013ec6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013ec8:	2300      	movs	r3, #0
 8013eca:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8013ece:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8013ed0:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8013ed4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013ed6:	2700      	movs	r7, #0
 8013ed8:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8013eda:	632f      	str	r7, [r5, #48]	@ 0x30
 8013edc:	b120      	cbz	r0, 8013ee8 <rcl_wait_set_fini+0x114>
 8013ede:	9101      	str	r1, [sp, #4]
 8013ee0:	47c0      	blx	r8
 8013ee2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013ee4:	9901      	ldr	r1, [sp, #4]
 8013ee6:	62a7      	str	r7, [r4, #40]	@ 0x28
 8013ee8:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8013eea:	b120      	cbz	r0, 8013ef6 <rcl_wait_set_fini+0x122>
 8013eec:	47c0      	blx	r8
 8013eee:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013ef0:	2300      	movs	r3, #0
 8013ef2:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8013ef6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8013ef8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013efa:	4628      	mov	r0, r5
 8013efc:	4798      	blx	r3
 8013efe:	2300      	movs	r3, #0
 8013f00:	6323      	str	r3, [r4, #48]	@ 0x30
 8013f02:	4630      	mov	r0, r6
 8013f04:	b002      	add	sp, #8
 8013f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f0a:	260b      	movs	r6, #11
 8013f0c:	4630      	mov	r0, r6
 8013f0e:	b002      	add	sp, #8
 8013f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013f14 <rcl_wait_set_add_subscription>:
 8013f14:	b318      	cbz	r0, 8013f5e <rcl_wait_set_add_subscription+0x4a>
 8013f16:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013f18:	b570      	push	{r4, r5, r6, lr}
 8013f1a:	4604      	mov	r4, r0
 8013f1c:	b30b      	cbz	r3, 8013f62 <rcl_wait_set_add_subscription+0x4e>
 8013f1e:	b319      	cbz	r1, 8013f68 <rcl_wait_set_add_subscription+0x54>
 8013f20:	681d      	ldr	r5, [r3, #0]
 8013f22:	6840      	ldr	r0, [r0, #4]
 8013f24:	4285      	cmp	r5, r0
 8013f26:	d217      	bcs.n	8013f58 <rcl_wait_set_add_subscription+0x44>
 8013f28:	6820      	ldr	r0, [r4, #0]
 8013f2a:	1c6e      	adds	r6, r5, #1
 8013f2c:	601e      	str	r6, [r3, #0]
 8013f2e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013f32:	b102      	cbz	r2, 8013f36 <rcl_wait_set_add_subscription+0x22>
 8013f34:	6015      	str	r5, [r2, #0]
 8013f36:	4608      	mov	r0, r1
 8013f38:	f7ff fd14 	bl	8013964 <rcl_subscription_get_rmw_handle>
 8013f3c:	b150      	cbz	r0, 8013f54 <rcl_wait_set_add_subscription+0x40>
 8013f3e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013f40:	6842      	ldr	r2, [r0, #4]
 8013f42:	689b      	ldr	r3, [r3, #8]
 8013f44:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013f48:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013f4a:	6853      	ldr	r3, [r2, #4]
 8013f4c:	3301      	adds	r3, #1
 8013f4e:	2000      	movs	r0, #0
 8013f50:	6053      	str	r3, [r2, #4]
 8013f52:	bd70      	pop	{r4, r5, r6, pc}
 8013f54:	2001      	movs	r0, #1
 8013f56:	bd70      	pop	{r4, r5, r6, pc}
 8013f58:	f240 3086 	movw	r0, #902	@ 0x386
 8013f5c:	bd70      	pop	{r4, r5, r6, pc}
 8013f5e:	200b      	movs	r0, #11
 8013f60:	4770      	bx	lr
 8013f62:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013f66:	bd70      	pop	{r4, r5, r6, pc}
 8013f68:	200b      	movs	r0, #11
 8013f6a:	bd70      	pop	{r4, r5, r6, pc}

08013f6c <rcl_wait_set_clear>:
 8013f6c:	2800      	cmp	r0, #0
 8013f6e:	d073      	beq.n	8014058 <rcl_wait_set_clear+0xec>
 8013f70:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013f72:	b510      	push	{r4, lr}
 8013f74:	4604      	mov	r4, r0
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d070      	beq.n	801405c <rcl_wait_set_clear+0xf0>
 8013f7a:	6800      	ldr	r0, [r0, #0]
 8013f7c:	b138      	cbz	r0, 8013f8e <rcl_wait_set_clear+0x22>
 8013f7e:	6862      	ldr	r2, [r4, #4]
 8013f80:	2100      	movs	r1, #0
 8013f82:	0092      	lsls	r2, r2, #2
 8013f84:	f006 ff14 	bl	801adb0 <memset>
 8013f88:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013f8a:	2200      	movs	r2, #0
 8013f8c:	601a      	str	r2, [r3, #0]
 8013f8e:	68a0      	ldr	r0, [r4, #8]
 8013f90:	b138      	cbz	r0, 8013fa2 <rcl_wait_set_clear+0x36>
 8013f92:	68e2      	ldr	r2, [r4, #12]
 8013f94:	2100      	movs	r1, #0
 8013f96:	0092      	lsls	r2, r2, #2
 8013f98:	f006 ff0a 	bl	801adb0 <memset>
 8013f9c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013f9e:	2200      	movs	r2, #0
 8013fa0:	60da      	str	r2, [r3, #12]
 8013fa2:	69a0      	ldr	r0, [r4, #24]
 8013fa4:	b138      	cbz	r0, 8013fb6 <rcl_wait_set_clear+0x4a>
 8013fa6:	69e2      	ldr	r2, [r4, #28]
 8013fa8:	2100      	movs	r1, #0
 8013faa:	0092      	lsls	r2, r2, #2
 8013fac:	f006 ff00 	bl	801adb0 <memset>
 8013fb0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013fb2:	2200      	movs	r2, #0
 8013fb4:	619a      	str	r2, [r3, #24]
 8013fb6:	6a20      	ldr	r0, [r4, #32]
 8013fb8:	b138      	cbz	r0, 8013fca <rcl_wait_set_clear+0x5e>
 8013fba:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8013fbc:	2100      	movs	r1, #0
 8013fbe:	0092      	lsls	r2, r2, #2
 8013fc0:	f006 fef6 	bl	801adb0 <memset>
 8013fc4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013fc6:	2200      	movs	r2, #0
 8013fc8:	625a      	str	r2, [r3, #36]	@ 0x24
 8013fca:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8013fcc:	b138      	cbz	r0, 8013fde <rcl_wait_set_clear+0x72>
 8013fce:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013fd0:	2100      	movs	r1, #0
 8013fd2:	0092      	lsls	r2, r2, #2
 8013fd4:	f006 feec 	bl	801adb0 <memset>
 8013fd8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013fda:	2200      	movs	r2, #0
 8013fdc:	631a      	str	r2, [r3, #48]	@ 0x30
 8013fde:	6920      	ldr	r0, [r4, #16]
 8013fe0:	b138      	cbz	r0, 8013ff2 <rcl_wait_set_clear+0x86>
 8013fe2:	6962      	ldr	r2, [r4, #20]
 8013fe4:	2100      	movs	r1, #0
 8013fe6:	0092      	lsls	r2, r2, #2
 8013fe8:	f006 fee2 	bl	801adb0 <memset>
 8013fec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013fee:	2200      	movs	r2, #0
 8013ff0:	641a      	str	r2, [r3, #64]	@ 0x40
 8013ff2:	6898      	ldr	r0, [r3, #8]
 8013ff4:	b138      	cbz	r0, 8014006 <rcl_wait_set_clear+0x9a>
 8013ff6:	685a      	ldr	r2, [r3, #4]
 8013ff8:	2100      	movs	r1, #0
 8013ffa:	0092      	lsls	r2, r2, #2
 8013ffc:	f006 fed8 	bl	801adb0 <memset>
 8014000:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014002:	2200      	movs	r2, #0
 8014004:	605a      	str	r2, [r3, #4]
 8014006:	6958      	ldr	r0, [r3, #20]
 8014008:	b138      	cbz	r0, 801401a <rcl_wait_set_clear+0xae>
 801400a:	691a      	ldr	r2, [r3, #16]
 801400c:	2100      	movs	r1, #0
 801400e:	0092      	lsls	r2, r2, #2
 8014010:	f006 fece 	bl	801adb0 <memset>
 8014014:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014016:	2200      	movs	r2, #0
 8014018:	611a      	str	r2, [r3, #16]
 801401a:	6a18      	ldr	r0, [r3, #32]
 801401c:	b138      	cbz	r0, 801402e <rcl_wait_set_clear+0xc2>
 801401e:	69da      	ldr	r2, [r3, #28]
 8014020:	2100      	movs	r1, #0
 8014022:	0092      	lsls	r2, r2, #2
 8014024:	f006 fec4 	bl	801adb0 <memset>
 8014028:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801402a:	2200      	movs	r2, #0
 801402c:	61da      	str	r2, [r3, #28]
 801402e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8014030:	b138      	cbz	r0, 8014042 <rcl_wait_set_clear+0xd6>
 8014032:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014034:	2100      	movs	r1, #0
 8014036:	0092      	lsls	r2, r2, #2
 8014038:	f006 feba 	bl	801adb0 <memset>
 801403c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801403e:	2200      	movs	r2, #0
 8014040:	629a      	str	r2, [r3, #40]	@ 0x28
 8014042:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8014044:	b138      	cbz	r0, 8014056 <rcl_wait_set_clear+0xea>
 8014046:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014048:	2100      	movs	r1, #0
 801404a:	0092      	lsls	r2, r2, #2
 801404c:	f006 feb0 	bl	801adb0 <memset>
 8014050:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014052:	2000      	movs	r0, #0
 8014054:	6358      	str	r0, [r3, #52]	@ 0x34
 8014056:	bd10      	pop	{r4, pc}
 8014058:	200b      	movs	r0, #11
 801405a:	4770      	bx	lr
 801405c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014060:	bd10      	pop	{r4, pc}
 8014062:	bf00      	nop

08014064 <rcl_wait_set_resize>:
 8014064:	2800      	cmp	r0, #0
 8014066:	f000 8185 	beq.w	8014374 <rcl_wait_set_resize+0x310>
 801406a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801406e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8014070:	b083      	sub	sp, #12
 8014072:	4605      	mov	r5, r0
 8014074:	2c00      	cmp	r4, #0
 8014076:	f000 817f 	beq.w	8014378 <rcl_wait_set_resize+0x314>
 801407a:	f04f 0900 	mov.w	r9, #0
 801407e:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8014082:	461f      	mov	r7, r3
 8014084:	4688      	mov	r8, r1
 8014086:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 801408a:	4616      	mov	r6, r2
 801408c:	f8c0 9004 	str.w	r9, [r0, #4]
 8014090:	f8c4 9000 	str.w	r9, [r4]
 8014094:	2900      	cmp	r1, #0
 8014096:	f000 80bd 	beq.w	8014214 <rcl_wait_set_resize+0x1b0>
 801409a:	008c      	lsls	r4, r1, #2
 801409c:	6800      	ldr	r0, [r0, #0]
 801409e:	9301      	str	r3, [sp, #4]
 80140a0:	4652      	mov	r2, sl
 80140a2:	4621      	mov	r1, r4
 80140a4:	4798      	blx	r3
 80140a6:	9b01      	ldr	r3, [sp, #4]
 80140a8:	6028      	str	r0, [r5, #0]
 80140aa:	2800      	cmp	r0, #0
 80140ac:	f000 80cb 	beq.w	8014246 <rcl_wait_set_resize+0x1e2>
 80140b0:	4622      	mov	r2, r4
 80140b2:	4649      	mov	r1, r9
 80140b4:	9301      	str	r3, [sp, #4]
 80140b6:	f006 fe7b 	bl	801adb0 <memset>
 80140ba:	f8c5 8004 	str.w	r8, [r5, #4]
 80140be:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 80140c2:	9b01      	ldr	r3, [sp, #4]
 80140c4:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80140c8:	f8c8 9004 	str.w	r9, [r8, #4]
 80140cc:	4652      	mov	r2, sl
 80140ce:	4621      	mov	r1, r4
 80140d0:	4798      	blx	r3
 80140d2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80140d4:	f8c8 0008 	str.w	r0, [r8, #8]
 80140d8:	689b      	ldr	r3, [r3, #8]
 80140da:	2b00      	cmp	r3, #0
 80140dc:	f000 80ac 	beq.w	8014238 <rcl_wait_set_resize+0x1d4>
 80140e0:	4622      	mov	r2, r4
 80140e2:	4649      	mov	r1, r9
 80140e4:	4618      	mov	r0, r3
 80140e6:	f006 fe63 	bl	801adb0 <memset>
 80140ea:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80140ec:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80140f0:	f04f 0800 	mov.w	r8, #0
 80140f4:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 80140f8:	f8c5 800c 	str.w	r8, [r5, #12]
 80140fc:	f8c4 800c 	str.w	r8, [r4, #12]
 8014100:	2e00      	cmp	r6, #0
 8014102:	f040 80a4 	bne.w	801424e <rcl_wait_set_resize+0x1ea>
 8014106:	68a8      	ldr	r0, [r5, #8]
 8014108:	b128      	cbz	r0, 8014116 <rcl_wait_set_resize+0xb2>
 801410a:	4649      	mov	r1, r9
 801410c:	4790      	blx	r2
 801410e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014110:	60ae      	str	r6, [r5, #8]
 8014112:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014116:	f04f 0800 	mov.w	r8, #0
 801411a:	19f6      	adds	r6, r6, r7
 801411c:	f8c4 8010 	str.w	r8, [r4, #16]
 8014120:	f040 80ac 	bne.w	801427c <rcl_wait_set_resize+0x218>
 8014124:	6960      	ldr	r0, [r4, #20]
 8014126:	b130      	cbz	r0, 8014136 <rcl_wait_set_resize+0xd2>
 8014128:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801412a:	4649      	mov	r1, r9
 801412c:	4798      	blx	r3
 801412e:	6166      	str	r6, [r4, #20]
 8014130:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014132:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014136:	2600      	movs	r6, #0
 8014138:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801413c:	616e      	str	r6, [r5, #20]
 801413e:	6426      	str	r6, [r4, #64]	@ 0x40
 8014140:	2f00      	cmp	r7, #0
 8014142:	f040 80ad 	bne.w	80142a0 <rcl_wait_set_resize+0x23c>
 8014146:	6928      	ldr	r0, [r5, #16]
 8014148:	b138      	cbz	r0, 801415a <rcl_wait_set_resize+0xf6>
 801414a:	4649      	mov	r1, r9
 801414c:	47d0      	blx	sl
 801414e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014150:	612f      	str	r7, [r5, #16]
 8014152:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8014156:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801415a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801415c:	2600      	movs	r6, #0
 801415e:	61ee      	str	r6, [r5, #28]
 8014160:	61a6      	str	r6, [r4, #24]
 8014162:	2b00      	cmp	r3, #0
 8014164:	f040 80af 	bne.w	80142c6 <rcl_wait_set_resize+0x262>
 8014168:	69a8      	ldr	r0, [r5, #24]
 801416a:	b120      	cbz	r0, 8014176 <rcl_wait_set_resize+0x112>
 801416c:	4649      	mov	r1, r9
 801416e:	47d0      	blx	sl
 8014170:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014172:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014174:	61ab      	str	r3, [r5, #24]
 8014176:	6a20      	ldr	r0, [r4, #32]
 8014178:	b128      	cbz	r0, 8014186 <rcl_wait_set_resize+0x122>
 801417a:	4649      	mov	r1, r9
 801417c:	47d0      	blx	sl
 801417e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014180:	2300      	movs	r3, #0
 8014182:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8014186:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014188:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801418a:	2600      	movs	r6, #0
 801418c:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8014190:	626e      	str	r6, [r5, #36]	@ 0x24
 8014192:	6266      	str	r6, [r4, #36]	@ 0x24
 8014194:	2b00      	cmp	r3, #0
 8014196:	f000 80b6 	beq.w	8014306 <rcl_wait_set_resize+0x2a2>
 801419a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801419e:	6a28      	ldr	r0, [r5, #32]
 80141a0:	463a      	mov	r2, r7
 80141a2:	4651      	mov	r1, sl
 80141a4:	47c8      	blx	r9
 80141a6:	6228      	str	r0, [r5, #32]
 80141a8:	2800      	cmp	r0, #0
 80141aa:	d04c      	beq.n	8014246 <rcl_wait_set_resize+0x1e2>
 80141ac:	4652      	mov	r2, sl
 80141ae:	4631      	mov	r1, r6
 80141b0:	f006 fdfe 	bl	801adb0 <memset>
 80141b4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80141b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80141b8:	626b      	str	r3, [r5, #36]	@ 0x24
 80141ba:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80141bc:	62a6      	str	r6, [r4, #40]	@ 0x28
 80141be:	463a      	mov	r2, r7
 80141c0:	4651      	mov	r1, sl
 80141c2:	47c8      	blx	r9
 80141c4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80141c6:	62e0      	str	r0, [r4, #44]	@ 0x2c
 80141c8:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80141ca:	2c00      	cmp	r4, #0
 80141cc:	f000 80f0 	beq.w	80143b0 <rcl_wait_set_resize+0x34c>
 80141d0:	4620      	mov	r0, r4
 80141d2:	4652      	mov	r2, sl
 80141d4:	4631      	mov	r1, r6
 80141d6:	f006 fdeb 	bl	801adb0 <memset>
 80141da:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80141dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80141de:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80141e0:	2600      	movs	r6, #0
 80141e2:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80141e6:	62ee      	str	r6, [r5, #44]	@ 0x2c
 80141e8:	6326      	str	r6, [r4, #48]	@ 0x30
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	f040 809d 	bne.w	801432a <rcl_wait_set_resize+0x2c6>
 80141f0:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80141f2:	b120      	cbz	r0, 80141fe <rcl_wait_set_resize+0x19a>
 80141f4:	4639      	mov	r1, r7
 80141f6:	47c0      	blx	r8
 80141f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80141fa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80141fc:	62ab      	str	r3, [r5, #40]	@ 0x28
 80141fe:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014200:	b310      	cbz	r0, 8014248 <rcl_wait_set_resize+0x1e4>
 8014202:	4639      	mov	r1, r7
 8014204:	47c0      	blx	r8
 8014206:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014208:	2000      	movs	r0, #0
 801420a:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 801420e:	b003      	add	sp, #12
 8014210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014214:	6800      	ldr	r0, [r0, #0]
 8014216:	b120      	cbz	r0, 8014222 <rcl_wait_set_resize+0x1be>
 8014218:	4651      	mov	r1, sl
 801421a:	47d8      	blx	fp
 801421c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801421e:	f8c5 8000 	str.w	r8, [r5]
 8014222:	68a0      	ldr	r0, [r4, #8]
 8014224:	2800      	cmp	r0, #0
 8014226:	f43f af61 	beq.w	80140ec <rcl_wait_set_resize+0x88>
 801422a:	4651      	mov	r1, sl
 801422c:	47d8      	blx	fp
 801422e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014230:	2300      	movs	r3, #0
 8014232:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8014236:	e759      	b.n	80140ec <rcl_wait_set_resize+0x88>
 8014238:	6828      	ldr	r0, [r5, #0]
 801423a:	9301      	str	r3, [sp, #4]
 801423c:	4651      	mov	r1, sl
 801423e:	47d8      	blx	fp
 8014240:	9b01      	ldr	r3, [sp, #4]
 8014242:	e9c5 3300 	strd	r3, r3, [r5]
 8014246:	200a      	movs	r0, #10
 8014248:	b003      	add	sp, #12
 801424a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801424e:	00b4      	lsls	r4, r6, #2
 8014250:	68a8      	ldr	r0, [r5, #8]
 8014252:	464a      	mov	r2, r9
 8014254:	4621      	mov	r1, r4
 8014256:	4798      	blx	r3
 8014258:	60a8      	str	r0, [r5, #8]
 801425a:	2800      	cmp	r0, #0
 801425c:	d0f3      	beq.n	8014246 <rcl_wait_set_resize+0x1e2>
 801425e:	4622      	mov	r2, r4
 8014260:	4641      	mov	r1, r8
 8014262:	f006 fda5 	bl	801adb0 <memset>
 8014266:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014268:	60ee      	str	r6, [r5, #12]
 801426a:	f04f 0800 	mov.w	r8, #0
 801426e:	19f6      	adds	r6, r6, r7
 8014270:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014274:	f8c4 8010 	str.w	r8, [r4, #16]
 8014278:	f43f af54 	beq.w	8014124 <rcl_wait_set_resize+0xc0>
 801427c:	00b6      	lsls	r6, r6, #2
 801427e:	464a      	mov	r2, r9
 8014280:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8014282:	6960      	ldr	r0, [r4, #20]
 8014284:	4631      	mov	r1, r6
 8014286:	4798      	blx	r3
 8014288:	4681      	mov	r9, r0
 801428a:	6160      	str	r0, [r4, #20]
 801428c:	2800      	cmp	r0, #0
 801428e:	d076      	beq.n	801437e <rcl_wait_set_resize+0x31a>
 8014290:	4632      	mov	r2, r6
 8014292:	4641      	mov	r1, r8
 8014294:	f006 fd8c 	bl	801adb0 <memset>
 8014298:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801429a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801429e:	e74a      	b.n	8014136 <rcl_wait_set_resize+0xd2>
 80142a0:	00bc      	lsls	r4, r7, #2
 80142a2:	6928      	ldr	r0, [r5, #16]
 80142a4:	464a      	mov	r2, r9
 80142a6:	4621      	mov	r1, r4
 80142a8:	47c0      	blx	r8
 80142aa:	6128      	str	r0, [r5, #16]
 80142ac:	2800      	cmp	r0, #0
 80142ae:	d0ca      	beq.n	8014246 <rcl_wait_set_resize+0x1e2>
 80142b0:	4622      	mov	r2, r4
 80142b2:	4631      	mov	r1, r6
 80142b4:	f006 fd7c 	bl	801adb0 <memset>
 80142b8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80142ba:	616f      	str	r7, [r5, #20]
 80142bc:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80142c0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80142c4:	e749      	b.n	801415a <rcl_wait_set_resize+0xf6>
 80142c6:	009c      	lsls	r4, r3, #2
 80142c8:	69a8      	ldr	r0, [r5, #24]
 80142ca:	464a      	mov	r2, r9
 80142cc:	4621      	mov	r1, r4
 80142ce:	47c0      	blx	r8
 80142d0:	61a8      	str	r0, [r5, #24]
 80142d2:	2800      	cmp	r0, #0
 80142d4:	d0b7      	beq.n	8014246 <rcl_wait_set_resize+0x1e2>
 80142d6:	4622      	mov	r2, r4
 80142d8:	4631      	mov	r1, r6
 80142da:	f006 fd69 	bl	801adb0 <memset>
 80142de:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 80142e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80142e2:	61eb      	str	r3, [r5, #28]
 80142e4:	6a38      	ldr	r0, [r7, #32]
 80142e6:	61fe      	str	r6, [r7, #28]
 80142e8:	464a      	mov	r2, r9
 80142ea:	4621      	mov	r1, r4
 80142ec:	47c0      	blx	r8
 80142ee:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80142f0:	6238      	str	r0, [r7, #32]
 80142f2:	6a1f      	ldr	r7, [r3, #32]
 80142f4:	2f00      	cmp	r7, #0
 80142f6:	d054      	beq.n	80143a2 <rcl_wait_set_resize+0x33e>
 80142f8:	4622      	mov	r2, r4
 80142fa:	4631      	mov	r1, r6
 80142fc:	4638      	mov	r0, r7
 80142fe:	f006 fd57 	bl	801adb0 <memset>
 8014302:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014304:	e73f      	b.n	8014186 <rcl_wait_set_resize+0x122>
 8014306:	6a28      	ldr	r0, [r5, #32]
 8014308:	b120      	cbz	r0, 8014314 <rcl_wait_set_resize+0x2b0>
 801430a:	4639      	mov	r1, r7
 801430c:	47c0      	blx	r8
 801430e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014310:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014312:	622b      	str	r3, [r5, #32]
 8014314:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8014316:	2800      	cmp	r0, #0
 8014318:	f43f af60 	beq.w	80141dc <rcl_wait_set_resize+0x178>
 801431c:	4639      	mov	r1, r7
 801431e:	47c0      	blx	r8
 8014320:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014322:	2300      	movs	r3, #0
 8014324:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8014328:	e758      	b.n	80141dc <rcl_wait_set_resize+0x178>
 801432a:	009c      	lsls	r4, r3, #2
 801432c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801432e:	463a      	mov	r2, r7
 8014330:	4621      	mov	r1, r4
 8014332:	47c8      	blx	r9
 8014334:	62a8      	str	r0, [r5, #40]	@ 0x28
 8014336:	2800      	cmp	r0, #0
 8014338:	d085      	beq.n	8014246 <rcl_wait_set_resize+0x1e2>
 801433a:	4622      	mov	r2, r4
 801433c:	4631      	mov	r1, r6
 801433e:	f006 fd37 	bl	801adb0 <memset>
 8014342:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8014346:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014348:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801434a:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801434e:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8014352:	463a      	mov	r2, r7
 8014354:	4621      	mov	r1, r4
 8014356:	47c8      	blx	r9
 8014358:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801435a:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 801435e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014360:	b36b      	cbz	r3, 80143be <rcl_wait_set_resize+0x35a>
 8014362:	4622      	mov	r2, r4
 8014364:	4631      	mov	r1, r6
 8014366:	4618      	mov	r0, r3
 8014368:	f006 fd22 	bl	801adb0 <memset>
 801436c:	4630      	mov	r0, r6
 801436e:	b003      	add	sp, #12
 8014370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014374:	200b      	movs	r0, #11
 8014376:	4770      	bx	lr
 8014378:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801437c:	e764      	b.n	8014248 <rcl_wait_set_resize+0x1e4>
 801437e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014380:	68a8      	ldr	r0, [r5, #8]
 8014382:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8014384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014386:	4798      	blx	r3
 8014388:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801438a:	6928      	ldr	r0, [r5, #16]
 801438c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801438e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8014390:	f8c5 900c 	str.w	r9, [r5, #12]
 8014394:	f8c5 9008 	str.w	r9, [r5, #8]
 8014398:	4790      	blx	r2
 801439a:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801439e:	200a      	movs	r0, #10
 80143a0:	e752      	b.n	8014248 <rcl_wait_set_resize+0x1e4>
 80143a2:	69a8      	ldr	r0, [r5, #24]
 80143a4:	4649      	mov	r1, r9
 80143a6:	47d0      	blx	sl
 80143a8:	e9c5 7706 	strd	r7, r7, [r5, #24]
 80143ac:	200a      	movs	r0, #10
 80143ae:	e74b      	b.n	8014248 <rcl_wait_set_resize+0x1e4>
 80143b0:	6a28      	ldr	r0, [r5, #32]
 80143b2:	4639      	mov	r1, r7
 80143b4:	47c0      	blx	r8
 80143b6:	e9c5 4408 	strd	r4, r4, [r5, #32]
 80143ba:	200a      	movs	r0, #10
 80143bc:	e744      	b.n	8014248 <rcl_wait_set_resize+0x1e4>
 80143be:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80143c0:	9301      	str	r3, [sp, #4]
 80143c2:	4639      	mov	r1, r7
 80143c4:	47c0      	blx	r8
 80143c6:	9b01      	ldr	r3, [sp, #4]
 80143c8:	200a      	movs	r0, #10
 80143ca:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80143ce:	e73b      	b.n	8014248 <rcl_wait_set_resize+0x1e4>

080143d0 <rcl_wait_set_init>:
 80143d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143d4:	b084      	sub	sp, #16
 80143d6:	4604      	mov	r4, r0
 80143d8:	a810      	add	r0, sp, #64	@ 0x40
 80143da:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 80143de:	460f      	mov	r7, r1
 80143e0:	4690      	mov	r8, r2
 80143e2:	4699      	mov	r9, r3
 80143e4:	f7f9 fc7c 	bl	800dce0 <rcutils_allocator_is_valid>
 80143e8:	2800      	cmp	r0, #0
 80143ea:	d06b      	beq.n	80144c4 <rcl_wait_set_init+0xf4>
 80143ec:	2c00      	cmp	r4, #0
 80143ee:	d069      	beq.n	80144c4 <rcl_wait_set_init+0xf4>
 80143f0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80143f2:	b125      	cbz	r5, 80143fe <rcl_wait_set_init+0x2e>
 80143f4:	2564      	movs	r5, #100	@ 0x64
 80143f6:	4628      	mov	r0, r5
 80143f8:	b004      	add	sp, #16
 80143fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143fe:	f1ba 0f00 	cmp.w	sl, #0
 8014402:	d05f      	beq.n	80144c4 <rcl_wait_set_init+0xf4>
 8014404:	4650      	mov	r0, sl
 8014406:	f7fe fb3f 	bl	8012a88 <rcl_context_is_valid>
 801440a:	2800      	cmp	r0, #0
 801440c:	d067      	beq.n	80144de <rcl_wait_set_init+0x10e>
 801440e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014410:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8014412:	205c      	movs	r0, #92	@ 0x5c
 8014414:	4798      	blx	r3
 8014416:	6320      	str	r0, [r4, #48]	@ 0x30
 8014418:	2800      	cmp	r0, #0
 801441a:	d062      	beq.n	80144e2 <rcl_wait_set_init+0x112>
 801441c:	4629      	mov	r1, r5
 801441e:	225c      	movs	r2, #92	@ 0x5c
 8014420:	f006 fcc6 	bl	801adb0 <memset>
 8014424:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8014428:	eb03 0e02 	add.w	lr, r3, r2
 801442c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801442e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8014430:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8014434:	449e      	add	lr, r3
 8014436:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801443a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801443e:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8014442:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8014446:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 801444a:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 801444e:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8014452:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8014456:	f8da a000 	ldr.w	sl, [sl]
 801445a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801445c:	44c6      	add	lr, r8
 801445e:	f8dc 3000 	ldr.w	r3, [ip]
 8014462:	602b      	str	r3, [r5, #0]
 8014464:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8014468:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 801446c:	f002 fe68 	bl	8017140 <rmw_create_wait_set>
 8014470:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014472:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8014474:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8014476:	b350      	cbz	r0, 80144ce <rcl_wait_set_init+0xfe>
 8014478:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801447a:	9302      	str	r3, [sp, #8]
 801447c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801447e:	9301      	str	r3, [sp, #4]
 8014480:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014482:	9300      	str	r3, [sp, #0]
 8014484:	4642      	mov	r2, r8
 8014486:	464b      	mov	r3, r9
 8014488:	4639      	mov	r1, r7
 801448a:	4620      	mov	r0, r4
 801448c:	f7ff fdea 	bl	8014064 <rcl_wait_set_resize>
 8014490:	4605      	mov	r5, r0
 8014492:	2800      	cmp	r0, #0
 8014494:	d0af      	beq.n	80143f6 <rcl_wait_set_init+0x26>
 8014496:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014498:	bb2b      	cbnz	r3, 80144e6 <rcl_wait_set_init+0x116>
 801449a:	2600      	movs	r6, #0
 801449c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80144a0:	9600      	str	r6, [sp, #0]
 80144a2:	4633      	mov	r3, r6
 80144a4:	4632      	mov	r2, r6
 80144a6:	4631      	mov	r1, r6
 80144a8:	4620      	mov	r0, r4
 80144aa:	f7ff fddb 	bl	8014064 <rcl_wait_set_resize>
 80144ae:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80144b0:	2800      	cmp	r0, #0
 80144b2:	d0a0      	beq.n	80143f6 <rcl_wait_set_init+0x26>
 80144b4:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80144b6:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80144b8:	4798      	blx	r3
 80144ba:	4628      	mov	r0, r5
 80144bc:	6326      	str	r6, [r4, #48]	@ 0x30
 80144be:	b004      	add	sp, #16
 80144c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144c4:	250b      	movs	r5, #11
 80144c6:	4628      	mov	r0, r5
 80144c8:	b004      	add	sp, #16
 80144ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144ce:	2501      	movs	r5, #1
 80144d0:	f002 fe40 	bl	8017154 <rmw_destroy_wait_set>
 80144d4:	2800      	cmp	r0, #0
 80144d6:	bf18      	it	ne
 80144d8:	f44f 7561 	movne.w	r5, #900	@ 0x384
 80144dc:	e7dd      	b.n	801449a <rcl_wait_set_init+0xca>
 80144de:	2565      	movs	r5, #101	@ 0x65
 80144e0:	e789      	b.n	80143f6 <rcl_wait_set_init+0x26>
 80144e2:	250a      	movs	r5, #10
 80144e4:	e787      	b.n	80143f6 <rcl_wait_set_init+0x26>
 80144e6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80144e8:	e7f2      	b.n	80144d0 <rcl_wait_set_init+0x100>
 80144ea:	bf00      	nop

080144ec <rcl_wait_set_add_guard_condition>:
 80144ec:	b318      	cbz	r0, 8014536 <rcl_wait_set_add_guard_condition+0x4a>
 80144ee:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80144f0:	b570      	push	{r4, r5, r6, lr}
 80144f2:	4604      	mov	r4, r0
 80144f4:	b30b      	cbz	r3, 801453a <rcl_wait_set_add_guard_condition+0x4e>
 80144f6:	b319      	cbz	r1, 8014540 <rcl_wait_set_add_guard_condition+0x54>
 80144f8:	68dd      	ldr	r5, [r3, #12]
 80144fa:	68c0      	ldr	r0, [r0, #12]
 80144fc:	4285      	cmp	r5, r0
 80144fe:	d217      	bcs.n	8014530 <rcl_wait_set_add_guard_condition+0x44>
 8014500:	68a0      	ldr	r0, [r4, #8]
 8014502:	1c6e      	adds	r6, r5, #1
 8014504:	60de      	str	r6, [r3, #12]
 8014506:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801450a:	b102      	cbz	r2, 801450e <rcl_wait_set_add_guard_condition+0x22>
 801450c:	6015      	str	r5, [r2, #0]
 801450e:	4608      	mov	r0, r1
 8014510:	f004 fe9a 	bl	8019248 <rcl_guard_condition_get_rmw_handle>
 8014514:	b150      	cbz	r0, 801452c <rcl_wait_set_add_guard_condition+0x40>
 8014516:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014518:	6842      	ldr	r2, [r0, #4]
 801451a:	695b      	ldr	r3, [r3, #20]
 801451c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014520:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014522:	6913      	ldr	r3, [r2, #16]
 8014524:	3301      	adds	r3, #1
 8014526:	2000      	movs	r0, #0
 8014528:	6113      	str	r3, [r2, #16]
 801452a:	bd70      	pop	{r4, r5, r6, pc}
 801452c:	2001      	movs	r0, #1
 801452e:	bd70      	pop	{r4, r5, r6, pc}
 8014530:	f240 3086 	movw	r0, #902	@ 0x386
 8014534:	bd70      	pop	{r4, r5, r6, pc}
 8014536:	200b      	movs	r0, #11
 8014538:	4770      	bx	lr
 801453a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801453e:	bd70      	pop	{r4, r5, r6, pc}
 8014540:	200b      	movs	r0, #11
 8014542:	bd70      	pop	{r4, r5, r6, pc}

08014544 <rcl_wait_set_add_timer>:
 8014544:	b328      	cbz	r0, 8014592 <rcl_wait_set_add_timer+0x4e>
 8014546:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014548:	b570      	push	{r4, r5, r6, lr}
 801454a:	4604      	mov	r4, r0
 801454c:	b31b      	cbz	r3, 8014596 <rcl_wait_set_add_timer+0x52>
 801454e:	b329      	cbz	r1, 801459c <rcl_wait_set_add_timer+0x58>
 8014550:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8014552:	6965      	ldr	r5, [r4, #20]
 8014554:	42a8      	cmp	r0, r5
 8014556:	d219      	bcs.n	801458c <rcl_wait_set_add_timer+0x48>
 8014558:	6925      	ldr	r5, [r4, #16]
 801455a:	1c46      	adds	r6, r0, #1
 801455c:	641e      	str	r6, [r3, #64]	@ 0x40
 801455e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8014562:	b102      	cbz	r2, 8014566 <rcl_wait_set_add_timer+0x22>
 8014564:	6010      	str	r0, [r2, #0]
 8014566:	4608      	mov	r0, r1
 8014568:	f7ff fba6 	bl	8013cb8 <rcl_timer_get_guard_condition>
 801456c:	b168      	cbz	r0, 801458a <rcl_wait_set_add_timer+0x46>
 801456e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014570:	68e3      	ldr	r3, [r4, #12]
 8014572:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8014574:	3b01      	subs	r3, #1
 8014576:	441d      	add	r5, r3
 8014578:	f004 fe66 	bl	8019248 <rcl_guard_condition_get_rmw_handle>
 801457c:	b180      	cbz	r0, 80145a0 <rcl_wait_set_add_timer+0x5c>
 801457e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014580:	6842      	ldr	r2, [r0, #4]
 8014582:	695b      	ldr	r3, [r3, #20]
 8014584:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014588:	2000      	movs	r0, #0
 801458a:	bd70      	pop	{r4, r5, r6, pc}
 801458c:	f240 3086 	movw	r0, #902	@ 0x386
 8014590:	bd70      	pop	{r4, r5, r6, pc}
 8014592:	200b      	movs	r0, #11
 8014594:	4770      	bx	lr
 8014596:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801459a:	bd70      	pop	{r4, r5, r6, pc}
 801459c:	200b      	movs	r0, #11
 801459e:	bd70      	pop	{r4, r5, r6, pc}
 80145a0:	2001      	movs	r0, #1
 80145a2:	bd70      	pop	{r4, r5, r6, pc}

080145a4 <rcl_wait_set_add_client>:
 80145a4:	b318      	cbz	r0, 80145ee <rcl_wait_set_add_client+0x4a>
 80145a6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80145a8:	b570      	push	{r4, r5, r6, lr}
 80145aa:	4604      	mov	r4, r0
 80145ac:	b30b      	cbz	r3, 80145f2 <rcl_wait_set_add_client+0x4e>
 80145ae:	b319      	cbz	r1, 80145f8 <rcl_wait_set_add_client+0x54>
 80145b0:	699d      	ldr	r5, [r3, #24]
 80145b2:	69c0      	ldr	r0, [r0, #28]
 80145b4:	4285      	cmp	r5, r0
 80145b6:	d217      	bcs.n	80145e8 <rcl_wait_set_add_client+0x44>
 80145b8:	69a0      	ldr	r0, [r4, #24]
 80145ba:	1c6e      	adds	r6, r5, #1
 80145bc:	619e      	str	r6, [r3, #24]
 80145be:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80145c2:	b102      	cbz	r2, 80145c6 <rcl_wait_set_add_client+0x22>
 80145c4:	6015      	str	r5, [r2, #0]
 80145c6:	4608      	mov	r0, r1
 80145c8:	f7fe f9b2 	bl	8012930 <rcl_client_get_rmw_handle>
 80145cc:	b150      	cbz	r0, 80145e4 <rcl_wait_set_add_client+0x40>
 80145ce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80145d0:	6842      	ldr	r2, [r0, #4]
 80145d2:	6a1b      	ldr	r3, [r3, #32]
 80145d4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80145d8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80145da:	69d3      	ldr	r3, [r2, #28]
 80145dc:	3301      	adds	r3, #1
 80145de:	2000      	movs	r0, #0
 80145e0:	61d3      	str	r3, [r2, #28]
 80145e2:	bd70      	pop	{r4, r5, r6, pc}
 80145e4:	2001      	movs	r0, #1
 80145e6:	bd70      	pop	{r4, r5, r6, pc}
 80145e8:	f240 3086 	movw	r0, #902	@ 0x386
 80145ec:	bd70      	pop	{r4, r5, r6, pc}
 80145ee:	200b      	movs	r0, #11
 80145f0:	4770      	bx	lr
 80145f2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80145f6:	bd70      	pop	{r4, r5, r6, pc}
 80145f8:	200b      	movs	r0, #11
 80145fa:	bd70      	pop	{r4, r5, r6, pc}

080145fc <rcl_wait_set_add_service>:
 80145fc:	b318      	cbz	r0, 8014646 <rcl_wait_set_add_service+0x4a>
 80145fe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014600:	b570      	push	{r4, r5, r6, lr}
 8014602:	4604      	mov	r4, r0
 8014604:	b30b      	cbz	r3, 801464a <rcl_wait_set_add_service+0x4e>
 8014606:	b319      	cbz	r1, 8014650 <rcl_wait_set_add_service+0x54>
 8014608:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801460a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801460c:	4285      	cmp	r5, r0
 801460e:	d217      	bcs.n	8014640 <rcl_wait_set_add_service+0x44>
 8014610:	6a20      	ldr	r0, [r4, #32]
 8014612:	1c6e      	adds	r6, r5, #1
 8014614:	625e      	str	r6, [r3, #36]	@ 0x24
 8014616:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801461a:	b102      	cbz	r2, 801461e <rcl_wait_set_add_service+0x22>
 801461c:	6015      	str	r5, [r2, #0]
 801461e:	4608      	mov	r0, r1
 8014620:	f7ff f804 	bl	801362c <rcl_service_get_rmw_handle>
 8014624:	b150      	cbz	r0, 801463c <rcl_wait_set_add_service+0x40>
 8014626:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014628:	6842      	ldr	r2, [r0, #4]
 801462a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801462c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014630:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014632:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8014634:	3301      	adds	r3, #1
 8014636:	2000      	movs	r0, #0
 8014638:	6293      	str	r3, [r2, #40]	@ 0x28
 801463a:	bd70      	pop	{r4, r5, r6, pc}
 801463c:	2001      	movs	r0, #1
 801463e:	bd70      	pop	{r4, r5, r6, pc}
 8014640:	f240 3086 	movw	r0, #902	@ 0x386
 8014644:	bd70      	pop	{r4, r5, r6, pc}
 8014646:	200b      	movs	r0, #11
 8014648:	4770      	bx	lr
 801464a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801464e:	bd70      	pop	{r4, r5, r6, pc}
 8014650:	200b      	movs	r0, #11
 8014652:	bd70      	pop	{r4, r5, r6, pc}
 8014654:	0000      	movs	r0, r0
	...

08014658 <rcl_wait>:
 8014658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801465c:	ed2d 8b02 	vpush	{d8}
 8014660:	b08d      	sub	sp, #52	@ 0x34
 8014662:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014666:	2800      	cmp	r0, #0
 8014668:	f000 8143 	beq.w	80148f2 <rcl_wait+0x29a>
 801466c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801466e:	4605      	mov	r5, r0
 8014670:	2e00      	cmp	r6, #0
 8014672:	f000 8112 	beq.w	801489a <rcl_wait+0x242>
 8014676:	6843      	ldr	r3, [r0, #4]
 8014678:	b983      	cbnz	r3, 801469c <rcl_wait+0x44>
 801467a:	68eb      	ldr	r3, [r5, #12]
 801467c:	b973      	cbnz	r3, 801469c <rcl_wait+0x44>
 801467e:	696b      	ldr	r3, [r5, #20]
 8014680:	b963      	cbnz	r3, 801469c <rcl_wait+0x44>
 8014682:	69eb      	ldr	r3, [r5, #28]
 8014684:	b953      	cbnz	r3, 801469c <rcl_wait+0x44>
 8014686:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8014688:	b943      	cbnz	r3, 801469c <rcl_wait+0x44>
 801468a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 801468c:	b933      	cbnz	r3, 801469c <rcl_wait+0x44>
 801468e:	f240 3085 	movw	r0, #901	@ 0x385
 8014692:	b00d      	add	sp, #52	@ 0x34
 8014694:	ecbd 8b02 	vpop	{d8}
 8014698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801469c:	9b04      	ldr	r3, [sp, #16]
 801469e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 80146a0:	2b01      	cmp	r3, #1
 80146a2:	9b05      	ldr	r3, [sp, #20]
 80146a4:	f173 0300 	sbcs.w	r3, r3, #0
 80146a8:	f2c0 80f0 	blt.w	801488c <rcl_wait+0x234>
 80146ac:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 80146b0:	4643      	mov	r3, r8
 80146b2:	2a00      	cmp	r2, #0
 80146b4:	f000 8133 	beq.w	801491e <rcl_wait+0x2c6>
 80146b8:	2400      	movs	r4, #0
 80146ba:	4613      	mov	r3, r2
 80146bc:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8014930 <rcl_wait+0x2d8>
 80146c0:	46a2      	mov	sl, r4
 80146c2:	46a3      	mov	fp, r4
 80146c4:	f240 3921 	movw	r9, #801	@ 0x321
 80146c8:	4632      	mov	r2, r6
 80146ca:	e014      	b.n	80146f6 <rcl_wait+0x9e>
 80146cc:	2800      	cmp	r0, #0
 80146ce:	d1e0      	bne.n	8014692 <rcl_wait+0x3a>
 80146d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80146d4:	4542      	cmp	r2, r8
 80146d6:	eb73 0107 	sbcs.w	r1, r3, r7
 80146da:	da03      	bge.n	80146e4 <rcl_wait+0x8c>
 80146dc:	4690      	mov	r8, r2
 80146de:	461f      	mov	r7, r3
 80146e0:	f04f 0b01 	mov.w	fp, #1
 80146e4:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80146e6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80146e8:	3401      	adds	r4, #1
 80146ea:	f14a 0a00 	adc.w	sl, sl, #0
 80146ee:	429c      	cmp	r4, r3
 80146f0:	f17a 0100 	sbcs.w	r1, sl, #0
 80146f4:	d228      	bcs.n	8014748 <rcl_wait+0xf0>
 80146f6:	6928      	ldr	r0, [r5, #16]
 80146f8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80146fc:	a908      	add	r1, sp, #32
 80146fe:	00a6      	lsls	r6, r4, #2
 8014700:	2800      	cmp	r0, #0
 8014702:	d0f1      	beq.n	80146e8 <rcl_wait+0x90>
 8014704:	68eb      	ldr	r3, [r5, #12]
 8014706:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801470a:	4423      	add	r3, r4
 801470c:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8014710:	f1be 0f00 	cmp.w	lr, #0
 8014714:	d006      	beq.n	8014724 <rcl_wait+0xcc>
 8014716:	6913      	ldr	r3, [r2, #16]
 8014718:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801471c:	3301      	adds	r3, #1
 801471e:	6113      	str	r3, [r2, #16]
 8014720:	692b      	ldr	r3, [r5, #16]
 8014722:	5998      	ldr	r0, [r3, r6]
 8014724:	ed8d 8b08 	vstr	d8, [sp, #32]
 8014728:	f7ff fa94 	bl	8013c54 <rcl_timer_get_time_until_next_call>
 801472c:	4548      	cmp	r0, r9
 801472e:	d1cd      	bne.n	80146cc <rcl_wait+0x74>
 8014730:	692b      	ldr	r3, [r5, #16]
 8014732:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8014734:	2100      	movs	r1, #0
 8014736:	5199      	str	r1, [r3, r6]
 8014738:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801473a:	3401      	adds	r4, #1
 801473c:	f14a 0a00 	adc.w	sl, sl, #0
 8014740:	429c      	cmp	r4, r3
 8014742:	f17a 0100 	sbcs.w	r1, sl, #0
 8014746:	d3d6      	bcc.n	80146f6 <rcl_wait+0x9e>
 8014748:	4616      	mov	r6, r2
 801474a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801474e:	4313      	orrs	r3, r2
 8014750:	46d9      	mov	r9, fp
 8014752:	f040 80a9 	bne.w	80148a8 <rcl_wait+0x250>
 8014756:	2300      	movs	r3, #0
 8014758:	2200      	movs	r2, #0
 801475a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801475e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8014762:	ab08      	add	r3, sp, #32
 8014764:	9302      	str	r3, [sp, #8]
 8014766:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8014768:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 801476c:	e9cd 3200 	strd	r3, r2, [sp]
 8014770:	f106 0110 	add.w	r1, r6, #16
 8014774:	f106 031c 	add.w	r3, r6, #28
 8014778:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 801477c:	1d30      	adds	r0, r6, #4
 801477e:	f002 fb67 	bl	8016e50 <rmw_wait>
 8014782:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014784:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8014786:	4680      	mov	r8, r0
 8014788:	b1ca      	cbz	r2, 80147be <rcl_wait+0x166>
 801478a:	2400      	movs	r4, #0
 801478c:	4627      	mov	r7, r4
 801478e:	692a      	ldr	r2, [r5, #16]
 8014790:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8014794:	f10d 011f 	add.w	r1, sp, #31
 8014798:	00a6      	lsls	r6, r4, #2
 801479a:	b160      	cbz	r0, 80147b6 <rcl_wait+0x15e>
 801479c:	f88d 701f 	strb.w	r7, [sp, #31]
 80147a0:	f7ff fa1e 	bl	8013be0 <rcl_timer_is_ready>
 80147a4:	2800      	cmp	r0, #0
 80147a6:	f47f af74 	bne.w	8014692 <rcl_wait+0x3a>
 80147aa:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80147ae:	b90b      	cbnz	r3, 80147b4 <rcl_wait+0x15c>
 80147b0:	692a      	ldr	r2, [r5, #16]
 80147b2:	5193      	str	r3, [r2, r6]
 80147b4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80147b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80147b8:	3401      	adds	r4, #1
 80147ba:	42a2      	cmp	r2, r4
 80147bc:	d8e7      	bhi.n	801478e <rcl_wait+0x136>
 80147be:	f038 0002 	bics.w	r0, r8, #2
 80147c2:	f040 8090 	bne.w	80148e6 <rcl_wait+0x28e>
 80147c6:	686e      	ldr	r6, [r5, #4]
 80147c8:	4602      	mov	r2, r0
 80147ca:	b91e      	cbnz	r6, 80147d4 <rcl_wait+0x17c>
 80147cc:	e00d      	b.n	80147ea <rcl_wait+0x192>
 80147ce:	3201      	adds	r2, #1
 80147d0:	42b2      	cmp	r2, r6
 80147d2:	d00a      	beq.n	80147ea <rcl_wait+0x192>
 80147d4:	6899      	ldr	r1, [r3, #8]
 80147d6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80147da:	2900      	cmp	r1, #0
 80147dc:	d1f7      	bne.n	80147ce <rcl_wait+0x176>
 80147de:	682c      	ldr	r4, [r5, #0]
 80147e0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80147e4:	3201      	adds	r2, #1
 80147e6:	42b2      	cmp	r2, r6
 80147e8:	d1f4      	bne.n	80147d4 <rcl_wait+0x17c>
 80147ea:	68ee      	ldr	r6, [r5, #12]
 80147ec:	2200      	movs	r2, #0
 80147ee:	b91e      	cbnz	r6, 80147f8 <rcl_wait+0x1a0>
 80147f0:	e00d      	b.n	801480e <rcl_wait+0x1b6>
 80147f2:	3201      	adds	r2, #1
 80147f4:	42b2      	cmp	r2, r6
 80147f6:	d00a      	beq.n	801480e <rcl_wait+0x1b6>
 80147f8:	6959      	ldr	r1, [r3, #20]
 80147fa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80147fe:	2900      	cmp	r1, #0
 8014800:	d1f7      	bne.n	80147f2 <rcl_wait+0x19a>
 8014802:	68ac      	ldr	r4, [r5, #8]
 8014804:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8014808:	3201      	adds	r2, #1
 801480a:	42b2      	cmp	r2, r6
 801480c:	d1f4      	bne.n	80147f8 <rcl_wait+0x1a0>
 801480e:	69ee      	ldr	r6, [r5, #28]
 8014810:	2200      	movs	r2, #0
 8014812:	b91e      	cbnz	r6, 801481c <rcl_wait+0x1c4>
 8014814:	e00d      	b.n	8014832 <rcl_wait+0x1da>
 8014816:	3201      	adds	r2, #1
 8014818:	42b2      	cmp	r2, r6
 801481a:	d00a      	beq.n	8014832 <rcl_wait+0x1da>
 801481c:	6a19      	ldr	r1, [r3, #32]
 801481e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014822:	2900      	cmp	r1, #0
 8014824:	d1f7      	bne.n	8014816 <rcl_wait+0x1be>
 8014826:	69ac      	ldr	r4, [r5, #24]
 8014828:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801482c:	3201      	adds	r2, #1
 801482e:	42b2      	cmp	r2, r6
 8014830:	d1f4      	bne.n	801481c <rcl_wait+0x1c4>
 8014832:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8014834:	2200      	movs	r2, #0
 8014836:	b91e      	cbnz	r6, 8014840 <rcl_wait+0x1e8>
 8014838:	e00d      	b.n	8014856 <rcl_wait+0x1fe>
 801483a:	3201      	adds	r2, #1
 801483c:	4296      	cmp	r6, r2
 801483e:	d00a      	beq.n	8014856 <rcl_wait+0x1fe>
 8014840:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8014842:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014846:	2900      	cmp	r1, #0
 8014848:	d1f7      	bne.n	801483a <rcl_wait+0x1e2>
 801484a:	6a2c      	ldr	r4, [r5, #32]
 801484c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8014850:	3201      	adds	r2, #1
 8014852:	4296      	cmp	r6, r2
 8014854:	d1f4      	bne.n	8014840 <rcl_wait+0x1e8>
 8014856:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8014858:	2200      	movs	r2, #0
 801485a:	b91e      	cbnz	r6, 8014864 <rcl_wait+0x20c>
 801485c:	e00d      	b.n	801487a <rcl_wait+0x222>
 801485e:	3201      	adds	r2, #1
 8014860:	42b2      	cmp	r2, r6
 8014862:	d00a      	beq.n	801487a <rcl_wait+0x222>
 8014864:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8014866:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801486a:	2900      	cmp	r1, #0
 801486c:	d1f7      	bne.n	801485e <rcl_wait+0x206>
 801486e:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8014870:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8014874:	3201      	adds	r2, #1
 8014876:	42b2      	cmp	r2, r6
 8014878:	d1f4      	bne.n	8014864 <rcl_wait+0x20c>
 801487a:	f1b8 0f02 	cmp.w	r8, #2
 801487e:	f47f af08 	bne.w	8014692 <rcl_wait+0x3a>
 8014882:	464b      	mov	r3, r9
 8014884:	2b00      	cmp	r3, #0
 8014886:	bf08      	it	eq
 8014888:	2002      	moveq	r0, #2
 801488a:	e702      	b.n	8014692 <rcl_wait+0x3a>
 801488c:	2a00      	cmp	r2, #0
 801488e:	d03a      	beq.n	8014906 <rcl_wait+0x2ae>
 8014890:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8014894:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8014898:	e70e      	b.n	80146b8 <rcl_wait+0x60>
 801489a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801489e:	b00d      	add	sp, #52	@ 0x34
 80148a0:	ecbd 8b02 	vpop	{d8}
 80148a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148a8:	9b04      	ldr	r3, [sp, #16]
 80148aa:	2b01      	cmp	r3, #1
 80148ac:	9b05      	ldr	r3, [sp, #20]
 80148ae:	f173 0300 	sbcs.w	r3, r3, #0
 80148b2:	db24      	blt.n	80148fe <rcl_wait+0x2a6>
 80148b4:	2f00      	cmp	r7, #0
 80148b6:	bfbc      	itt	lt
 80148b8:	f04f 0800 	movlt.w	r8, #0
 80148bc:	4647      	movlt	r7, r8
 80148be:	a31e      	add	r3, pc, #120	@ (adr r3, 8014938 <rcl_wait+0x2e0>)
 80148c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148c4:	4640      	mov	r0, r8
 80148c6:	4639      	mov	r1, r7
 80148c8:	f7ec f9f6 	bl	8000cb8 <__aeabi_ldivmod>
 80148cc:	a31a      	add	r3, pc, #104	@ (adr r3, 8014938 <rcl_wait+0x2e0>)
 80148ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148d2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80148d6:	4640      	mov	r0, r8
 80148d8:	4639      	mov	r1, r7
 80148da:	f7ec f9ed 	bl	8000cb8 <__aeabi_ldivmod>
 80148de:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80148e2:	ab08      	add	r3, sp, #32
 80148e4:	e73e      	b.n	8014764 <rcl_wait+0x10c>
 80148e6:	2001      	movs	r0, #1
 80148e8:	b00d      	add	sp, #52	@ 0x34
 80148ea:	ecbd 8b02 	vpop	{d8}
 80148ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148f2:	200b      	movs	r0, #11
 80148f4:	b00d      	add	sp, #52	@ 0x34
 80148f6:	ecbd 8b02 	vpop	{d8}
 80148fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148fe:	465b      	mov	r3, fp
 8014900:	2b00      	cmp	r3, #0
 8014902:	d1d7      	bne.n	80148b4 <rcl_wait+0x25c>
 8014904:	e72e      	b.n	8014764 <rcl_wait+0x10c>
 8014906:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801490a:	430b      	orrs	r3, r1
 801490c:	bf08      	it	eq
 801490e:	4691      	moveq	r9, r2
 8014910:	f43f af21 	beq.w	8014756 <rcl_wait+0xfe>
 8014914:	9b04      	ldr	r3, [sp, #16]
 8014916:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801491a:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801491e:	2b01      	cmp	r3, #1
 8014920:	9b05      	ldr	r3, [sp, #20]
 8014922:	f173 0300 	sbcs.w	r3, r3, #0
 8014926:	f04f 0300 	mov.w	r3, #0
 801492a:	4699      	mov	r9, r3
 801492c:	dac2      	bge.n	80148b4 <rcl_wait+0x25c>
 801492e:	e719      	b.n	8014764 <rcl_wait+0x10c>
 8014930:	ffffffff 	.word	0xffffffff
 8014934:	7fffffff 	.word	0x7fffffff
 8014938:	3b9aca00 	.word	0x3b9aca00
 801493c:	00000000 	.word	0x00000000

08014940 <rcl_action_take_goal_response>:
 8014940:	2800      	cmp	r0, #0
 8014942:	d039      	beq.n	80149b8 <rcl_action_take_goal_response+0x78>
 8014944:	b570      	push	{r4, r5, r6, lr}
 8014946:	4604      	mov	r4, r0
 8014948:	6800      	ldr	r0, [r0, #0]
 801494a:	b380      	cbz	r0, 80149ae <rcl_action_take_goal_response+0x6e>
 801494c:	460d      	mov	r5, r1
 801494e:	4616      	mov	r6, r2
 8014950:	f7fe f872 	bl	8012a38 <rcl_client_is_valid>
 8014954:	b330      	cbz	r0, 80149a4 <rcl_action_take_goal_response+0x64>
 8014956:	6820      	ldr	r0, [r4, #0]
 8014958:	3004      	adds	r0, #4
 801495a:	f7fe f86d 	bl	8012a38 <rcl_client_is_valid>
 801495e:	b308      	cbz	r0, 80149a4 <rcl_action_take_goal_response+0x64>
 8014960:	6820      	ldr	r0, [r4, #0]
 8014962:	3008      	adds	r0, #8
 8014964:	f7fe f868 	bl	8012a38 <rcl_client_is_valid>
 8014968:	b1e0      	cbz	r0, 80149a4 <rcl_action_take_goal_response+0x64>
 801496a:	6820      	ldr	r0, [r4, #0]
 801496c:	300c      	adds	r0, #12
 801496e:	f7fe ffff 	bl	8013970 <rcl_subscription_is_valid>
 8014972:	b1b8      	cbz	r0, 80149a4 <rcl_action_take_goal_response+0x64>
 8014974:	6820      	ldr	r0, [r4, #0]
 8014976:	3010      	adds	r0, #16
 8014978:	f7fe fffa 	bl	8013970 <rcl_subscription_is_valid>
 801497c:	b190      	cbz	r0, 80149a4 <rcl_action_take_goal_response+0x64>
 801497e:	b1cd      	cbz	r5, 80149b4 <rcl_action_take_goal_response+0x74>
 8014980:	b1c6      	cbz	r6, 80149b4 <rcl_action_take_goal_response+0x74>
 8014982:	6820      	ldr	r0, [r4, #0]
 8014984:	4632      	mov	r2, r6
 8014986:	4629      	mov	r1, r5
 8014988:	f7fe f80e 	bl	80129a8 <rcl_take_response>
 801498c:	b148      	cbz	r0, 80149a2 <rcl_action_take_goal_response+0x62>
 801498e:	280a      	cmp	r0, #10
 8014990:	d007      	beq.n	80149a2 <rcl_action_take_goal_response+0x62>
 8014992:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8014996:	f640 0337 	movw	r3, #2103	@ 0x837
 801499a:	4290      	cmp	r0, r2
 801499c:	bf0c      	ite	eq
 801499e:	4618      	moveq	r0, r3
 80149a0:	2001      	movne	r0, #1
 80149a2:	bd70      	pop	{r4, r5, r6, pc}
 80149a4:	f7f9 f9c0 	bl	800dd28 <rcutils_reset_error>
 80149a8:	f640 0036 	movw	r0, #2102	@ 0x836
 80149ac:	bd70      	pop	{r4, r5, r6, pc}
 80149ae:	f640 0036 	movw	r0, #2102	@ 0x836
 80149b2:	bd70      	pop	{r4, r5, r6, pc}
 80149b4:	200b      	movs	r0, #11
 80149b6:	bd70      	pop	{r4, r5, r6, pc}
 80149b8:	f640 0036 	movw	r0, #2102	@ 0x836
 80149bc:	4770      	bx	lr
 80149be:	bf00      	nop

080149c0 <rcl_action_send_result_request>:
 80149c0:	b390      	cbz	r0, 8014a28 <rcl_action_send_result_request+0x68>
 80149c2:	b570      	push	{r4, r5, r6, lr}
 80149c4:	4604      	mov	r4, r0
 80149c6:	6800      	ldr	r0, [r0, #0]
 80149c8:	b348      	cbz	r0, 8014a1e <rcl_action_send_result_request+0x5e>
 80149ca:	460d      	mov	r5, r1
 80149cc:	4616      	mov	r6, r2
 80149ce:	f7fe f833 	bl	8012a38 <rcl_client_is_valid>
 80149d2:	b1f8      	cbz	r0, 8014a14 <rcl_action_send_result_request+0x54>
 80149d4:	6820      	ldr	r0, [r4, #0]
 80149d6:	3004      	adds	r0, #4
 80149d8:	f7fe f82e 	bl	8012a38 <rcl_client_is_valid>
 80149dc:	b1d0      	cbz	r0, 8014a14 <rcl_action_send_result_request+0x54>
 80149de:	6820      	ldr	r0, [r4, #0]
 80149e0:	3008      	adds	r0, #8
 80149e2:	f7fe f829 	bl	8012a38 <rcl_client_is_valid>
 80149e6:	b1a8      	cbz	r0, 8014a14 <rcl_action_send_result_request+0x54>
 80149e8:	6820      	ldr	r0, [r4, #0]
 80149ea:	300c      	adds	r0, #12
 80149ec:	f7fe ffc0 	bl	8013970 <rcl_subscription_is_valid>
 80149f0:	b180      	cbz	r0, 8014a14 <rcl_action_send_result_request+0x54>
 80149f2:	6820      	ldr	r0, [r4, #0]
 80149f4:	3010      	adds	r0, #16
 80149f6:	f7fe ffbb 	bl	8013970 <rcl_subscription_is_valid>
 80149fa:	b158      	cbz	r0, 8014a14 <rcl_action_send_result_request+0x54>
 80149fc:	b195      	cbz	r5, 8014a24 <rcl_action_send_result_request+0x64>
 80149fe:	b18e      	cbz	r6, 8014a24 <rcl_action_send_result_request+0x64>
 8014a00:	6820      	ldr	r0, [r4, #0]
 8014a02:	4632      	mov	r2, r6
 8014a04:	4629      	mov	r1, r5
 8014a06:	3008      	adds	r0, #8
 8014a08:	f7fd ff98 	bl	801293c <rcl_send_request>
 8014a0c:	3800      	subs	r0, #0
 8014a0e:	bf18      	it	ne
 8014a10:	2001      	movne	r0, #1
 8014a12:	bd70      	pop	{r4, r5, r6, pc}
 8014a14:	f7f9 f988 	bl	800dd28 <rcutils_reset_error>
 8014a18:	f640 0036 	movw	r0, #2102	@ 0x836
 8014a1c:	bd70      	pop	{r4, r5, r6, pc}
 8014a1e:	f640 0036 	movw	r0, #2102	@ 0x836
 8014a22:	bd70      	pop	{r4, r5, r6, pc}
 8014a24:	200b      	movs	r0, #11
 8014a26:	bd70      	pop	{r4, r5, r6, pc}
 8014a28:	f640 0036 	movw	r0, #2102	@ 0x836
 8014a2c:	4770      	bx	lr
 8014a2e:	bf00      	nop

08014a30 <rcl_action_take_result_response>:
 8014a30:	2800      	cmp	r0, #0
 8014a32:	d03a      	beq.n	8014aaa <rcl_action_take_result_response+0x7a>
 8014a34:	b570      	push	{r4, r5, r6, lr}
 8014a36:	4604      	mov	r4, r0
 8014a38:	6800      	ldr	r0, [r0, #0]
 8014a3a:	b388      	cbz	r0, 8014aa0 <rcl_action_take_result_response+0x70>
 8014a3c:	460d      	mov	r5, r1
 8014a3e:	4616      	mov	r6, r2
 8014a40:	f7fd fffa 	bl	8012a38 <rcl_client_is_valid>
 8014a44:	b338      	cbz	r0, 8014a96 <rcl_action_take_result_response+0x66>
 8014a46:	6820      	ldr	r0, [r4, #0]
 8014a48:	3004      	adds	r0, #4
 8014a4a:	f7fd fff5 	bl	8012a38 <rcl_client_is_valid>
 8014a4e:	b310      	cbz	r0, 8014a96 <rcl_action_take_result_response+0x66>
 8014a50:	6820      	ldr	r0, [r4, #0]
 8014a52:	3008      	adds	r0, #8
 8014a54:	f7fd fff0 	bl	8012a38 <rcl_client_is_valid>
 8014a58:	b1e8      	cbz	r0, 8014a96 <rcl_action_take_result_response+0x66>
 8014a5a:	6820      	ldr	r0, [r4, #0]
 8014a5c:	300c      	adds	r0, #12
 8014a5e:	f7fe ff87 	bl	8013970 <rcl_subscription_is_valid>
 8014a62:	b1c0      	cbz	r0, 8014a96 <rcl_action_take_result_response+0x66>
 8014a64:	6820      	ldr	r0, [r4, #0]
 8014a66:	3010      	adds	r0, #16
 8014a68:	f7fe ff82 	bl	8013970 <rcl_subscription_is_valid>
 8014a6c:	b198      	cbz	r0, 8014a96 <rcl_action_take_result_response+0x66>
 8014a6e:	b1d5      	cbz	r5, 8014aa6 <rcl_action_take_result_response+0x76>
 8014a70:	b1ce      	cbz	r6, 8014aa6 <rcl_action_take_result_response+0x76>
 8014a72:	6820      	ldr	r0, [r4, #0]
 8014a74:	4632      	mov	r2, r6
 8014a76:	4629      	mov	r1, r5
 8014a78:	3008      	adds	r0, #8
 8014a7a:	f7fd ff95 	bl	80129a8 <rcl_take_response>
 8014a7e:	b148      	cbz	r0, 8014a94 <rcl_action_take_result_response+0x64>
 8014a80:	280a      	cmp	r0, #10
 8014a82:	d007      	beq.n	8014a94 <rcl_action_take_result_response+0x64>
 8014a84:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8014a88:	f640 0337 	movw	r3, #2103	@ 0x837
 8014a8c:	4290      	cmp	r0, r2
 8014a8e:	bf0c      	ite	eq
 8014a90:	4618      	moveq	r0, r3
 8014a92:	2001      	movne	r0, #1
 8014a94:	bd70      	pop	{r4, r5, r6, pc}
 8014a96:	f7f9 f947 	bl	800dd28 <rcutils_reset_error>
 8014a9a:	f640 0036 	movw	r0, #2102	@ 0x836
 8014a9e:	bd70      	pop	{r4, r5, r6, pc}
 8014aa0:	f640 0036 	movw	r0, #2102	@ 0x836
 8014aa4:	bd70      	pop	{r4, r5, r6, pc}
 8014aa6:	200b      	movs	r0, #11
 8014aa8:	bd70      	pop	{r4, r5, r6, pc}
 8014aaa:	f640 0036 	movw	r0, #2102	@ 0x836
 8014aae:	4770      	bx	lr

08014ab0 <rcl_action_take_cancel_response>:
 8014ab0:	2800      	cmp	r0, #0
 8014ab2:	d03a      	beq.n	8014b2a <rcl_action_take_cancel_response+0x7a>
 8014ab4:	b570      	push	{r4, r5, r6, lr}
 8014ab6:	4604      	mov	r4, r0
 8014ab8:	6800      	ldr	r0, [r0, #0]
 8014aba:	b388      	cbz	r0, 8014b20 <rcl_action_take_cancel_response+0x70>
 8014abc:	460d      	mov	r5, r1
 8014abe:	4616      	mov	r6, r2
 8014ac0:	f7fd ffba 	bl	8012a38 <rcl_client_is_valid>
 8014ac4:	b338      	cbz	r0, 8014b16 <rcl_action_take_cancel_response+0x66>
 8014ac6:	6820      	ldr	r0, [r4, #0]
 8014ac8:	3004      	adds	r0, #4
 8014aca:	f7fd ffb5 	bl	8012a38 <rcl_client_is_valid>
 8014ace:	b310      	cbz	r0, 8014b16 <rcl_action_take_cancel_response+0x66>
 8014ad0:	6820      	ldr	r0, [r4, #0]
 8014ad2:	3008      	adds	r0, #8
 8014ad4:	f7fd ffb0 	bl	8012a38 <rcl_client_is_valid>
 8014ad8:	b1e8      	cbz	r0, 8014b16 <rcl_action_take_cancel_response+0x66>
 8014ada:	6820      	ldr	r0, [r4, #0]
 8014adc:	300c      	adds	r0, #12
 8014ade:	f7fe ff47 	bl	8013970 <rcl_subscription_is_valid>
 8014ae2:	b1c0      	cbz	r0, 8014b16 <rcl_action_take_cancel_response+0x66>
 8014ae4:	6820      	ldr	r0, [r4, #0]
 8014ae6:	3010      	adds	r0, #16
 8014ae8:	f7fe ff42 	bl	8013970 <rcl_subscription_is_valid>
 8014aec:	b198      	cbz	r0, 8014b16 <rcl_action_take_cancel_response+0x66>
 8014aee:	b1d5      	cbz	r5, 8014b26 <rcl_action_take_cancel_response+0x76>
 8014af0:	b1ce      	cbz	r6, 8014b26 <rcl_action_take_cancel_response+0x76>
 8014af2:	6820      	ldr	r0, [r4, #0]
 8014af4:	4632      	mov	r2, r6
 8014af6:	4629      	mov	r1, r5
 8014af8:	3004      	adds	r0, #4
 8014afa:	f7fd ff55 	bl	80129a8 <rcl_take_response>
 8014afe:	b148      	cbz	r0, 8014b14 <rcl_action_take_cancel_response+0x64>
 8014b00:	280a      	cmp	r0, #10
 8014b02:	d007      	beq.n	8014b14 <rcl_action_take_cancel_response+0x64>
 8014b04:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8014b08:	f640 0337 	movw	r3, #2103	@ 0x837
 8014b0c:	4290      	cmp	r0, r2
 8014b0e:	bf0c      	ite	eq
 8014b10:	4618      	moveq	r0, r3
 8014b12:	2001      	movne	r0, #1
 8014b14:	bd70      	pop	{r4, r5, r6, pc}
 8014b16:	f7f9 f907 	bl	800dd28 <rcutils_reset_error>
 8014b1a:	f640 0036 	movw	r0, #2102	@ 0x836
 8014b1e:	bd70      	pop	{r4, r5, r6, pc}
 8014b20:	f640 0036 	movw	r0, #2102	@ 0x836
 8014b24:	bd70      	pop	{r4, r5, r6, pc}
 8014b26:	200b      	movs	r0, #11
 8014b28:	bd70      	pop	{r4, r5, r6, pc}
 8014b2a:	f640 0036 	movw	r0, #2102	@ 0x836
 8014b2e:	4770      	bx	lr

08014b30 <rcl_action_take_feedback>:
 8014b30:	2800      	cmp	r0, #0
 8014b32:	d038      	beq.n	8014ba6 <rcl_action_take_feedback+0x76>
 8014b34:	b530      	push	{r4, r5, lr}
 8014b36:	4604      	mov	r4, r0
 8014b38:	6800      	ldr	r0, [r0, #0]
 8014b3a:	b091      	sub	sp, #68	@ 0x44
 8014b3c:	b378      	cbz	r0, 8014b9e <rcl_action_take_feedback+0x6e>
 8014b3e:	460d      	mov	r5, r1
 8014b40:	f7fd ff7a 	bl	8012a38 <rcl_client_is_valid>
 8014b44:	b328      	cbz	r0, 8014b92 <rcl_action_take_feedback+0x62>
 8014b46:	6820      	ldr	r0, [r4, #0]
 8014b48:	3004      	adds	r0, #4
 8014b4a:	f7fd ff75 	bl	8012a38 <rcl_client_is_valid>
 8014b4e:	b300      	cbz	r0, 8014b92 <rcl_action_take_feedback+0x62>
 8014b50:	6820      	ldr	r0, [r4, #0]
 8014b52:	3008      	adds	r0, #8
 8014b54:	f7fd ff70 	bl	8012a38 <rcl_client_is_valid>
 8014b58:	b1d8      	cbz	r0, 8014b92 <rcl_action_take_feedback+0x62>
 8014b5a:	6820      	ldr	r0, [r4, #0]
 8014b5c:	300c      	adds	r0, #12
 8014b5e:	f7fe ff07 	bl	8013970 <rcl_subscription_is_valid>
 8014b62:	b1b0      	cbz	r0, 8014b92 <rcl_action_take_feedback+0x62>
 8014b64:	6820      	ldr	r0, [r4, #0]
 8014b66:	3010      	adds	r0, #16
 8014b68:	f7fe ff02 	bl	8013970 <rcl_subscription_is_valid>
 8014b6c:	b188      	cbz	r0, 8014b92 <rcl_action_take_feedback+0x62>
 8014b6e:	b1ed      	cbz	r5, 8014bac <rcl_action_take_feedback+0x7c>
 8014b70:	6820      	ldr	r0, [r4, #0]
 8014b72:	2300      	movs	r3, #0
 8014b74:	466a      	mov	r2, sp
 8014b76:	4629      	mov	r1, r5
 8014b78:	300c      	adds	r0, #12
 8014b7a:	f7fe fe9b 	bl	80138b4 <rcl_take>
 8014b7e:	b160      	cbz	r0, 8014b9a <rcl_action_take_feedback+0x6a>
 8014b80:	f240 1391 	movw	r3, #401	@ 0x191
 8014b84:	4298      	cmp	r0, r3
 8014b86:	d014      	beq.n	8014bb2 <rcl_action_take_feedback+0x82>
 8014b88:	280a      	cmp	r0, #10
 8014b8a:	bf18      	it	ne
 8014b8c:	2001      	movne	r0, #1
 8014b8e:	b011      	add	sp, #68	@ 0x44
 8014b90:	bd30      	pop	{r4, r5, pc}
 8014b92:	f7f9 f8c9 	bl	800dd28 <rcutils_reset_error>
 8014b96:	f640 0036 	movw	r0, #2102	@ 0x836
 8014b9a:	b011      	add	sp, #68	@ 0x44
 8014b9c:	bd30      	pop	{r4, r5, pc}
 8014b9e:	f640 0036 	movw	r0, #2102	@ 0x836
 8014ba2:	b011      	add	sp, #68	@ 0x44
 8014ba4:	bd30      	pop	{r4, r5, pc}
 8014ba6:	f640 0036 	movw	r0, #2102	@ 0x836
 8014baa:	4770      	bx	lr
 8014bac:	200b      	movs	r0, #11
 8014bae:	b011      	add	sp, #68	@ 0x44
 8014bb0:	bd30      	pop	{r4, r5, pc}
 8014bb2:	f640 0037 	movw	r0, #2103	@ 0x837
 8014bb6:	e7f0      	b.n	8014b9a <rcl_action_take_feedback+0x6a>

08014bb8 <rcl_action_wait_set_add_action_client>:
 8014bb8:	2800      	cmp	r0, #0
 8014bba:	d048      	beq.n	8014c4e <rcl_action_wait_set_add_action_client+0x96>
 8014bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bbe:	460c      	mov	r4, r1
 8014bc0:	2900      	cmp	r1, #0
 8014bc2:	d03c      	beq.n	8014c3e <rcl_action_wait_set_add_action_client+0x86>
 8014bc4:	4605      	mov	r5, r0
 8014bc6:	6808      	ldr	r0, [r1, #0]
 8014bc8:	2800      	cmp	r0, #0
 8014bca:	d038      	beq.n	8014c3e <rcl_action_wait_set_add_action_client+0x86>
 8014bcc:	4617      	mov	r7, r2
 8014bce:	461e      	mov	r6, r3
 8014bd0:	f7fd ff32 	bl	8012a38 <rcl_client_is_valid>
 8014bd4:	b3b0      	cbz	r0, 8014c44 <rcl_action_wait_set_add_action_client+0x8c>
 8014bd6:	6820      	ldr	r0, [r4, #0]
 8014bd8:	3004      	adds	r0, #4
 8014bda:	f7fd ff2d 	bl	8012a38 <rcl_client_is_valid>
 8014bde:	b388      	cbz	r0, 8014c44 <rcl_action_wait_set_add_action_client+0x8c>
 8014be0:	6820      	ldr	r0, [r4, #0]
 8014be2:	3008      	adds	r0, #8
 8014be4:	f7fd ff28 	bl	8012a38 <rcl_client_is_valid>
 8014be8:	b360      	cbz	r0, 8014c44 <rcl_action_wait_set_add_action_client+0x8c>
 8014bea:	6820      	ldr	r0, [r4, #0]
 8014bec:	300c      	adds	r0, #12
 8014bee:	f7fe febf 	bl	8013970 <rcl_subscription_is_valid>
 8014bf2:	b338      	cbz	r0, 8014c44 <rcl_action_wait_set_add_action_client+0x8c>
 8014bf4:	6820      	ldr	r0, [r4, #0]
 8014bf6:	3010      	adds	r0, #16
 8014bf8:	f7fe feba 	bl	8013970 <rcl_subscription_is_valid>
 8014bfc:	b310      	cbz	r0, 8014c44 <rcl_action_wait_set_add_action_client+0x8c>
 8014bfe:	6821      	ldr	r1, [r4, #0]
 8014c00:	4628      	mov	r0, r5
 8014c02:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8014c06:	f7ff fccd 	bl	80145a4 <rcl_wait_set_add_client>
 8014c0a:	b9b8      	cbnz	r0, 8014c3c <rcl_action_wait_set_add_action_client+0x84>
 8014c0c:	6821      	ldr	r1, [r4, #0]
 8014c0e:	4628      	mov	r0, r5
 8014c10:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8014c14:	3104      	adds	r1, #4
 8014c16:	f7ff fcc5 	bl	80145a4 <rcl_wait_set_add_client>
 8014c1a:	b978      	cbnz	r0, 8014c3c <rcl_action_wait_set_add_action_client+0x84>
 8014c1c:	6821      	ldr	r1, [r4, #0]
 8014c1e:	4628      	mov	r0, r5
 8014c20:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8014c24:	3108      	adds	r1, #8
 8014c26:	f7ff fcbd 	bl	80145a4 <rcl_wait_set_add_client>
 8014c2a:	b938      	cbnz	r0, 8014c3c <rcl_action_wait_set_add_action_client+0x84>
 8014c2c:	6821      	ldr	r1, [r4, #0]
 8014c2e:	4628      	mov	r0, r5
 8014c30:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8014c34:	310c      	adds	r1, #12
 8014c36:	f7ff f96d 	bl	8013f14 <rcl_wait_set_add_subscription>
 8014c3a:	b158      	cbz	r0, 8014c54 <rcl_action_wait_set_add_action_client+0x9c>
 8014c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c3e:	f640 0036 	movw	r0, #2102	@ 0x836
 8014c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c44:	f7f9 f870 	bl	800dd28 <rcutils_reset_error>
 8014c48:	f640 0036 	movw	r0, #2102	@ 0x836
 8014c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c4e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014c52:	4770      	bx	lr
 8014c54:	6821      	ldr	r1, [r4, #0]
 8014c56:	4628      	mov	r0, r5
 8014c58:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8014c5c:	3110      	adds	r1, #16
 8014c5e:	f7ff f959 	bl	8013f14 <rcl_wait_set_add_subscription>
 8014c62:	2800      	cmp	r0, #0
 8014c64:	d1ea      	bne.n	8014c3c <rcl_action_wait_set_add_action_client+0x84>
 8014c66:	b11f      	cbz	r7, 8014c70 <rcl_action_wait_set_add_action_client+0xb8>
 8014c68:	6823      	ldr	r3, [r4, #0]
 8014c6a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8014c6e:	603b      	str	r3, [r7, #0]
 8014c70:	2e00      	cmp	r6, #0
 8014c72:	d0e3      	beq.n	8014c3c <rcl_action_wait_set_add_action_client+0x84>
 8014c74:	6823      	ldr	r3, [r4, #0]
 8014c76:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8014c7a:	6033      	str	r3, [r6, #0]
 8014c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c7e:	bf00      	nop

08014c80 <rcl_action_client_wait_set_get_entities_ready>:
 8014c80:	2800      	cmp	r0, #0
 8014c82:	f000 808d 	beq.w	8014da0 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8014c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c8a:	460c      	mov	r4, r1
 8014c8c:	2900      	cmp	r1, #0
 8014c8e:	d077      	beq.n	8014d80 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8014c90:	4605      	mov	r5, r0
 8014c92:	6808      	ldr	r0, [r1, #0]
 8014c94:	2800      	cmp	r0, #0
 8014c96:	d073      	beq.n	8014d80 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8014c98:	4616      	mov	r6, r2
 8014c9a:	461f      	mov	r7, r3
 8014c9c:	f7fd fecc 	bl	8012a38 <rcl_client_is_valid>
 8014ca0:	2800      	cmp	r0, #0
 8014ca2:	d071      	beq.n	8014d88 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014ca4:	6820      	ldr	r0, [r4, #0]
 8014ca6:	3004      	adds	r0, #4
 8014ca8:	f7fd fec6 	bl	8012a38 <rcl_client_is_valid>
 8014cac:	2800      	cmp	r0, #0
 8014cae:	d06b      	beq.n	8014d88 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014cb0:	6820      	ldr	r0, [r4, #0]
 8014cb2:	3008      	adds	r0, #8
 8014cb4:	f7fd fec0 	bl	8012a38 <rcl_client_is_valid>
 8014cb8:	2800      	cmp	r0, #0
 8014cba:	d065      	beq.n	8014d88 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014cbc:	6820      	ldr	r0, [r4, #0]
 8014cbe:	300c      	adds	r0, #12
 8014cc0:	f7fe fe56 	bl	8013970 <rcl_subscription_is_valid>
 8014cc4:	2800      	cmp	r0, #0
 8014cc6:	d05f      	beq.n	8014d88 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014cc8:	6820      	ldr	r0, [r4, #0]
 8014cca:	3010      	adds	r0, #16
 8014ccc:	f7fe fe50 	bl	8013970 <rcl_subscription_is_valid>
 8014cd0:	2800      	cmp	r0, #0
 8014cd2:	d059      	beq.n	8014d88 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014cd4:	2e00      	cmp	r6, #0
 8014cd6:	d060      	beq.n	8014d9a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014cd8:	2f00      	cmp	r7, #0
 8014cda:	d05e      	beq.n	8014d9a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014cdc:	9b06      	ldr	r3, [sp, #24]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d05b      	beq.n	8014d9a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014ce2:	9b07      	ldr	r3, [sp, #28]
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d058      	beq.n	8014d9a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014ce8:	9b08      	ldr	r3, [sp, #32]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d055      	beq.n	8014d9a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014cee:	6823      	ldr	r3, [r4, #0]
 8014cf0:	686a      	ldr	r2, [r5, #4]
 8014cf2:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8014cf6:	428a      	cmp	r2, r1
 8014cf8:	d94c      	bls.n	8014d94 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8014cfa:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8014cfe:	4282      	cmp	r2, r0
 8014d00:	d948      	bls.n	8014d94 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8014d02:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8014d06:	69ea      	ldr	r2, [r5, #28]
 8014d08:	42a2      	cmp	r2, r4
 8014d0a:	d943      	bls.n	8014d94 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8014d0c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8014d10:	4562      	cmp	r2, ip
 8014d12:	d93f      	bls.n	8014d94 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8014d14:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8014d18:	4572      	cmp	r2, lr
 8014d1a:	d93b      	bls.n	8014d94 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8014d1c:	69aa      	ldr	r2, [r5, #24]
 8014d1e:	682d      	ldr	r5, [r5, #0]
 8014d20:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8014d24:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8014d28:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8014d2c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8014d30:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8014d34:	f103 0c0c 	add.w	ip, r3, #12
 8014d38:	eba5 050c 	sub.w	r5, r5, ip
 8014d3c:	fab5 f585 	clz	r5, r5
 8014d40:	096d      	lsrs	r5, r5, #5
 8014d42:	7035      	strb	r5, [r6, #0]
 8014d44:	f103 0510 	add.w	r5, r3, #16
 8014d48:	1b64      	subs	r4, r4, r5
 8014d4a:	fab4 f484 	clz	r4, r4
 8014d4e:	0964      	lsrs	r4, r4, #5
 8014d50:	703c      	strb	r4, [r7, #0]
 8014d52:	eba3 0008 	sub.w	r0, r3, r8
 8014d56:	1d1c      	adds	r4, r3, #4
 8014d58:	3308      	adds	r3, #8
 8014d5a:	1ad3      	subs	r3, r2, r3
 8014d5c:	fab0 f080 	clz	r0, r0
 8014d60:	9a06      	ldr	r2, [sp, #24]
 8014d62:	0940      	lsrs	r0, r0, #5
 8014d64:	1b09      	subs	r1, r1, r4
 8014d66:	7010      	strb	r0, [r2, #0]
 8014d68:	fab1 f181 	clz	r1, r1
 8014d6c:	9a07      	ldr	r2, [sp, #28]
 8014d6e:	0949      	lsrs	r1, r1, #5
 8014d70:	7011      	strb	r1, [r2, #0]
 8014d72:	fab3 f383 	clz	r3, r3
 8014d76:	9a08      	ldr	r2, [sp, #32]
 8014d78:	095b      	lsrs	r3, r3, #5
 8014d7a:	2000      	movs	r0, #0
 8014d7c:	7013      	strb	r3, [r2, #0]
 8014d7e:	e001      	b.n	8014d84 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8014d80:	f640 0036 	movw	r0, #2102	@ 0x836
 8014d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d88:	f7f8 ffce 	bl	800dd28 <rcutils_reset_error>
 8014d8c:	f640 0036 	movw	r0, #2102	@ 0x836
 8014d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d94:	2001      	movs	r0, #1
 8014d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d9a:	200b      	movs	r0, #11
 8014d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014da0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014da4:	4770      	bx	lr
 8014da6:	bf00      	nop

08014da8 <rcl_action_take_goal_request>:
 8014da8:	2800      	cmp	r0, #0
 8014daa:	d039      	beq.n	8014e20 <rcl_action_take_goal_request+0x78>
 8014dac:	b570      	push	{r4, r5, r6, lr}
 8014dae:	4604      	mov	r4, r0
 8014db0:	6800      	ldr	r0, [r0, #0]
 8014db2:	b380      	cbz	r0, 8014e16 <rcl_action_take_goal_request+0x6e>
 8014db4:	460d      	mov	r5, r1
 8014db6:	4616      	mov	r6, r2
 8014db8:	f7fe fc96 	bl	80136e8 <rcl_service_is_valid>
 8014dbc:	b330      	cbz	r0, 8014e0c <rcl_action_take_goal_request+0x64>
 8014dbe:	6820      	ldr	r0, [r4, #0]
 8014dc0:	3004      	adds	r0, #4
 8014dc2:	f7fe fc91 	bl	80136e8 <rcl_service_is_valid>
 8014dc6:	b308      	cbz	r0, 8014e0c <rcl_action_take_goal_request+0x64>
 8014dc8:	6820      	ldr	r0, [r4, #0]
 8014dca:	3008      	adds	r0, #8
 8014dcc:	f7fe fc8c 	bl	80136e8 <rcl_service_is_valid>
 8014dd0:	b1e0      	cbz	r0, 8014e0c <rcl_action_take_goal_request+0x64>
 8014dd2:	6820      	ldr	r0, [r4, #0]
 8014dd4:	300c      	adds	r0, #12
 8014dd6:	f7f8 f815 	bl	800ce04 <rcl_publisher_is_valid>
 8014dda:	b1b8      	cbz	r0, 8014e0c <rcl_action_take_goal_request+0x64>
 8014ddc:	6820      	ldr	r0, [r4, #0]
 8014dde:	3010      	adds	r0, #16
 8014de0:	f7f8 f810 	bl	800ce04 <rcl_publisher_is_valid>
 8014de4:	b190      	cbz	r0, 8014e0c <rcl_action_take_goal_request+0x64>
 8014de6:	b1cd      	cbz	r5, 8014e1c <rcl_action_take_goal_request+0x74>
 8014de8:	b1c6      	cbz	r6, 8014e1c <rcl_action_take_goal_request+0x74>
 8014dea:	6820      	ldr	r0, [r4, #0]
 8014dec:	4632      	mov	r2, r6
 8014dee:	4629      	mov	r1, r5
 8014df0:	f7fe fc22 	bl	8013638 <rcl_take_request>
 8014df4:	b148      	cbz	r0, 8014e0a <rcl_action_take_goal_request+0x62>
 8014df6:	280a      	cmp	r0, #10
 8014df8:	d007      	beq.n	8014e0a <rcl_action_take_goal_request+0x62>
 8014dfa:	f240 2259 	movw	r2, #601	@ 0x259
 8014dfe:	f640 0399 	movw	r3, #2201	@ 0x899
 8014e02:	4290      	cmp	r0, r2
 8014e04:	bf0c      	ite	eq
 8014e06:	4618      	moveq	r0, r3
 8014e08:	2001      	movne	r0, #1
 8014e0a:	bd70      	pop	{r4, r5, r6, pc}
 8014e0c:	f7f8 ff8c 	bl	800dd28 <rcutils_reset_error>
 8014e10:	f640 0098 	movw	r0, #2200	@ 0x898
 8014e14:	bd70      	pop	{r4, r5, r6, pc}
 8014e16:	f640 0098 	movw	r0, #2200	@ 0x898
 8014e1a:	bd70      	pop	{r4, r5, r6, pc}
 8014e1c:	200b      	movs	r0, #11
 8014e1e:	bd70      	pop	{r4, r5, r6, pc}
 8014e20:	f640 0098 	movw	r0, #2200	@ 0x898
 8014e24:	4770      	bx	lr
 8014e26:	bf00      	nop

08014e28 <rcl_action_send_goal_response>:
 8014e28:	b388      	cbz	r0, 8014e8e <rcl_action_send_goal_response+0x66>
 8014e2a:	b570      	push	{r4, r5, r6, lr}
 8014e2c:	4604      	mov	r4, r0
 8014e2e:	6800      	ldr	r0, [r0, #0]
 8014e30:	b340      	cbz	r0, 8014e84 <rcl_action_send_goal_response+0x5c>
 8014e32:	460d      	mov	r5, r1
 8014e34:	4616      	mov	r6, r2
 8014e36:	f7fe fc57 	bl	80136e8 <rcl_service_is_valid>
 8014e3a:	b1f0      	cbz	r0, 8014e7a <rcl_action_send_goal_response+0x52>
 8014e3c:	6820      	ldr	r0, [r4, #0]
 8014e3e:	3004      	adds	r0, #4
 8014e40:	f7fe fc52 	bl	80136e8 <rcl_service_is_valid>
 8014e44:	b1c8      	cbz	r0, 8014e7a <rcl_action_send_goal_response+0x52>
 8014e46:	6820      	ldr	r0, [r4, #0]
 8014e48:	3008      	adds	r0, #8
 8014e4a:	f7fe fc4d 	bl	80136e8 <rcl_service_is_valid>
 8014e4e:	b1a0      	cbz	r0, 8014e7a <rcl_action_send_goal_response+0x52>
 8014e50:	6820      	ldr	r0, [r4, #0]
 8014e52:	300c      	adds	r0, #12
 8014e54:	f7f7 ffd6 	bl	800ce04 <rcl_publisher_is_valid>
 8014e58:	b178      	cbz	r0, 8014e7a <rcl_action_send_goal_response+0x52>
 8014e5a:	6820      	ldr	r0, [r4, #0]
 8014e5c:	3010      	adds	r0, #16
 8014e5e:	f7f7 ffd1 	bl	800ce04 <rcl_publisher_is_valid>
 8014e62:	b150      	cbz	r0, 8014e7a <rcl_action_send_goal_response+0x52>
 8014e64:	b18d      	cbz	r5, 8014e8a <rcl_action_send_goal_response+0x62>
 8014e66:	b186      	cbz	r6, 8014e8a <rcl_action_send_goal_response+0x62>
 8014e68:	6820      	ldr	r0, [r4, #0]
 8014e6a:	4632      	mov	r2, r6
 8014e6c:	4629      	mov	r1, r5
 8014e6e:	f7fe fc23 	bl	80136b8 <rcl_send_response>
 8014e72:	3800      	subs	r0, #0
 8014e74:	bf18      	it	ne
 8014e76:	2001      	movne	r0, #1
 8014e78:	bd70      	pop	{r4, r5, r6, pc}
 8014e7a:	f7f8 ff55 	bl	800dd28 <rcutils_reset_error>
 8014e7e:	f640 0098 	movw	r0, #2200	@ 0x898
 8014e82:	bd70      	pop	{r4, r5, r6, pc}
 8014e84:	f640 0098 	movw	r0, #2200	@ 0x898
 8014e88:	bd70      	pop	{r4, r5, r6, pc}
 8014e8a:	200b      	movs	r0, #11
 8014e8c:	bd70      	pop	{r4, r5, r6, pc}
 8014e8e:	f640 0098 	movw	r0, #2200	@ 0x898
 8014e92:	4770      	bx	lr

08014e94 <rcl_action_take_result_request>:
 8014e94:	2800      	cmp	r0, #0
 8014e96:	d03a      	beq.n	8014f0e <rcl_action_take_result_request+0x7a>
 8014e98:	b570      	push	{r4, r5, r6, lr}
 8014e9a:	4604      	mov	r4, r0
 8014e9c:	6800      	ldr	r0, [r0, #0]
 8014e9e:	b388      	cbz	r0, 8014f04 <rcl_action_take_result_request+0x70>
 8014ea0:	460d      	mov	r5, r1
 8014ea2:	4616      	mov	r6, r2
 8014ea4:	f7fe fc20 	bl	80136e8 <rcl_service_is_valid>
 8014ea8:	b338      	cbz	r0, 8014efa <rcl_action_take_result_request+0x66>
 8014eaa:	6820      	ldr	r0, [r4, #0]
 8014eac:	3004      	adds	r0, #4
 8014eae:	f7fe fc1b 	bl	80136e8 <rcl_service_is_valid>
 8014eb2:	b310      	cbz	r0, 8014efa <rcl_action_take_result_request+0x66>
 8014eb4:	6820      	ldr	r0, [r4, #0]
 8014eb6:	3008      	adds	r0, #8
 8014eb8:	f7fe fc16 	bl	80136e8 <rcl_service_is_valid>
 8014ebc:	b1e8      	cbz	r0, 8014efa <rcl_action_take_result_request+0x66>
 8014ebe:	6820      	ldr	r0, [r4, #0]
 8014ec0:	300c      	adds	r0, #12
 8014ec2:	f7f7 ff9f 	bl	800ce04 <rcl_publisher_is_valid>
 8014ec6:	b1c0      	cbz	r0, 8014efa <rcl_action_take_result_request+0x66>
 8014ec8:	6820      	ldr	r0, [r4, #0]
 8014eca:	3010      	adds	r0, #16
 8014ecc:	f7f7 ff9a 	bl	800ce04 <rcl_publisher_is_valid>
 8014ed0:	b198      	cbz	r0, 8014efa <rcl_action_take_result_request+0x66>
 8014ed2:	b1d5      	cbz	r5, 8014f0a <rcl_action_take_result_request+0x76>
 8014ed4:	b1ce      	cbz	r6, 8014f0a <rcl_action_take_result_request+0x76>
 8014ed6:	6820      	ldr	r0, [r4, #0]
 8014ed8:	4632      	mov	r2, r6
 8014eda:	4629      	mov	r1, r5
 8014edc:	3008      	adds	r0, #8
 8014ede:	f7fe fbab 	bl	8013638 <rcl_take_request>
 8014ee2:	b148      	cbz	r0, 8014ef8 <rcl_action_take_result_request+0x64>
 8014ee4:	280a      	cmp	r0, #10
 8014ee6:	d007      	beq.n	8014ef8 <rcl_action_take_result_request+0x64>
 8014ee8:	f240 2259 	movw	r2, #601	@ 0x259
 8014eec:	f640 0399 	movw	r3, #2201	@ 0x899
 8014ef0:	4290      	cmp	r0, r2
 8014ef2:	bf0c      	ite	eq
 8014ef4:	4618      	moveq	r0, r3
 8014ef6:	2001      	movne	r0, #1
 8014ef8:	bd70      	pop	{r4, r5, r6, pc}
 8014efa:	f7f8 ff15 	bl	800dd28 <rcutils_reset_error>
 8014efe:	f640 0098 	movw	r0, #2200	@ 0x898
 8014f02:	bd70      	pop	{r4, r5, r6, pc}
 8014f04:	f640 0098 	movw	r0, #2200	@ 0x898
 8014f08:	bd70      	pop	{r4, r5, r6, pc}
 8014f0a:	200b      	movs	r0, #11
 8014f0c:	bd70      	pop	{r4, r5, r6, pc}
 8014f0e:	f640 0098 	movw	r0, #2200	@ 0x898
 8014f12:	4770      	bx	lr

08014f14 <rcl_action_take_cancel_request>:
 8014f14:	2800      	cmp	r0, #0
 8014f16:	d03a      	beq.n	8014f8e <rcl_action_take_cancel_request+0x7a>
 8014f18:	b570      	push	{r4, r5, r6, lr}
 8014f1a:	4604      	mov	r4, r0
 8014f1c:	6800      	ldr	r0, [r0, #0]
 8014f1e:	b388      	cbz	r0, 8014f84 <rcl_action_take_cancel_request+0x70>
 8014f20:	460d      	mov	r5, r1
 8014f22:	4616      	mov	r6, r2
 8014f24:	f7fe fbe0 	bl	80136e8 <rcl_service_is_valid>
 8014f28:	b338      	cbz	r0, 8014f7a <rcl_action_take_cancel_request+0x66>
 8014f2a:	6820      	ldr	r0, [r4, #0]
 8014f2c:	3004      	adds	r0, #4
 8014f2e:	f7fe fbdb 	bl	80136e8 <rcl_service_is_valid>
 8014f32:	b310      	cbz	r0, 8014f7a <rcl_action_take_cancel_request+0x66>
 8014f34:	6820      	ldr	r0, [r4, #0]
 8014f36:	3008      	adds	r0, #8
 8014f38:	f7fe fbd6 	bl	80136e8 <rcl_service_is_valid>
 8014f3c:	b1e8      	cbz	r0, 8014f7a <rcl_action_take_cancel_request+0x66>
 8014f3e:	6820      	ldr	r0, [r4, #0]
 8014f40:	300c      	adds	r0, #12
 8014f42:	f7f7 ff5f 	bl	800ce04 <rcl_publisher_is_valid>
 8014f46:	b1c0      	cbz	r0, 8014f7a <rcl_action_take_cancel_request+0x66>
 8014f48:	6820      	ldr	r0, [r4, #0]
 8014f4a:	3010      	adds	r0, #16
 8014f4c:	f7f7 ff5a 	bl	800ce04 <rcl_publisher_is_valid>
 8014f50:	b198      	cbz	r0, 8014f7a <rcl_action_take_cancel_request+0x66>
 8014f52:	b1d5      	cbz	r5, 8014f8a <rcl_action_take_cancel_request+0x76>
 8014f54:	b1ce      	cbz	r6, 8014f8a <rcl_action_take_cancel_request+0x76>
 8014f56:	6820      	ldr	r0, [r4, #0]
 8014f58:	4632      	mov	r2, r6
 8014f5a:	4629      	mov	r1, r5
 8014f5c:	3004      	adds	r0, #4
 8014f5e:	f7fe fb6b 	bl	8013638 <rcl_take_request>
 8014f62:	b148      	cbz	r0, 8014f78 <rcl_action_take_cancel_request+0x64>
 8014f64:	280a      	cmp	r0, #10
 8014f66:	d007      	beq.n	8014f78 <rcl_action_take_cancel_request+0x64>
 8014f68:	f240 2259 	movw	r2, #601	@ 0x259
 8014f6c:	f640 0399 	movw	r3, #2201	@ 0x899
 8014f70:	4290      	cmp	r0, r2
 8014f72:	bf0c      	ite	eq
 8014f74:	4618      	moveq	r0, r3
 8014f76:	2001      	movne	r0, #1
 8014f78:	bd70      	pop	{r4, r5, r6, pc}
 8014f7a:	f7f8 fed5 	bl	800dd28 <rcutils_reset_error>
 8014f7e:	f640 0098 	movw	r0, #2200	@ 0x898
 8014f82:	bd70      	pop	{r4, r5, r6, pc}
 8014f84:	f640 0098 	movw	r0, #2200	@ 0x898
 8014f88:	bd70      	pop	{r4, r5, r6, pc}
 8014f8a:	200b      	movs	r0, #11
 8014f8c:	bd70      	pop	{r4, r5, r6, pc}
 8014f8e:	f640 0098 	movw	r0, #2200	@ 0x898
 8014f92:	4770      	bx	lr

08014f94 <rcl_action_send_cancel_response>:
 8014f94:	b390      	cbz	r0, 8014ffc <rcl_action_send_cancel_response+0x68>
 8014f96:	b570      	push	{r4, r5, r6, lr}
 8014f98:	4604      	mov	r4, r0
 8014f9a:	6800      	ldr	r0, [r0, #0]
 8014f9c:	b348      	cbz	r0, 8014ff2 <rcl_action_send_cancel_response+0x5e>
 8014f9e:	460d      	mov	r5, r1
 8014fa0:	4616      	mov	r6, r2
 8014fa2:	f7fe fba1 	bl	80136e8 <rcl_service_is_valid>
 8014fa6:	b1f8      	cbz	r0, 8014fe8 <rcl_action_send_cancel_response+0x54>
 8014fa8:	6820      	ldr	r0, [r4, #0]
 8014faa:	3004      	adds	r0, #4
 8014fac:	f7fe fb9c 	bl	80136e8 <rcl_service_is_valid>
 8014fb0:	b1d0      	cbz	r0, 8014fe8 <rcl_action_send_cancel_response+0x54>
 8014fb2:	6820      	ldr	r0, [r4, #0]
 8014fb4:	3008      	adds	r0, #8
 8014fb6:	f7fe fb97 	bl	80136e8 <rcl_service_is_valid>
 8014fba:	b1a8      	cbz	r0, 8014fe8 <rcl_action_send_cancel_response+0x54>
 8014fbc:	6820      	ldr	r0, [r4, #0]
 8014fbe:	300c      	adds	r0, #12
 8014fc0:	f7f7 ff20 	bl	800ce04 <rcl_publisher_is_valid>
 8014fc4:	b180      	cbz	r0, 8014fe8 <rcl_action_send_cancel_response+0x54>
 8014fc6:	6820      	ldr	r0, [r4, #0]
 8014fc8:	3010      	adds	r0, #16
 8014fca:	f7f7 ff1b 	bl	800ce04 <rcl_publisher_is_valid>
 8014fce:	b158      	cbz	r0, 8014fe8 <rcl_action_send_cancel_response+0x54>
 8014fd0:	b195      	cbz	r5, 8014ff8 <rcl_action_send_cancel_response+0x64>
 8014fd2:	b18e      	cbz	r6, 8014ff8 <rcl_action_send_cancel_response+0x64>
 8014fd4:	6820      	ldr	r0, [r4, #0]
 8014fd6:	4632      	mov	r2, r6
 8014fd8:	4629      	mov	r1, r5
 8014fda:	3004      	adds	r0, #4
 8014fdc:	f7fe fb6c 	bl	80136b8 <rcl_send_response>
 8014fe0:	3800      	subs	r0, #0
 8014fe2:	bf18      	it	ne
 8014fe4:	2001      	movne	r0, #1
 8014fe6:	bd70      	pop	{r4, r5, r6, pc}
 8014fe8:	f7f8 fe9e 	bl	800dd28 <rcutils_reset_error>
 8014fec:	f640 0098 	movw	r0, #2200	@ 0x898
 8014ff0:	bd70      	pop	{r4, r5, r6, pc}
 8014ff2:	f640 0098 	movw	r0, #2200	@ 0x898
 8014ff6:	bd70      	pop	{r4, r5, r6, pc}
 8014ff8:	200b      	movs	r0, #11
 8014ffa:	bd70      	pop	{r4, r5, r6, pc}
 8014ffc:	f640 0098 	movw	r0, #2200	@ 0x898
 8015000:	4770      	bx	lr
 8015002:	bf00      	nop

08015004 <rcl_action_wait_set_add_action_server>:
 8015004:	2800      	cmp	r0, #0
 8015006:	d04d      	beq.n	80150a4 <rcl_action_wait_set_add_action_server+0xa0>
 8015008:	b570      	push	{r4, r5, r6, lr}
 801500a:	460c      	mov	r4, r1
 801500c:	b159      	cbz	r1, 8015026 <rcl_action_wait_set_add_action_server+0x22>
 801500e:	4605      	mov	r5, r0
 8015010:	6808      	ldr	r0, [r1, #0]
 8015012:	b140      	cbz	r0, 8015026 <rcl_action_wait_set_add_action_server+0x22>
 8015014:	4616      	mov	r6, r2
 8015016:	f7fe fb67 	bl	80136e8 <rcl_service_is_valid>
 801501a:	b120      	cbz	r0, 8015026 <rcl_action_wait_set_add_action_server+0x22>
 801501c:	6820      	ldr	r0, [r4, #0]
 801501e:	3004      	adds	r0, #4
 8015020:	f7fe fb62 	bl	80136e8 <rcl_service_is_valid>
 8015024:	b910      	cbnz	r0, 801502c <rcl_action_wait_set_add_action_server+0x28>
 8015026:	f640 0098 	movw	r0, #2200	@ 0x898
 801502a:	bd70      	pop	{r4, r5, r6, pc}
 801502c:	6820      	ldr	r0, [r4, #0]
 801502e:	3008      	adds	r0, #8
 8015030:	f7fe fb5a 	bl	80136e8 <rcl_service_is_valid>
 8015034:	2800      	cmp	r0, #0
 8015036:	d0f6      	beq.n	8015026 <rcl_action_wait_set_add_action_server+0x22>
 8015038:	6820      	ldr	r0, [r4, #0]
 801503a:	300c      	adds	r0, #12
 801503c:	f7f7 fefa 	bl	800ce34 <rcl_publisher_is_valid_except_context>
 8015040:	2800      	cmp	r0, #0
 8015042:	d0f0      	beq.n	8015026 <rcl_action_wait_set_add_action_server+0x22>
 8015044:	6820      	ldr	r0, [r4, #0]
 8015046:	3010      	adds	r0, #16
 8015048:	f7f7 fef4 	bl	800ce34 <rcl_publisher_is_valid_except_context>
 801504c:	2800      	cmp	r0, #0
 801504e:	d0ea      	beq.n	8015026 <rcl_action_wait_set_add_action_server+0x22>
 8015050:	6821      	ldr	r1, [r4, #0]
 8015052:	4628      	mov	r0, r5
 8015054:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8015058:	f7ff fad0 	bl	80145fc <rcl_wait_set_add_service>
 801505c:	2800      	cmp	r0, #0
 801505e:	d1e4      	bne.n	801502a <rcl_action_wait_set_add_action_server+0x26>
 8015060:	6821      	ldr	r1, [r4, #0]
 8015062:	4628      	mov	r0, r5
 8015064:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8015068:	3104      	adds	r1, #4
 801506a:	f7ff fac7 	bl	80145fc <rcl_wait_set_add_service>
 801506e:	2800      	cmp	r0, #0
 8015070:	d1db      	bne.n	801502a <rcl_action_wait_set_add_action_server+0x26>
 8015072:	6821      	ldr	r1, [r4, #0]
 8015074:	4628      	mov	r0, r5
 8015076:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801507a:	3108      	adds	r1, #8
 801507c:	f7ff fabe 	bl	80145fc <rcl_wait_set_add_service>
 8015080:	2800      	cmp	r0, #0
 8015082:	d1d2      	bne.n	801502a <rcl_action_wait_set_add_action_server+0x26>
 8015084:	6821      	ldr	r1, [r4, #0]
 8015086:	4628      	mov	r0, r5
 8015088:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 801508c:	3114      	adds	r1, #20
 801508e:	f7ff fa59 	bl	8014544 <rcl_wait_set_add_timer>
 8015092:	2800      	cmp	r0, #0
 8015094:	d1c9      	bne.n	801502a <rcl_action_wait_set_add_action_server+0x26>
 8015096:	2e00      	cmp	r6, #0
 8015098:	d0c7      	beq.n	801502a <rcl_action_wait_set_add_action_server+0x26>
 801509a:	6823      	ldr	r3, [r4, #0]
 801509c:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 80150a0:	6033      	str	r3, [r6, #0]
 80150a2:	bd70      	pop	{r4, r5, r6, pc}
 80150a4:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80150a8:	4770      	bx	lr
 80150aa:	bf00      	nop

080150ac <rcl_action_server_wait_set_get_entities_ready>:
 80150ac:	2800      	cmp	r0, #0
 80150ae:	d05a      	beq.n	8015166 <rcl_action_server_wait_set_get_entities_ready+0xba>
 80150b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150b2:	460c      	mov	r4, r1
 80150b4:	b161      	cbz	r1, 80150d0 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80150b6:	4605      	mov	r5, r0
 80150b8:	6808      	ldr	r0, [r1, #0]
 80150ba:	b148      	cbz	r0, 80150d0 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80150bc:	4616      	mov	r6, r2
 80150be:	461f      	mov	r7, r3
 80150c0:	f7fe fb12 	bl	80136e8 <rcl_service_is_valid>
 80150c4:	b120      	cbz	r0, 80150d0 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80150c6:	6820      	ldr	r0, [r4, #0]
 80150c8:	3004      	adds	r0, #4
 80150ca:	f7fe fb0d 	bl	80136e8 <rcl_service_is_valid>
 80150ce:	b910      	cbnz	r0, 80150d6 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 80150d0:	f640 0098 	movw	r0, #2200	@ 0x898
 80150d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150d6:	6820      	ldr	r0, [r4, #0]
 80150d8:	3008      	adds	r0, #8
 80150da:	f7fe fb05 	bl	80136e8 <rcl_service_is_valid>
 80150de:	2800      	cmp	r0, #0
 80150e0:	d0f6      	beq.n	80150d0 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80150e2:	6820      	ldr	r0, [r4, #0]
 80150e4:	300c      	adds	r0, #12
 80150e6:	f7f7 fea5 	bl	800ce34 <rcl_publisher_is_valid_except_context>
 80150ea:	2800      	cmp	r0, #0
 80150ec:	d0f0      	beq.n	80150d0 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80150ee:	6820      	ldr	r0, [r4, #0]
 80150f0:	3010      	adds	r0, #16
 80150f2:	f7f7 fe9f 	bl	800ce34 <rcl_publisher_is_valid_except_context>
 80150f6:	2800      	cmp	r0, #0
 80150f8:	d0ea      	beq.n	80150d0 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80150fa:	b3be      	cbz	r6, 801516c <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80150fc:	b3b7      	cbz	r7, 801516c <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80150fe:	9b06      	ldr	r3, [sp, #24]
 8015100:	b3a3      	cbz	r3, 801516c <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015102:	9b07      	ldr	r3, [sp, #28]
 8015104:	b393      	cbz	r3, 801516c <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015106:	6821      	ldr	r1, [r4, #0]
 8015108:	692a      	ldr	r2, [r5, #16]
 801510a:	6a2c      	ldr	r4, [r5, #32]
 801510c:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8015110:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8015114:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8015118:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 801511c:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8015120:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8015124:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8015128:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 801512c:	1a64      	subs	r4, r4, r1
 801512e:	fab4 f484 	clz	r4, r4
 8015132:	0964      	lsrs	r4, r4, #5
 8015134:	7034      	strb	r4, [r6, #0]
 8015136:	1d0c      	adds	r4, r1, #4
 8015138:	1b1b      	subs	r3, r3, r4
 801513a:	fab3 f383 	clz	r3, r3
 801513e:	095b      	lsrs	r3, r3, #5
 8015140:	f101 0408 	add.w	r4, r1, #8
 8015144:	703b      	strb	r3, [r7, #0]
 8015146:	f101 0314 	add.w	r3, r1, #20
 801514a:	1b01      	subs	r1, r0, r4
 801514c:	1ad3      	subs	r3, r2, r3
 801514e:	fab1 f181 	clz	r1, r1
 8015152:	9a06      	ldr	r2, [sp, #24]
 8015154:	0949      	lsrs	r1, r1, #5
 8015156:	7011      	strb	r1, [r2, #0]
 8015158:	fab3 f383 	clz	r3, r3
 801515c:	9a07      	ldr	r2, [sp, #28]
 801515e:	095b      	lsrs	r3, r3, #5
 8015160:	2000      	movs	r0, #0
 8015162:	7013      	strb	r3, [r2, #0]
 8015164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015166:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801516a:	4770      	bx	lr
 801516c:	200b      	movs	r0, #11
 801516e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015170 <_execute_event_handler>:
 8015170:	2002      	movs	r0, #2
 8015172:	4770      	bx	lr

08015174 <_cancel_goal_event_handler>:
 8015174:	2003      	movs	r0, #3
 8015176:	4770      	bx	lr

08015178 <_succeed_event_handler>:
 8015178:	2004      	movs	r0, #4
 801517a:	4770      	bx	lr

0801517c <_abort_event_handler>:
 801517c:	2006      	movs	r0, #6
 801517e:	4770      	bx	lr

08015180 <_canceled_event_handler>:
 8015180:	2005      	movs	r0, #5
 8015182:	4770      	bx	lr

08015184 <rcl_action_transition_goal_state>:
 8015184:	b2c2      	uxtb	r2, r0
 8015186:	2a06      	cmp	r2, #6
 8015188:	d80c      	bhi.n	80151a4 <rcl_action_transition_goal_state+0x20>
 801518a:	2904      	cmp	r1, #4
 801518c:	d80a      	bhi.n	80151a4 <rcl_action_transition_goal_state+0x20>
 801518e:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8015192:	b410      	push	{r4}
 8015194:	1853      	adds	r3, r2, r1
 8015196:	4c06      	ldr	r4, [pc, #24]	@ (80151b0 <rcl_action_transition_goal_state+0x2c>)
 8015198:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801519c:	b123      	cbz	r3, 80151a8 <rcl_action_transition_goal_state+0x24>
 801519e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80151a2:	4718      	bx	r3
 80151a4:	2000      	movs	r0, #0
 80151a6:	4770      	bx	lr
 80151a8:	2000      	movs	r0, #0
 80151aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80151ae:	4770      	bx	lr
 80151b0:	08020254 	.word	0x08020254

080151b4 <rcl_action_get_zero_initialized_cancel_response>:
 80151b4:	b510      	push	{r4, lr}
 80151b6:	4c07      	ldr	r4, [pc, #28]	@ (80151d4 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 80151b8:	4686      	mov	lr, r0
 80151ba:	4684      	mov	ip, r0
 80151bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80151be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80151c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80151c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80151c8:	6823      	ldr	r3, [r4, #0]
 80151ca:	f8cc 3000 	str.w	r3, [ip]
 80151ce:	4670      	mov	r0, lr
 80151d0:	bd10      	pop	{r4, pc}
 80151d2:	bf00      	nop
 80151d4:	080202e0 	.word	0x080202e0

080151d8 <rclc_action_send_result_request>:
 80151d8:	b1d0      	cbz	r0, 8015210 <rclc_action_send_result_request+0x38>
 80151da:	b500      	push	{lr}
 80151dc:	4684      	mov	ip, r0
 80151de:	b087      	sub	sp, #28
 80151e0:	f8d0 0009 	ldr.w	r0, [r0, #9]
 80151e4:	f8dc 100d 	ldr.w	r1, [ip, #13]
 80151e8:	f8dc 2011 	ldr.w	r2, [ip, #17]
 80151ec:	f8dc 3015 	ldr.w	r3, [ip, #21]
 80151f0:	f10d 0e08 	add.w	lr, sp, #8
 80151f4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80151f8:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80151fc:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8015200:	a902      	add	r1, sp, #8
 8015202:	3010      	adds	r0, #16
 8015204:	f7ff fbdc 	bl	80149c0 <rcl_action_send_result_request>
 8015208:	b920      	cbnz	r0, 8015214 <rclc_action_send_result_request+0x3c>
 801520a:	b007      	add	sp, #28
 801520c:	f85d fb04 	ldr.w	pc, [sp], #4
 8015210:	200b      	movs	r0, #11
 8015212:	4770      	bx	lr
 8015214:	9001      	str	r0, [sp, #4]
 8015216:	f7f8 fd87 	bl	800dd28 <rcutils_reset_error>
 801521a:	9801      	ldr	r0, [sp, #4]
 801521c:	b007      	add	sp, #28
 801521e:	f85d fb04 	ldr.w	pc, [sp], #4
 8015222:	bf00      	nop

08015224 <rclc_action_take_goal_handle>:
 8015224:	b160      	cbz	r0, 8015240 <rclc_action_take_goal_handle+0x1c>
 8015226:	6883      	ldr	r3, [r0, #8]
 8015228:	b143      	cbz	r3, 801523c <rclc_action_take_goal_handle+0x18>
 801522a:	6819      	ldr	r1, [r3, #0]
 801522c:	6081      	str	r1, [r0, #8]
 801522e:	2200      	movs	r2, #0
 8015230:	721a      	strb	r2, [r3, #8]
 8015232:	68c1      	ldr	r1, [r0, #12]
 8015234:	6019      	str	r1, [r3, #0]
 8015236:	621a      	str	r2, [r3, #32]
 8015238:	849a      	strh	r2, [r3, #36]	@ 0x24
 801523a:	60c3      	str	r3, [r0, #12]
 801523c:	4618      	mov	r0, r3
 801523e:	4770      	bx	lr
 8015240:	4603      	mov	r3, r0
 8015242:	e7fb      	b.n	801523c <rclc_action_take_goal_handle+0x18>

08015244 <rclc_action_remove_used_goal_handle>:
 8015244:	b180      	cbz	r0, 8015268 <rclc_action_remove_used_goal_handle+0x24>
 8015246:	b179      	cbz	r1, 8015268 <rclc_action_remove_used_goal_handle+0x24>
 8015248:	68c3      	ldr	r3, [r0, #12]
 801524a:	4299      	cmp	r1, r3
 801524c:	d00d      	beq.n	801526a <rclc_action_remove_used_goal_handle+0x26>
 801524e:	b12b      	cbz	r3, 801525c <rclc_action_remove_used_goal_handle+0x18>
 8015250:	681a      	ldr	r2, [r3, #0]
 8015252:	4291      	cmp	r1, r2
 8015254:	d003      	beq.n	801525e <rclc_action_remove_used_goal_handle+0x1a>
 8015256:	4613      	mov	r3, r2
 8015258:	2b00      	cmp	r3, #0
 801525a:	d1f9      	bne.n	8015250 <rclc_action_remove_used_goal_handle+0xc>
 801525c:	4770      	bx	lr
 801525e:	680a      	ldr	r2, [r1, #0]
 8015260:	601a      	str	r2, [r3, #0]
 8015262:	6883      	ldr	r3, [r0, #8]
 8015264:	600b      	str	r3, [r1, #0]
 8015266:	6081      	str	r1, [r0, #8]
 8015268:	4770      	bx	lr
 801526a:	680b      	ldr	r3, [r1, #0]
 801526c:	60c3      	str	r3, [r0, #12]
 801526e:	e7f8      	b.n	8015262 <rclc_action_remove_used_goal_handle+0x1e>

08015270 <rclc_action_find_goal_handle_by_uuid>:
 8015270:	b538      	push	{r3, r4, r5, lr}
 8015272:	b180      	cbz	r0, 8015296 <rclc_action_find_goal_handle_by_uuid+0x26>
 8015274:	460d      	mov	r5, r1
 8015276:	b181      	cbz	r1, 801529a <rclc_action_find_goal_handle_by_uuid+0x2a>
 8015278:	68c4      	ldr	r4, [r0, #12]
 801527a:	b914      	cbnz	r4, 8015282 <rclc_action_find_goal_handle_by_uuid+0x12>
 801527c:	e009      	b.n	8015292 <rclc_action_find_goal_handle_by_uuid+0x22>
 801527e:	6824      	ldr	r4, [r4, #0]
 8015280:	b13c      	cbz	r4, 8015292 <rclc_action_find_goal_handle_by_uuid+0x22>
 8015282:	f104 0009 	add.w	r0, r4, #9
 8015286:	2210      	movs	r2, #16
 8015288:	4629      	mov	r1, r5
 801528a:	f005 fd67 	bl	801ad5c <memcmp>
 801528e:	2800      	cmp	r0, #0
 8015290:	d1f5      	bne.n	801527e <rclc_action_find_goal_handle_by_uuid+0xe>
 8015292:	4620      	mov	r0, r4
 8015294:	bd38      	pop	{r3, r4, r5, pc}
 8015296:	4604      	mov	r4, r0
 8015298:	e7fb      	b.n	8015292 <rclc_action_find_goal_handle_by_uuid+0x22>
 801529a:	460c      	mov	r4, r1
 801529c:	e7f9      	b.n	8015292 <rclc_action_find_goal_handle_by_uuid+0x22>
 801529e:	bf00      	nop

080152a0 <rclc_action_find_first_handle_by_status>:
 80152a0:	b140      	cbz	r0, 80152b4 <rclc_action_find_first_handle_by_status+0x14>
 80152a2:	68c0      	ldr	r0, [r0, #12]
 80152a4:	b910      	cbnz	r0, 80152ac <rclc_action_find_first_handle_by_status+0xc>
 80152a6:	e005      	b.n	80152b4 <rclc_action_find_first_handle_by_status+0x14>
 80152a8:	6800      	ldr	r0, [r0, #0]
 80152aa:	b118      	cbz	r0, 80152b4 <rclc_action_find_first_handle_by_status+0x14>
 80152ac:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80152b0:	428b      	cmp	r3, r1
 80152b2:	d1f9      	bne.n	80152a8 <rclc_action_find_first_handle_by_status+0x8>
 80152b4:	4770      	bx	lr
 80152b6:	bf00      	nop

080152b8 <rclc_action_find_first_terminated_handle>:
 80152b8:	b140      	cbz	r0, 80152cc <rclc_action_find_first_terminated_handle+0x14>
 80152ba:	68c0      	ldr	r0, [r0, #12]
 80152bc:	b910      	cbnz	r0, 80152c4 <rclc_action_find_first_terminated_handle+0xc>
 80152be:	e005      	b.n	80152cc <rclc_action_find_first_terminated_handle+0x14>
 80152c0:	6800      	ldr	r0, [r0, #0]
 80152c2:	b118      	cbz	r0, 80152cc <rclc_action_find_first_terminated_handle+0x14>
 80152c4:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80152c8:	2b03      	cmp	r3, #3
 80152ca:	ddf9      	ble.n	80152c0 <rclc_action_find_first_terminated_handle+0x8>
 80152cc:	4770      	bx	lr
 80152ce:	bf00      	nop

080152d0 <rclc_action_find_handle_by_goal_request_sequence_number>:
 80152d0:	b170      	cbz	r0, 80152f0 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80152d2:	68c0      	ldr	r0, [r0, #12]
 80152d4:	b160      	cbz	r0, 80152f0 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80152d6:	b410      	push	{r4}
 80152d8:	e001      	b.n	80152de <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 80152da:	6800      	ldr	r0, [r0, #0]
 80152dc:	b128      	cbz	r0, 80152ea <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 80152de:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 80152e2:	4299      	cmp	r1, r3
 80152e4:	bf08      	it	eq
 80152e6:	4294      	cmpeq	r4, r2
 80152e8:	d1f7      	bne.n	80152da <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 80152ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80152ee:	4770      	bx	lr
 80152f0:	4770      	bx	lr
 80152f2:	bf00      	nop

080152f4 <rclc_action_find_handle_by_result_request_sequence_number>:
 80152f4:	b170      	cbz	r0, 8015314 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80152f6:	68c0      	ldr	r0, [r0, #12]
 80152f8:	b160      	cbz	r0, 8015314 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80152fa:	b410      	push	{r4}
 80152fc:	e001      	b.n	8015302 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 80152fe:	6800      	ldr	r0, [r0, #0]
 8015300:	b128      	cbz	r0, 801530e <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8015302:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8015306:	4299      	cmp	r1, r3
 8015308:	bf08      	it	eq
 801530a:	4294      	cmpeq	r4, r2
 801530c:	d1f7      	bne.n	80152fe <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801530e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015312:	4770      	bx	lr
 8015314:	4770      	bx	lr
 8015316:	bf00      	nop

08015318 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8015318:	b170      	cbz	r0, 8015338 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801531a:	68c0      	ldr	r0, [r0, #12]
 801531c:	b160      	cbz	r0, 8015338 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801531e:	b410      	push	{r4}
 8015320:	e001      	b.n	8015326 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8015322:	6800      	ldr	r0, [r0, #0]
 8015324:	b128      	cbz	r0, 8015332 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8015326:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801532a:	4299      	cmp	r1, r3
 801532c:	bf08      	it	eq
 801532e:	4294      	cmpeq	r4, r2
 8015330:	d1f7      	bne.n	8015322 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8015332:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015336:	4770      	bx	lr
 8015338:	4770      	bx	lr
 801533a:	bf00      	nop

0801533c <rclc_action_find_first_handle_with_goal_response>:
 801533c:	b140      	cbz	r0, 8015350 <rclc_action_find_first_handle_with_goal_response+0x14>
 801533e:	68c0      	ldr	r0, [r0, #12]
 8015340:	b910      	cbnz	r0, 8015348 <rclc_action_find_first_handle_with_goal_response+0xc>
 8015342:	e005      	b.n	8015350 <rclc_action_find_first_handle_with_goal_response+0x14>
 8015344:	6800      	ldr	r0, [r0, #0]
 8015346:	b118      	cbz	r0, 8015350 <rclc_action_find_first_handle_with_goal_response+0x14>
 8015348:	f890 3020 	ldrb.w	r3, [r0, #32]
 801534c:	2b00      	cmp	r3, #0
 801534e:	d0f9      	beq.n	8015344 <rclc_action_find_first_handle_with_goal_response+0x8>
 8015350:	4770      	bx	lr
 8015352:	bf00      	nop

08015354 <rclc_action_find_first_handle_with_result_response>:
 8015354:	b140      	cbz	r0, 8015368 <rclc_action_find_first_handle_with_result_response+0x14>
 8015356:	68c0      	ldr	r0, [r0, #12]
 8015358:	b910      	cbnz	r0, 8015360 <rclc_action_find_first_handle_with_result_response+0xc>
 801535a:	e005      	b.n	8015368 <rclc_action_find_first_handle_with_result_response+0x14>
 801535c:	6800      	ldr	r0, [r0, #0]
 801535e:	b118      	cbz	r0, 8015368 <rclc_action_find_first_handle_with_result_response+0x14>
 8015360:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8015364:	2b00      	cmp	r3, #0
 8015366:	d0f9      	beq.n	801535c <rclc_action_find_first_handle_with_result_response+0x8>
 8015368:	4770      	bx	lr
 801536a:	bf00      	nop

0801536c <rclc_action_server_response_goal_request>:
 801536c:	b198      	cbz	r0, 8015396 <rclc_action_server_response_goal_request+0x2a>
 801536e:	b510      	push	{r4, lr}
 8015370:	6844      	ldr	r4, [r0, #4]
 8015372:	b086      	sub	sp, #24
 8015374:	2200      	movs	r2, #0
 8015376:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801537a:	460b      	mov	r3, r1
 801537c:	9205      	str	r2, [sp, #20]
 801537e:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8015382:	aa03      	add	r2, sp, #12
 8015384:	f104 0010 	add.w	r0, r4, #16
 8015388:	f88d 300c 	strb.w	r3, [sp, #12]
 801538c:	f7ff fd4c 	bl	8014e28 <rcl_action_send_goal_response>
 8015390:	b918      	cbnz	r0, 801539a <rclc_action_server_response_goal_request+0x2e>
 8015392:	b006      	add	sp, #24
 8015394:	bd10      	pop	{r4, pc}
 8015396:	200b      	movs	r0, #11
 8015398:	4770      	bx	lr
 801539a:	9001      	str	r0, [sp, #4]
 801539c:	f7f8 fcc4 	bl	800dd28 <rcutils_reset_error>
 80153a0:	9801      	ldr	r0, [sp, #4]
 80153a2:	b006      	add	sp, #24
 80153a4:	bd10      	pop	{r4, pc}
 80153a6:	bf00      	nop

080153a8 <rclc_action_server_goal_cancel_accept>:
 80153a8:	b310      	cbz	r0, 80153f0 <rclc_action_server_goal_cancel_accept+0x48>
 80153aa:	b510      	push	{r4, lr}
 80153ac:	b090      	sub	sp, #64	@ 0x40
 80153ae:	4604      	mov	r4, r0
 80153b0:	a806      	add	r0, sp, #24
 80153b2:	f7ff feff 	bl	80151b4 <rcl_action_get_zero_initialized_cancel_response>
 80153b6:	2300      	movs	r3, #0
 80153b8:	f8d4 0009 	ldr.w	r0, [r4, #9]
 80153bc:	f8d4 100d 	ldr.w	r1, [r4, #13]
 80153c0:	f8d4 2011 	ldr.w	r2, [r4, #17]
 80153c4:	f88d 3018 	strb.w	r3, [sp, #24]
 80153c8:	f8d4 3015 	ldr.w	r3, [r4, #21]
 80153cc:	f8cd d01c 	str.w	sp, [sp, #28]
 80153d0:	46ec      	mov	ip, sp
 80153d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80153d6:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80153f8 <rclc_action_server_goal_cancel_accept+0x50>
 80153da:	6860      	ldr	r0, [r4, #4]
 80153dc:	aa06      	add	r2, sp, #24
 80153de:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 80153e2:	3010      	adds	r0, #16
 80153e4:	ed8d 7b08 	vstr	d7, [sp, #32]
 80153e8:	f7ff fdd4 	bl	8014f94 <rcl_action_send_cancel_response>
 80153ec:	b010      	add	sp, #64	@ 0x40
 80153ee:	bd10      	pop	{r4, pc}
 80153f0:	200b      	movs	r0, #11
 80153f2:	4770      	bx	lr
 80153f4:	f3af 8000 	nop.w
 80153f8:	00000001 	.word	0x00000001
 80153fc:	00000001 	.word	0x00000001

08015400 <rclc_action_server_goal_cancel_reject>:
 8015400:	b082      	sub	sp, #8
 8015402:	b530      	push	{r4, r5, lr}
 8015404:	b08b      	sub	sp, #44	@ 0x2c
 8015406:	ac0e      	add	r4, sp, #56	@ 0x38
 8015408:	e884 000c 	stmia.w	r4, {r2, r3}
 801540c:	b188      	cbz	r0, 8015432 <rclc_action_server_goal_cancel_reject+0x32>
 801540e:	4604      	mov	r4, r0
 8015410:	a801      	add	r0, sp, #4
 8015412:	460d      	mov	r5, r1
 8015414:	f7ff fece 	bl	80151b4 <rcl_action_get_zero_initialized_cancel_response>
 8015418:	aa01      	add	r2, sp, #4
 801541a:	a90e      	add	r1, sp, #56	@ 0x38
 801541c:	f104 0010 	add.w	r0, r4, #16
 8015420:	f88d 5004 	strb.w	r5, [sp, #4]
 8015424:	f7ff fdb6 	bl	8014f94 <rcl_action_send_cancel_response>
 8015428:	b00b      	add	sp, #44	@ 0x2c
 801542a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801542e:	b002      	add	sp, #8
 8015430:	4770      	bx	lr
 8015432:	200b      	movs	r0, #11
 8015434:	b00b      	add	sp, #44	@ 0x2c
 8015436:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801543a:	b002      	add	sp, #8
 801543c:	4770      	bx	lr
 801543e:	bf00      	nop

08015440 <__atomic_load_8>:
 8015440:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8015444:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8015448:	4a15      	ldr	r2, [pc, #84]	@ (80154a0 <__atomic_load_8+0x60>)
 801544a:	4b16      	ldr	r3, [pc, #88]	@ (80154a4 <__atomic_load_8+0x64>)
 801544c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8015450:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8015454:	fb02 f101 	mul.w	r1, r2, r1
 8015458:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801545c:	fba3 2301 	umull	r2, r3, r3, r1
 8015460:	091b      	lsrs	r3, r3, #4
 8015462:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8015466:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801546a:	b4d0      	push	{r4, r6, r7}
 801546c:	4c0e      	ldr	r4, [pc, #56]	@ (80154a8 <__atomic_load_8+0x68>)
 801546e:	1ac9      	subs	r1, r1, r3
 8015470:	1862      	adds	r2, r4, r1
 8015472:	f04f 0c01 	mov.w	ip, #1
 8015476:	e8d2 3f4f 	ldrexb	r3, [r2]
 801547a:	e8c2 cf46 	strexb	r6, ip, [r2]
 801547e:	2e00      	cmp	r6, #0
 8015480:	d1f9      	bne.n	8015476 <__atomic_load_8+0x36>
 8015482:	f3bf 8f5b 	dmb	ish
 8015486:	b2db      	uxtb	r3, r3
 8015488:	2b00      	cmp	r3, #0
 801548a:	d1f4      	bne.n	8015476 <__atomic_load_8+0x36>
 801548c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8015490:	f3bf 8f5b 	dmb	ish
 8015494:	5463      	strb	r3, [r4, r1]
 8015496:	4630      	mov	r0, r6
 8015498:	4639      	mov	r1, r7
 801549a:	bcd0      	pop	{r4, r6, r7}
 801549c:	4770      	bx	lr
 801549e:	bf00      	nop
 80154a0:	27d4eb2d 	.word	0x27d4eb2d
 80154a4:	b21642c9 	.word	0xb21642c9
 80154a8:	20011b70 	.word	0x20011b70

080154ac <__atomic_store_8>:
 80154ac:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80154b0:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80154b4:	b570      	push	{r4, r5, r6, lr}
 80154b6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80154ba:	4c14      	ldr	r4, [pc, #80]	@ (801550c <__atomic_store_8+0x60>)
 80154bc:	4d14      	ldr	r5, [pc, #80]	@ (8015510 <__atomic_store_8+0x64>)
 80154be:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80154c2:	fb04 f101 	mul.w	r1, r4, r1
 80154c6:	4c13      	ldr	r4, [pc, #76]	@ (8015514 <__atomic_store_8+0x68>)
 80154c8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80154cc:	fba4 4e01 	umull	r4, lr, r4, r1
 80154d0:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 80154d4:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 80154d8:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 80154dc:	eba1 0e0e 	sub.w	lr, r1, lr
 80154e0:	eb05 0c0e 	add.w	ip, r5, lr
 80154e4:	f04f 0401 	mov.w	r4, #1
 80154e8:	e8dc 1f4f 	ldrexb	r1, [ip]
 80154ec:	e8cc 4f46 	strexb	r6, r4, [ip]
 80154f0:	2e00      	cmp	r6, #0
 80154f2:	d1f9      	bne.n	80154e8 <__atomic_store_8+0x3c>
 80154f4:	f3bf 8f5b 	dmb	ish
 80154f8:	b2c9      	uxtb	r1, r1
 80154fa:	2900      	cmp	r1, #0
 80154fc:	d1f4      	bne.n	80154e8 <__atomic_store_8+0x3c>
 80154fe:	e9c0 2300 	strd	r2, r3, [r0]
 8015502:	f3bf 8f5b 	dmb	ish
 8015506:	f805 100e 	strb.w	r1, [r5, lr]
 801550a:	bd70      	pop	{r4, r5, r6, pc}
 801550c:	27d4eb2d 	.word	0x27d4eb2d
 8015510:	20011b70 	.word	0x20011b70
 8015514:	b21642c9 	.word	0xb21642c9

08015518 <__atomic_exchange_8>:
 8015518:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801551c:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8015520:	4916      	ldr	r1, [pc, #88]	@ (801557c <__atomic_exchange_8+0x64>)
 8015522:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8015526:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801552a:	fb01 fc0c 	mul.w	ip, r1, ip
 801552e:	4914      	ldr	r1, [pc, #80]	@ (8015580 <__atomic_exchange_8+0x68>)
 8015530:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8015534:	b570      	push	{r4, r5, r6, lr}
 8015536:	4605      	mov	r5, r0
 8015538:	fba1 010c 	umull	r0, r1, r1, ip
 801553c:	0909      	lsrs	r1, r1, #4
 801553e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8015542:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8015546:	4e0f      	ldr	r6, [pc, #60]	@ (8015584 <__atomic_exchange_8+0x6c>)
 8015548:	ebac 0c01 	sub.w	ip, ip, r1
 801554c:	eb06 010c 	add.w	r1, r6, ip
 8015550:	f04f 0e01 	mov.w	lr, #1
 8015554:	e8d1 4f4f 	ldrexb	r4, [r1]
 8015558:	e8c1 ef40 	strexb	r0, lr, [r1]
 801555c:	2800      	cmp	r0, #0
 801555e:	d1f9      	bne.n	8015554 <__atomic_exchange_8+0x3c>
 8015560:	f3bf 8f5b 	dmb	ish
 8015564:	b2e4      	uxtb	r4, r4
 8015566:	2c00      	cmp	r4, #0
 8015568:	d1f4      	bne.n	8015554 <__atomic_exchange_8+0x3c>
 801556a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801556e:	e9c5 2300 	strd	r2, r3, [r5]
 8015572:	f3bf 8f5b 	dmb	ish
 8015576:	f806 400c 	strb.w	r4, [r6, ip]
 801557a:	bd70      	pop	{r4, r5, r6, pc}
 801557c:	27d4eb2d 	.word	0x27d4eb2d
 8015580:	b21642c9 	.word	0xb21642c9
 8015584:	20011b70 	.word	0x20011b70

08015588 <rcutils_get_env>:
 8015588:	b168      	cbz	r0, 80155a6 <rcutils_get_env+0x1e>
 801558a:	b510      	push	{r4, lr}
 801558c:	460c      	mov	r4, r1
 801558e:	b129      	cbz	r1, 801559c <rcutils_get_env+0x14>
 8015590:	f004 f898 	bl	80196c4 <getenv>
 8015594:	b120      	cbz	r0, 80155a0 <rcutils_get_env+0x18>
 8015596:	6020      	str	r0, [r4, #0]
 8015598:	2000      	movs	r0, #0
 801559a:	bd10      	pop	{r4, pc}
 801559c:	4803      	ldr	r0, [pc, #12]	@ (80155ac <rcutils_get_env+0x24>)
 801559e:	bd10      	pop	{r4, pc}
 80155a0:	4b03      	ldr	r3, [pc, #12]	@ (80155b0 <rcutils_get_env+0x28>)
 80155a2:	6023      	str	r3, [r4, #0]
 80155a4:	bd10      	pop	{r4, pc}
 80155a6:	4803      	ldr	r0, [pc, #12]	@ (80155b4 <rcutils_get_env+0x2c>)
 80155a8:	4770      	bx	lr
 80155aa:	bf00      	nop
 80155ac:	08020320 	.word	0x08020320
 80155b0:	080206bc 	.word	0x080206bc
 80155b4:	08020304 	.word	0x08020304

080155b8 <rcutils_is_directory>:
 80155b8:	2000      	movs	r0, #0
 80155ba:	4770      	bx	lr

080155bc <rcutils_join_path>:
 80155bc:	b082      	sub	sp, #8
 80155be:	e88d 000c 	stmia.w	sp, {r2, r3}
 80155c2:	2000      	movs	r0, #0
 80155c4:	b002      	add	sp, #8
 80155c6:	4770      	bx	lr

080155c8 <rcutils_to_native_path>:
 80155c8:	b084      	sub	sp, #16
 80155ca:	a801      	add	r0, sp, #4
 80155cc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80155d0:	b004      	add	sp, #16
 80155d2:	2000      	movs	r0, #0
 80155d4:	4770      	bx	lr
 80155d6:	bf00      	nop

080155d8 <rcutils_format_string_limit>:
 80155d8:	b40f      	push	{r0, r1, r2, r3}
 80155da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80155dc:	b083      	sub	sp, #12
 80155de:	ac08      	add	r4, sp, #32
 80155e0:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80155e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80155e6:	b34e      	cbz	r6, 801563c <rcutils_format_string_limit+0x64>
 80155e8:	a808      	add	r0, sp, #32
 80155ea:	f7f8 fb79 	bl	800dce0 <rcutils_allocator_is_valid>
 80155ee:	b328      	cbz	r0, 801563c <rcutils_format_string_limit+0x64>
 80155f0:	2100      	movs	r1, #0
 80155f2:	ab0f      	add	r3, sp, #60	@ 0x3c
 80155f4:	4632      	mov	r2, r6
 80155f6:	4608      	mov	r0, r1
 80155f8:	e9cd 3300 	strd	r3, r3, [sp]
 80155fc:	f000 f8f4 	bl	80157e8 <rcutils_vsnprintf>
 8015600:	1c43      	adds	r3, r0, #1
 8015602:	4605      	mov	r5, r0
 8015604:	d01a      	beq.n	801563c <rcutils_format_string_limit+0x64>
 8015606:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015608:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801560a:	1c47      	adds	r7, r0, #1
 801560c:	429f      	cmp	r7, r3
 801560e:	bf84      	itt	hi
 8015610:	461f      	movhi	r7, r3
 8015612:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8015616:	4638      	mov	r0, r7
 8015618:	9b08      	ldr	r3, [sp, #32]
 801561a:	4798      	blx	r3
 801561c:	4604      	mov	r4, r0
 801561e:	b168      	cbz	r0, 801563c <rcutils_format_string_limit+0x64>
 8015620:	9b01      	ldr	r3, [sp, #4]
 8015622:	4632      	mov	r2, r6
 8015624:	4639      	mov	r1, r7
 8015626:	f000 f8df 	bl	80157e8 <rcutils_vsnprintf>
 801562a:	2800      	cmp	r0, #0
 801562c:	db02      	blt.n	8015634 <rcutils_format_string_limit+0x5c>
 801562e:	2300      	movs	r3, #0
 8015630:	5563      	strb	r3, [r4, r5]
 8015632:	e004      	b.n	801563e <rcutils_format_string_limit+0x66>
 8015634:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015636:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015638:	4620      	mov	r0, r4
 801563a:	4798      	blx	r3
 801563c:	2400      	movs	r4, #0
 801563e:	4620      	mov	r0, r4
 8015640:	b003      	add	sp, #12
 8015642:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015646:	b004      	add	sp, #16
 8015648:	4770      	bx	lr
 801564a:	bf00      	nop

0801564c <rcutils_repl_str>:
 801564c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015650:	ed2d 8b02 	vpush	{d8}
 8015654:	b087      	sub	sp, #28
 8015656:	4680      	mov	r8, r0
 8015658:	4608      	mov	r0, r1
 801565a:	f8cd 8004 	str.w	r8, [sp, #4]
 801565e:	ee08 2a10 	vmov	s16, r2
 8015662:	468a      	mov	sl, r1
 8015664:	4699      	mov	r9, r3
 8015666:	f7ea fe1b 	bl	80002a0 <strlen>
 801566a:	2600      	movs	r6, #0
 801566c:	4647      	mov	r7, r8
 801566e:	9002      	str	r0, [sp, #8]
 8015670:	46b3      	mov	fp, r6
 8015672:	2510      	movs	r5, #16
 8015674:	46b0      	mov	r8, r6
 8015676:	e01d      	b.n	80156b4 <rcutils_repl_str+0x68>
 8015678:	f10b 0b01 	add.w	fp, fp, #1
 801567c:	455e      	cmp	r6, fp
 801567e:	d211      	bcs.n	80156a4 <rcutils_repl_str+0x58>
 8015680:	442e      	add	r6, r5
 8015682:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015686:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801568a:	00b1      	lsls	r1, r6, #2
 801568c:	4798      	blx	r3
 801568e:	2800      	cmp	r0, #0
 8015690:	f000 8088 	beq.w	80157a4 <rcutils_repl_str+0x158>
 8015694:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015698:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 801569c:	4680      	mov	r8, r0
 801569e:	bf28      	it	cs
 80156a0:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 80156a4:	9a01      	ldr	r2, [sp, #4]
 80156a6:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 80156aa:	1aa2      	subs	r2, r4, r2
 80156ac:	f843 2c04 	str.w	r2, [r3, #-4]
 80156b0:	9b02      	ldr	r3, [sp, #8]
 80156b2:	18e7      	adds	r7, r4, r3
 80156b4:	4651      	mov	r1, sl
 80156b6:	4638      	mov	r0, r7
 80156b8:	f005 fba1 	bl	801adfe <strstr>
 80156bc:	4604      	mov	r4, r0
 80156be:	4640      	mov	r0, r8
 80156c0:	2c00      	cmp	r4, #0
 80156c2:	d1d9      	bne.n	8015678 <rcutils_repl_str+0x2c>
 80156c4:	46b8      	mov	r8, r7
 80156c6:	4607      	mov	r7, r0
 80156c8:	4640      	mov	r0, r8
 80156ca:	f7ea fde9 	bl	80002a0 <strlen>
 80156ce:	9b01      	ldr	r3, [sp, #4]
 80156d0:	eba8 0303 	sub.w	r3, r8, r3
 80156d4:	181c      	adds	r4, r3, r0
 80156d6:	9404      	str	r4, [sp, #16]
 80156d8:	f1bb 0f00 	cmp.w	fp, #0
 80156dc:	d04a      	beq.n	8015774 <rcutils_repl_str+0x128>
 80156de:	ee18 0a10 	vmov	r0, s16
 80156e2:	f7ea fddd 	bl	80002a0 <strlen>
 80156e6:	9b02      	ldr	r3, [sp, #8]
 80156e8:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80156ec:	1ac3      	subs	r3, r0, r3
 80156ee:	fb0b 4303 	mla	r3, fp, r3, r4
 80156f2:	461a      	mov	r2, r3
 80156f4:	9305      	str	r3, [sp, #20]
 80156f6:	4606      	mov	r6, r0
 80156f8:	f8d9 3000 	ldr.w	r3, [r9]
 80156fc:	1c50      	adds	r0, r2, #1
 80156fe:	4798      	blx	r3
 8015700:	9003      	str	r0, [sp, #12]
 8015702:	2800      	cmp	r0, #0
 8015704:	d04f      	beq.n	80157a6 <rcutils_repl_str+0x15a>
 8015706:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801570a:	683a      	ldr	r2, [r7, #0]
 801570c:	4641      	mov	r1, r8
 801570e:	f005 fc72 	bl	801aff6 <memcpy>
 8015712:	683d      	ldr	r5, [r7, #0]
 8015714:	9b03      	ldr	r3, [sp, #12]
 8015716:	9701      	str	r7, [sp, #4]
 8015718:	46ba      	mov	sl, r7
 801571a:	441d      	add	r5, r3
 801571c:	9f02      	ldr	r7, [sp, #8]
 801571e:	f8cd 9008 	str.w	r9, [sp, #8]
 8015722:	2401      	movs	r4, #1
 8015724:	46d1      	mov	r9, sl
 8015726:	ee18 aa10 	vmov	sl, s16
 801572a:	e00a      	b.n	8015742 <rcutils_repl_str+0xf6>
 801572c:	f8d9 5000 	ldr.w	r5, [r9]
 8015730:	1aaa      	subs	r2, r5, r2
 8015732:	1885      	adds	r5, r0, r2
 8015734:	f005 fc5f 	bl	801aff6 <memcpy>
 8015738:	45a3      	cmp	fp, r4
 801573a:	f104 0201 	add.w	r2, r4, #1
 801573e:	d935      	bls.n	80157ac <rcutils_repl_str+0x160>
 8015740:	4614      	mov	r4, r2
 8015742:	4632      	mov	r2, r6
 8015744:	4651      	mov	r1, sl
 8015746:	4628      	mov	r0, r5
 8015748:	f005 fc55 	bl	801aff6 <memcpy>
 801574c:	f859 2b04 	ldr.w	r2, [r9], #4
 8015750:	45a3      	cmp	fp, r4
 8015752:	443a      	add	r2, r7
 8015754:	eb05 0006 	add.w	r0, r5, r6
 8015758:	eb08 0102 	add.w	r1, r8, r2
 801575c:	d1e6      	bne.n	801572c <rcutils_repl_str+0xe0>
 801575e:	9b04      	ldr	r3, [sp, #16]
 8015760:	1a9a      	subs	r2, r3, r2
 8015762:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8015766:	f005 fc46 	bl	801aff6 <memcpy>
 801576a:	9a03      	ldr	r2, [sp, #12]
 801576c:	9905      	ldr	r1, [sp, #20]
 801576e:	2300      	movs	r3, #0
 8015770:	5453      	strb	r3, [r2, r1]
 8015772:	e00b      	b.n	801578c <rcutils_repl_str+0x140>
 8015774:	4620      	mov	r0, r4
 8015776:	f8d9 3000 	ldr.w	r3, [r9]
 801577a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801577e:	3001      	adds	r0, #1
 8015780:	4798      	blx	r3
 8015782:	9003      	str	r0, [sp, #12]
 8015784:	b110      	cbz	r0, 801578c <rcutils_repl_str+0x140>
 8015786:	9901      	ldr	r1, [sp, #4]
 8015788:	f005 fc2d 	bl	801afe6 <strcpy>
 801578c:	4638      	mov	r0, r7
 801578e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015792:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015796:	4798      	blx	r3
 8015798:	9803      	ldr	r0, [sp, #12]
 801579a:	b007      	add	sp, #28
 801579c:	ecbd 8b02 	vpop	{d8}
 80157a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157a4:	4647      	mov	r7, r8
 80157a6:	2300      	movs	r3, #0
 80157a8:	9303      	str	r3, [sp, #12]
 80157aa:	e7ef      	b.n	801578c <rcutils_repl_str+0x140>
 80157ac:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80157b0:	e7db      	b.n	801576a <rcutils_repl_str+0x11e>
 80157b2:	bf00      	nop

080157b4 <rcutils_snprintf>:
 80157b4:	b40c      	push	{r2, r3}
 80157b6:	b530      	push	{r4, r5, lr}
 80157b8:	b083      	sub	sp, #12
 80157ba:	ab06      	add	r3, sp, #24
 80157bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80157c0:	9301      	str	r3, [sp, #4]
 80157c2:	b152      	cbz	r2, 80157da <rcutils_snprintf+0x26>
 80157c4:	b138      	cbz	r0, 80157d6 <rcutils_snprintf+0x22>
 80157c6:	b141      	cbz	r1, 80157da <rcutils_snprintf+0x26>
 80157c8:	f005 fa26 	bl	801ac18 <vsniprintf>
 80157cc:	b003      	add	sp, #12
 80157ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80157d2:	b002      	add	sp, #8
 80157d4:	4770      	bx	lr
 80157d6:	2900      	cmp	r1, #0
 80157d8:	d0f6      	beq.n	80157c8 <rcutils_snprintf+0x14>
 80157da:	f005 fbd7 	bl	801af8c <__errno>
 80157de:	2316      	movs	r3, #22
 80157e0:	6003      	str	r3, [r0, #0]
 80157e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80157e6:	e7f1      	b.n	80157cc <rcutils_snprintf+0x18>

080157e8 <rcutils_vsnprintf>:
 80157e8:	b570      	push	{r4, r5, r6, lr}
 80157ea:	b13a      	cbz	r2, 80157fc <rcutils_vsnprintf+0x14>
 80157ec:	b120      	cbz	r0, 80157f8 <rcutils_vsnprintf+0x10>
 80157ee:	b129      	cbz	r1, 80157fc <rcutils_vsnprintf+0x14>
 80157f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80157f4:	f005 ba10 	b.w	801ac18 <vsniprintf>
 80157f8:	2900      	cmp	r1, #0
 80157fa:	d0f9      	beq.n	80157f0 <rcutils_vsnprintf+0x8>
 80157fc:	f005 fbc6 	bl	801af8c <__errno>
 8015800:	2316      	movs	r3, #22
 8015802:	6003      	str	r3, [r0, #0]
 8015804:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015808:	bd70      	pop	{r4, r5, r6, pc}
 801580a:	bf00      	nop

0801580c <rcutils_strdup>:
 801580c:	b084      	sub	sp, #16
 801580e:	b570      	push	{r4, r5, r6, lr}
 8015810:	b082      	sub	sp, #8
 8015812:	ac07      	add	r4, sp, #28
 8015814:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8015818:	4605      	mov	r5, r0
 801581a:	b1b0      	cbz	r0, 801584a <rcutils_strdup+0x3e>
 801581c:	f7ea fd40 	bl	80002a0 <strlen>
 8015820:	1c42      	adds	r2, r0, #1
 8015822:	9b07      	ldr	r3, [sp, #28]
 8015824:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015826:	9201      	str	r2, [sp, #4]
 8015828:	4606      	mov	r6, r0
 801582a:	4610      	mov	r0, r2
 801582c:	4798      	blx	r3
 801582e:	4604      	mov	r4, r0
 8015830:	b128      	cbz	r0, 801583e <rcutils_strdup+0x32>
 8015832:	9a01      	ldr	r2, [sp, #4]
 8015834:	4629      	mov	r1, r5
 8015836:	f005 fbde 	bl	801aff6 <memcpy>
 801583a:	2300      	movs	r3, #0
 801583c:	55a3      	strb	r3, [r4, r6]
 801583e:	4620      	mov	r0, r4
 8015840:	b002      	add	sp, #8
 8015842:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015846:	b004      	add	sp, #16
 8015848:	4770      	bx	lr
 801584a:	4604      	mov	r4, r0
 801584c:	e7f7      	b.n	801583e <rcutils_strdup+0x32>
 801584e:	bf00      	nop

08015850 <rcutils_strndup>:
 8015850:	b082      	sub	sp, #8
 8015852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015854:	ac06      	add	r4, sp, #24
 8015856:	e884 000c 	stmia.w	r4, {r2, r3}
 801585a:	4605      	mov	r5, r0
 801585c:	b188      	cbz	r0, 8015882 <rcutils_strndup+0x32>
 801585e:	1c4f      	adds	r7, r1, #1
 8015860:	460e      	mov	r6, r1
 8015862:	4638      	mov	r0, r7
 8015864:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8015866:	4790      	blx	r2
 8015868:	4604      	mov	r4, r0
 801586a:	b128      	cbz	r0, 8015878 <rcutils_strndup+0x28>
 801586c:	463a      	mov	r2, r7
 801586e:	4629      	mov	r1, r5
 8015870:	f005 fbc1 	bl	801aff6 <memcpy>
 8015874:	2300      	movs	r3, #0
 8015876:	55a3      	strb	r3, [r4, r6]
 8015878:	4620      	mov	r0, r4
 801587a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801587e:	b002      	add	sp, #8
 8015880:	4770      	bx	lr
 8015882:	4604      	mov	r4, r0
 8015884:	e7f8      	b.n	8015878 <rcutils_strndup+0x28>
 8015886:	bf00      	nop

08015888 <rcutils_get_zero_initialized_string_map>:
 8015888:	4b01      	ldr	r3, [pc, #4]	@ (8015890 <rcutils_get_zero_initialized_string_map+0x8>)
 801588a:	2000      	movs	r0, #0
 801588c:	6018      	str	r0, [r3, #0]
 801588e:	4770      	bx	lr
 8015890:	20011b88 	.word	0x20011b88

08015894 <rcutils_string_map_reserve>:
 8015894:	2800      	cmp	r0, #0
 8015896:	d05f      	beq.n	8015958 <rcutils_string_map_reserve+0xc4>
 8015898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801589c:	460c      	mov	r4, r1
 801589e:	6801      	ldr	r1, [r0, #0]
 80158a0:	b082      	sub	sp, #8
 80158a2:	4605      	mov	r5, r0
 80158a4:	b129      	cbz	r1, 80158b2 <rcutils_string_map_reserve+0x1e>
 80158a6:	68cb      	ldr	r3, [r1, #12]
 80158a8:	42a3      	cmp	r3, r4
 80158aa:	d906      	bls.n	80158ba <rcutils_string_map_reserve+0x26>
 80158ac:	461c      	mov	r4, r3
 80158ae:	2900      	cmp	r1, #0
 80158b0:	d1f9      	bne.n	80158a6 <rcutils_string_map_reserve+0x12>
 80158b2:	201f      	movs	r0, #31
 80158b4:	b002      	add	sp, #8
 80158b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158ba:	688b      	ldr	r3, [r1, #8]
 80158bc:	42a3      	cmp	r3, r4
 80158be:	d047      	beq.n	8015950 <rcutils_string_map_reserve+0xbc>
 80158c0:	6a0e      	ldr	r6, [r1, #32]
 80158c2:	2c00      	cmp	r4, #0
 80158c4:	d034      	beq.n	8015930 <rcutils_string_map_reserve+0x9c>
 80158c6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80158ca:	d243      	bcs.n	8015954 <rcutils_string_map_reserve+0xc0>
 80158cc:	00a7      	lsls	r7, r4, #2
 80158ce:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80158d2:	6808      	ldr	r0, [r1, #0]
 80158d4:	4632      	mov	r2, r6
 80158d6:	4639      	mov	r1, r7
 80158d8:	47c0      	blx	r8
 80158da:	2800      	cmp	r0, #0
 80158dc:	d03a      	beq.n	8015954 <rcutils_string_map_reserve+0xc0>
 80158de:	682b      	ldr	r3, [r5, #0]
 80158e0:	4632      	mov	r2, r6
 80158e2:	6018      	str	r0, [r3, #0]
 80158e4:	4639      	mov	r1, r7
 80158e6:	6858      	ldr	r0, [r3, #4]
 80158e8:	47c0      	blx	r8
 80158ea:	2800      	cmp	r0, #0
 80158ec:	d032      	beq.n	8015954 <rcutils_string_map_reserve+0xc0>
 80158ee:	682d      	ldr	r5, [r5, #0]
 80158f0:	68ab      	ldr	r3, [r5, #8]
 80158f2:	6068      	str	r0, [r5, #4]
 80158f4:	42a3      	cmp	r3, r4
 80158f6:	d226      	bcs.n	8015946 <rcutils_string_map_reserve+0xb2>
 80158f8:	682a      	ldr	r2, [r5, #0]
 80158fa:	eb00 0c07 	add.w	ip, r0, r7
 80158fe:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8015902:	45e6      	cmp	lr, ip
 8015904:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8015908:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801590c:	d203      	bcs.n	8015916 <rcutils_string_map_reserve+0x82>
 801590e:	eb02 0c07 	add.w	ip, r2, r7
 8015912:	4566      	cmp	r6, ip
 8015914:	d322      	bcc.n	801595c <rcutils_string_map_reserve+0xc8>
 8015916:	1ae3      	subs	r3, r4, r3
 8015918:	009a      	lsls	r2, r3, #2
 801591a:	4670      	mov	r0, lr
 801591c:	2100      	movs	r1, #0
 801591e:	9201      	str	r2, [sp, #4]
 8015920:	f005 fa46 	bl	801adb0 <memset>
 8015924:	9a01      	ldr	r2, [sp, #4]
 8015926:	2100      	movs	r1, #0
 8015928:	4630      	mov	r0, r6
 801592a:	f005 fa41 	bl	801adb0 <memset>
 801592e:	e00a      	b.n	8015946 <rcutils_string_map_reserve+0xb2>
 8015930:	694f      	ldr	r7, [r1, #20]
 8015932:	6808      	ldr	r0, [r1, #0]
 8015934:	4631      	mov	r1, r6
 8015936:	47b8      	blx	r7
 8015938:	682b      	ldr	r3, [r5, #0]
 801593a:	4631      	mov	r1, r6
 801593c:	6858      	ldr	r0, [r3, #4]
 801593e:	601c      	str	r4, [r3, #0]
 8015940:	47b8      	blx	r7
 8015942:	682d      	ldr	r5, [r5, #0]
 8015944:	606c      	str	r4, [r5, #4]
 8015946:	2000      	movs	r0, #0
 8015948:	60ac      	str	r4, [r5, #8]
 801594a:	b002      	add	sp, #8
 801594c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015950:	2000      	movs	r0, #0
 8015952:	e7af      	b.n	80158b4 <rcutils_string_map_reserve+0x20>
 8015954:	200a      	movs	r0, #10
 8015956:	e7ad      	b.n	80158b4 <rcutils_string_map_reserve+0x20>
 8015958:	200b      	movs	r0, #11
 801595a:	4770      	bx	lr
 801595c:	1f0b      	subs	r3, r1, #4
 801595e:	4418      	add	r0, r3
 8015960:	4413      	add	r3, r2
 8015962:	3a04      	subs	r2, #4
 8015964:	4417      	add	r7, r2
 8015966:	2200      	movs	r2, #0
 8015968:	f843 2f04 	str.w	r2, [r3, #4]!
 801596c:	42bb      	cmp	r3, r7
 801596e:	f840 2f04 	str.w	r2, [r0, #4]!
 8015972:	d1f9      	bne.n	8015968 <rcutils_string_map_reserve+0xd4>
 8015974:	e7e7      	b.n	8015946 <rcutils_string_map_reserve+0xb2>
 8015976:	bf00      	nop

08015978 <rcutils_string_map_init>:
 8015978:	b082      	sub	sp, #8
 801597a:	b570      	push	{r4, r5, r6, lr}
 801597c:	ac04      	add	r4, sp, #16
 801597e:	e884 000c 	stmia.w	r4, {r2, r3}
 8015982:	b380      	cbz	r0, 80159e6 <rcutils_string_map_init+0x6e>
 8015984:	6806      	ldr	r6, [r0, #0]
 8015986:	4604      	mov	r4, r0
 8015988:	b12e      	cbz	r6, 8015996 <rcutils_string_map_init+0x1e>
 801598a:	251e      	movs	r5, #30
 801598c:	4628      	mov	r0, r5
 801598e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015992:	b002      	add	sp, #8
 8015994:	4770      	bx	lr
 8015996:	a804      	add	r0, sp, #16
 8015998:	460d      	mov	r5, r1
 801599a:	f7f8 f9a1 	bl	800dce0 <rcutils_allocator_is_valid>
 801599e:	b310      	cbz	r0, 80159e6 <rcutils_string_map_init+0x6e>
 80159a0:	9b04      	ldr	r3, [sp, #16]
 80159a2:	9908      	ldr	r1, [sp, #32]
 80159a4:	2024      	movs	r0, #36	@ 0x24
 80159a6:	4798      	blx	r3
 80159a8:	6020      	str	r0, [r4, #0]
 80159aa:	b310      	cbz	r0, 80159f2 <rcutils_string_map_init+0x7a>
 80159ac:	f10d 0e10 	add.w	lr, sp, #16
 80159b0:	e9c0 6600 	strd	r6, r6, [r0]
 80159b4:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80159b8:	f100 0c10 	add.w	ip, r0, #16
 80159bc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80159c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80159c4:	f8de 3000 	ldr.w	r3, [lr]
 80159c8:	f8cc 3000 	str.w	r3, [ip]
 80159cc:	4629      	mov	r1, r5
 80159ce:	4620      	mov	r0, r4
 80159d0:	f7ff ff60 	bl	8015894 <rcutils_string_map_reserve>
 80159d4:	4605      	mov	r5, r0
 80159d6:	2800      	cmp	r0, #0
 80159d8:	d0d8      	beq.n	801598c <rcutils_string_map_init+0x14>
 80159da:	9b05      	ldr	r3, [sp, #20]
 80159dc:	9908      	ldr	r1, [sp, #32]
 80159de:	6820      	ldr	r0, [r4, #0]
 80159e0:	4798      	blx	r3
 80159e2:	6026      	str	r6, [r4, #0]
 80159e4:	e7d2      	b.n	801598c <rcutils_string_map_init+0x14>
 80159e6:	250b      	movs	r5, #11
 80159e8:	4628      	mov	r0, r5
 80159ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80159ee:	b002      	add	sp, #8
 80159f0:	4770      	bx	lr
 80159f2:	250a      	movs	r5, #10
 80159f4:	e7ca      	b.n	801598c <rcutils_string_map_init+0x14>
 80159f6:	bf00      	nop

080159f8 <rcutils_string_map_fini>:
 80159f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159fc:	b082      	sub	sp, #8
 80159fe:	2800      	cmp	r0, #0
 8015a00:	d03a      	beq.n	8015a78 <rcutils_string_map_fini+0x80>
 8015a02:	6804      	ldr	r4, [r0, #0]
 8015a04:	4606      	mov	r6, r0
 8015a06:	2c00      	cmp	r4, #0
 8015a08:	d032      	beq.n	8015a70 <rcutils_string_map_fini+0x78>
 8015a0a:	68a3      	ldr	r3, [r4, #8]
 8015a0c:	b32b      	cbz	r3, 8015a5a <rcutils_string_map_fini+0x62>
 8015a0e:	2500      	movs	r5, #0
 8015a10:	6822      	ldr	r2, [r4, #0]
 8015a12:	462f      	mov	r7, r5
 8015a14:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8015a18:	b1e0      	cbz	r0, 8015a54 <rcutils_string_map_fini+0x5c>
 8015a1a:	6a21      	ldr	r1, [r4, #32]
 8015a1c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8015a20:	9101      	str	r1, [sp, #4]
 8015a22:	47c0      	blx	r8
 8015a24:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015a28:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8015a2c:	9901      	ldr	r1, [sp, #4]
 8015a2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015a32:	47c0      	blx	r8
 8015a34:	68e3      	ldr	r3, [r4, #12]
 8015a36:	6862      	ldr	r2, [r4, #4]
 8015a38:	3b01      	subs	r3, #1
 8015a3a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8015a3e:	60e3      	str	r3, [r4, #12]
 8015a40:	6834      	ldr	r4, [r6, #0]
 8015a42:	68a3      	ldr	r3, [r4, #8]
 8015a44:	3501      	adds	r5, #1
 8015a46:	429d      	cmp	r5, r3
 8015a48:	d207      	bcs.n	8015a5a <rcutils_string_map_fini+0x62>
 8015a4a:	6822      	ldr	r2, [r4, #0]
 8015a4c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8015a50:	2800      	cmp	r0, #0
 8015a52:	d1e2      	bne.n	8015a1a <rcutils_string_map_fini+0x22>
 8015a54:	3501      	adds	r5, #1
 8015a56:	429d      	cmp	r5, r3
 8015a58:	d3dc      	bcc.n	8015a14 <rcutils_string_map_fini+0x1c>
 8015a5a:	2100      	movs	r1, #0
 8015a5c:	4630      	mov	r0, r6
 8015a5e:	f7ff ff19 	bl	8015894 <rcutils_string_map_reserve>
 8015a62:	4604      	mov	r4, r0
 8015a64:	b920      	cbnz	r0, 8015a70 <rcutils_string_map_fini+0x78>
 8015a66:	6830      	ldr	r0, [r6, #0]
 8015a68:	6943      	ldr	r3, [r0, #20]
 8015a6a:	6a01      	ldr	r1, [r0, #32]
 8015a6c:	4798      	blx	r3
 8015a6e:	6034      	str	r4, [r6, #0]
 8015a70:	4620      	mov	r0, r4
 8015a72:	b002      	add	sp, #8
 8015a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a78:	240b      	movs	r4, #11
 8015a7a:	4620      	mov	r0, r4
 8015a7c:	b002      	add	sp, #8
 8015a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a82:	bf00      	nop

08015a84 <rcutils_string_map_getn>:
 8015a84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a88:	b300      	cbz	r0, 8015acc <rcutils_string_map_getn+0x48>
 8015a8a:	6807      	ldr	r7, [r0, #0]
 8015a8c:	b1ff      	cbz	r7, 8015ace <rcutils_string_map_getn+0x4a>
 8015a8e:	4688      	mov	r8, r1
 8015a90:	b1e1      	cbz	r1, 8015acc <rcutils_string_map_getn+0x48>
 8015a92:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8015a96:	683e      	ldr	r6, [r7, #0]
 8015a98:	f1ba 0f00 	cmp.w	sl, #0
 8015a9c:	d016      	beq.n	8015acc <rcutils_string_map_getn+0x48>
 8015a9e:	4691      	mov	r9, r2
 8015aa0:	3e04      	subs	r6, #4
 8015aa2:	2400      	movs	r4, #0
 8015aa4:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8015aa8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015aac:	4628      	mov	r0, r5
 8015aae:	3401      	adds	r4, #1
 8015ab0:	b155      	cbz	r5, 8015ac8 <rcutils_string_map_getn+0x44>
 8015ab2:	f7ea fbf5 	bl	80002a0 <strlen>
 8015ab6:	4548      	cmp	r0, r9
 8015ab8:	4602      	mov	r2, r0
 8015aba:	4629      	mov	r1, r5
 8015abc:	bf38      	it	cc
 8015abe:	464a      	movcc	r2, r9
 8015ac0:	4640      	mov	r0, r8
 8015ac2:	f005 f98a 	bl	801adda <strncmp>
 8015ac6:	b128      	cbz	r0, 8015ad4 <rcutils_string_map_getn+0x50>
 8015ac8:	45a2      	cmp	sl, r4
 8015aca:	d1eb      	bne.n	8015aa4 <rcutils_string_map_getn+0x20>
 8015acc:	2700      	movs	r7, #0
 8015ace:	4638      	mov	r0, r7
 8015ad0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	f853 700b 	ldr.w	r7, [r3, fp]
 8015ada:	4638      	mov	r0, r7
 8015adc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015ae0 <rmw_get_zero_initialized_context>:
 8015ae0:	b510      	push	{r4, lr}
 8015ae2:	4604      	mov	r4, r0
 8015ae4:	3010      	adds	r0, #16
 8015ae6:	f000 f80b 	bl	8015b00 <rmw_get_zero_initialized_init_options>
 8015aea:	2300      	movs	r3, #0
 8015aec:	2000      	movs	r0, #0
 8015aee:	2100      	movs	r1, #0
 8015af0:	e9c4 0100 	strd	r0, r1, [r4]
 8015af4:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8015af8:	60a3      	str	r3, [r4, #8]
 8015afa:	4620      	mov	r0, r4
 8015afc:	bd10      	pop	{r4, pc}
 8015afe:	bf00      	nop

08015b00 <rmw_get_zero_initialized_init_options>:
 8015b00:	b510      	push	{r4, lr}
 8015b02:	2238      	movs	r2, #56	@ 0x38
 8015b04:	4604      	mov	r4, r0
 8015b06:	2100      	movs	r1, #0
 8015b08:	f005 f952 	bl	801adb0 <memset>
 8015b0c:	f104 0010 	add.w	r0, r4, #16
 8015b10:	f000 f806 	bl	8015b20 <rmw_get_default_security_options>
 8015b14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015b18:	60e3      	str	r3, [r4, #12]
 8015b1a:	4620      	mov	r0, r4
 8015b1c:	bd10      	pop	{r4, pc}
 8015b1e:	bf00      	nop

08015b20 <rmw_get_default_security_options>:
 8015b20:	2200      	movs	r2, #0
 8015b22:	7002      	strb	r2, [r0, #0]
 8015b24:	6042      	str	r2, [r0, #4]
 8015b26:	4770      	bx	lr

08015b28 <rmw_subscription_content_filter_options_fini>:
 8015b28:	b1b0      	cbz	r0, 8015b58 <rmw_subscription_content_filter_options_fini+0x30>
 8015b2a:	b538      	push	{r3, r4, r5, lr}
 8015b2c:	4604      	mov	r4, r0
 8015b2e:	4608      	mov	r0, r1
 8015b30:	460d      	mov	r5, r1
 8015b32:	f7f8 f8d5 	bl	800dce0 <rcutils_allocator_is_valid>
 8015b36:	b168      	cbz	r0, 8015b54 <rmw_subscription_content_filter_options_fini+0x2c>
 8015b38:	6820      	ldr	r0, [r4, #0]
 8015b3a:	b120      	cbz	r0, 8015b46 <rmw_subscription_content_filter_options_fini+0x1e>
 8015b3c:	686b      	ldr	r3, [r5, #4]
 8015b3e:	6929      	ldr	r1, [r5, #16]
 8015b40:	4798      	blx	r3
 8015b42:	2300      	movs	r3, #0
 8015b44:	6023      	str	r3, [r4, #0]
 8015b46:	1d20      	adds	r0, r4, #4
 8015b48:	f003 fc56 	bl	80193f8 <rcutils_string_array_fini>
 8015b4c:	3800      	subs	r0, #0
 8015b4e:	bf18      	it	ne
 8015b50:	2001      	movne	r0, #1
 8015b52:	bd38      	pop	{r3, r4, r5, pc}
 8015b54:	200b      	movs	r0, #11
 8015b56:	bd38      	pop	{r3, r4, r5, pc}
 8015b58:	200b      	movs	r0, #11
 8015b5a:	4770      	bx	lr

08015b5c <rmw_get_default_subscription_options>:
 8015b5c:	2200      	movs	r2, #0
 8015b5e:	e9c0 2200 	strd	r2, r2, [r0]
 8015b62:	6082      	str	r2, [r0, #8]
 8015b64:	4770      	bx	lr
 8015b66:	bf00      	nop

08015b68 <rmw_time_equal>:
 8015b68:	b4f0      	push	{r4, r5, r6, r7}
 8015b6a:	b084      	sub	sp, #16
 8015b6c:	ac04      	add	r4, sp, #16
 8015b6e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8015b72:	4603      	mov	r3, r0
 8015b74:	4924      	ldr	r1, [pc, #144]	@ (8015c08 <rmw_time_equal+0xa0>)
 8015b76:	9e03      	ldr	r6, [sp, #12]
 8015b78:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8015b7c:	2202      	movs	r2, #2
 8015b7e:	4299      	cmp	r1, r3
 8015b80:	41aa      	sbcs	r2, r5
 8015b82:	d330      	bcc.n	8015be6 <rmw_time_equal+0x7e>
 8015b84:	4c21      	ldr	r4, [pc, #132]	@ (8015c0c <rmw_time_equal+0xa4>)
 8015b86:	fba3 3204 	umull	r3, r2, r3, r4
 8015b8a:	fb04 2205 	mla	r2, r4, r5, r2
 8015b8e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015b92:	43dd      	mvns	r5, r3
 8015b94:	1a8c      	subs	r4, r1, r2
 8015b96:	4285      	cmp	r5, r0
 8015b98:	41b4      	sbcs	r4, r6
 8015b9a:	d332      	bcc.n	8015c02 <rmw_time_equal+0x9a>
 8015b9c:	eb10 0c03 	adds.w	ip, r0, r3
 8015ba0:	eb42 0106 	adc.w	r1, r2, r6
 8015ba4:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8015ba8:	4817      	ldr	r0, [pc, #92]	@ (8015c08 <rmw_time_equal+0xa0>)
 8015baa:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8015bac:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8015bae:	2202      	movs	r2, #2
 8015bb0:	4298      	cmp	r0, r3
 8015bb2:	41b2      	sbcs	r2, r6
 8015bb4:	d31c      	bcc.n	8015bf0 <rmw_time_equal+0x88>
 8015bb6:	4c15      	ldr	r4, [pc, #84]	@ (8015c0c <rmw_time_equal+0xa4>)
 8015bb8:	fba3 3204 	umull	r3, r2, r3, r4
 8015bbc:	fb04 2206 	mla	r2, r4, r6, r2
 8015bc0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8015bc4:	43de      	mvns	r6, r3
 8015bc6:	1a84      	subs	r4, r0, r2
 8015bc8:	42ae      	cmp	r6, r5
 8015bca:	41bc      	sbcs	r4, r7
 8015bcc:	d315      	bcc.n	8015bfa <rmw_time_equal+0x92>
 8015bce:	195b      	adds	r3, r3, r5
 8015bd0:	eb42 0207 	adc.w	r2, r2, r7
 8015bd4:	428a      	cmp	r2, r1
 8015bd6:	bf08      	it	eq
 8015bd8:	4563      	cmpeq	r3, ip
 8015bda:	bf0c      	ite	eq
 8015bdc:	2001      	moveq	r0, #1
 8015bde:	2000      	movne	r0, #0
 8015be0:	b004      	add	sp, #16
 8015be2:	bcf0      	pop	{r4, r5, r6, r7}
 8015be4:	4770      	bx	lr
 8015be6:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8015bea:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015bee:	e7d9      	b.n	8015ba4 <rmw_time_equal+0x3c>
 8015bf0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015bf4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8015bf8:	e7ec      	b.n	8015bd4 <rmw_time_equal+0x6c>
 8015bfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015bfe:	4602      	mov	r2, r0
 8015c00:	e7e8      	b.n	8015bd4 <rmw_time_equal+0x6c>
 8015c02:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8015c06:	e7cd      	b.n	8015ba4 <rmw_time_equal+0x3c>
 8015c08:	25c17d04 	.word	0x25c17d04
 8015c0c:	3b9aca00 	.word	0x3b9aca00

08015c10 <rmw_time_total_nsec>:
 8015c10:	b470      	push	{r4, r5, r6}
 8015c12:	b085      	sub	sp, #20
 8015c14:	ac04      	add	r4, sp, #16
 8015c16:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8015c1a:	4603      	mov	r3, r0
 8015c1c:	4912      	ldr	r1, [pc, #72]	@ (8015c68 <rmw_time_total_nsec+0x58>)
 8015c1e:	9e03      	ldr	r6, [sp, #12]
 8015c20:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8015c24:	2202      	movs	r2, #2
 8015c26:	4299      	cmp	r1, r3
 8015c28:	41aa      	sbcs	r2, r5
 8015c2a:	d311      	bcc.n	8015c50 <rmw_time_total_nsec+0x40>
 8015c2c:	4c0f      	ldr	r4, [pc, #60]	@ (8015c6c <rmw_time_total_nsec+0x5c>)
 8015c2e:	fba3 3204 	umull	r3, r2, r3, r4
 8015c32:	fb04 2205 	mla	r2, r4, r5, r2
 8015c36:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015c3a:	43dd      	mvns	r5, r3
 8015c3c:	1a8c      	subs	r4, r1, r2
 8015c3e:	4285      	cmp	r5, r0
 8015c40:	41b4      	sbcs	r4, r6
 8015c42:	d30c      	bcc.n	8015c5e <rmw_time_total_nsec+0x4e>
 8015c44:	1818      	adds	r0, r3, r0
 8015c46:	eb42 0106 	adc.w	r1, r2, r6
 8015c4a:	b005      	add	sp, #20
 8015c4c:	bc70      	pop	{r4, r5, r6}
 8015c4e:	4770      	bx	lr
 8015c50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015c54:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015c58:	b005      	add	sp, #20
 8015c5a:	bc70      	pop	{r4, r5, r6}
 8015c5c:	4770      	bx	lr
 8015c5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015c62:	b005      	add	sp, #20
 8015c64:	bc70      	pop	{r4, r5, r6}
 8015c66:	4770      	bx	lr
 8015c68:	25c17d04 	.word	0x25c17d04
 8015c6c:	3b9aca00 	.word	0x3b9aca00

08015c70 <rmw_get_zero_initialized_message_info>:
 8015c70:	b510      	push	{r4, lr}
 8015c72:	2240      	movs	r2, #64	@ 0x40
 8015c74:	4604      	mov	r4, r0
 8015c76:	2100      	movs	r1, #0
 8015c78:	f005 f89a 	bl	801adb0 <memset>
 8015c7c:	4620      	mov	r0, r4
 8015c7e:	bd10      	pop	{r4, pc}

08015c80 <rmw_validate_full_topic_name>:
 8015c80:	2800      	cmp	r0, #0
 8015c82:	d057      	beq.n	8015d34 <rmw_validate_full_topic_name+0xb4>
 8015c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c88:	460d      	mov	r5, r1
 8015c8a:	2900      	cmp	r1, #0
 8015c8c:	d054      	beq.n	8015d38 <rmw_validate_full_topic_name+0xb8>
 8015c8e:	4616      	mov	r6, r2
 8015c90:	4604      	mov	r4, r0
 8015c92:	f7ea fb05 	bl	80002a0 <strlen>
 8015c96:	b148      	cbz	r0, 8015cac <rmw_validate_full_topic_name+0x2c>
 8015c98:	7823      	ldrb	r3, [r4, #0]
 8015c9a:	2b2f      	cmp	r3, #47	@ 0x2f
 8015c9c:	d00d      	beq.n	8015cba <rmw_validate_full_topic_name+0x3a>
 8015c9e:	2302      	movs	r3, #2
 8015ca0:	602b      	str	r3, [r5, #0]
 8015ca2:	b13e      	cbz	r6, 8015cb4 <rmw_validate_full_topic_name+0x34>
 8015ca4:	2000      	movs	r0, #0
 8015ca6:	6030      	str	r0, [r6, #0]
 8015ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cac:	2301      	movs	r3, #1
 8015cae:	602b      	str	r3, [r5, #0]
 8015cb0:	2e00      	cmp	r6, #0
 8015cb2:	d1f7      	bne.n	8015ca4 <rmw_validate_full_topic_name+0x24>
 8015cb4:	2000      	movs	r0, #0
 8015cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cba:	1e43      	subs	r3, r0, #1
 8015cbc:	5ce2      	ldrb	r2, [r4, r3]
 8015cbe:	2a2f      	cmp	r2, #47	@ 0x2f
 8015cc0:	d03c      	beq.n	8015d3c <rmw_validate_full_topic_name+0xbc>
 8015cc2:	1e63      	subs	r3, r4, #1
 8015cc4:	eb03 0800 	add.w	r8, r3, r0
 8015cc8:	f1c4 0e01 	rsb	lr, r4, #1
 8015ccc:	eb0e 0703 	add.w	r7, lr, r3
 8015cd0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8015cd4:	f021 0220 	bic.w	r2, r1, #32
 8015cd8:	3a41      	subs	r2, #65	@ 0x41
 8015cda:	2a19      	cmp	r2, #25
 8015cdc:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8015ce0:	d90b      	bls.n	8015cfa <rmw_validate_full_topic_name+0x7a>
 8015ce2:	295f      	cmp	r1, #95	@ 0x5f
 8015ce4:	d009      	beq.n	8015cfa <rmw_validate_full_topic_name+0x7a>
 8015ce6:	f1bc 0f0a 	cmp.w	ip, #10
 8015cea:	d906      	bls.n	8015cfa <rmw_validate_full_topic_name+0x7a>
 8015cec:	2304      	movs	r3, #4
 8015cee:	602b      	str	r3, [r5, #0]
 8015cf0:	2e00      	cmp	r6, #0
 8015cf2:	d0df      	beq.n	8015cb4 <rmw_validate_full_topic_name+0x34>
 8015cf4:	6037      	str	r7, [r6, #0]
 8015cf6:	2000      	movs	r0, #0
 8015cf8:	e7d6      	b.n	8015ca8 <rmw_validate_full_topic_name+0x28>
 8015cfa:	4543      	cmp	r3, r8
 8015cfc:	d1e6      	bne.n	8015ccc <rmw_validate_full_topic_name+0x4c>
 8015cfe:	4f1a      	ldr	r7, [pc, #104]	@ (8015d68 <rmw_validate_full_topic_name+0xe8>)
 8015d00:	2301      	movs	r3, #1
 8015d02:	e004      	b.n	8015d0e <rmw_validate_full_topic_name+0x8e>
 8015d04:	4298      	cmp	r0, r3
 8015d06:	f104 0401 	add.w	r4, r4, #1
 8015d0a:	d91c      	bls.n	8015d46 <rmw_validate_full_topic_name+0xc6>
 8015d0c:	4613      	mov	r3, r2
 8015d0e:	4298      	cmp	r0, r3
 8015d10:	f103 0201 	add.w	r2, r3, #1
 8015d14:	d0f6      	beq.n	8015d04 <rmw_validate_full_topic_name+0x84>
 8015d16:	7821      	ldrb	r1, [r4, #0]
 8015d18:	292f      	cmp	r1, #47	@ 0x2f
 8015d1a:	d1f3      	bne.n	8015d04 <rmw_validate_full_topic_name+0x84>
 8015d1c:	7861      	ldrb	r1, [r4, #1]
 8015d1e:	292f      	cmp	r1, #47	@ 0x2f
 8015d20:	d01c      	beq.n	8015d5c <rmw_validate_full_topic_name+0xdc>
 8015d22:	5dc9      	ldrb	r1, [r1, r7]
 8015d24:	0749      	lsls	r1, r1, #29
 8015d26:	d5ed      	bpl.n	8015d04 <rmw_validate_full_topic_name+0x84>
 8015d28:	2206      	movs	r2, #6
 8015d2a:	602a      	str	r2, [r5, #0]
 8015d2c:	2e00      	cmp	r6, #0
 8015d2e:	d0c1      	beq.n	8015cb4 <rmw_validate_full_topic_name+0x34>
 8015d30:	6033      	str	r3, [r6, #0]
 8015d32:	e7bf      	b.n	8015cb4 <rmw_validate_full_topic_name+0x34>
 8015d34:	200b      	movs	r0, #11
 8015d36:	4770      	bx	lr
 8015d38:	200b      	movs	r0, #11
 8015d3a:	e7b5      	b.n	8015ca8 <rmw_validate_full_topic_name+0x28>
 8015d3c:	2203      	movs	r2, #3
 8015d3e:	602a      	str	r2, [r5, #0]
 8015d40:	2e00      	cmp	r6, #0
 8015d42:	d1f5      	bne.n	8015d30 <rmw_validate_full_topic_name+0xb0>
 8015d44:	e7b6      	b.n	8015cb4 <rmw_validate_full_topic_name+0x34>
 8015d46:	28f7      	cmp	r0, #247	@ 0xf7
 8015d48:	d802      	bhi.n	8015d50 <rmw_validate_full_topic_name+0xd0>
 8015d4a:	2000      	movs	r0, #0
 8015d4c:	6028      	str	r0, [r5, #0]
 8015d4e:	e7ab      	b.n	8015ca8 <rmw_validate_full_topic_name+0x28>
 8015d50:	2307      	movs	r3, #7
 8015d52:	602b      	str	r3, [r5, #0]
 8015d54:	2e00      	cmp	r6, #0
 8015d56:	d0ad      	beq.n	8015cb4 <rmw_validate_full_topic_name+0x34>
 8015d58:	23f6      	movs	r3, #246	@ 0xf6
 8015d5a:	e7e9      	b.n	8015d30 <rmw_validate_full_topic_name+0xb0>
 8015d5c:	2205      	movs	r2, #5
 8015d5e:	602a      	str	r2, [r5, #0]
 8015d60:	2e00      	cmp	r6, #0
 8015d62:	d1e5      	bne.n	8015d30 <rmw_validate_full_topic_name+0xb0>
 8015d64:	e7a6      	b.n	8015cb4 <rmw_validate_full_topic_name+0x34>
 8015d66:	bf00      	nop
 8015d68:	08020a28 	.word	0x08020a28

08015d6c <rmw_validate_namespace_with_size>:
 8015d6c:	b340      	cbz	r0, 8015dc0 <rmw_validate_namespace_with_size+0x54>
 8015d6e:	b570      	push	{r4, r5, r6, lr}
 8015d70:	4614      	mov	r4, r2
 8015d72:	b0c2      	sub	sp, #264	@ 0x108
 8015d74:	b332      	cbz	r2, 8015dc4 <rmw_validate_namespace_with_size+0x58>
 8015d76:	2901      	cmp	r1, #1
 8015d78:	460d      	mov	r5, r1
 8015d7a:	461e      	mov	r6, r3
 8015d7c:	d102      	bne.n	8015d84 <rmw_validate_namespace_with_size+0x18>
 8015d7e:	7803      	ldrb	r3, [r0, #0]
 8015d80:	2b2f      	cmp	r3, #47	@ 0x2f
 8015d82:	d012      	beq.n	8015daa <rmw_validate_namespace_with_size+0x3e>
 8015d84:	aa01      	add	r2, sp, #4
 8015d86:	4669      	mov	r1, sp
 8015d88:	f7ff ff7a 	bl	8015c80 <rmw_validate_full_topic_name>
 8015d8c:	b978      	cbnz	r0, 8015dae <rmw_validate_namespace_with_size+0x42>
 8015d8e:	9b00      	ldr	r3, [sp, #0]
 8015d90:	b14b      	cbz	r3, 8015da6 <rmw_validate_namespace_with_size+0x3a>
 8015d92:	2b07      	cmp	r3, #7
 8015d94:	d007      	beq.n	8015da6 <rmw_validate_namespace_with_size+0x3a>
 8015d96:	1e5a      	subs	r2, r3, #1
 8015d98:	2a05      	cmp	r2, #5
 8015d9a:	d82b      	bhi.n	8015df4 <rmw_validate_namespace_with_size+0x88>
 8015d9c:	e8df f002 	tbb	[pc, r2]
 8015da0:	1e212427 	.word	0x1e212427
 8015da4:	141b      	.short	0x141b
 8015da6:	2df5      	cmp	r5, #245	@ 0xf5
 8015da8:	d803      	bhi.n	8015db2 <rmw_validate_namespace_with_size+0x46>
 8015daa:	2000      	movs	r0, #0
 8015dac:	6020      	str	r0, [r4, #0]
 8015dae:	b042      	add	sp, #264	@ 0x108
 8015db0:	bd70      	pop	{r4, r5, r6, pc}
 8015db2:	2307      	movs	r3, #7
 8015db4:	6023      	str	r3, [r4, #0]
 8015db6:	2e00      	cmp	r6, #0
 8015db8:	d0f9      	beq.n	8015dae <rmw_validate_namespace_with_size+0x42>
 8015dba:	23f4      	movs	r3, #244	@ 0xf4
 8015dbc:	6033      	str	r3, [r6, #0]
 8015dbe:	e7f6      	b.n	8015dae <rmw_validate_namespace_with_size+0x42>
 8015dc0:	200b      	movs	r0, #11
 8015dc2:	4770      	bx	lr
 8015dc4:	200b      	movs	r0, #11
 8015dc6:	e7f2      	b.n	8015dae <rmw_validate_namespace_with_size+0x42>
 8015dc8:	2306      	movs	r3, #6
 8015dca:	6023      	str	r3, [r4, #0]
 8015dcc:	2e00      	cmp	r6, #0
 8015dce:	d0ee      	beq.n	8015dae <rmw_validate_namespace_with_size+0x42>
 8015dd0:	9b01      	ldr	r3, [sp, #4]
 8015dd2:	6033      	str	r3, [r6, #0]
 8015dd4:	e7eb      	b.n	8015dae <rmw_validate_namespace_with_size+0x42>
 8015dd6:	2305      	movs	r3, #5
 8015dd8:	6023      	str	r3, [r4, #0]
 8015dda:	e7f7      	b.n	8015dcc <rmw_validate_namespace_with_size+0x60>
 8015ddc:	2304      	movs	r3, #4
 8015dde:	6023      	str	r3, [r4, #0]
 8015de0:	e7f4      	b.n	8015dcc <rmw_validate_namespace_with_size+0x60>
 8015de2:	2303      	movs	r3, #3
 8015de4:	6023      	str	r3, [r4, #0]
 8015de6:	e7f1      	b.n	8015dcc <rmw_validate_namespace_with_size+0x60>
 8015de8:	2302      	movs	r3, #2
 8015dea:	6023      	str	r3, [r4, #0]
 8015dec:	e7ee      	b.n	8015dcc <rmw_validate_namespace_with_size+0x60>
 8015dee:	2301      	movs	r3, #1
 8015df0:	6023      	str	r3, [r4, #0]
 8015df2:	e7eb      	b.n	8015dcc <rmw_validate_namespace_with_size+0x60>
 8015df4:	4a03      	ldr	r2, [pc, #12]	@ (8015e04 <rmw_validate_namespace_with_size+0x98>)
 8015df6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015dfa:	a802      	add	r0, sp, #8
 8015dfc:	f7ff fcda 	bl	80157b4 <rcutils_snprintf>
 8015e00:	2001      	movs	r0, #1
 8015e02:	e7d4      	b.n	8015dae <rmw_validate_namespace_with_size+0x42>
 8015e04:	0802033c 	.word	0x0802033c

08015e08 <rmw_validate_namespace>:
 8015e08:	b168      	cbz	r0, 8015e26 <rmw_validate_namespace+0x1e>
 8015e0a:	b570      	push	{r4, r5, r6, lr}
 8015e0c:	460d      	mov	r5, r1
 8015e0e:	4616      	mov	r6, r2
 8015e10:	4604      	mov	r4, r0
 8015e12:	f7ea fa45 	bl	80002a0 <strlen>
 8015e16:	4633      	mov	r3, r6
 8015e18:	4601      	mov	r1, r0
 8015e1a:	462a      	mov	r2, r5
 8015e1c:	4620      	mov	r0, r4
 8015e1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015e22:	f7ff bfa3 	b.w	8015d6c <rmw_validate_namespace_with_size>
 8015e26:	200b      	movs	r0, #11
 8015e28:	4770      	bx	lr
 8015e2a:	bf00      	nop

08015e2c <rmw_namespace_validation_result_string>:
 8015e2c:	2807      	cmp	r0, #7
 8015e2e:	bf9a      	itte	ls
 8015e30:	4b02      	ldrls	r3, [pc, #8]	@ (8015e3c <rmw_namespace_validation_result_string+0x10>)
 8015e32:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8015e36:	4802      	ldrhi	r0, [pc, #8]	@ (8015e40 <rmw_namespace_validation_result_string+0x14>)
 8015e38:	4770      	bx	lr
 8015e3a:	bf00      	nop
 8015e3c:	08020534 	.word	0x08020534
 8015e40:	0802038c 	.word	0x0802038c

08015e44 <rmw_validate_node_name>:
 8015e44:	2800      	cmp	r0, #0
 8015e46:	d03b      	beq.n	8015ec0 <rmw_validate_node_name+0x7c>
 8015e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e4c:	460d      	mov	r5, r1
 8015e4e:	2900      	cmp	r1, #0
 8015e50:	d038      	beq.n	8015ec4 <rmw_validate_node_name+0x80>
 8015e52:	4616      	mov	r6, r2
 8015e54:	4604      	mov	r4, r0
 8015e56:	f7ea fa23 	bl	80002a0 <strlen>
 8015e5a:	b1e0      	cbz	r0, 8015e96 <rmw_validate_node_name+0x52>
 8015e5c:	1e63      	subs	r3, r4, #1
 8015e5e:	eb03 0800 	add.w	r8, r3, r0
 8015e62:	f1c4 0101 	rsb	r1, r4, #1
 8015e66:	18cf      	adds	r7, r1, r3
 8015e68:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8015e6c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8015e70:	f02e 0c20 	bic.w	ip, lr, #32
 8015e74:	2a09      	cmp	r2, #9
 8015e76:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8015e7a:	d914      	bls.n	8015ea6 <rmw_validate_node_name+0x62>
 8015e7c:	f1bc 0f19 	cmp.w	ip, #25
 8015e80:	d911      	bls.n	8015ea6 <rmw_validate_node_name+0x62>
 8015e82:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8015e86:	d00e      	beq.n	8015ea6 <rmw_validate_node_name+0x62>
 8015e88:	2302      	movs	r3, #2
 8015e8a:	602b      	str	r3, [r5, #0]
 8015e8c:	b106      	cbz	r6, 8015e90 <rmw_validate_node_name+0x4c>
 8015e8e:	6037      	str	r7, [r6, #0]
 8015e90:	2000      	movs	r0, #0
 8015e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e96:	2301      	movs	r3, #1
 8015e98:	602b      	str	r3, [r5, #0]
 8015e9a:	2e00      	cmp	r6, #0
 8015e9c:	d0f8      	beq.n	8015e90 <rmw_validate_node_name+0x4c>
 8015e9e:	2000      	movs	r0, #0
 8015ea0:	6030      	str	r0, [r6, #0]
 8015ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ea6:	4543      	cmp	r3, r8
 8015ea8:	d1dd      	bne.n	8015e66 <rmw_validate_node_name+0x22>
 8015eaa:	7822      	ldrb	r2, [r4, #0]
 8015eac:	4b0d      	ldr	r3, [pc, #52]	@ (8015ee4 <rmw_validate_node_name+0xa0>)
 8015eae:	5cd3      	ldrb	r3, [r2, r3]
 8015eb0:	f013 0304 	ands.w	r3, r3, #4
 8015eb4:	d110      	bne.n	8015ed8 <rmw_validate_node_name+0x94>
 8015eb6:	28ff      	cmp	r0, #255	@ 0xff
 8015eb8:	d806      	bhi.n	8015ec8 <rmw_validate_node_name+0x84>
 8015eba:	602b      	str	r3, [r5, #0]
 8015ebc:	4618      	mov	r0, r3
 8015ebe:	e7e8      	b.n	8015e92 <rmw_validate_node_name+0x4e>
 8015ec0:	200b      	movs	r0, #11
 8015ec2:	4770      	bx	lr
 8015ec4:	200b      	movs	r0, #11
 8015ec6:	e7e4      	b.n	8015e92 <rmw_validate_node_name+0x4e>
 8015ec8:	2204      	movs	r2, #4
 8015eca:	602a      	str	r2, [r5, #0]
 8015ecc:	2e00      	cmp	r6, #0
 8015ece:	d0df      	beq.n	8015e90 <rmw_validate_node_name+0x4c>
 8015ed0:	22fe      	movs	r2, #254	@ 0xfe
 8015ed2:	6032      	str	r2, [r6, #0]
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	e7dc      	b.n	8015e92 <rmw_validate_node_name+0x4e>
 8015ed8:	2303      	movs	r3, #3
 8015eda:	602b      	str	r3, [r5, #0]
 8015edc:	2e00      	cmp	r6, #0
 8015ede:	d1de      	bne.n	8015e9e <rmw_validate_node_name+0x5a>
 8015ee0:	e7d6      	b.n	8015e90 <rmw_validate_node_name+0x4c>
 8015ee2:	bf00      	nop
 8015ee4:	08020a28 	.word	0x08020a28

08015ee8 <rmw_node_name_validation_result_string>:
 8015ee8:	2804      	cmp	r0, #4
 8015eea:	bf9a      	itte	ls
 8015eec:	4b02      	ldrls	r3, [pc, #8]	@ (8015ef8 <rmw_node_name_validation_result_string+0x10>)
 8015eee:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8015ef2:	4802      	ldrhi	r0, [pc, #8]	@ (8015efc <rmw_node_name_validation_result_string+0x14>)
 8015ef4:	4770      	bx	lr
 8015ef6:	bf00      	nop
 8015ef8:	08020640 	.word	0x08020640
 8015efc:	08020554 	.word	0x08020554

08015f00 <get_memory>:
 8015f00:	4603      	mov	r3, r0
 8015f02:	6840      	ldr	r0, [r0, #4]
 8015f04:	b158      	cbz	r0, 8015f1e <get_memory+0x1e>
 8015f06:	6842      	ldr	r2, [r0, #4]
 8015f08:	605a      	str	r2, [r3, #4]
 8015f0a:	b10a      	cbz	r2, 8015f10 <get_memory+0x10>
 8015f0c:	2100      	movs	r1, #0
 8015f0e:	6011      	str	r1, [r2, #0]
 8015f10:	681a      	ldr	r2, [r3, #0]
 8015f12:	6042      	str	r2, [r0, #4]
 8015f14:	b102      	cbz	r2, 8015f18 <get_memory+0x18>
 8015f16:	6010      	str	r0, [r2, #0]
 8015f18:	2200      	movs	r2, #0
 8015f1a:	6002      	str	r2, [r0, #0]
 8015f1c:	6018      	str	r0, [r3, #0]
 8015f1e:	4770      	bx	lr

08015f20 <put_memory>:
 8015f20:	680b      	ldr	r3, [r1, #0]
 8015f22:	b10b      	cbz	r3, 8015f28 <put_memory+0x8>
 8015f24:	684a      	ldr	r2, [r1, #4]
 8015f26:	605a      	str	r2, [r3, #4]
 8015f28:	684a      	ldr	r2, [r1, #4]
 8015f2a:	b102      	cbz	r2, 8015f2e <put_memory+0xe>
 8015f2c:	6013      	str	r3, [r2, #0]
 8015f2e:	6803      	ldr	r3, [r0, #0]
 8015f30:	428b      	cmp	r3, r1
 8015f32:	6843      	ldr	r3, [r0, #4]
 8015f34:	bf08      	it	eq
 8015f36:	6002      	streq	r2, [r0, #0]
 8015f38:	604b      	str	r3, [r1, #4]
 8015f3a:	b103      	cbz	r3, 8015f3e <put_memory+0x1e>
 8015f3c:	6019      	str	r1, [r3, #0]
 8015f3e:	2300      	movs	r3, #0
 8015f40:	600b      	str	r3, [r1, #0]
 8015f42:	6041      	str	r1, [r0, #4]
 8015f44:	4770      	bx	lr
 8015f46:	bf00      	nop

08015f48 <rmw_destroy_client>:
 8015f48:	b570      	push	{r4, r5, r6, lr}
 8015f4a:	b128      	cbz	r0, 8015f58 <rmw_destroy_client+0x10>
 8015f4c:	4604      	mov	r4, r0
 8015f4e:	6800      	ldr	r0, [r0, #0]
 8015f50:	460d      	mov	r5, r1
 8015f52:	f7f8 fc6b 	bl	800e82c <is_uxrce_rmw_identifier_valid>
 8015f56:	b910      	cbnz	r0, 8015f5e <rmw_destroy_client+0x16>
 8015f58:	2401      	movs	r4, #1
 8015f5a:	4620      	mov	r0, r4
 8015f5c:	bd70      	pop	{r4, r5, r6, pc}
 8015f5e:	6863      	ldr	r3, [r4, #4]
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d0f9      	beq.n	8015f58 <rmw_destroy_client+0x10>
 8015f64:	2d00      	cmp	r5, #0
 8015f66:	d0f7      	beq.n	8015f58 <rmw_destroy_client+0x10>
 8015f68:	6828      	ldr	r0, [r5, #0]
 8015f6a:	f7f8 fc5f 	bl	800e82c <is_uxrce_rmw_identifier_valid>
 8015f6e:	2800      	cmp	r0, #0
 8015f70:	d0f2      	beq.n	8015f58 <rmw_destroy_client+0x10>
 8015f72:	686e      	ldr	r6, [r5, #4]
 8015f74:	2e00      	cmp	r6, #0
 8015f76:	d0ef      	beq.n	8015f58 <rmw_destroy_client+0x10>
 8015f78:	6864      	ldr	r4, [r4, #4]
 8015f7a:	6932      	ldr	r2, [r6, #16]
 8015f7c:	6920      	ldr	r0, [r4, #16]
 8015f7e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015f82:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015f86:	6819      	ldr	r1, [r3, #0]
 8015f88:	f002 f972 	bl	8018270 <uxr_buffer_cancel_data>
 8015f8c:	4602      	mov	r2, r0
 8015f8e:	6920      	ldr	r0, [r4, #16]
 8015f90:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015f94:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015f98:	f7f8 fbc8 	bl	800e72c <run_xrce_session>
 8015f9c:	6920      	ldr	r0, [r4, #16]
 8015f9e:	6932      	ldr	r2, [r6, #16]
 8015fa0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015fa4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015fa8:	6819      	ldr	r1, [r3, #0]
 8015faa:	f7f9 fe3b 	bl	800fc24 <uxr_buffer_delete_entity>
 8015fae:	4602      	mov	r2, r0
 8015fb0:	6920      	ldr	r0, [r4, #16]
 8015fb2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015fb6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015fba:	f7f8 fbb7 	bl	800e72c <run_xrce_session>
 8015fbe:	2800      	cmp	r0, #0
 8015fc0:	4628      	mov	r0, r5
 8015fc2:	bf14      	ite	ne
 8015fc4:	2400      	movne	r4, #0
 8015fc6:	2402      	moveq	r4, #2
 8015fc8:	f7f8 fa98 	bl	800e4fc <rmw_uxrce_fini_client_memory>
 8015fcc:	e7c5      	b.n	8015f5a <rmw_destroy_client+0x12>
 8015fce:	bf00      	nop

08015fd0 <rmw_get_implementation_identifier>:
 8015fd0:	4b01      	ldr	r3, [pc, #4]	@ (8015fd8 <rmw_get_implementation_identifier+0x8>)
 8015fd2:	6818      	ldr	r0, [r3, #0]
 8015fd4:	4770      	bx	lr
 8015fd6:	bf00      	nop
 8015fd8:	0802066c 	.word	0x0802066c

08015fdc <rmw_init_options_init>:
 8015fdc:	b084      	sub	sp, #16
 8015fde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015fe0:	b083      	sub	sp, #12
 8015fe2:	ad09      	add	r5, sp, #36	@ 0x24
 8015fe4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8015fe8:	b130      	cbz	r0, 8015ff8 <rmw_init_options_init+0x1c>
 8015fea:	4604      	mov	r4, r0
 8015fec:	4628      	mov	r0, r5
 8015fee:	f7f7 fe77 	bl	800dce0 <rcutils_allocator_is_valid>
 8015ff2:	b108      	cbz	r0, 8015ff8 <rmw_init_options_init+0x1c>
 8015ff4:	68a6      	ldr	r6, [r4, #8]
 8015ff6:	b12e      	cbz	r6, 8016004 <rmw_init_options_init+0x28>
 8015ff8:	200b      	movs	r0, #11
 8015ffa:	b003      	add	sp, #12
 8015ffc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016000:	b004      	add	sp, #16
 8016002:	4770      	bx	lr
 8016004:	2200      	movs	r2, #0
 8016006:	2300      	movs	r3, #0
 8016008:	e9c4 2300 	strd	r2, r3, [r4]
 801600c:	4b22      	ldr	r3, [pc, #136]	@ (8016098 <rmw_init_options_init+0xbc>)
 801600e:	f8df e098 	ldr.w	lr, [pc, #152]	@ 80160a8 <rmw_init_options_init+0xcc>
 8016012:	681b      	ldr	r3, [r3, #0]
 8016014:	60a3      	str	r3, [r4, #8]
 8016016:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016018:	f104 0c20 	add.w	ip, r4, #32
 801601c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016020:	466f      	mov	r7, sp
 8016022:	682b      	ldr	r3, [r5, #0]
 8016024:	f8cc 3000 	str.w	r3, [ip]
 8016028:	4638      	mov	r0, r7
 801602a:	f8c4 e01c 	str.w	lr, [r4, #28]
 801602e:	60e6      	str	r6, [r4, #12]
 8016030:	f7ff fd76 	bl	8015b20 <rmw_get_default_security_options>
 8016034:	e897 0003 	ldmia.w	r7, {r0, r1}
 8016038:	f104 0310 	add.w	r3, r4, #16
 801603c:	e883 0003 	stmia.w	r3, {r0, r1}
 8016040:	2203      	movs	r2, #3
 8016042:	4816      	ldr	r0, [pc, #88]	@ (801609c <rmw_init_options_init+0xc0>)
 8016044:	4916      	ldr	r1, [pc, #88]	@ (80160a0 <rmw_init_options_init+0xc4>)
 8016046:	7626      	strb	r6, [r4, #24]
 8016048:	f7f8 f998 	bl	800e37c <rmw_uxrce_init_init_options_impl_memory>
 801604c:	4813      	ldr	r0, [pc, #76]	@ (801609c <rmw_init_options_init+0xc0>)
 801604e:	f7ff ff57 	bl	8015f00 <get_memory>
 8016052:	b1f0      	cbz	r0, 8016092 <rmw_init_options_init+0xb6>
 8016054:	4a13      	ldr	r2, [pc, #76]	@ (80160a4 <rmw_init_options_init+0xc8>)
 8016056:	6883      	ldr	r3, [r0, #8]
 8016058:	6851      	ldr	r1, [r2, #4]
 801605a:	7810      	ldrb	r0, [r2, #0]
 801605c:	6363      	str	r3, [r4, #52]	@ 0x34
 801605e:	7418      	strb	r0, [r3, #16]
 8016060:	6159      	str	r1, [r3, #20]
 8016062:	68d1      	ldr	r1, [r2, #12]
 8016064:	61d9      	str	r1, [r3, #28]
 8016066:	6911      	ldr	r1, [r2, #16]
 8016068:	6219      	str	r1, [r3, #32]
 801606a:	6951      	ldr	r1, [r2, #20]
 801606c:	6892      	ldr	r2, [r2, #8]
 801606e:	619a      	str	r2, [r3, #24]
 8016070:	6259      	str	r1, [r3, #36]	@ 0x24
 8016072:	f7fb fa35 	bl	80114e0 <uxr_nanos>
 8016076:	f003 fc2b 	bl	80198d0 <srand>
 801607a:	f003 fc57 	bl	801992c <rand>
 801607e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016080:	6298      	str	r0, [r3, #40]	@ 0x28
 8016082:	2800      	cmp	r0, #0
 8016084:	d0f9      	beq.n	801607a <rmw_init_options_init+0x9e>
 8016086:	2000      	movs	r0, #0
 8016088:	b003      	add	sp, #12
 801608a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801608e:	b004      	add	sp, #16
 8016090:	4770      	bx	lr
 8016092:	2001      	movs	r0, #1
 8016094:	e7b1      	b.n	8015ffa <rmw_init_options_init+0x1e>
 8016096:	bf00      	nop
 8016098:	0802066c 	.word	0x0802066c
 801609c:	20011a6c 	.word	0x20011a6c
 80160a0:	2000d308 	.word	0x2000d308
 80160a4:	2000d194 	.word	0x2000d194
 80160a8:	080200d4 	.word	0x080200d4

080160ac <rmw_init_options_copy>:
 80160ac:	b570      	push	{r4, r5, r6, lr}
 80160ae:	b158      	cbz	r0, 80160c8 <rmw_init_options_copy+0x1c>
 80160b0:	460d      	mov	r5, r1
 80160b2:	b149      	cbz	r1, 80160c8 <rmw_init_options_copy+0x1c>
 80160b4:	4604      	mov	r4, r0
 80160b6:	6880      	ldr	r0, [r0, #8]
 80160b8:	b120      	cbz	r0, 80160c4 <rmw_init_options_copy+0x18>
 80160ba:	4b1e      	ldr	r3, [pc, #120]	@ (8016134 <rmw_init_options_copy+0x88>)
 80160bc:	6819      	ldr	r1, [r3, #0]
 80160be:	f7ea f88f 	bl	80001e0 <strcmp>
 80160c2:	bb90      	cbnz	r0, 801612a <rmw_init_options_copy+0x7e>
 80160c4:	68ab      	ldr	r3, [r5, #8]
 80160c6:	b113      	cbz	r3, 80160ce <rmw_init_options_copy+0x22>
 80160c8:	250b      	movs	r5, #11
 80160ca:	4628      	mov	r0, r5
 80160cc:	bd70      	pop	{r4, r5, r6, pc}
 80160ce:	4623      	mov	r3, r4
 80160d0:	462a      	mov	r2, r5
 80160d2:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 80160d6:	f8d3 c000 	ldr.w	ip, [r3]
 80160da:	6858      	ldr	r0, [r3, #4]
 80160dc:	6899      	ldr	r1, [r3, #8]
 80160de:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80160e2:	f8c2 e00c 	str.w	lr, [r2, #12]
 80160e6:	3310      	adds	r3, #16
 80160e8:	42b3      	cmp	r3, r6
 80160ea:	f8c2 c000 	str.w	ip, [r2]
 80160ee:	6050      	str	r0, [r2, #4]
 80160f0:	6091      	str	r1, [r2, #8]
 80160f2:	f102 0210 	add.w	r2, r2, #16
 80160f6:	d1ee      	bne.n	80160d6 <rmw_init_options_copy+0x2a>
 80160f8:	6819      	ldr	r1, [r3, #0]
 80160fa:	685b      	ldr	r3, [r3, #4]
 80160fc:	480e      	ldr	r0, [pc, #56]	@ (8016138 <rmw_init_options_copy+0x8c>)
 80160fe:	6053      	str	r3, [r2, #4]
 8016100:	6011      	str	r1, [r2, #0]
 8016102:	f7ff fefd 	bl	8015f00 <get_memory>
 8016106:	b198      	cbz	r0, 8016130 <rmw_init_options_copy+0x84>
 8016108:	6883      	ldr	r3, [r0, #8]
 801610a:	636b      	str	r3, [r5, #52]	@ 0x34
 801610c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801610e:	f102 0c10 	add.w	ip, r2, #16
 8016112:	f103 0410 	add.w	r4, r3, #16
 8016116:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801611a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801611c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8016120:	2500      	movs	r5, #0
 8016122:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8016126:	4628      	mov	r0, r5
 8016128:	bd70      	pop	{r4, r5, r6, pc}
 801612a:	250c      	movs	r5, #12
 801612c:	4628      	mov	r0, r5
 801612e:	bd70      	pop	{r4, r5, r6, pc}
 8016130:	2501      	movs	r5, #1
 8016132:	e7ca      	b.n	80160ca <rmw_init_options_copy+0x1e>
 8016134:	0802066c 	.word	0x0802066c
 8016138:	20011a6c 	.word	0x20011a6c

0801613c <rmw_init_options_fini>:
 801613c:	2800      	cmp	r0, #0
 801613e:	d03d      	beq.n	80161bc <rmw_init_options_fini+0x80>
 8016140:	b510      	push	{r4, lr}
 8016142:	4604      	mov	r4, r0
 8016144:	b08e      	sub	sp, #56	@ 0x38
 8016146:	3020      	adds	r0, #32
 8016148:	f7f7 fdca 	bl	800dce0 <rcutils_allocator_is_valid>
 801614c:	b360      	cbz	r0, 80161a8 <rmw_init_options_fini+0x6c>
 801614e:	68a0      	ldr	r0, [r4, #8]
 8016150:	b120      	cbz	r0, 801615c <rmw_init_options_fini+0x20>
 8016152:	4b1c      	ldr	r3, [pc, #112]	@ (80161c4 <rmw_init_options_fini+0x88>)
 8016154:	6819      	ldr	r1, [r3, #0]
 8016156:	f7ea f843 	bl	80001e0 <strcmp>
 801615a:	bb68      	cbnz	r0, 80161b8 <rmw_init_options_fini+0x7c>
 801615c:	4b1a      	ldr	r3, [pc, #104]	@ (80161c8 <rmw_init_options_fini+0x8c>)
 801615e:	6819      	ldr	r1, [r3, #0]
 8016160:	b331      	cbz	r1, 80161b0 <rmw_init_options_fini+0x74>
 8016162:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8016164:	e001      	b.n	801616a <rmw_init_options_fini+0x2e>
 8016166:	6849      	ldr	r1, [r1, #4]
 8016168:	b311      	cbz	r1, 80161b0 <rmw_init_options_fini+0x74>
 801616a:	688b      	ldr	r3, [r1, #8]
 801616c:	429a      	cmp	r2, r3
 801616e:	d1fa      	bne.n	8016166 <rmw_init_options_fini+0x2a>
 8016170:	4815      	ldr	r0, [pc, #84]	@ (80161c8 <rmw_init_options_fini+0x8c>)
 8016172:	f7ff fed5 	bl	8015f20 <put_memory>
 8016176:	4668      	mov	r0, sp
 8016178:	f7ff fcc2 	bl	8015b00 <rmw_get_zero_initialized_init_options>
 801617c:	46ee      	mov	lr, sp
 801617e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016182:	46a4      	mov	ip, r4
 8016184:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016188:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801618c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016190:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016194:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016198:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801619c:	e88c 0003 	stmia.w	ip, {r0, r1}
 80161a0:	2300      	movs	r3, #0
 80161a2:	4618      	mov	r0, r3
 80161a4:	b00e      	add	sp, #56	@ 0x38
 80161a6:	bd10      	pop	{r4, pc}
 80161a8:	230b      	movs	r3, #11
 80161aa:	4618      	mov	r0, r3
 80161ac:	b00e      	add	sp, #56	@ 0x38
 80161ae:	bd10      	pop	{r4, pc}
 80161b0:	2301      	movs	r3, #1
 80161b2:	4618      	mov	r0, r3
 80161b4:	b00e      	add	sp, #56	@ 0x38
 80161b6:	bd10      	pop	{r4, pc}
 80161b8:	230c      	movs	r3, #12
 80161ba:	e7f2      	b.n	80161a2 <rmw_init_options_fini+0x66>
 80161bc:	230b      	movs	r3, #11
 80161be:	4618      	mov	r0, r3
 80161c0:	4770      	bx	lr
 80161c2:	bf00      	nop
 80161c4:	0802066c 	.word	0x0802066c
 80161c8:	20011a6c 	.word	0x20011a6c

080161cc <rmw_init>:
 80161cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80161d0:	b083      	sub	sp, #12
 80161d2:	2800      	cmp	r0, #0
 80161d4:	f000 80d3 	beq.w	801637e <rmw_init+0x1b2>
 80161d8:	460e      	mov	r6, r1
 80161da:	2900      	cmp	r1, #0
 80161dc:	f000 80cf 	beq.w	801637e <rmw_init+0x1b2>
 80161e0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80161e2:	4605      	mov	r5, r0
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	f000 80ca 	beq.w	801637e <rmw_init+0x1b2>
 80161ea:	4b78      	ldr	r3, [pc, #480]	@ (80163cc <rmw_init+0x200>)
 80161ec:	6880      	ldr	r0, [r0, #8]
 80161ee:	681f      	ldr	r7, [r3, #0]
 80161f0:	b128      	cbz	r0, 80161fe <rmw_init+0x32>
 80161f2:	4639      	mov	r1, r7
 80161f4:	f7e9 fff4 	bl	80001e0 <strcmp>
 80161f8:	2800      	cmp	r0, #0
 80161fa:	f040 80ca 	bne.w	8016392 <rmw_init+0x1c6>
 80161fe:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016202:	4c73      	ldr	r4, [pc, #460]	@ (80163d0 <rmw_init+0x204>)
 8016204:	4973      	ldr	r1, [pc, #460]	@ (80163d4 <rmw_init+0x208>)
 8016206:	4874      	ldr	r0, [pc, #464]	@ (80163d8 <rmw_init+0x20c>)
 8016208:	60b7      	str	r7, [r6, #8]
 801620a:	e9c6 2300 	strd	r2, r3, [r6]
 801620e:	68eb      	ldr	r3, [r5, #12]
 8016210:	64b3      	str	r3, [r6, #72]	@ 0x48
 8016212:	2201      	movs	r2, #1
 8016214:	f7f8 f852 	bl	800e2bc <rmw_uxrce_init_session_memory>
 8016218:	4620      	mov	r0, r4
 801621a:	4970      	ldr	r1, [pc, #448]	@ (80163dc <rmw_init+0x210>)
 801621c:	2204      	movs	r2, #4
 801621e:	f7f8 f88d 	bl	800e33c <rmw_uxrce_init_static_input_buffer_memory>
 8016222:	f04f 0800 	mov.w	r8, #0
 8016226:	486c      	ldr	r0, [pc, #432]	@ (80163d8 <rmw_init+0x20c>)
 8016228:	f884 800d 	strb.w	r8, [r4, #13]
 801622c:	f7ff fe68 	bl	8015f00 <get_memory>
 8016230:	2800      	cmp	r0, #0
 8016232:	f000 80a9 	beq.w	8016388 <rmw_init+0x1bc>
 8016236:	6884      	ldr	r4, [r0, #8]
 8016238:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 801623a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 801623c:	f890 c010 	ldrb.w	ip, [r0, #16]
 8016240:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8016244:	9101      	str	r1, [sp, #4]
 8016246:	6a00      	ldr	r0, [r0, #32]
 8016248:	9000      	str	r0, [sp, #0]
 801624a:	f104 0910 	add.w	r9, r4, #16
 801624e:	4661      	mov	r1, ip
 8016250:	4648      	mov	r0, r9
 8016252:	f001 fa45 	bl	80176e0 <uxr_set_custom_transport_callbacks>
 8016256:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 801625a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801625e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8016262:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8016266:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 801626a:	495d      	ldr	r1, [pc, #372]	@ (80163e0 <rmw_init+0x214>)
 801626c:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8016270:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8016274:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8016278:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 801627c:	4859      	ldr	r0, [pc, #356]	@ (80163e4 <rmw_init+0x218>)
 801627e:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8016282:	2201      	movs	r2, #1
 8016284:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8016286:	f7f7 fff9 	bl	800e27c <rmw_uxrce_init_node_memory>
 801628a:	4957      	ldr	r1, [pc, #348]	@ (80163e8 <rmw_init+0x21c>)
 801628c:	4857      	ldr	r0, [pc, #348]	@ (80163ec <rmw_init+0x220>)
 801628e:	2205      	movs	r2, #5
 8016290:	f7f7 ffd4 	bl	800e23c <rmw_uxrce_init_subscription_memory>
 8016294:	4956      	ldr	r1, [pc, #344]	@ (80163f0 <rmw_init+0x224>)
 8016296:	4857      	ldr	r0, [pc, #348]	@ (80163f4 <rmw_init+0x228>)
 8016298:	220a      	movs	r2, #10
 801629a:	f7f7 ffaf 	bl	800e1fc <rmw_uxrce_init_publisher_memory>
 801629e:	4956      	ldr	r1, [pc, #344]	@ (80163f8 <rmw_init+0x22c>)
 80162a0:	4856      	ldr	r0, [pc, #344]	@ (80163fc <rmw_init+0x230>)
 80162a2:	2201      	movs	r2, #1
 80162a4:	f7f7 ff6a 	bl	800e17c <rmw_uxrce_init_service_memory>
 80162a8:	4955      	ldr	r1, [pc, #340]	@ (8016400 <rmw_init+0x234>)
 80162aa:	4856      	ldr	r0, [pc, #344]	@ (8016404 <rmw_init+0x238>)
 80162ac:	2201      	movs	r2, #1
 80162ae:	f7f7 ff85 	bl	800e1bc <rmw_uxrce_init_client_memory>
 80162b2:	4955      	ldr	r1, [pc, #340]	@ (8016408 <rmw_init+0x23c>)
 80162b4:	4855      	ldr	r0, [pc, #340]	@ (801640c <rmw_init+0x240>)
 80162b6:	220f      	movs	r2, #15
 80162b8:	f7f8 f820 	bl	800e2fc <rmw_uxrce_init_topic_memory>
 80162bc:	4954      	ldr	r1, [pc, #336]	@ (8016410 <rmw_init+0x244>)
 80162be:	4855      	ldr	r0, [pc, #340]	@ (8016414 <rmw_init+0x248>)
 80162c0:	2203      	movs	r2, #3
 80162c2:	f7f8 f85b 	bl	800e37c <rmw_uxrce_init_init_options_impl_memory>
 80162c6:	4954      	ldr	r1, [pc, #336]	@ (8016418 <rmw_init+0x24c>)
 80162c8:	4854      	ldr	r0, [pc, #336]	@ (801641c <rmw_init+0x250>)
 80162ca:	2204      	movs	r2, #4
 80162cc:	f7f8 f876 	bl	800e3bc <rmw_uxrce_init_wait_set_memory>
 80162d0:	4953      	ldr	r1, [pc, #332]	@ (8016420 <rmw_init+0x254>)
 80162d2:	4854      	ldr	r0, [pc, #336]	@ (8016424 <rmw_init+0x258>)
 80162d4:	2204      	movs	r2, #4
 80162d6:	f7f8 f891 	bl	800e3fc <rmw_uxrce_init_guard_condition_memory>
 80162da:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80162dc:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 80162de:	4642      	mov	r2, r8
 80162e0:	f000 fd9e 	bl	8016e20 <rmw_uxrce_transport_init>
 80162e4:	4607      	mov	r7, r0
 80162e6:	2800      	cmp	r0, #0
 80162e8:	d158      	bne.n	801639c <rmw_init+0x1d0>
 80162ea:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80162ec:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 80162f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80162f2:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 80162f6:	4628      	mov	r0, r5
 80162f8:	f7f9 ff56 	bl	80101a8 <uxr_init_session>
 80162fc:	494a      	ldr	r1, [pc, #296]	@ (8016428 <rmw_init+0x25c>)
 80162fe:	4622      	mov	r2, r4
 8016300:	4628      	mov	r0, r5
 8016302:	f7f9 ff75 	bl	80101f0 <uxr_set_topic_callback>
 8016306:	4949      	ldr	r1, [pc, #292]	@ (801642c <rmw_init+0x260>)
 8016308:	463a      	mov	r2, r7
 801630a:	4628      	mov	r0, r5
 801630c:	f7f9 ff6c 	bl	80101e8 <uxr_set_status_callback>
 8016310:	4947      	ldr	r1, [pc, #284]	@ (8016430 <rmw_init+0x264>)
 8016312:	463a      	mov	r2, r7
 8016314:	4628      	mov	r0, r5
 8016316:	f7f9 ff6f 	bl	80101f8 <uxr_set_request_callback>
 801631a:	4946      	ldr	r1, [pc, #280]	@ (8016434 <rmw_init+0x268>)
 801631c:	463a      	mov	r2, r7
 801631e:	4628      	mov	r0, r5
 8016320:	f7f9 ff6e 	bl	8010200 <uxr_set_reply_callback>
 8016324:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8016328:	2304      	movs	r3, #4
 801632a:	0092      	lsls	r2, r2, #2
 801632c:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8016330:	4628      	mov	r0, r5
 8016332:	f7f9 ffa3 	bl	801027c <uxr_create_input_reliable_stream>
 8016336:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801633a:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 801633e:	0092      	lsls	r2, r2, #2
 8016340:	2304      	movs	r3, #4
 8016342:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8016346:	4628      	mov	r0, r5
 8016348:	f7f9 ff70 	bl	801022c <uxr_create_output_reliable_stream>
 801634c:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8016350:	4628      	mov	r0, r5
 8016352:	f7f9 ff8d 	bl	8010270 <uxr_create_input_best_effort_stream>
 8016356:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 801635a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 801635e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8016362:	3114      	adds	r1, #20
 8016364:	4628      	mov	r0, r5
 8016366:	f7f9 ff4f 	bl	8010208 <uxr_create_output_best_effort_stream>
 801636a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 801636e:	4628      	mov	r0, r5
 8016370:	f7fa fcda 	bl	8010d28 <uxr_create_session>
 8016374:	b1f8      	cbz	r0, 80163b6 <rmw_init+0x1ea>
 8016376:	4638      	mov	r0, r7
 8016378:	b003      	add	sp, #12
 801637a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801637e:	270b      	movs	r7, #11
 8016380:	4638      	mov	r0, r7
 8016382:	b003      	add	sp, #12
 8016384:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016388:	2701      	movs	r7, #1
 801638a:	4638      	mov	r0, r7
 801638c:	b003      	add	sp, #12
 801638e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016392:	270c      	movs	r7, #12
 8016394:	4638      	mov	r0, r7
 8016396:	b003      	add	sp, #12
 8016398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801639c:	4648      	mov	r0, r9
 801639e:	f001 f9e1 	bl	8017764 <uxr_close_custom_transport>
 80163a2:	480d      	ldr	r0, [pc, #52]	@ (80163d8 <rmw_init+0x20c>)
 80163a4:	4621      	mov	r1, r4
 80163a6:	f7ff fdbb 	bl	8015f20 <put_memory>
 80163aa:	4638      	mov	r0, r7
 80163ac:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 80163b0:	b003      	add	sp, #12
 80163b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80163b6:	4648      	mov	r0, r9
 80163b8:	f001 f9d4 	bl	8017764 <uxr_close_custom_transport>
 80163bc:	4806      	ldr	r0, [pc, #24]	@ (80163d8 <rmw_init+0x20c>)
 80163be:	4621      	mov	r1, r4
 80163c0:	f7ff fdae 	bl	8015f20 <put_memory>
 80163c4:	64f7      	str	r7, [r6, #76]	@ 0x4c
 80163c6:	2701      	movs	r7, #1
 80163c8:	e7d5      	b.n	8016376 <rmw_init+0x1aa>
 80163ca:	bf00      	nop
 80163cc:	0802066c 	.word	0x0802066c
 80163d0:	20011abc 	.word	0x20011abc
 80163d4:	2000dd68 	.word	0x2000dd68
 80163d8:	20011aac 	.word	0x20011aac
 80163dc:	2000f310 	.word	0x2000f310
 80163e0:	2000d38c 	.word	0x2000d38c
 80163e4:	20011a7c 	.word	0x20011a7c
 80163e8:	20011410 	.word	0x20011410
 80163ec:	20011acc 	.word	0x20011acc
 80163f0:	2000d430 	.word	0x2000d430
 80163f4:	20011a8c 	.word	0x20011a8c
 80163f8:	2000dca0 	.word	0x2000dca0
 80163fc:	20011a9c 	.word	0x20011a9c
 8016400:	2000d1c0 	.word	0x2000d1c0
 8016404:	2000d1b0 	.word	0x2000d1b0
 8016408:	20011848 	.word	0x20011848
 801640c:	20011adc 	.word	0x20011adc
 8016410:	2000d308 	.word	0x2000d308
 8016414:	20011a6c 	.word	0x20011a6c
 8016418:	200119ec 	.word	0x200119ec
 801641c:	20011aec 	.word	0x20011aec
 8016420:	2000d288 	.word	0x2000d288
 8016424:	20011a5c 	.word	0x20011a5c
 8016428:	08019451 	.word	0x08019451
 801642c:	08019449 	.word	0x08019449
 8016430:	080194e9 	.word	0x080194e9
 8016434:	08019585 	.word	0x08019585

08016438 <rmw_context_fini>:
 8016438:	4b17      	ldr	r3, [pc, #92]	@ (8016498 <rmw_context_fini+0x60>)
 801643a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 801643c:	b570      	push	{r4, r5, r6, lr}
 801643e:	681c      	ldr	r4, [r3, #0]
 8016440:	4605      	mov	r5, r0
 8016442:	b334      	cbz	r4, 8016492 <rmw_context_fini+0x5a>
 8016444:	2600      	movs	r6, #0
 8016446:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801644a:	6902      	ldr	r2, [r0, #16]
 801644c:	428a      	cmp	r2, r1
 801644e:	d018      	beq.n	8016482 <rmw_context_fini+0x4a>
 8016450:	2c00      	cmp	r4, #0
 8016452:	d1f8      	bne.n	8016446 <rmw_context_fini+0xe>
 8016454:	b189      	cbz	r1, 801647a <rmw_context_fini+0x42>
 8016456:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 801645a:	789b      	ldrb	r3, [r3, #2]
 801645c:	2b01      	cmp	r3, #1
 801645e:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8016462:	bf14      	ite	ne
 8016464:	210a      	movne	r1, #10
 8016466:	2100      	moveq	r1, #0
 8016468:	f7fa fc36 	bl	8010cd8 <uxr_delete_session_retries>
 801646c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801646e:	f7f7 ffe5 	bl	800e43c <rmw_uxrce_fini_session_memory>
 8016472:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8016474:	3010      	adds	r0, #16
 8016476:	f001 f975 	bl	8017764 <uxr_close_custom_transport>
 801647a:	2300      	movs	r3, #0
 801647c:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801647e:	4630      	mov	r0, r6
 8016480:	bd70      	pop	{r4, r5, r6, pc}
 8016482:	3018      	adds	r0, #24
 8016484:	f000 f90e 	bl	80166a4 <rmw_destroy_node>
 8016488:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801648a:	4606      	mov	r6, r0
 801648c:	2c00      	cmp	r4, #0
 801648e:	d1da      	bne.n	8016446 <rmw_context_fini+0xe>
 8016490:	e7e0      	b.n	8016454 <rmw_context_fini+0x1c>
 8016492:	4626      	mov	r6, r4
 8016494:	e7de      	b.n	8016454 <rmw_context_fini+0x1c>
 8016496:	bf00      	nop
 8016498:	20011a7c 	.word	0x20011a7c

0801649c <create_topic>:
 801649c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164a0:	4605      	mov	r5, r0
 80164a2:	b084      	sub	sp, #16
 80164a4:	4822      	ldr	r0, [pc, #136]	@ (8016530 <create_topic+0x94>)
 80164a6:	460f      	mov	r7, r1
 80164a8:	4616      	mov	r6, r2
 80164aa:	f7ff fd29 	bl	8015f00 <get_memory>
 80164ae:	4604      	mov	r4, r0
 80164b0:	2800      	cmp	r0, #0
 80164b2:	d039      	beq.n	8016528 <create_topic+0x8c>
 80164b4:	692b      	ldr	r3, [r5, #16]
 80164b6:	6884      	ldr	r4, [r0, #8]
 80164b8:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8016538 <create_topic+0x9c>
 80164bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80164c0:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80164c4:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 80164c8:	1c42      	adds	r2, r0, #1
 80164ca:	2102      	movs	r1, #2
 80164cc:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 80164d0:	f7f9 fdaa 	bl	8010028 <uxr_object_id>
 80164d4:	223c      	movs	r2, #60	@ 0x3c
 80164d6:	6120      	str	r0, [r4, #16]
 80164d8:	4641      	mov	r1, r8
 80164da:	4638      	mov	r0, r7
 80164dc:	f7f8 f98c 	bl	800e7f8 <generate_topic_name>
 80164e0:	b1f0      	cbz	r0, 8016520 <create_topic+0x84>
 80164e2:	4f14      	ldr	r7, [pc, #80]	@ (8016534 <create_topic+0x98>)
 80164e4:	4630      	mov	r0, r6
 80164e6:	2264      	movs	r2, #100	@ 0x64
 80164e8:	4639      	mov	r1, r7
 80164ea:	f7f8 f955 	bl	800e798 <generate_type_name>
 80164ee:	b1b8      	cbz	r0, 8016520 <create_topic+0x84>
 80164f0:	6928      	ldr	r0, [r5, #16]
 80164f2:	2306      	movs	r3, #6
 80164f4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80164f8:	f8cd 8000 	str.w	r8, [sp]
 80164fc:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8016500:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016504:	6811      	ldr	r1, [r2, #0]
 8016506:	696b      	ldr	r3, [r5, #20]
 8016508:	6922      	ldr	r2, [r4, #16]
 801650a:	f7f9 fc09 	bl	800fd20 <uxr_buffer_create_topic_bin>
 801650e:	4602      	mov	r2, r0
 8016510:	6928      	ldr	r0, [r5, #16]
 8016512:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8016516:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801651a:	f7f8 f907 	bl	800e72c <run_xrce_session>
 801651e:	b918      	cbnz	r0, 8016528 <create_topic+0x8c>
 8016520:	4620      	mov	r0, r4
 8016522:	f7f8 f801 	bl	800e528 <rmw_uxrce_fini_topic_memory>
 8016526:	2400      	movs	r4, #0
 8016528:	4620      	mov	r0, r4
 801652a:	b004      	add	sp, #16
 801652c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016530:	20011adc 	.word	0x20011adc
 8016534:	20011bc8 	.word	0x20011bc8
 8016538:	20011b8c 	.word	0x20011b8c

0801653c <destroy_topic>:
 801653c:	b538      	push	{r3, r4, r5, lr}
 801653e:	6985      	ldr	r5, [r0, #24]
 8016540:	b1d5      	cbz	r5, 8016578 <destroy_topic+0x3c>
 8016542:	4604      	mov	r4, r0
 8016544:	6928      	ldr	r0, [r5, #16]
 8016546:	6922      	ldr	r2, [r4, #16]
 8016548:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801654c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016550:	6819      	ldr	r1, [r3, #0]
 8016552:	f7f9 fb67 	bl	800fc24 <uxr_buffer_delete_entity>
 8016556:	4602      	mov	r2, r0
 8016558:	6928      	ldr	r0, [r5, #16]
 801655a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801655e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016562:	f7f8 f8e3 	bl	800e72c <run_xrce_session>
 8016566:	2800      	cmp	r0, #0
 8016568:	4620      	mov	r0, r4
 801656a:	bf14      	ite	ne
 801656c:	2400      	movne	r4, #0
 801656e:	2402      	moveq	r4, #2
 8016570:	f7f7 ffda 	bl	800e528 <rmw_uxrce_fini_topic_memory>
 8016574:	4620      	mov	r0, r4
 8016576:	bd38      	pop	{r3, r4, r5, pc}
 8016578:	2401      	movs	r4, #1
 801657a:	4620      	mov	r0, r4
 801657c:	bd38      	pop	{r3, r4, r5, pc}
 801657e:	bf00      	nop

08016580 <create_node>:
 8016580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016584:	b083      	sub	sp, #12
 8016586:	2b00      	cmp	r3, #0
 8016588:	d05f      	beq.n	801664a <create_node+0xca>
 801658a:	4606      	mov	r6, r0
 801658c:	4835      	ldr	r0, [pc, #212]	@ (8016664 <create_node+0xe4>)
 801658e:	460f      	mov	r7, r1
 8016590:	4690      	mov	r8, r2
 8016592:	461d      	mov	r5, r3
 8016594:	f7ff fcb4 	bl	8015f00 <get_memory>
 8016598:	2800      	cmp	r0, #0
 801659a:	d056      	beq.n	801664a <create_node+0xca>
 801659c:	6884      	ldr	r4, [r0, #8]
 801659e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80165a0:	6123      	str	r3, [r4, #16]
 80165a2:	f7ff fd15 	bl	8015fd0 <rmw_get_implementation_identifier>
 80165a6:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 80165aa:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80165ae:	f8c4 9020 	str.w	r9, [r4, #32]
 80165b2:	4630      	mov	r0, r6
 80165b4:	f7e9 fe74 	bl	80002a0 <strlen>
 80165b8:	1c42      	adds	r2, r0, #1
 80165ba:	2a3c      	cmp	r2, #60	@ 0x3c
 80165bc:	f104 0518 	add.w	r5, r4, #24
 80165c0:	d840      	bhi.n	8016644 <create_node+0xc4>
 80165c2:	4648      	mov	r0, r9
 80165c4:	4631      	mov	r1, r6
 80165c6:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 80165ca:	f004 fd14 	bl	801aff6 <memcpy>
 80165ce:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 80165d2:	4638      	mov	r0, r7
 80165d4:	f7e9 fe64 	bl	80002a0 <strlen>
 80165d8:	1c42      	adds	r2, r0, #1
 80165da:	2a3c      	cmp	r2, #60	@ 0x3c
 80165dc:	d832      	bhi.n	8016644 <create_node+0xc4>
 80165de:	4639      	mov	r1, r7
 80165e0:	4648      	mov	r0, r9
 80165e2:	f004 fd08 	bl	801aff6 <memcpy>
 80165e6:	6923      	ldr	r3, [r4, #16]
 80165e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80165ec:	2101      	movs	r1, #1
 80165ee:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 80165f2:	1842      	adds	r2, r0, r1
 80165f4:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 80165f8:	f7f9 fd16 	bl	8010028 <uxr_object_id>
 80165fc:	6160      	str	r0, [r4, #20]
 80165fe:	783b      	ldrb	r3, [r7, #0]
 8016600:	2b2f      	cmp	r3, #47	@ 0x2f
 8016602:	d127      	bne.n	8016654 <create_node+0xd4>
 8016604:	787b      	ldrb	r3, [r7, #1]
 8016606:	bb2b      	cbnz	r3, 8016654 <create_node+0xd4>
 8016608:	4a17      	ldr	r2, [pc, #92]	@ (8016668 <create_node+0xe8>)
 801660a:	4818      	ldr	r0, [pc, #96]	@ (801666c <create_node+0xec>)
 801660c:	4633      	mov	r3, r6
 801660e:	213c      	movs	r1, #60	@ 0x3c
 8016610:	f004 fa14 	bl	801aa3c <sniprintf>
 8016614:	6920      	ldr	r0, [r4, #16]
 8016616:	4915      	ldr	r1, [pc, #84]	@ (801666c <create_node+0xec>)
 8016618:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801661c:	9100      	str	r1, [sp, #0]
 801661e:	2106      	movs	r1, #6
 8016620:	9101      	str	r1, [sp, #4]
 8016622:	6811      	ldr	r1, [r2, #0]
 8016624:	6962      	ldr	r2, [r4, #20]
 8016626:	fa1f f388 	uxth.w	r3, r8
 801662a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801662e:	f7f9 fb45 	bl	800fcbc <uxr_buffer_create_participant_bin>
 8016632:	4602      	mov	r2, r0
 8016634:	6920      	ldr	r0, [r4, #16]
 8016636:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801663a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801663e:	f7f8 f875 	bl	800e72c <run_xrce_session>
 8016642:	b918      	cbnz	r0, 801664c <create_node+0xcc>
 8016644:	4628      	mov	r0, r5
 8016646:	f7f7 feff 	bl	800e448 <rmw_uxrce_fini_node_memory>
 801664a:	2500      	movs	r5, #0
 801664c:	4628      	mov	r0, r5
 801664e:	b003      	add	sp, #12
 8016650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016654:	4a06      	ldr	r2, [pc, #24]	@ (8016670 <create_node+0xf0>)
 8016656:	9600      	str	r6, [sp, #0]
 8016658:	463b      	mov	r3, r7
 801665a:	213c      	movs	r1, #60	@ 0x3c
 801665c:	4803      	ldr	r0, [pc, #12]	@ (801666c <create_node+0xec>)
 801665e:	f004 f9ed 	bl	801aa3c <sniprintf>
 8016662:	e7d7      	b.n	8016614 <create_node+0x94>
 8016664:	20011a7c 	.word	0x20011a7c
 8016668:	0801ff4c 	.word	0x0801ff4c
 801666c:	20011c2c 	.word	0x20011c2c
 8016670:	080200dc 	.word	0x080200dc

08016674 <rmw_create_node>:
 8016674:	b199      	cbz	r1, 801669e <rmw_create_node+0x2a>
 8016676:	780b      	ldrb	r3, [r1, #0]
 8016678:	468c      	mov	ip, r1
 801667a:	b183      	cbz	r3, 801669e <rmw_create_node+0x2a>
 801667c:	b410      	push	{r4}
 801667e:	4614      	mov	r4, r2
 8016680:	b14a      	cbz	r2, 8016696 <rmw_create_node+0x22>
 8016682:	7813      	ldrb	r3, [r2, #0]
 8016684:	b13b      	cbz	r3, 8016696 <rmw_create_node+0x22>
 8016686:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8016688:	4603      	mov	r3, r0
 801668a:	4621      	mov	r1, r4
 801668c:	4660      	mov	r0, ip
 801668e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016692:	f7ff bf75 	b.w	8016580 <create_node>
 8016696:	2000      	movs	r0, #0
 8016698:	f85d 4b04 	ldr.w	r4, [sp], #4
 801669c:	4770      	bx	lr
 801669e:	2000      	movs	r0, #0
 80166a0:	4770      	bx	lr
 80166a2:	bf00      	nop

080166a4 <rmw_destroy_node>:
 80166a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166a6:	b328      	cbz	r0, 80166f4 <rmw_destroy_node+0x50>
 80166a8:	4607      	mov	r7, r0
 80166aa:	6800      	ldr	r0, [r0, #0]
 80166ac:	b120      	cbz	r0, 80166b8 <rmw_destroy_node+0x14>
 80166ae:	4b36      	ldr	r3, [pc, #216]	@ (8016788 <rmw_destroy_node+0xe4>)
 80166b0:	6819      	ldr	r1, [r3, #0]
 80166b2:	f7e9 fd95 	bl	80001e0 <strcmp>
 80166b6:	b9e8      	cbnz	r0, 80166f4 <rmw_destroy_node+0x50>
 80166b8:	687d      	ldr	r5, [r7, #4]
 80166ba:	b1dd      	cbz	r5, 80166f4 <rmw_destroy_node+0x50>
 80166bc:	4b33      	ldr	r3, [pc, #204]	@ (801678c <rmw_destroy_node+0xe8>)
 80166be:	681c      	ldr	r4, [r3, #0]
 80166c0:	2c00      	cmp	r4, #0
 80166c2:	d05f      	beq.n	8016784 <rmw_destroy_node+0xe0>
 80166c4:	2600      	movs	r6, #0
 80166c6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80166ca:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 80166ce:	429d      	cmp	r5, r3
 80166d0:	d013      	beq.n	80166fa <rmw_destroy_node+0x56>
 80166d2:	2c00      	cmp	r4, #0
 80166d4:	d1f7      	bne.n	80166c6 <rmw_destroy_node+0x22>
 80166d6:	4b2e      	ldr	r3, [pc, #184]	@ (8016790 <rmw_destroy_node+0xec>)
 80166d8:	681c      	ldr	r4, [r3, #0]
 80166da:	b1c4      	cbz	r4, 801670e <rmw_destroy_node+0x6a>
 80166dc:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80166e0:	6a0b      	ldr	r3, [r1, #32]
 80166e2:	429d      	cmp	r5, r3
 80166e4:	d1f9      	bne.n	80166da <rmw_destroy_node+0x36>
 80166e6:	317c      	adds	r1, #124	@ 0x7c
 80166e8:	4638      	mov	r0, r7
 80166ea:	f000 fae5 	bl	8016cb8 <rmw_destroy_subscription>
 80166ee:	2801      	cmp	r0, #1
 80166f0:	4606      	mov	r6, r0
 80166f2:	d1f2      	bne.n	80166da <rmw_destroy_node+0x36>
 80166f4:	2601      	movs	r6, #1
 80166f6:	4630      	mov	r0, r6
 80166f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80166fa:	3184      	adds	r1, #132	@ 0x84
 80166fc:	4638      	mov	r0, r7
 80166fe:	f7f7 fceb 	bl	800e0d8 <rmw_destroy_publisher>
 8016702:	2801      	cmp	r0, #1
 8016704:	4606      	mov	r6, r0
 8016706:	d0f5      	beq.n	80166f4 <rmw_destroy_node+0x50>
 8016708:	2c00      	cmp	r4, #0
 801670a:	d1dc      	bne.n	80166c6 <rmw_destroy_node+0x22>
 801670c:	e7e3      	b.n	80166d6 <rmw_destroy_node+0x32>
 801670e:	4b21      	ldr	r3, [pc, #132]	@ (8016794 <rmw_destroy_node+0xf0>)
 8016710:	681c      	ldr	r4, [r3, #0]
 8016712:	b16c      	cbz	r4, 8016730 <rmw_destroy_node+0x8c>
 8016714:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8016718:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801671a:	429d      	cmp	r5, r3
 801671c:	d1f9      	bne.n	8016712 <rmw_destroy_node+0x6e>
 801671e:	317c      	adds	r1, #124	@ 0x7c
 8016720:	4638      	mov	r0, r7
 8016722:	f000 f993 	bl	8016a4c <rmw_destroy_service>
 8016726:	2801      	cmp	r0, #1
 8016728:	4606      	mov	r6, r0
 801672a:	d0e3      	beq.n	80166f4 <rmw_destroy_node+0x50>
 801672c:	2c00      	cmp	r4, #0
 801672e:	d1f1      	bne.n	8016714 <rmw_destroy_node+0x70>
 8016730:	4b19      	ldr	r3, [pc, #100]	@ (8016798 <rmw_destroy_node+0xf4>)
 8016732:	681c      	ldr	r4, [r3, #0]
 8016734:	b16c      	cbz	r4, 8016752 <rmw_destroy_node+0xae>
 8016736:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801673a:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801673c:	429d      	cmp	r5, r3
 801673e:	d1f9      	bne.n	8016734 <rmw_destroy_node+0x90>
 8016740:	317c      	adds	r1, #124	@ 0x7c
 8016742:	4638      	mov	r0, r7
 8016744:	f7ff fc00 	bl	8015f48 <rmw_destroy_client>
 8016748:	2801      	cmp	r0, #1
 801674a:	4606      	mov	r6, r0
 801674c:	d0d2      	beq.n	80166f4 <rmw_destroy_node+0x50>
 801674e:	2c00      	cmp	r4, #0
 8016750:	d1f1      	bne.n	8016736 <rmw_destroy_node+0x92>
 8016752:	6928      	ldr	r0, [r5, #16]
 8016754:	696a      	ldr	r2, [r5, #20]
 8016756:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801675a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801675e:	6819      	ldr	r1, [r3, #0]
 8016760:	f7f9 fa60 	bl	800fc24 <uxr_buffer_delete_entity>
 8016764:	4602      	mov	r2, r0
 8016766:	6928      	ldr	r0, [r5, #16]
 8016768:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801676c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016770:	f7f7 ffdc 	bl	800e72c <run_xrce_session>
 8016774:	2800      	cmp	r0, #0
 8016776:	bf08      	it	eq
 8016778:	2602      	moveq	r6, #2
 801677a:	4638      	mov	r0, r7
 801677c:	f7f7 fe64 	bl	800e448 <rmw_uxrce_fini_node_memory>
 8016780:	4630      	mov	r0, r6
 8016782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016784:	4626      	mov	r6, r4
 8016786:	e7a6      	b.n	80166d6 <rmw_destroy_node+0x32>
 8016788:	0802066c 	.word	0x0802066c
 801678c:	20011a8c 	.word	0x20011a8c
 8016790:	20011acc 	.word	0x20011acc
 8016794:	20011a9c 	.word	0x20011a9c
 8016798:	2000d1b0 	.word	0x2000d1b0

0801679c <rmw_node_get_graph_guard_condition>:
 801679c:	6843      	ldr	r3, [r0, #4]
 801679e:	6918      	ldr	r0, [r3, #16]
 80167a0:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 80167a4:	4770      	bx	lr
 80167a6:	bf00      	nop

080167a8 <rmw_send_request>:
 80167a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80167ac:	4604      	mov	r4, r0
 80167ae:	6800      	ldr	r0, [r0, #0]
 80167b0:	b08b      	sub	sp, #44	@ 0x2c
 80167b2:	460e      	mov	r6, r1
 80167b4:	4615      	mov	r5, r2
 80167b6:	b128      	cbz	r0, 80167c4 <rmw_send_request+0x1c>
 80167b8:	4b21      	ldr	r3, [pc, #132]	@ (8016840 <rmw_send_request+0x98>)
 80167ba:	6819      	ldr	r1, [r3, #0]
 80167bc:	f7e9 fd10 	bl	80001e0 <strcmp>
 80167c0:	2800      	cmp	r0, #0
 80167c2:	d139      	bne.n	8016838 <rmw_send_request+0x90>
 80167c4:	6864      	ldr	r4, [r4, #4]
 80167c6:	6963      	ldr	r3, [r4, #20]
 80167c8:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 80167cc:	689b      	ldr	r3, [r3, #8]
 80167ce:	4798      	blx	r3
 80167d0:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80167d4:	4630      	mov	r0, r6
 80167d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80167da:	4798      	blx	r3
 80167dc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80167e0:	9000      	str	r0, [sp, #0]
 80167e2:	6922      	ldr	r2, [r4, #16]
 80167e4:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80167e6:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80167ea:	ab02      	add	r3, sp, #8
 80167ec:	f7fa ff18 	bl	8011620 <uxr_prepare_output_stream>
 80167f0:	2700      	movs	r7, #0
 80167f2:	6028      	str	r0, [r5, #0]
 80167f4:	606f      	str	r7, [r5, #4]
 80167f6:	b198      	cbz	r0, 8016820 <rmw_send_request+0x78>
 80167f8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80167fc:	a902      	add	r1, sp, #8
 80167fe:	4630      	mov	r0, r6
 8016800:	4798      	blx	r3
 8016802:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8016806:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801680a:	2b01      	cmp	r3, #1
 801680c:	d00c      	beq.n	8016828 <rmw_send_request+0x80>
 801680e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8016810:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016814:	f7fa f918 	bl	8010a48 <uxr_run_session_until_confirm_delivery>
 8016818:	4638      	mov	r0, r7
 801681a:	b00b      	add	sp, #44	@ 0x2c
 801681c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016820:	2001      	movs	r0, #1
 8016822:	b00b      	add	sp, #44	@ 0x2c
 8016824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016828:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801682c:	f7f9 fd4c 	bl	80102c8 <uxr_flash_output_streams>
 8016830:	4638      	mov	r0, r7
 8016832:	b00b      	add	sp, #44	@ 0x2c
 8016834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016838:	200c      	movs	r0, #12
 801683a:	b00b      	add	sp, #44	@ 0x2c
 801683c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016840:	0802066c 	.word	0x0802066c

08016844 <rmw_take_request>:
 8016844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016848:	4605      	mov	r5, r0
 801684a:	6800      	ldr	r0, [r0, #0]
 801684c:	b089      	sub	sp, #36	@ 0x24
 801684e:	460c      	mov	r4, r1
 8016850:	4690      	mov	r8, r2
 8016852:	461e      	mov	r6, r3
 8016854:	b128      	cbz	r0, 8016862 <rmw_take_request+0x1e>
 8016856:	4b28      	ldr	r3, [pc, #160]	@ (80168f8 <rmw_take_request+0xb4>)
 8016858:	6819      	ldr	r1, [r3, #0]
 801685a:	f7e9 fcc1 	bl	80001e0 <strcmp>
 801685e:	2800      	cmp	r0, #0
 8016860:	d146      	bne.n	80168f0 <rmw_take_request+0xac>
 8016862:	b10e      	cbz	r6, 8016868 <rmw_take_request+0x24>
 8016864:	2300      	movs	r3, #0
 8016866:	7033      	strb	r3, [r6, #0]
 8016868:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801686c:	f7f7 fee0 	bl	800e630 <rmw_uxrce_clean_expired_static_input_buffer>
 8016870:	4648      	mov	r0, r9
 8016872:	f7f7 feb5 	bl	800e5e0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016876:	4607      	mov	r7, r0
 8016878:	b3b0      	cbz	r0, 80168e8 <rmw_take_request+0xa4>
 801687a:	6885      	ldr	r5, [r0, #8]
 801687c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8016880:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8016884:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8016888:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801688c:	7423      	strb	r3, [r4, #16]
 801688e:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8016892:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8016896:	74e2      	strb	r2, [r4, #19]
 8016898:	f8a4 3011 	strh.w	r3, [r4, #17]
 801689c:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 80168a0:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 80168a4:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 80168a8:	61e1      	str	r1, [r4, #28]
 80168aa:	6162      	str	r2, [r4, #20]
 80168ac:	61a3      	str	r3, [r4, #24]
 80168ae:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80168b2:	689b      	ldr	r3, [r3, #8]
 80168b4:	4798      	blx	r3
 80168b6:	6844      	ldr	r4, [r0, #4]
 80168b8:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 80168bc:	f105 0110 	add.w	r1, r5, #16
 80168c0:	4668      	mov	r0, sp
 80168c2:	f7f9 f93f 	bl	800fb44 <ucdr_init_buffer>
 80168c6:	68e3      	ldr	r3, [r4, #12]
 80168c8:	4641      	mov	r1, r8
 80168ca:	4668      	mov	r0, sp
 80168cc:	4798      	blx	r3
 80168ce:	4639      	mov	r1, r7
 80168d0:	4604      	mov	r4, r0
 80168d2:	480a      	ldr	r0, [pc, #40]	@ (80168fc <rmw_take_request+0xb8>)
 80168d4:	f7ff fb24 	bl	8015f20 <put_memory>
 80168d8:	b106      	cbz	r6, 80168dc <rmw_take_request+0x98>
 80168da:	7034      	strb	r4, [r6, #0]
 80168dc:	f084 0001 	eor.w	r0, r4, #1
 80168e0:	b2c0      	uxtb	r0, r0
 80168e2:	b009      	add	sp, #36	@ 0x24
 80168e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80168e8:	2001      	movs	r0, #1
 80168ea:	b009      	add	sp, #36	@ 0x24
 80168ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80168f0:	200c      	movs	r0, #12
 80168f2:	b009      	add	sp, #36	@ 0x24
 80168f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80168f8:	0802066c 	.word	0x0802066c
 80168fc:	20011abc 	.word	0x20011abc

08016900 <rmw_send_response>:
 8016900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016902:	4605      	mov	r5, r0
 8016904:	6800      	ldr	r0, [r0, #0]
 8016906:	b091      	sub	sp, #68	@ 0x44
 8016908:	460c      	mov	r4, r1
 801690a:	4616      	mov	r6, r2
 801690c:	b128      	cbz	r0, 801691a <rmw_send_response+0x1a>
 801690e:	4b29      	ldr	r3, [pc, #164]	@ (80169b4 <rmw_send_response+0xb4>)
 8016910:	6819      	ldr	r1, [r3, #0]
 8016912:	f7e9 fc65 	bl	80001e0 <strcmp>
 8016916:	2800      	cmp	r0, #0
 8016918:	d141      	bne.n	801699e <rmw_send_response+0x9e>
 801691a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801691e:	9306      	str	r3, [sp, #24]
 8016920:	4623      	mov	r3, r4
 8016922:	9207      	str	r2, [sp, #28]
 8016924:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016928:	686d      	ldr	r5, [r5, #4]
 801692a:	789b      	ldrb	r3, [r3, #2]
 801692c:	68a1      	ldr	r1, [r4, #8]
 801692e:	f88d 2017 	strb.w	r2, [sp, #23]
 8016932:	f88d 3016 	strb.w	r3, [sp, #22]
 8016936:	68e2      	ldr	r2, [r4, #12]
 8016938:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801693c:	6860      	ldr	r0, [r4, #4]
 801693e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016942:	ab02      	add	r3, sp, #8
 8016944:	c307      	stmia	r3!, {r0, r1, r2}
 8016946:	696b      	ldr	r3, [r5, #20]
 8016948:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801694a:	68db      	ldr	r3, [r3, #12]
 801694c:	4798      	blx	r3
 801694e:	6844      	ldr	r4, [r0, #4]
 8016950:	4630      	mov	r0, r6
 8016952:	6923      	ldr	r3, [r4, #16]
 8016954:	4798      	blx	r3
 8016956:	f100 0318 	add.w	r3, r0, #24
 801695a:	6938      	ldr	r0, [r7, #16]
 801695c:	9300      	str	r3, [sp, #0]
 801695e:	692a      	ldr	r2, [r5, #16]
 8016960:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8016962:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016966:	ab08      	add	r3, sp, #32
 8016968:	f7fa fe5a 	bl	8011620 <uxr_prepare_output_stream>
 801696c:	b910      	cbnz	r0, 8016974 <rmw_send_response+0x74>
 801696e:	2001      	movs	r0, #1
 8016970:	b011      	add	sp, #68	@ 0x44
 8016972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016974:	a902      	add	r1, sp, #8
 8016976:	a808      	add	r0, sp, #32
 8016978:	f7fb ff8a 	bl	8012890 <uxr_serialize_SampleIdentity>
 801697c:	68a3      	ldr	r3, [r4, #8]
 801697e:	a908      	add	r1, sp, #32
 8016980:	4630      	mov	r0, r6
 8016982:	4798      	blx	r3
 8016984:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8016988:	6938      	ldr	r0, [r7, #16]
 801698a:	2b01      	cmp	r3, #1
 801698c:	d00a      	beq.n	80169a4 <rmw_send_response+0xa4>
 801698e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8016990:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016994:	f7fa f858 	bl	8010a48 <uxr_run_session_until_confirm_delivery>
 8016998:	2000      	movs	r0, #0
 801699a:	b011      	add	sp, #68	@ 0x44
 801699c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801699e:	200c      	movs	r0, #12
 80169a0:	b011      	add	sp, #68	@ 0x44
 80169a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80169a4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80169a8:	f7f9 fc8e 	bl	80102c8 <uxr_flash_output_streams>
 80169ac:	2000      	movs	r0, #0
 80169ae:	b011      	add	sp, #68	@ 0x44
 80169b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80169b2:	bf00      	nop
 80169b4:	0802066c 	.word	0x0802066c

080169b8 <rmw_take_response>:
 80169b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169bc:	4604      	mov	r4, r0
 80169be:	6800      	ldr	r0, [r0, #0]
 80169c0:	b088      	sub	sp, #32
 80169c2:	4688      	mov	r8, r1
 80169c4:	4617      	mov	r7, r2
 80169c6:	461d      	mov	r5, r3
 80169c8:	b120      	cbz	r0, 80169d4 <rmw_take_response+0x1c>
 80169ca:	4b1e      	ldr	r3, [pc, #120]	@ (8016a44 <rmw_take_response+0x8c>)
 80169cc:	6819      	ldr	r1, [r3, #0]
 80169ce:	f7e9 fc07 	bl	80001e0 <strcmp>
 80169d2:	bb78      	cbnz	r0, 8016a34 <rmw_take_response+0x7c>
 80169d4:	b10d      	cbz	r5, 80169da <rmw_take_response+0x22>
 80169d6:	2300      	movs	r3, #0
 80169d8:	702b      	strb	r3, [r5, #0]
 80169da:	6864      	ldr	r4, [r4, #4]
 80169dc:	f7f7 fe28 	bl	800e630 <rmw_uxrce_clean_expired_static_input_buffer>
 80169e0:	4620      	mov	r0, r4
 80169e2:	f7f7 fdfd 	bl	800e5e0 <rmw_uxrce_find_static_input_buffer_by_owner>
 80169e6:	4606      	mov	r6, r0
 80169e8:	b340      	cbz	r0, 8016a3c <rmw_take_response+0x84>
 80169ea:	6963      	ldr	r3, [r4, #20]
 80169ec:	6884      	ldr	r4, [r0, #8]
 80169ee:	68db      	ldr	r3, [r3, #12]
 80169f0:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 80169f4:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80169f8:	e9c8 0108 	strd	r0, r1, [r8, #32]
 80169fc:	4798      	blx	r3
 80169fe:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8016a02:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8016a06:	f104 0110 	add.w	r1, r4, #16
 8016a0a:	4668      	mov	r0, sp
 8016a0c:	f7f9 f89a 	bl	800fb44 <ucdr_init_buffer>
 8016a10:	4639      	mov	r1, r7
 8016a12:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016a16:	4668      	mov	r0, sp
 8016a18:	4798      	blx	r3
 8016a1a:	4631      	mov	r1, r6
 8016a1c:	4604      	mov	r4, r0
 8016a1e:	480a      	ldr	r0, [pc, #40]	@ (8016a48 <rmw_take_response+0x90>)
 8016a20:	f7ff fa7e 	bl	8015f20 <put_memory>
 8016a24:	b105      	cbz	r5, 8016a28 <rmw_take_response+0x70>
 8016a26:	702c      	strb	r4, [r5, #0]
 8016a28:	f084 0001 	eor.w	r0, r4, #1
 8016a2c:	b2c0      	uxtb	r0, r0
 8016a2e:	b008      	add	sp, #32
 8016a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a34:	200c      	movs	r0, #12
 8016a36:	b008      	add	sp, #32
 8016a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a3c:	2001      	movs	r0, #1
 8016a3e:	b008      	add	sp, #32
 8016a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a44:	0802066c 	.word	0x0802066c
 8016a48:	20011abc 	.word	0x20011abc

08016a4c <rmw_destroy_service>:
 8016a4c:	b570      	push	{r4, r5, r6, lr}
 8016a4e:	b128      	cbz	r0, 8016a5c <rmw_destroy_service+0x10>
 8016a50:	4604      	mov	r4, r0
 8016a52:	6800      	ldr	r0, [r0, #0]
 8016a54:	460d      	mov	r5, r1
 8016a56:	f7f7 fee9 	bl	800e82c <is_uxrce_rmw_identifier_valid>
 8016a5a:	b910      	cbnz	r0, 8016a62 <rmw_destroy_service+0x16>
 8016a5c:	2401      	movs	r4, #1
 8016a5e:	4620      	mov	r0, r4
 8016a60:	bd70      	pop	{r4, r5, r6, pc}
 8016a62:	6863      	ldr	r3, [r4, #4]
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	d0f9      	beq.n	8016a5c <rmw_destroy_service+0x10>
 8016a68:	2d00      	cmp	r5, #0
 8016a6a:	d0f7      	beq.n	8016a5c <rmw_destroy_service+0x10>
 8016a6c:	6828      	ldr	r0, [r5, #0]
 8016a6e:	f7f7 fedd 	bl	800e82c <is_uxrce_rmw_identifier_valid>
 8016a72:	2800      	cmp	r0, #0
 8016a74:	d0f2      	beq.n	8016a5c <rmw_destroy_service+0x10>
 8016a76:	686e      	ldr	r6, [r5, #4]
 8016a78:	2e00      	cmp	r6, #0
 8016a7a:	d0ef      	beq.n	8016a5c <rmw_destroy_service+0x10>
 8016a7c:	6864      	ldr	r4, [r4, #4]
 8016a7e:	6932      	ldr	r2, [r6, #16]
 8016a80:	6920      	ldr	r0, [r4, #16]
 8016a82:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016a86:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016a8a:	6819      	ldr	r1, [r3, #0]
 8016a8c:	f001 fbf0 	bl	8018270 <uxr_buffer_cancel_data>
 8016a90:	4602      	mov	r2, r0
 8016a92:	6920      	ldr	r0, [r4, #16]
 8016a94:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016a98:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016a9c:	f7f7 fe46 	bl	800e72c <run_xrce_session>
 8016aa0:	6920      	ldr	r0, [r4, #16]
 8016aa2:	6932      	ldr	r2, [r6, #16]
 8016aa4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016aa8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016aac:	6819      	ldr	r1, [r3, #0]
 8016aae:	f7f9 f8b9 	bl	800fc24 <uxr_buffer_delete_entity>
 8016ab2:	4602      	mov	r2, r0
 8016ab4:	6920      	ldr	r0, [r4, #16]
 8016ab6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016aba:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016abe:	f7f7 fe35 	bl	800e72c <run_xrce_session>
 8016ac2:	2800      	cmp	r0, #0
 8016ac4:	4628      	mov	r0, r5
 8016ac6:	bf14      	ite	ne
 8016ac8:	2400      	movne	r4, #0
 8016aca:	2402      	moveq	r4, #2
 8016acc:	f7f7 fd00 	bl	800e4d0 <rmw_uxrce_fini_service_memory>
 8016ad0:	e7c5      	b.n	8016a5e <rmw_destroy_service+0x12>
 8016ad2:	bf00      	nop

08016ad4 <rmw_create_subscription>:
 8016ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ad8:	b08d      	sub	sp, #52	@ 0x34
 8016ada:	2800      	cmp	r0, #0
 8016adc:	f000 80d1 	beq.w	8016c82 <rmw_create_subscription+0x1ae>
 8016ae0:	460e      	mov	r6, r1
 8016ae2:	2900      	cmp	r1, #0
 8016ae4:	f000 80cd 	beq.w	8016c82 <rmw_create_subscription+0x1ae>
 8016ae8:	4604      	mov	r4, r0
 8016aea:	6800      	ldr	r0, [r0, #0]
 8016aec:	4615      	mov	r5, r2
 8016aee:	4698      	mov	r8, r3
 8016af0:	f7f7 fe9c 	bl	800e82c <is_uxrce_rmw_identifier_valid>
 8016af4:	2800      	cmp	r0, #0
 8016af6:	f000 80c4 	beq.w	8016c82 <rmw_create_subscription+0x1ae>
 8016afa:	2d00      	cmp	r5, #0
 8016afc:	f000 80c1 	beq.w	8016c82 <rmw_create_subscription+0x1ae>
 8016b00:	782b      	ldrb	r3, [r5, #0]
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	f000 80bd 	beq.w	8016c82 <rmw_create_subscription+0x1ae>
 8016b08:	f1b8 0f00 	cmp.w	r8, #0
 8016b0c:	f000 80b9 	beq.w	8016c82 <rmw_create_subscription+0x1ae>
 8016b10:	485e      	ldr	r0, [pc, #376]	@ (8016c8c <rmw_create_subscription+0x1b8>)
 8016b12:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8016b16:	f7ff f9f3 	bl	8015f00 <get_memory>
 8016b1a:	4604      	mov	r4, r0
 8016b1c:	2800      	cmp	r0, #0
 8016b1e:	f000 80b1 	beq.w	8016c84 <rmw_create_subscription+0x1b0>
 8016b22:	6887      	ldr	r7, [r0, #8]
 8016b24:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 8016b28:	f7ff fa52 	bl	8015fd0 <rmw_get_implementation_identifier>
 8016b2c:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 8016b30:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8016b32:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 8016b36:	4628      	mov	r0, r5
 8016b38:	f7e9 fbb2 	bl	80002a0 <strlen>
 8016b3c:	3001      	adds	r0, #1
 8016b3e:	283c      	cmp	r0, #60	@ 0x3c
 8016b40:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8016b44:	f200 8096 	bhi.w	8016c74 <rmw_create_subscription+0x1a0>
 8016b48:	4a51      	ldr	r2, [pc, #324]	@ (8016c90 <rmw_create_subscription+0x1bc>)
 8016b4a:	462b      	mov	r3, r5
 8016b4c:	213c      	movs	r1, #60	@ 0x3c
 8016b4e:	4650      	mov	r0, sl
 8016b50:	f003 ff74 	bl	801aa3c <sniprintf>
 8016b54:	4641      	mov	r1, r8
 8016b56:	f8c7 9020 	str.w	r9, [r7, #32]
 8016b5a:	2250      	movs	r2, #80	@ 0x50
 8016b5c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8016b60:	f004 fa49 	bl	801aff6 <memcpy>
 8016b64:	494b      	ldr	r1, [pc, #300]	@ (8016c94 <rmw_create_subscription+0x1c0>)
 8016b66:	4630      	mov	r0, r6
 8016b68:	f7f7 fe6e 	bl	800e848 <get_message_typesupport_handle>
 8016b6c:	2800      	cmp	r0, #0
 8016b6e:	f000 8081 	beq.w	8016c74 <rmw_create_subscription+0x1a0>
 8016b72:	6842      	ldr	r2, [r0, #4]
 8016b74:	61ba      	str	r2, [r7, #24]
 8016b76:	2a00      	cmp	r2, #0
 8016b78:	d07c      	beq.n	8016c74 <rmw_create_subscription+0x1a0>
 8016b7a:	4629      	mov	r1, r5
 8016b7c:	4643      	mov	r3, r8
 8016b7e:	4648      	mov	r0, r9
 8016b80:	f7ff fc8c 	bl	801649c <create_topic>
 8016b84:	61f8      	str	r0, [r7, #28]
 8016b86:	2800      	cmp	r0, #0
 8016b88:	d078      	beq.n	8016c7c <rmw_create_subscription+0x1a8>
 8016b8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016b8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016b92:	2104      	movs	r1, #4
 8016b94:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8016b98:	1c42      	adds	r2, r0, #1
 8016b9a:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 8016b9e:	f7f9 fa43 	bl	8010028 <uxr_object_id>
 8016ba2:	6138      	str	r0, [r7, #16]
 8016ba4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016ba8:	2506      	movs	r5, #6
 8016baa:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8016bae:	9500      	str	r5, [sp, #0]
 8016bb0:	6819      	ldr	r1, [r3, #0]
 8016bb2:	693a      	ldr	r2, [r7, #16]
 8016bb4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016bb8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016bbc:	f7f9 f916 	bl	800fdec <uxr_buffer_create_subscriber_bin>
 8016bc0:	4602      	mov	r2, r0
 8016bc2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016bc6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8016bca:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016bce:	f7f7 fdad 	bl	800e72c <run_xrce_session>
 8016bd2:	2800      	cmp	r0, #0
 8016bd4:	d04e      	beq.n	8016c74 <rmw_create_subscription+0x1a0>
 8016bd6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016bda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016bde:	4629      	mov	r1, r5
 8016be0:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8016be4:	1c42      	adds	r2, r0, #1
 8016be6:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8016bea:	f7f9 fa1d 	bl	8010028 <uxr_object_id>
 8016bee:	ae08      	add	r6, sp, #32
 8016bf0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016bf4:	69fb      	ldr	r3, [r7, #28]
 8016bf6:	6178      	str	r0, [r7, #20]
 8016bf8:	4641      	mov	r1, r8
 8016bfa:	4630      	mov	r0, r6
 8016bfc:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8016c00:	9305      	str	r3, [sp, #20]
 8016c02:	f7f7 fdaf 	bl	800e764 <convert_qos_profile>
 8016c06:	9503      	str	r5, [sp, #12]
 8016c08:	e896 0003 	ldmia.w	r6, {r0, r1}
 8016c0c:	9b05      	ldr	r3, [sp, #20]
 8016c0e:	9001      	str	r0, [sp, #4]
 8016c10:	f8ad 1008 	strh.w	r1, [sp, #8]
 8016c14:	691b      	ldr	r3, [r3, #16]
 8016c16:	9300      	str	r3, [sp, #0]
 8016c18:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 8016c1c:	f8db 1000 	ldr.w	r1, [fp]
 8016c20:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8016c24:	f7f9 f988 	bl	800ff38 <uxr_buffer_create_datareader_bin>
 8016c28:	4602      	mov	r2, r0
 8016c2a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016c2e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8016c32:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016c36:	f7f7 fd79 	bl	800e72c <run_xrce_session>
 8016c3a:	b1d8      	cbz	r0, 8016c74 <rmw_create_subscription+0x1a0>
 8016c3c:	f898 3008 	ldrb.w	r3, [r8, #8]
 8016c40:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016c44:	2b02      	cmp	r3, #2
 8016c46:	bf0c      	ite	eq
 8016c48:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8016c4c:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 8016c50:	9307      	str	r3, [sp, #28]
 8016c52:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8016c56:	2200      	movs	r2, #0
 8016c58:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 8016c5c:	ab0a      	add	r3, sp, #40	@ 0x28
 8016c5e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016c62:	9300      	str	r3, [sp, #0]
 8016c64:	697a      	ldr	r2, [r7, #20]
 8016c66:	9b07      	ldr	r3, [sp, #28]
 8016c68:	6809      	ldr	r1, [r1, #0]
 8016c6a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016c6e:	f001 fac5 	bl	80181fc <uxr_buffer_request_data>
 8016c72:	e007      	b.n	8016c84 <rmw_create_subscription+0x1b0>
 8016c74:	69f8      	ldr	r0, [r7, #28]
 8016c76:	b108      	cbz	r0, 8016c7c <rmw_create_subscription+0x1a8>
 8016c78:	f7f7 fc56 	bl	800e528 <rmw_uxrce_fini_topic_memory>
 8016c7c:	4620      	mov	r0, r4
 8016c7e:	f7f7 fc11 	bl	800e4a4 <rmw_uxrce_fini_subscription_memory>
 8016c82:	2400      	movs	r4, #0
 8016c84:	4620      	mov	r0, r4
 8016c86:	b00d      	add	sp, #52	@ 0x34
 8016c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c8c:	20011acc 	.word	0x20011acc
 8016c90:	0801ff4c 	.word	0x0801ff4c
 8016c94:	0801ff18 	.word	0x0801ff18

08016c98 <rmw_subscription_get_actual_qos>:
 8016c98:	b150      	cbz	r0, 8016cb0 <rmw_subscription_get_actual_qos+0x18>
 8016c9a:	b508      	push	{r3, lr}
 8016c9c:	460b      	mov	r3, r1
 8016c9e:	b149      	cbz	r1, 8016cb4 <rmw_subscription_get_actual_qos+0x1c>
 8016ca0:	6841      	ldr	r1, [r0, #4]
 8016ca2:	2250      	movs	r2, #80	@ 0x50
 8016ca4:	3128      	adds	r1, #40	@ 0x28
 8016ca6:	4618      	mov	r0, r3
 8016ca8:	f004 f9a5 	bl	801aff6 <memcpy>
 8016cac:	2000      	movs	r0, #0
 8016cae:	bd08      	pop	{r3, pc}
 8016cb0:	200b      	movs	r0, #11
 8016cb2:	4770      	bx	lr
 8016cb4:	200b      	movs	r0, #11
 8016cb6:	bd08      	pop	{r3, pc}

08016cb8 <rmw_destroy_subscription>:
 8016cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cba:	b128      	cbz	r0, 8016cc8 <rmw_destroy_subscription+0x10>
 8016cbc:	4604      	mov	r4, r0
 8016cbe:	6800      	ldr	r0, [r0, #0]
 8016cc0:	460d      	mov	r5, r1
 8016cc2:	f7f7 fdb3 	bl	800e82c <is_uxrce_rmw_identifier_valid>
 8016cc6:	b910      	cbnz	r0, 8016cce <rmw_destroy_subscription+0x16>
 8016cc8:	2401      	movs	r4, #1
 8016cca:	4620      	mov	r0, r4
 8016ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016cce:	6863      	ldr	r3, [r4, #4]
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d0f9      	beq.n	8016cc8 <rmw_destroy_subscription+0x10>
 8016cd4:	2d00      	cmp	r5, #0
 8016cd6:	d0f7      	beq.n	8016cc8 <rmw_destroy_subscription+0x10>
 8016cd8:	6828      	ldr	r0, [r5, #0]
 8016cda:	f7f7 fda7 	bl	800e82c <is_uxrce_rmw_identifier_valid>
 8016cde:	2800      	cmp	r0, #0
 8016ce0:	d0f2      	beq.n	8016cc8 <rmw_destroy_subscription+0x10>
 8016ce2:	686c      	ldr	r4, [r5, #4]
 8016ce4:	2c00      	cmp	r4, #0
 8016ce6:	d0ef      	beq.n	8016cc8 <rmw_destroy_subscription+0x10>
 8016ce8:	6a26      	ldr	r6, [r4, #32]
 8016cea:	6962      	ldr	r2, [r4, #20]
 8016cec:	6930      	ldr	r0, [r6, #16]
 8016cee:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016cf2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016cf6:	6819      	ldr	r1, [r3, #0]
 8016cf8:	f001 faba 	bl	8018270 <uxr_buffer_cancel_data>
 8016cfc:	4602      	mov	r2, r0
 8016cfe:	6930      	ldr	r0, [r6, #16]
 8016d00:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016d04:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016d08:	f7f7 fd10 	bl	800e72c <run_xrce_session>
 8016d0c:	69e0      	ldr	r0, [r4, #28]
 8016d0e:	f7ff fc15 	bl	801653c <destroy_topic>
 8016d12:	6a23      	ldr	r3, [r4, #32]
 8016d14:	6962      	ldr	r2, [r4, #20]
 8016d16:	6918      	ldr	r0, [r3, #16]
 8016d18:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016d1c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016d20:	6819      	ldr	r1, [r3, #0]
 8016d22:	f7f8 ff7f 	bl	800fc24 <uxr_buffer_delete_entity>
 8016d26:	6a23      	ldr	r3, [r4, #32]
 8016d28:	6922      	ldr	r2, [r4, #16]
 8016d2a:	691b      	ldr	r3, [r3, #16]
 8016d2c:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8016d30:	4604      	mov	r4, r0
 8016d32:	6809      	ldr	r1, [r1, #0]
 8016d34:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8016d38:	f7f8 ff74 	bl	800fc24 <uxr_buffer_delete_entity>
 8016d3c:	6937      	ldr	r7, [r6, #16]
 8016d3e:	4622      	mov	r2, r4
 8016d40:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8016d44:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8016d48:	4604      	mov	r4, r0
 8016d4a:	4638      	mov	r0, r7
 8016d4c:	f7f7 fcee 	bl	800e72c <run_xrce_session>
 8016d50:	6936      	ldr	r6, [r6, #16]
 8016d52:	4622      	mov	r2, r4
 8016d54:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8016d58:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8016d5c:	4604      	mov	r4, r0
 8016d5e:	4630      	mov	r0, r6
 8016d60:	f7f7 fce4 	bl	800e72c <run_xrce_session>
 8016d64:	b12c      	cbz	r4, 8016d72 <rmw_destroy_subscription+0xba>
 8016d66:	b120      	cbz	r0, 8016d72 <rmw_destroy_subscription+0xba>
 8016d68:	2400      	movs	r4, #0
 8016d6a:	4628      	mov	r0, r5
 8016d6c:	f7f7 fb9a 	bl	800e4a4 <rmw_uxrce_fini_subscription_memory>
 8016d70:	e7ab      	b.n	8016cca <rmw_destroy_subscription+0x12>
 8016d72:	2402      	movs	r4, #2
 8016d74:	e7f9      	b.n	8016d6a <rmw_destroy_subscription+0xb2>
 8016d76:	bf00      	nop

08016d78 <rmw_take_with_info>:
 8016d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d7a:	4604      	mov	r4, r0
 8016d7c:	6800      	ldr	r0, [r0, #0]
 8016d7e:	b089      	sub	sp, #36	@ 0x24
 8016d80:	460f      	mov	r7, r1
 8016d82:	4615      	mov	r5, r2
 8016d84:	b128      	cbz	r0, 8016d92 <rmw_take_with_info+0x1a>
 8016d86:	4b24      	ldr	r3, [pc, #144]	@ (8016e18 <rmw_take_with_info+0xa0>)
 8016d88:	6819      	ldr	r1, [r3, #0]
 8016d8a:	f7e9 fa29 	bl	80001e0 <strcmp>
 8016d8e:	2800      	cmp	r0, #0
 8016d90:	d13e      	bne.n	8016e10 <rmw_take_with_info+0x98>
 8016d92:	b305      	cbz	r5, 8016dd6 <rmw_take_with_info+0x5e>
 8016d94:	6864      	ldr	r4, [r4, #4]
 8016d96:	2300      	movs	r3, #0
 8016d98:	702b      	strb	r3, [r5, #0]
 8016d9a:	f7f7 fc49 	bl	800e630 <rmw_uxrce_clean_expired_static_input_buffer>
 8016d9e:	4620      	mov	r0, r4
 8016da0:	f7f7 fc1e 	bl	800e5e0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016da4:	4606      	mov	r6, r0
 8016da6:	b1f0      	cbz	r0, 8016de6 <rmw_take_with_info+0x6e>
 8016da8:	6881      	ldr	r1, [r0, #8]
 8016daa:	4668      	mov	r0, sp
 8016dac:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8016db0:	3110      	adds	r1, #16
 8016db2:	f7f8 fec7 	bl	800fb44 <ucdr_init_buffer>
 8016db6:	69a3      	ldr	r3, [r4, #24]
 8016db8:	4639      	mov	r1, r7
 8016dba:	68db      	ldr	r3, [r3, #12]
 8016dbc:	4668      	mov	r0, sp
 8016dbe:	4798      	blx	r3
 8016dc0:	4631      	mov	r1, r6
 8016dc2:	4604      	mov	r4, r0
 8016dc4:	4815      	ldr	r0, [pc, #84]	@ (8016e1c <rmw_take_with_info+0xa4>)
 8016dc6:	f7ff f8ab 	bl	8015f20 <put_memory>
 8016dca:	702c      	strb	r4, [r5, #0]
 8016dcc:	f084 0001 	eor.w	r0, r4, #1
 8016dd0:	b2c0      	uxtb	r0, r0
 8016dd2:	b009      	add	sp, #36	@ 0x24
 8016dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016dd6:	6864      	ldr	r4, [r4, #4]
 8016dd8:	f7f7 fc2a 	bl	800e630 <rmw_uxrce_clean_expired_static_input_buffer>
 8016ddc:	4620      	mov	r0, r4
 8016dde:	f7f7 fbff 	bl	800e5e0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016de2:	4605      	mov	r5, r0
 8016de4:	b910      	cbnz	r0, 8016dec <rmw_take_with_info+0x74>
 8016de6:	2001      	movs	r0, #1
 8016de8:	b009      	add	sp, #36	@ 0x24
 8016dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016dec:	68a9      	ldr	r1, [r5, #8]
 8016dee:	4668      	mov	r0, sp
 8016df0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8016df4:	3110      	adds	r1, #16
 8016df6:	f7f8 fea5 	bl	800fb44 <ucdr_init_buffer>
 8016dfa:	69a3      	ldr	r3, [r4, #24]
 8016dfc:	4639      	mov	r1, r7
 8016dfe:	68db      	ldr	r3, [r3, #12]
 8016e00:	4668      	mov	r0, sp
 8016e02:	4798      	blx	r3
 8016e04:	4629      	mov	r1, r5
 8016e06:	4604      	mov	r4, r0
 8016e08:	4804      	ldr	r0, [pc, #16]	@ (8016e1c <rmw_take_with_info+0xa4>)
 8016e0a:	f7ff f889 	bl	8015f20 <put_memory>
 8016e0e:	e7dd      	b.n	8016dcc <rmw_take_with_info+0x54>
 8016e10:	200c      	movs	r0, #12
 8016e12:	b009      	add	sp, #36	@ 0x24
 8016e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e16:	bf00      	nop
 8016e18:	0802066c 	.word	0x0802066c
 8016e1c:	20011abc 	.word	0x20011abc

08016e20 <rmw_uxrce_transport_init>:
 8016e20:	b508      	push	{r3, lr}
 8016e22:	b108      	cbz	r0, 8016e28 <rmw_uxrce_transport_init+0x8>
 8016e24:	f100 0210 	add.w	r2, r0, #16
 8016e28:	b139      	cbz	r1, 8016e3a <rmw_uxrce_transport_init+0x1a>
 8016e2a:	6949      	ldr	r1, [r1, #20]
 8016e2c:	4610      	mov	r0, r2
 8016e2e:	f000 fc65 	bl	80176fc <uxr_init_custom_transport>
 8016e32:	f080 0001 	eor.w	r0, r0, #1
 8016e36:	b2c0      	uxtb	r0, r0
 8016e38:	bd08      	pop	{r3, pc}
 8016e3a:	4b04      	ldr	r3, [pc, #16]	@ (8016e4c <rmw_uxrce_transport_init+0x2c>)
 8016e3c:	4610      	mov	r0, r2
 8016e3e:	6859      	ldr	r1, [r3, #4]
 8016e40:	f000 fc5c 	bl	80176fc <uxr_init_custom_transport>
 8016e44:	f080 0001 	eor.w	r0, r0, #1
 8016e48:	b2c0      	uxtb	r0, r0
 8016e4a:	bd08      	pop	{r3, pc}
 8016e4c:	2000d194 	.word	0x2000d194

08016e50 <rmw_wait>:
 8016e50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016e54:	b089      	sub	sp, #36	@ 0x24
 8016e56:	4605      	mov	r5, r0
 8016e58:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8016e5a:	460e      	mov	r6, r1
 8016e5c:	4698      	mov	r8, r3
 8016e5e:	4691      	mov	r9, r2
 8016e60:	2a00      	cmp	r2, #0
 8016e62:	f000 810a 	beq.w	801707a <rmw_wait+0x22a>
 8016e66:	b16c      	cbz	r4, 8016e84 <rmw_wait+0x34>
 8016e68:	4bae      	ldr	r3, [pc, #696]	@ (8017124 <rmw_wait+0x2d4>)
 8016e6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016e6c:	af04      	add	r7, sp, #16
 8016e6e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8016e72:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016e76:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016e7a:	f7fe fe75 	bl	8015b68 <rmw_time_equal>
 8016e7e:	2800      	cmp	r0, #0
 8016e80:	f000 8127 	beq.w	80170d2 <rmw_wait+0x282>
 8016e84:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8016e88:	f7f7 fbd2 	bl	800e630 <rmw_uxrce_clean_expired_static_input_buffer>
 8016e8c:	4ba6      	ldr	r3, [pc, #664]	@ (8017128 <rmw_wait+0x2d8>)
 8016e8e:	681c      	ldr	r4, [r3, #0]
 8016e90:	b14c      	cbz	r4, 8016ea6 <rmw_wait+0x56>
 8016e92:	4623      	mov	r3, r4
 8016e94:	2100      	movs	r1, #0
 8016e96:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8016e9a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016e9e:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d1f7      	bne.n	8016e96 <rmw_wait+0x46>
 8016ea6:	f1b9 0f00 	cmp.w	r9, #0
 8016eaa:	d011      	beq.n	8016ed0 <rmw_wait+0x80>
 8016eac:	f8d9 1000 	ldr.w	r1, [r9]
 8016eb0:	b171      	cbz	r1, 8016ed0 <rmw_wait+0x80>
 8016eb2:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8016eb6:	2300      	movs	r3, #0
 8016eb8:	2001      	movs	r0, #1
 8016eba:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016ebe:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8016ec0:	6912      	ldr	r2, [r2, #16]
 8016ec2:	3301      	adds	r3, #1
 8016ec4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016ec8:	4299      	cmp	r1, r3
 8016eca:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8016ece:	d1f4      	bne.n	8016eba <rmw_wait+0x6a>
 8016ed0:	f1b8 0f00 	cmp.w	r8, #0
 8016ed4:	d011      	beq.n	8016efa <rmw_wait+0xaa>
 8016ed6:	f8d8 1000 	ldr.w	r1, [r8]
 8016eda:	b171      	cbz	r1, 8016efa <rmw_wait+0xaa>
 8016edc:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8016ee0:	2300      	movs	r3, #0
 8016ee2:	2001      	movs	r0, #1
 8016ee4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016ee8:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8016eea:	6912      	ldr	r2, [r2, #16]
 8016eec:	3301      	adds	r3, #1
 8016eee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016ef2:	4299      	cmp	r1, r3
 8016ef4:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8016ef8:	d1f4      	bne.n	8016ee4 <rmw_wait+0x94>
 8016efa:	b185      	cbz	r5, 8016f1e <rmw_wait+0xce>
 8016efc:	6829      	ldr	r1, [r5, #0]
 8016efe:	b171      	cbz	r1, 8016f1e <rmw_wait+0xce>
 8016f00:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8016f04:	2300      	movs	r3, #0
 8016f06:	2001      	movs	r0, #1
 8016f08:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016f0c:	6a12      	ldr	r2, [r2, #32]
 8016f0e:	6912      	ldr	r2, [r2, #16]
 8016f10:	3301      	adds	r3, #1
 8016f12:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016f16:	4299      	cmp	r1, r3
 8016f18:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8016f1c:	d1f4      	bne.n	8016f08 <rmw_wait+0xb8>
 8016f1e:	b34c      	cbz	r4, 8016f74 <rmw_wait+0x124>
 8016f20:	4622      	mov	r2, r4
 8016f22:	2300      	movs	r3, #0
 8016f24:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8016f28:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8016f2c:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8016f30:	440b      	add	r3, r1
 8016f32:	b2db      	uxtb	r3, r3
 8016f34:	2a00      	cmp	r2, #0
 8016f36:	d1f5      	bne.n	8016f24 <rmw_wait+0xd4>
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	f000 8084 	beq.w	8017046 <rmw_wait+0x1f6>
 8016f3e:	1c7a      	adds	r2, r7, #1
 8016f40:	d00d      	beq.n	8016f5e <rmw_wait+0x10e>
 8016f42:	ee07 7a90 	vmov	s15, r7
 8016f46:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8016f4a:	ee07 3a90 	vmov	s15, r3
 8016f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016f56:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8016f5a:	ee17 7a90 	vmov	r7, s15
 8016f5e:	68a0      	ldr	r0, [r4, #8]
 8016f60:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8016f64:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	f040 8090 	bne.w	801708e <rmw_wait+0x23e>
 8016f6e:	6864      	ldr	r4, [r4, #4]
 8016f70:	2c00      	cmp	r4, #0
 8016f72:	d1f4      	bne.n	8016f5e <rmw_wait+0x10e>
 8016f74:	f1b9 0f00 	cmp.w	r9, #0
 8016f78:	f000 80bc 	beq.w	80170f4 <rmw_wait+0x2a4>
 8016f7c:	f8d9 7000 	ldr.w	r7, [r9]
 8016f80:	2f00      	cmp	r7, #0
 8016f82:	f000 808e 	beq.w	80170a2 <rmw_wait+0x252>
 8016f86:	2400      	movs	r4, #0
 8016f88:	4627      	mov	r7, r4
 8016f8a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016f8e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016f92:	f7f7 fb25 	bl	800e5e0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016f96:	2800      	cmp	r0, #0
 8016f98:	d05f      	beq.n	801705a <rmw_wait+0x20a>
 8016f9a:	f8d9 3000 	ldr.w	r3, [r9]
 8016f9e:	3401      	adds	r4, #1
 8016fa0:	42a3      	cmp	r3, r4
 8016fa2:	f04f 0701 	mov.w	r7, #1
 8016fa6:	d8f0      	bhi.n	8016f8a <rmw_wait+0x13a>
 8016fa8:	f1b8 0f00 	cmp.w	r8, #0
 8016fac:	d012      	beq.n	8016fd4 <rmw_wait+0x184>
 8016fae:	f8d8 3000 	ldr.w	r3, [r8]
 8016fb2:	b17b      	cbz	r3, 8016fd4 <rmw_wait+0x184>
 8016fb4:	2400      	movs	r4, #0
 8016fb6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016fba:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016fbe:	f7f7 fb0f 	bl	800e5e0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016fc2:	2800      	cmp	r0, #0
 8016fc4:	d051      	beq.n	801706a <rmw_wait+0x21a>
 8016fc6:	f8d8 3000 	ldr.w	r3, [r8]
 8016fca:	3401      	adds	r4, #1
 8016fcc:	42a3      	cmp	r3, r4
 8016fce:	f04f 0701 	mov.w	r7, #1
 8016fd2:	d8f0      	bhi.n	8016fb6 <rmw_wait+0x166>
 8016fd4:	b1dd      	cbz	r5, 801700e <rmw_wait+0x1be>
 8016fd6:	682b      	ldr	r3, [r5, #0]
 8016fd8:	b1cb      	cbz	r3, 801700e <rmw_wait+0x1be>
 8016fda:	2400      	movs	r4, #0
 8016fdc:	686b      	ldr	r3, [r5, #4]
 8016fde:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016fe2:	f7f7 fafd 	bl	800e5e0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016fe6:	b158      	cbz	r0, 8017000 <rmw_wait+0x1b0>
 8016fe8:	682b      	ldr	r3, [r5, #0]
 8016fea:	3401      	adds	r4, #1
 8016fec:	42a3      	cmp	r3, r4
 8016fee:	d969      	bls.n	80170c4 <rmw_wait+0x274>
 8016ff0:	686b      	ldr	r3, [r5, #4]
 8016ff2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016ff6:	2701      	movs	r7, #1
 8016ff8:	f7f7 faf2 	bl	800e5e0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016ffc:	2800      	cmp	r0, #0
 8016ffe:	d1f3      	bne.n	8016fe8 <rmw_wait+0x198>
 8017000:	e9d5 3200 	ldrd	r3, r2, [r5]
 8017004:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017008:	3401      	adds	r4, #1
 801700a:	42a3      	cmp	r3, r4
 801700c:	d8e6      	bhi.n	8016fdc <rmw_wait+0x18c>
 801700e:	b1a6      	cbz	r6, 801703a <rmw_wait+0x1ea>
 8017010:	6834      	ldr	r4, [r6, #0]
 8017012:	b194      	cbz	r4, 801703a <rmw_wait+0x1ea>
 8017014:	2300      	movs	r3, #0
 8017016:	461d      	mov	r5, r3
 8017018:	e004      	b.n	8017024 <rmw_wait+0x1d4>
 801701a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801701e:	3301      	adds	r3, #1
 8017020:	42a3      	cmp	r3, r4
 8017022:	d00a      	beq.n	801703a <rmw_wait+0x1ea>
 8017024:	6870      	ldr	r0, [r6, #4]
 8017026:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801702a:	7c0a      	ldrb	r2, [r1, #16]
 801702c:	2a00      	cmp	r2, #0
 801702e:	d0f4      	beq.n	801701a <rmw_wait+0x1ca>
 8017030:	3301      	adds	r3, #1
 8017032:	42a3      	cmp	r3, r4
 8017034:	740d      	strb	r5, [r1, #16]
 8017036:	4617      	mov	r7, r2
 8017038:	d1f4      	bne.n	8017024 <rmw_wait+0x1d4>
 801703a:	2f00      	cmp	r7, #0
 801703c:	d03e      	beq.n	80170bc <rmw_wait+0x26c>
 801703e:	2000      	movs	r0, #0
 8017040:	b009      	add	sp, #36	@ 0x24
 8017042:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017046:	68a0      	ldr	r0, [r4, #8]
 8017048:	2100      	movs	r1, #0
 801704a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801704e:	f7f9 fcc1 	bl	80109d4 <uxr_run_session_timeout>
 8017052:	6864      	ldr	r4, [r4, #4]
 8017054:	2c00      	cmp	r4, #0
 8017056:	d1f6      	bne.n	8017046 <rmw_wait+0x1f6>
 8017058:	e78c      	b.n	8016f74 <rmw_wait+0x124>
 801705a:	e9d9 3200 	ldrd	r3, r2, [r9]
 801705e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017062:	3401      	adds	r4, #1
 8017064:	42a3      	cmp	r3, r4
 8017066:	d890      	bhi.n	8016f8a <rmw_wait+0x13a>
 8017068:	e79e      	b.n	8016fa8 <rmw_wait+0x158>
 801706a:	e9d8 3200 	ldrd	r3, r2, [r8]
 801706e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017072:	3401      	adds	r4, #1
 8017074:	429c      	cmp	r4, r3
 8017076:	d39e      	bcc.n	8016fb6 <rmw_wait+0x166>
 8017078:	e7ac      	b.n	8016fd4 <rmw_wait+0x184>
 801707a:	2b00      	cmp	r3, #0
 801707c:	f47f aef3 	bne.w	8016e66 <rmw_wait+0x16>
 8017080:	2800      	cmp	r0, #0
 8017082:	f47f aef0 	bne.w	8016e66 <rmw_wait+0x16>
 8017086:	2900      	cmp	r1, #0
 8017088:	f47f aeed 	bne.w	8016e66 <rmw_wait+0x16>
 801708c:	e7d7      	b.n	801703e <rmw_wait+0x1ee>
 801708e:	4639      	mov	r1, r7
 8017090:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017094:	f7f9 fcb8 	bl	8010a08 <uxr_run_session_until_data>
 8017098:	6864      	ldr	r4, [r4, #4]
 801709a:	2c00      	cmp	r4, #0
 801709c:	f47f af5f 	bne.w	8016f5e <rmw_wait+0x10e>
 80170a0:	e768      	b.n	8016f74 <rmw_wait+0x124>
 80170a2:	f1b8 0f00 	cmp.w	r8, #0
 80170a6:	d032      	beq.n	801710e <rmw_wait+0x2be>
 80170a8:	f8d8 3000 	ldr.w	r3, [r8]
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d181      	bne.n	8016fb4 <rmw_wait+0x164>
 80170b0:	461f      	mov	r7, r3
 80170b2:	2d00      	cmp	r5, #0
 80170b4:	d18f      	bne.n	8016fd6 <rmw_wait+0x186>
 80170b6:	462f      	mov	r7, r5
 80170b8:	2e00      	cmp	r6, #0
 80170ba:	d1a9      	bne.n	8017010 <rmw_wait+0x1c0>
 80170bc:	2002      	movs	r0, #2
 80170be:	b009      	add	sp, #36	@ 0x24
 80170c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80170c4:	2e00      	cmp	r6, #0
 80170c6:	d0ba      	beq.n	801703e <rmw_wait+0x1ee>
 80170c8:	6834      	ldr	r4, [r6, #0]
 80170ca:	2701      	movs	r7, #1
 80170cc:	2c00      	cmp	r4, #0
 80170ce:	d1a1      	bne.n	8017014 <rmw_wait+0x1c4>
 80170d0:	e7b5      	b.n	801703e <rmw_wait+0x1ee>
 80170d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80170d6:	f7fe fd9b 	bl	8015c10 <rmw_time_total_nsec>
 80170da:	2300      	movs	r3, #0
 80170dc:	4a13      	ldr	r2, [pc, #76]	@ (801712c <rmw_wait+0x2dc>)
 80170de:	f7e9 fe3b 	bl	8000d58 <__aeabi_uldivmod>
 80170e2:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 80170e6:	f171 0300 	sbcs.w	r3, r1, #0
 80170ea:	4607      	mov	r7, r0
 80170ec:	bfa8      	it	ge
 80170ee:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 80170f2:	e6c9      	b.n	8016e88 <rmw_wait+0x38>
 80170f4:	f1b8 0f00 	cmp.w	r8, #0
 80170f8:	d009      	beq.n	801710e <rmw_wait+0x2be>
 80170fa:	f8d8 3000 	ldr.w	r3, [r8]
 80170fe:	464f      	mov	r7, r9
 8017100:	2b00      	cmp	r3, #0
 8017102:	f47f af57 	bne.w	8016fb4 <rmw_wait+0x164>
 8017106:	2d00      	cmp	r5, #0
 8017108:	f47f af65 	bne.w	8016fd6 <rmw_wait+0x186>
 801710c:	e7d3      	b.n	80170b6 <rmw_wait+0x266>
 801710e:	b17d      	cbz	r5, 8017130 <rmw_wait+0x2e0>
 8017110:	682b      	ldr	r3, [r5, #0]
 8017112:	4647      	mov	r7, r8
 8017114:	2b00      	cmp	r3, #0
 8017116:	f47f af60 	bne.w	8016fda <rmw_wait+0x18a>
 801711a:	2e00      	cmp	r6, #0
 801711c:	f47f af78 	bne.w	8017010 <rmw_wait+0x1c0>
 8017120:	e7cc      	b.n	80170bc <rmw_wait+0x26c>
 8017122:	bf00      	nop
 8017124:	0801fd20 	.word	0x0801fd20
 8017128:	20011aac 	.word	0x20011aac
 801712c:	000f4240 	.word	0x000f4240
 8017130:	2e00      	cmp	r6, #0
 8017132:	d0c3      	beq.n	80170bc <rmw_wait+0x26c>
 8017134:	6834      	ldr	r4, [r6, #0]
 8017136:	462f      	mov	r7, r5
 8017138:	2c00      	cmp	r4, #0
 801713a:	f47f af6b 	bne.w	8017014 <rmw_wait+0x1c4>
 801713e:	e7bd      	b.n	80170bc <rmw_wait+0x26c>

08017140 <rmw_create_wait_set>:
 8017140:	b508      	push	{r3, lr}
 8017142:	4803      	ldr	r0, [pc, #12]	@ (8017150 <rmw_create_wait_set+0x10>)
 8017144:	f7fe fedc 	bl	8015f00 <get_memory>
 8017148:	b108      	cbz	r0, 801714e <rmw_create_wait_set+0xe>
 801714a:	6880      	ldr	r0, [r0, #8]
 801714c:	3010      	adds	r0, #16
 801714e:	bd08      	pop	{r3, pc}
 8017150:	20011aec 	.word	0x20011aec

08017154 <rmw_destroy_wait_set>:
 8017154:	b508      	push	{r3, lr}
 8017156:	4b08      	ldr	r3, [pc, #32]	@ (8017178 <rmw_destroy_wait_set+0x24>)
 8017158:	6819      	ldr	r1, [r3, #0]
 801715a:	b911      	cbnz	r1, 8017162 <rmw_destroy_wait_set+0xe>
 801715c:	e00a      	b.n	8017174 <rmw_destroy_wait_set+0x20>
 801715e:	6849      	ldr	r1, [r1, #4]
 8017160:	b141      	cbz	r1, 8017174 <rmw_destroy_wait_set+0x20>
 8017162:	688b      	ldr	r3, [r1, #8]
 8017164:	3310      	adds	r3, #16
 8017166:	4298      	cmp	r0, r3
 8017168:	d1f9      	bne.n	801715e <rmw_destroy_wait_set+0xa>
 801716a:	4803      	ldr	r0, [pc, #12]	@ (8017178 <rmw_destroy_wait_set+0x24>)
 801716c:	f7fe fed8 	bl	8015f20 <put_memory>
 8017170:	2000      	movs	r0, #0
 8017172:	bd08      	pop	{r3, pc}
 8017174:	2001      	movs	r0, #1
 8017176:	bd08      	pop	{r3, pc}
 8017178:	20011aec 	.word	0x20011aec

0801717c <rmw_uros_epoch_nanos>:
 801717c:	4b05      	ldr	r3, [pc, #20]	@ (8017194 <rmw_uros_epoch_nanos+0x18>)
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	b123      	cbz	r3, 801718c <rmw_uros_epoch_nanos+0x10>
 8017182:	6898      	ldr	r0, [r3, #8]
 8017184:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017188:	f7f9 b894 	b.w	80102b4 <uxr_epoch_nanos>
 801718c:	2000      	movs	r0, #0
 801718e:	2100      	movs	r1, #0
 8017190:	4770      	bx	lr
 8017192:	bf00      	nop
 8017194:	20011aac 	.word	0x20011aac

08017198 <rosidl_runtime_c__String__init>:
 8017198:	b510      	push	{r4, lr}
 801719a:	4604      	mov	r4, r0
 801719c:	b086      	sub	sp, #24
 801719e:	b170      	cbz	r0, 80171be <rosidl_runtime_c__String__init+0x26>
 80171a0:	a801      	add	r0, sp, #4
 80171a2:	f7f6 fd8f 	bl	800dcc4 <rcutils_get_default_allocator>
 80171a6:	9b01      	ldr	r3, [sp, #4]
 80171a8:	9905      	ldr	r1, [sp, #20]
 80171aa:	2001      	movs	r0, #1
 80171ac:	4798      	blx	r3
 80171ae:	6020      	str	r0, [r4, #0]
 80171b0:	b128      	cbz	r0, 80171be <rosidl_runtime_c__String__init+0x26>
 80171b2:	2100      	movs	r1, #0
 80171b4:	2201      	movs	r2, #1
 80171b6:	7001      	strb	r1, [r0, #0]
 80171b8:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80171bc:	4610      	mov	r0, r2
 80171be:	b006      	add	sp, #24
 80171c0:	bd10      	pop	{r4, pc}
 80171c2:	bf00      	nop

080171c4 <rosidl_runtime_c__String__fini>:
 80171c4:	b320      	cbz	r0, 8017210 <rosidl_runtime_c__String__fini+0x4c>
 80171c6:	b510      	push	{r4, lr}
 80171c8:	6803      	ldr	r3, [r0, #0]
 80171ca:	b086      	sub	sp, #24
 80171cc:	4604      	mov	r4, r0
 80171ce:	b173      	cbz	r3, 80171ee <rosidl_runtime_c__String__fini+0x2a>
 80171d0:	6883      	ldr	r3, [r0, #8]
 80171d2:	b1f3      	cbz	r3, 8017212 <rosidl_runtime_c__String__fini+0x4e>
 80171d4:	a801      	add	r0, sp, #4
 80171d6:	f7f6 fd75 	bl	800dcc4 <rcutils_get_default_allocator>
 80171da:	9b02      	ldr	r3, [sp, #8]
 80171dc:	9905      	ldr	r1, [sp, #20]
 80171de:	6820      	ldr	r0, [r4, #0]
 80171e0:	4798      	blx	r3
 80171e2:	2300      	movs	r3, #0
 80171e4:	e9c4 3300 	strd	r3, r3, [r4]
 80171e8:	60a3      	str	r3, [r4, #8]
 80171ea:	b006      	add	sp, #24
 80171ec:	bd10      	pop	{r4, pc}
 80171ee:	6843      	ldr	r3, [r0, #4]
 80171f0:	b9db      	cbnz	r3, 801722a <rosidl_runtime_c__String__fini+0x66>
 80171f2:	6883      	ldr	r3, [r0, #8]
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d0f8      	beq.n	80171ea <rosidl_runtime_c__String__fini+0x26>
 80171f8:	4b12      	ldr	r3, [pc, #72]	@ (8017244 <rosidl_runtime_c__String__fini+0x80>)
 80171fa:	4813      	ldr	r0, [pc, #76]	@ (8017248 <rosidl_runtime_c__String__fini+0x84>)
 80171fc:	681b      	ldr	r3, [r3, #0]
 80171fe:	2251      	movs	r2, #81	@ 0x51
 8017200:	68db      	ldr	r3, [r3, #12]
 8017202:	2101      	movs	r1, #1
 8017204:	f003 fbfa 	bl	801a9fc <fwrite>
 8017208:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801720c:	f002 fa48 	bl	80196a0 <exit>
 8017210:	4770      	bx	lr
 8017212:	4b0c      	ldr	r3, [pc, #48]	@ (8017244 <rosidl_runtime_c__String__fini+0x80>)
 8017214:	480d      	ldr	r0, [pc, #52]	@ (801724c <rosidl_runtime_c__String__fini+0x88>)
 8017216:	681b      	ldr	r3, [r3, #0]
 8017218:	224c      	movs	r2, #76	@ 0x4c
 801721a:	68db      	ldr	r3, [r3, #12]
 801721c:	2101      	movs	r1, #1
 801721e:	f003 fbed 	bl	801a9fc <fwrite>
 8017222:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017226:	f002 fa3b 	bl	80196a0 <exit>
 801722a:	4b06      	ldr	r3, [pc, #24]	@ (8017244 <rosidl_runtime_c__String__fini+0x80>)
 801722c:	4808      	ldr	r0, [pc, #32]	@ (8017250 <rosidl_runtime_c__String__fini+0x8c>)
 801722e:	681b      	ldr	r3, [r3, #0]
 8017230:	224e      	movs	r2, #78	@ 0x4e
 8017232:	68db      	ldr	r3, [r3, #12]
 8017234:	2101      	movs	r1, #1
 8017236:	f003 fbe1 	bl	801a9fc <fwrite>
 801723a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801723e:	f002 fa2f 	bl	80196a0 <exit>
 8017242:	bf00      	nop
 8017244:	200000c8 	.word	0x200000c8
 8017248:	08020710 	.word	0x08020710
 801724c:	08020670 	.word	0x08020670
 8017250:	080206c0 	.word	0x080206c0

08017254 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8017254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017258:	6805      	ldr	r5, [r0, #0]
 801725a:	4604      	mov	r4, r0
 801725c:	4628      	mov	r0, r5
 801725e:	460e      	mov	r6, r1
 8017260:	f7e8 ffbe 	bl	80001e0 <strcmp>
 8017264:	b1c8      	cbz	r0, 801729a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8017266:	4b11      	ldr	r3, [pc, #68]	@ (80172ac <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	429d      	cmp	r5, r3
 801726c:	d112      	bne.n	8017294 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801726e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8017272:	f8d8 4000 	ldr.w	r4, [r8]
 8017276:	b16c      	cbz	r4, 8017294 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8017278:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801727c:	2700      	movs	r7, #0
 801727e:	3d04      	subs	r5, #4
 8017280:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8017284:	4631      	mov	r1, r6
 8017286:	f7e8 ffab 	bl	80001e0 <strcmp>
 801728a:	00bb      	lsls	r3, r7, #2
 801728c:	b140      	cbz	r0, 80172a0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801728e:	3701      	adds	r7, #1
 8017290:	42bc      	cmp	r4, r7
 8017292:	d1f5      	bne.n	8017280 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8017294:	2000      	movs	r0, #0
 8017296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801729a:	4620      	mov	r0, r4
 801729c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172a0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80172a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80172a8:	58d3      	ldr	r3, [r2, r3]
 80172aa:	4718      	bx	r3
 80172ac:	200000b4 	.word	0x200000b4

080172b0 <ucdr_serialize_endian_array_char>:
 80172b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172b4:	4619      	mov	r1, r3
 80172b6:	461f      	mov	r7, r3
 80172b8:	4605      	mov	r5, r0
 80172ba:	4690      	mov	r8, r2
 80172bc:	f7f8 fbee 	bl	800fa9c <ucdr_check_buffer_available_for>
 80172c0:	b9e0      	cbnz	r0, 80172fc <ucdr_serialize_endian_array_char+0x4c>
 80172c2:	463e      	mov	r6, r7
 80172c4:	e009      	b.n	80172da <ucdr_serialize_endian_array_char+0x2a>
 80172c6:	68a8      	ldr	r0, [r5, #8]
 80172c8:	f003 fe95 	bl	801aff6 <memcpy>
 80172cc:	68ab      	ldr	r3, [r5, #8]
 80172ce:	6928      	ldr	r0, [r5, #16]
 80172d0:	4423      	add	r3, r4
 80172d2:	4420      	add	r0, r4
 80172d4:	1b36      	subs	r6, r6, r4
 80172d6:	60ab      	str	r3, [r5, #8]
 80172d8:	6128      	str	r0, [r5, #16]
 80172da:	4631      	mov	r1, r6
 80172dc:	2201      	movs	r2, #1
 80172de:	4628      	mov	r0, r5
 80172e0:	f7f8 fc64 	bl	800fbac <ucdr_check_final_buffer_behavior_array>
 80172e4:	1bb9      	subs	r1, r7, r6
 80172e6:	4441      	add	r1, r8
 80172e8:	4604      	mov	r4, r0
 80172ea:	4602      	mov	r2, r0
 80172ec:	2800      	cmp	r0, #0
 80172ee:	d1ea      	bne.n	80172c6 <ucdr_serialize_endian_array_char+0x16>
 80172f0:	2301      	movs	r3, #1
 80172f2:	7da8      	ldrb	r0, [r5, #22]
 80172f4:	756b      	strb	r3, [r5, #21]
 80172f6:	4058      	eors	r0, r3
 80172f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172fc:	463a      	mov	r2, r7
 80172fe:	68a8      	ldr	r0, [r5, #8]
 8017300:	4641      	mov	r1, r8
 8017302:	f003 fe78 	bl	801aff6 <memcpy>
 8017306:	68aa      	ldr	r2, [r5, #8]
 8017308:	692b      	ldr	r3, [r5, #16]
 801730a:	443a      	add	r2, r7
 801730c:	443b      	add	r3, r7
 801730e:	60aa      	str	r2, [r5, #8]
 8017310:	612b      	str	r3, [r5, #16]
 8017312:	e7ed      	b.n	80172f0 <ucdr_serialize_endian_array_char+0x40>

08017314 <ucdr_deserialize_endian_array_char>:
 8017314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017318:	4619      	mov	r1, r3
 801731a:	461f      	mov	r7, r3
 801731c:	4605      	mov	r5, r0
 801731e:	4690      	mov	r8, r2
 8017320:	f7f8 fbbc 	bl	800fa9c <ucdr_check_buffer_available_for>
 8017324:	b9e0      	cbnz	r0, 8017360 <ucdr_deserialize_endian_array_char+0x4c>
 8017326:	463e      	mov	r6, r7
 8017328:	e009      	b.n	801733e <ucdr_deserialize_endian_array_char+0x2a>
 801732a:	68a9      	ldr	r1, [r5, #8]
 801732c:	f003 fe63 	bl	801aff6 <memcpy>
 8017330:	68ab      	ldr	r3, [r5, #8]
 8017332:	6928      	ldr	r0, [r5, #16]
 8017334:	4423      	add	r3, r4
 8017336:	4420      	add	r0, r4
 8017338:	1b36      	subs	r6, r6, r4
 801733a:	60ab      	str	r3, [r5, #8]
 801733c:	6128      	str	r0, [r5, #16]
 801733e:	2201      	movs	r2, #1
 8017340:	4631      	mov	r1, r6
 8017342:	4628      	mov	r0, r5
 8017344:	f7f8 fc32 	bl	800fbac <ucdr_check_final_buffer_behavior_array>
 8017348:	4604      	mov	r4, r0
 801734a:	1bb8      	subs	r0, r7, r6
 801734c:	4440      	add	r0, r8
 801734e:	4622      	mov	r2, r4
 8017350:	2c00      	cmp	r4, #0
 8017352:	d1ea      	bne.n	801732a <ucdr_deserialize_endian_array_char+0x16>
 8017354:	2301      	movs	r3, #1
 8017356:	7da8      	ldrb	r0, [r5, #22]
 8017358:	756b      	strb	r3, [r5, #21]
 801735a:	4058      	eors	r0, r3
 801735c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017360:	463a      	mov	r2, r7
 8017362:	68a9      	ldr	r1, [r5, #8]
 8017364:	4640      	mov	r0, r8
 8017366:	f003 fe46 	bl	801aff6 <memcpy>
 801736a:	68aa      	ldr	r2, [r5, #8]
 801736c:	692b      	ldr	r3, [r5, #16]
 801736e:	443a      	add	r2, r7
 8017370:	443b      	add	r3, r7
 8017372:	60aa      	str	r2, [r5, #8]
 8017374:	612b      	str	r3, [r5, #16]
 8017376:	e7ed      	b.n	8017354 <ucdr_deserialize_endian_array_char+0x40>

08017378 <ucdr_serialize_array_uint8_t>:
 8017378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801737c:	4688      	mov	r8, r1
 801737e:	4611      	mov	r1, r2
 8017380:	4617      	mov	r7, r2
 8017382:	4605      	mov	r5, r0
 8017384:	f7f8 fb8a 	bl	800fa9c <ucdr_check_buffer_available_for>
 8017388:	b9e0      	cbnz	r0, 80173c4 <ucdr_serialize_array_uint8_t+0x4c>
 801738a:	463e      	mov	r6, r7
 801738c:	e009      	b.n	80173a2 <ucdr_serialize_array_uint8_t+0x2a>
 801738e:	68a8      	ldr	r0, [r5, #8]
 8017390:	f003 fe31 	bl	801aff6 <memcpy>
 8017394:	68aa      	ldr	r2, [r5, #8]
 8017396:	692b      	ldr	r3, [r5, #16]
 8017398:	4422      	add	r2, r4
 801739a:	4423      	add	r3, r4
 801739c:	1b36      	subs	r6, r6, r4
 801739e:	60aa      	str	r2, [r5, #8]
 80173a0:	612b      	str	r3, [r5, #16]
 80173a2:	4631      	mov	r1, r6
 80173a4:	2201      	movs	r2, #1
 80173a6:	4628      	mov	r0, r5
 80173a8:	f7f8 fc00 	bl	800fbac <ucdr_check_final_buffer_behavior_array>
 80173ac:	1bb9      	subs	r1, r7, r6
 80173ae:	4441      	add	r1, r8
 80173b0:	4604      	mov	r4, r0
 80173b2:	4602      	mov	r2, r0
 80173b4:	2800      	cmp	r0, #0
 80173b6:	d1ea      	bne.n	801738e <ucdr_serialize_array_uint8_t+0x16>
 80173b8:	2301      	movs	r3, #1
 80173ba:	7da8      	ldrb	r0, [r5, #22]
 80173bc:	756b      	strb	r3, [r5, #21]
 80173be:	4058      	eors	r0, r3
 80173c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173c4:	463a      	mov	r2, r7
 80173c6:	68a8      	ldr	r0, [r5, #8]
 80173c8:	4641      	mov	r1, r8
 80173ca:	f003 fe14 	bl	801aff6 <memcpy>
 80173ce:	68aa      	ldr	r2, [r5, #8]
 80173d0:	692b      	ldr	r3, [r5, #16]
 80173d2:	443a      	add	r2, r7
 80173d4:	443b      	add	r3, r7
 80173d6:	60aa      	str	r2, [r5, #8]
 80173d8:	612b      	str	r3, [r5, #16]
 80173da:	e7ed      	b.n	80173b8 <ucdr_serialize_array_uint8_t+0x40>

080173dc <ucdr_serialize_endian_array_uint8_t>:
 80173dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173e0:	4619      	mov	r1, r3
 80173e2:	461f      	mov	r7, r3
 80173e4:	4605      	mov	r5, r0
 80173e6:	4690      	mov	r8, r2
 80173e8:	f7f8 fb58 	bl	800fa9c <ucdr_check_buffer_available_for>
 80173ec:	b9e0      	cbnz	r0, 8017428 <ucdr_serialize_endian_array_uint8_t+0x4c>
 80173ee:	463e      	mov	r6, r7
 80173f0:	e009      	b.n	8017406 <ucdr_serialize_endian_array_uint8_t+0x2a>
 80173f2:	68a8      	ldr	r0, [r5, #8]
 80173f4:	f003 fdff 	bl	801aff6 <memcpy>
 80173f8:	68ab      	ldr	r3, [r5, #8]
 80173fa:	6928      	ldr	r0, [r5, #16]
 80173fc:	4423      	add	r3, r4
 80173fe:	4420      	add	r0, r4
 8017400:	1b36      	subs	r6, r6, r4
 8017402:	60ab      	str	r3, [r5, #8]
 8017404:	6128      	str	r0, [r5, #16]
 8017406:	4631      	mov	r1, r6
 8017408:	2201      	movs	r2, #1
 801740a:	4628      	mov	r0, r5
 801740c:	f7f8 fbce 	bl	800fbac <ucdr_check_final_buffer_behavior_array>
 8017410:	1bb9      	subs	r1, r7, r6
 8017412:	4441      	add	r1, r8
 8017414:	4604      	mov	r4, r0
 8017416:	4602      	mov	r2, r0
 8017418:	2800      	cmp	r0, #0
 801741a:	d1ea      	bne.n	80173f2 <ucdr_serialize_endian_array_uint8_t+0x16>
 801741c:	2301      	movs	r3, #1
 801741e:	7da8      	ldrb	r0, [r5, #22]
 8017420:	756b      	strb	r3, [r5, #21]
 8017422:	4058      	eors	r0, r3
 8017424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017428:	463a      	mov	r2, r7
 801742a:	68a8      	ldr	r0, [r5, #8]
 801742c:	4641      	mov	r1, r8
 801742e:	f003 fde2 	bl	801aff6 <memcpy>
 8017432:	68aa      	ldr	r2, [r5, #8]
 8017434:	692b      	ldr	r3, [r5, #16]
 8017436:	443a      	add	r2, r7
 8017438:	443b      	add	r3, r7
 801743a:	60aa      	str	r2, [r5, #8]
 801743c:	612b      	str	r3, [r5, #16]
 801743e:	e7ed      	b.n	801741c <ucdr_serialize_endian_array_uint8_t+0x40>

08017440 <ucdr_deserialize_array_uint8_t>:
 8017440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017444:	4688      	mov	r8, r1
 8017446:	4611      	mov	r1, r2
 8017448:	4617      	mov	r7, r2
 801744a:	4605      	mov	r5, r0
 801744c:	f7f8 fb26 	bl	800fa9c <ucdr_check_buffer_available_for>
 8017450:	b9e0      	cbnz	r0, 801748c <ucdr_deserialize_array_uint8_t+0x4c>
 8017452:	463e      	mov	r6, r7
 8017454:	e009      	b.n	801746a <ucdr_deserialize_array_uint8_t+0x2a>
 8017456:	68a9      	ldr	r1, [r5, #8]
 8017458:	f003 fdcd 	bl	801aff6 <memcpy>
 801745c:	68aa      	ldr	r2, [r5, #8]
 801745e:	692b      	ldr	r3, [r5, #16]
 8017460:	4422      	add	r2, r4
 8017462:	4423      	add	r3, r4
 8017464:	1b36      	subs	r6, r6, r4
 8017466:	60aa      	str	r2, [r5, #8]
 8017468:	612b      	str	r3, [r5, #16]
 801746a:	2201      	movs	r2, #1
 801746c:	4631      	mov	r1, r6
 801746e:	4628      	mov	r0, r5
 8017470:	f7f8 fb9c 	bl	800fbac <ucdr_check_final_buffer_behavior_array>
 8017474:	4604      	mov	r4, r0
 8017476:	1bb8      	subs	r0, r7, r6
 8017478:	4440      	add	r0, r8
 801747a:	4622      	mov	r2, r4
 801747c:	2c00      	cmp	r4, #0
 801747e:	d1ea      	bne.n	8017456 <ucdr_deserialize_array_uint8_t+0x16>
 8017480:	2301      	movs	r3, #1
 8017482:	7da8      	ldrb	r0, [r5, #22]
 8017484:	756b      	strb	r3, [r5, #21]
 8017486:	4058      	eors	r0, r3
 8017488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801748c:	463a      	mov	r2, r7
 801748e:	68a9      	ldr	r1, [r5, #8]
 8017490:	4640      	mov	r0, r8
 8017492:	f003 fdb0 	bl	801aff6 <memcpy>
 8017496:	68aa      	ldr	r2, [r5, #8]
 8017498:	692b      	ldr	r3, [r5, #16]
 801749a:	443a      	add	r2, r7
 801749c:	443b      	add	r3, r7
 801749e:	60aa      	str	r2, [r5, #8]
 80174a0:	612b      	str	r3, [r5, #16]
 80174a2:	e7ed      	b.n	8017480 <ucdr_deserialize_array_uint8_t+0x40>

080174a4 <ucdr_deserialize_endian_array_uint8_t>:
 80174a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174a8:	4619      	mov	r1, r3
 80174aa:	461f      	mov	r7, r3
 80174ac:	4605      	mov	r5, r0
 80174ae:	4690      	mov	r8, r2
 80174b0:	f7f8 faf4 	bl	800fa9c <ucdr_check_buffer_available_for>
 80174b4:	b9e0      	cbnz	r0, 80174f0 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 80174b6:	463e      	mov	r6, r7
 80174b8:	e009      	b.n	80174ce <ucdr_deserialize_endian_array_uint8_t+0x2a>
 80174ba:	68a9      	ldr	r1, [r5, #8]
 80174bc:	f003 fd9b 	bl	801aff6 <memcpy>
 80174c0:	68ab      	ldr	r3, [r5, #8]
 80174c2:	6928      	ldr	r0, [r5, #16]
 80174c4:	4423      	add	r3, r4
 80174c6:	4420      	add	r0, r4
 80174c8:	1b36      	subs	r6, r6, r4
 80174ca:	60ab      	str	r3, [r5, #8]
 80174cc:	6128      	str	r0, [r5, #16]
 80174ce:	2201      	movs	r2, #1
 80174d0:	4631      	mov	r1, r6
 80174d2:	4628      	mov	r0, r5
 80174d4:	f7f8 fb6a 	bl	800fbac <ucdr_check_final_buffer_behavior_array>
 80174d8:	4604      	mov	r4, r0
 80174da:	1bb8      	subs	r0, r7, r6
 80174dc:	4440      	add	r0, r8
 80174de:	4622      	mov	r2, r4
 80174e0:	2c00      	cmp	r4, #0
 80174e2:	d1ea      	bne.n	80174ba <ucdr_deserialize_endian_array_uint8_t+0x16>
 80174e4:	2301      	movs	r3, #1
 80174e6:	7da8      	ldrb	r0, [r5, #22]
 80174e8:	756b      	strb	r3, [r5, #21]
 80174ea:	4058      	eors	r0, r3
 80174ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174f0:	463a      	mov	r2, r7
 80174f2:	68a9      	ldr	r1, [r5, #8]
 80174f4:	4640      	mov	r0, r8
 80174f6:	f003 fd7e 	bl	801aff6 <memcpy>
 80174fa:	68aa      	ldr	r2, [r5, #8]
 80174fc:	692b      	ldr	r3, [r5, #16]
 80174fe:	443a      	add	r2, r7
 8017500:	443b      	add	r3, r7
 8017502:	60aa      	str	r2, [r5, #8]
 8017504:	612b      	str	r3, [r5, #16]
 8017506:	e7ed      	b.n	80174e4 <ucdr_deserialize_endian_array_uint8_t+0x40>

08017508 <ucdr_serialize_sequence_char>:
 8017508:	b570      	push	{r4, r5, r6, lr}
 801750a:	4615      	mov	r5, r2
 801750c:	460e      	mov	r6, r1
 801750e:	7d01      	ldrb	r1, [r0, #20]
 8017510:	4604      	mov	r4, r0
 8017512:	f7f7 fcf1 	bl	800eef8 <ucdr_serialize_endian_uint32_t>
 8017516:	b90d      	cbnz	r5, 801751c <ucdr_serialize_sequence_char+0x14>
 8017518:	2001      	movs	r0, #1
 801751a:	bd70      	pop	{r4, r5, r6, pc}
 801751c:	7d21      	ldrb	r1, [r4, #20]
 801751e:	462b      	mov	r3, r5
 8017520:	4632      	mov	r2, r6
 8017522:	4620      	mov	r0, r4
 8017524:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017528:	f7ff bec2 	b.w	80172b0 <ucdr_serialize_endian_array_char>

0801752c <ucdr_deserialize_sequence_char>:
 801752c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017530:	461d      	mov	r5, r3
 8017532:	4616      	mov	r6, r2
 8017534:	460f      	mov	r7, r1
 8017536:	461a      	mov	r2, r3
 8017538:	7d01      	ldrb	r1, [r0, #20]
 801753a:	4604      	mov	r4, r0
 801753c:	f7f7 fe04 	bl	800f148 <ucdr_deserialize_endian_uint32_t>
 8017540:	682b      	ldr	r3, [r5, #0]
 8017542:	429e      	cmp	r6, r3
 8017544:	bf3c      	itt	cc
 8017546:	2201      	movcc	r2, #1
 8017548:	75a2      	strbcc	r2, [r4, #22]
 801754a:	b913      	cbnz	r3, 8017552 <ucdr_deserialize_sequence_char+0x26>
 801754c:	2001      	movs	r0, #1
 801754e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017552:	7d21      	ldrb	r1, [r4, #20]
 8017554:	463a      	mov	r2, r7
 8017556:	4620      	mov	r0, r4
 8017558:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801755c:	f7ff beda 	b.w	8017314 <ucdr_deserialize_endian_array_char>

08017560 <ucdr_serialize_sequence_uint8_t>:
 8017560:	b570      	push	{r4, r5, r6, lr}
 8017562:	4615      	mov	r5, r2
 8017564:	460e      	mov	r6, r1
 8017566:	7d01      	ldrb	r1, [r0, #20]
 8017568:	4604      	mov	r4, r0
 801756a:	f7f7 fcc5 	bl	800eef8 <ucdr_serialize_endian_uint32_t>
 801756e:	b90d      	cbnz	r5, 8017574 <ucdr_serialize_sequence_uint8_t+0x14>
 8017570:	2001      	movs	r0, #1
 8017572:	bd70      	pop	{r4, r5, r6, pc}
 8017574:	7d21      	ldrb	r1, [r4, #20]
 8017576:	462b      	mov	r3, r5
 8017578:	4632      	mov	r2, r6
 801757a:	4620      	mov	r0, r4
 801757c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017580:	f7ff bf2c 	b.w	80173dc <ucdr_serialize_endian_array_uint8_t>

08017584 <ucdr_deserialize_sequence_uint8_t>:
 8017584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017588:	461d      	mov	r5, r3
 801758a:	4616      	mov	r6, r2
 801758c:	460f      	mov	r7, r1
 801758e:	461a      	mov	r2, r3
 8017590:	7d01      	ldrb	r1, [r0, #20]
 8017592:	4604      	mov	r4, r0
 8017594:	f7f7 fdd8 	bl	800f148 <ucdr_deserialize_endian_uint32_t>
 8017598:	682b      	ldr	r3, [r5, #0]
 801759a:	429e      	cmp	r6, r3
 801759c:	bf3c      	itt	cc
 801759e:	2201      	movcc	r2, #1
 80175a0:	75a2      	strbcc	r2, [r4, #22]
 80175a2:	b913      	cbnz	r3, 80175aa <ucdr_deserialize_sequence_uint8_t+0x26>
 80175a4:	2001      	movs	r0, #1
 80175a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175aa:	7d21      	ldrb	r1, [r4, #20]
 80175ac:	463a      	mov	r2, r7
 80175ae:	4620      	mov	r0, r4
 80175b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80175b4:	f7ff bf76 	b.w	80174a4 <ucdr_deserialize_endian_array_uint8_t>

080175b8 <ucdr_serialize_string>:
 80175b8:	b510      	push	{r4, lr}
 80175ba:	b082      	sub	sp, #8
 80175bc:	4604      	mov	r4, r0
 80175be:	4608      	mov	r0, r1
 80175c0:	9101      	str	r1, [sp, #4]
 80175c2:	f7e8 fe6d 	bl	80002a0 <strlen>
 80175c6:	9901      	ldr	r1, [sp, #4]
 80175c8:	1c42      	adds	r2, r0, #1
 80175ca:	4620      	mov	r0, r4
 80175cc:	b002      	add	sp, #8
 80175ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80175d2:	f7ff bf99 	b.w	8017508 <ucdr_serialize_sequence_char>
 80175d6:	bf00      	nop

080175d8 <ucdr_deserialize_string>:
 80175d8:	b500      	push	{lr}
 80175da:	b083      	sub	sp, #12
 80175dc:	ab01      	add	r3, sp, #4
 80175de:	f7ff ffa5 	bl	801752c <ucdr_deserialize_sequence_char>
 80175e2:	b003      	add	sp, #12
 80175e4:	f85d fb04 	ldr.w	pc, [sp], #4

080175e8 <get_custom_error>:
 80175e8:	4b01      	ldr	r3, [pc, #4]	@ (80175f0 <get_custom_error+0x8>)
 80175ea:	7818      	ldrb	r0, [r3, #0]
 80175ec:	4770      	bx	lr
 80175ee:	bf00      	nop
 80175f0:	20011c68 	.word	0x20011c68

080175f4 <recv_custom_msg>:
 80175f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175f8:	4693      	mov	fp, r2
 80175fa:	b089      	sub	sp, #36	@ 0x24
 80175fc:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8017600:	9305      	str	r3, [sp, #20]
 8017602:	468a      	mov	sl, r1
 8017604:	2100      	movs	r1, #0
 8017606:	4604      	mov	r4, r0
 8017608:	f88d 101e 	strb.w	r1, [sp, #30]
 801760c:	b322      	cbz	r2, 8017658 <recv_custom_msg+0x64>
 801760e:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8017612:	f10d 081f 	add.w	r8, sp, #31
 8017616:	af05      	add	r7, sp, #20
 8017618:	f10d 061e 	add.w	r6, sp, #30
 801761c:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8017620:	e002      	b.n	8017628 <recv_custom_msg+0x34>
 8017622:	9b05      	ldr	r3, [sp, #20]
 8017624:	2b00      	cmp	r3, #0
 8017626:	dd0f      	ble.n	8017648 <recv_custom_msg+0x54>
 8017628:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 801762c:	4623      	mov	r3, r4
 801762e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8017632:	e9cd 5600 	strd	r5, r6, [sp]
 8017636:	4622      	mov	r2, r4
 8017638:	4648      	mov	r0, r9
 801763a:	f001 f92d 	bl	8018898 <uxr_read_framed_msg>
 801763e:	2800      	cmp	r0, #0
 8017640:	d0ef      	beq.n	8017622 <recv_custom_msg+0x2e>
 8017642:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8017646:	b1b3      	cbz	r3, 8017676 <recv_custom_msg+0x82>
 8017648:	4b0f      	ldr	r3, [pc, #60]	@ (8017688 <recv_custom_msg+0x94>)
 801764a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801764e:	701a      	strb	r2, [r3, #0]
 8017650:	2000      	movs	r0, #0
 8017652:	b009      	add	sp, #36	@ 0x24
 8017654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017658:	f10d 021f 	add.w	r2, sp, #31
 801765c:	9200      	str	r2, [sp, #0]
 801765e:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8017662:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017666:	4601      	mov	r1, r0
 8017668:	47a8      	blx	r5
 801766a:	2800      	cmp	r0, #0
 801766c:	d0ec      	beq.n	8017648 <recv_custom_msg+0x54>
 801766e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8017672:	2b00      	cmp	r3, #0
 8017674:	d1e8      	bne.n	8017648 <recv_custom_msg+0x54>
 8017676:	f8cb 0000 	str.w	r0, [fp]
 801767a:	2001      	movs	r0, #1
 801767c:	f8ca 4000 	str.w	r4, [sl]
 8017680:	b009      	add	sp, #36	@ 0x24
 8017682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017686:	bf00      	nop
 8017688:	20011c68 	.word	0x20011c68

0801768c <send_custom_msg>:
 801768c:	b530      	push	{r4, r5, lr}
 801768e:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 8017692:	b087      	sub	sp, #28
 8017694:	4615      	mov	r5, r2
 8017696:	b974      	cbnz	r4, 80176b6 <send_custom_msg+0x2a>
 8017698:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 801769c:	f10d 0317 	add.w	r3, sp, #23
 80176a0:	47a0      	blx	r4
 80176a2:	b108      	cbz	r0, 80176a8 <send_custom_msg+0x1c>
 80176a4:	42a8      	cmp	r0, r5
 80176a6:	d015      	beq.n	80176d4 <send_custom_msg+0x48>
 80176a8:	4b0c      	ldr	r3, [pc, #48]	@ (80176dc <send_custom_msg+0x50>)
 80176aa:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80176ae:	701a      	strb	r2, [r3, #0]
 80176b0:	2000      	movs	r0, #0
 80176b2:	b007      	add	sp, #28
 80176b4:	bd30      	pop	{r4, r5, pc}
 80176b6:	460b      	mov	r3, r1
 80176b8:	2200      	movs	r2, #0
 80176ba:	f10d 0117 	add.w	r1, sp, #23
 80176be:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80176c2:	4602      	mov	r2, r0
 80176c4:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 80176c8:	9500      	str	r5, [sp, #0]
 80176ca:	f200 2002 	addw	r0, r0, #514	@ 0x202
 80176ce:	f000 feeb 	bl	80184a8 <uxr_write_framed_msg>
 80176d2:	e7e6      	b.n	80176a2 <send_custom_msg+0x16>
 80176d4:	2001      	movs	r0, #1
 80176d6:	b007      	add	sp, #28
 80176d8:	bd30      	pop	{r4, r5, pc}
 80176da:	bf00      	nop
 80176dc:	20011c68 	.word	0x20011c68

080176e0 <uxr_set_custom_transport_callbacks>:
 80176e0:	b410      	push	{r4}
 80176e2:	9c01      	ldr	r4, [sp, #4]
 80176e4:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 80176e8:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 80176ec:	9b02      	ldr	r3, [sp, #8]
 80176ee:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 80176f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80176f6:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 80176fa:	4770      	bx	lr

080176fc <uxr_init_custom_transport>:
 80176fc:	b538      	push	{r3, r4, r5, lr}
 80176fe:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8017702:	b303      	cbz	r3, 8017746 <uxr_init_custom_transport+0x4a>
 8017704:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8017708:	4604      	mov	r4, r0
 801770a:	b1e2      	cbz	r2, 8017746 <uxr_init_custom_transport+0x4a>
 801770c:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8017710:	b1ca      	cbz	r2, 8017746 <uxr_init_custom_transport+0x4a>
 8017712:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8017716:	b1b2      	cbz	r2, 8017746 <uxr_init_custom_transport+0x4a>
 8017718:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 801771c:	4798      	blx	r3
 801771e:	4605      	mov	r5, r0
 8017720:	b188      	cbz	r0, 8017746 <uxr_init_custom_transport+0x4a>
 8017722:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8017726:	b98b      	cbnz	r3, 801774c <uxr_init_custom_transport+0x50>
 8017728:	490b      	ldr	r1, [pc, #44]	@ (8017758 <uxr_init_custom_transport+0x5c>)
 801772a:	4b0c      	ldr	r3, [pc, #48]	@ (801775c <uxr_init_custom_transport+0x60>)
 801772c:	4a0c      	ldr	r2, [pc, #48]	@ (8017760 <uxr_init_custom_transport+0x64>)
 801772e:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8017732:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017736:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 801773a:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 801773e:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8017742:	4628      	mov	r0, r5
 8017744:	bd38      	pop	{r3, r4, r5, pc}
 8017746:	2500      	movs	r5, #0
 8017748:	4628      	mov	r0, r5
 801774a:	bd38      	pop	{r3, r4, r5, pc}
 801774c:	2100      	movs	r1, #0
 801774e:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8017752:	f000 fea3 	bl	801849c <uxr_init_framing_io>
 8017756:	e7e7      	b.n	8017728 <uxr_init_custom_transport+0x2c>
 8017758:	0801768d 	.word	0x0801768d
 801775c:	080175f5 	.word	0x080175f5
 8017760:	080175e9 	.word	0x080175e9

08017764 <uxr_close_custom_transport>:
 8017764:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8017768:	4718      	bx	r3
 801776a:	bf00      	nop

0801776c <uxr_init_input_best_effort_stream>:
 801776c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017770:	8003      	strh	r3, [r0, #0]
 8017772:	4770      	bx	lr

08017774 <uxr_reset_input_best_effort_stream>:
 8017774:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017778:	8003      	strh	r3, [r0, #0]
 801777a:	4770      	bx	lr

0801777c <uxr_receive_best_effort_message>:
 801777c:	b538      	push	{r3, r4, r5, lr}
 801777e:	4604      	mov	r4, r0
 8017780:	8800      	ldrh	r0, [r0, #0]
 8017782:	460d      	mov	r5, r1
 8017784:	f000 fe72 	bl	801846c <uxr_seq_num_cmp>
 8017788:	4603      	mov	r3, r0
 801778a:	2b00      	cmp	r3, #0
 801778c:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8017790:	bfb8      	it	lt
 8017792:	8025      	strhlt	r5, [r4, #0]
 8017794:	bd38      	pop	{r3, r4, r5, pc}
 8017796:	bf00      	nop

08017798 <on_full_input_buffer>:
 8017798:	b570      	push	{r4, r5, r6, lr}
 801779a:	4605      	mov	r5, r0
 801779c:	460c      	mov	r4, r1
 801779e:	682b      	ldr	r3, [r5, #0]
 80177a0:	6809      	ldr	r1, [r1, #0]
 80177a2:	8920      	ldrh	r0, [r4, #8]
 80177a4:	6862      	ldr	r2, [r4, #4]
 80177a6:	fbb2 f2f0 	udiv	r2, r2, r0
 80177aa:	eba3 0c01 	sub.w	ip, r3, r1
 80177ae:	fbbc fcf2 	udiv	ip, ip, r2
 80177b2:	f10c 0c01 	add.w	ip, ip, #1
 80177b6:	fa1f f38c 	uxth.w	r3, ip
 80177ba:	fbb3 f6f0 	udiv	r6, r3, r0
 80177be:	fb00 3316 	mls	r3, r0, r6, r3
 80177c2:	b29b      	uxth	r3, r3
 80177c4:	fb02 f303 	mul.w	r3, r2, r3
 80177c8:	1d18      	adds	r0, r3, #4
 80177ca:	4408      	add	r0, r1
 80177cc:	7d26      	ldrb	r6, [r4, #20]
 80177ce:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80177d2:	b116      	cbz	r6, 80177da <on_full_input_buffer+0x42>
 80177d4:	2600      	movs	r6, #0
 80177d6:	f840 6c04 	str.w	r6, [r0, #-4]
 80177da:	2a03      	cmp	r2, #3
 80177dc:	d801      	bhi.n	80177e2 <on_full_input_buffer+0x4a>
 80177de:	2001      	movs	r0, #1
 80177e0:	bd70      	pop	{r4, r5, r6, pc}
 80177e2:	3308      	adds	r3, #8
 80177e4:	4419      	add	r1, r3
 80177e6:	4628      	mov	r0, r5
 80177e8:	692b      	ldr	r3, [r5, #16]
 80177ea:	3a04      	subs	r2, #4
 80177ec:	f7f8 f9a2 	bl	800fb34 <ucdr_init_buffer_origin>
 80177f0:	4628      	mov	r0, r5
 80177f2:	4903      	ldr	r1, [pc, #12]	@ (8017800 <on_full_input_buffer+0x68>)
 80177f4:	4622      	mov	r2, r4
 80177f6:	f7f8 f979 	bl	800faec <ucdr_set_on_full_buffer_callback>
 80177fa:	2000      	movs	r0, #0
 80177fc:	bd70      	pop	{r4, r5, r6, pc}
 80177fe:	bf00      	nop
 8017800:	08017799 	.word	0x08017799

08017804 <uxr_init_input_reliable_stream>:
 8017804:	b500      	push	{lr}
 8017806:	e9c0 1200 	strd	r1, r2, [r0]
 801780a:	f04f 0e00 	mov.w	lr, #0
 801780e:	9a01      	ldr	r2, [sp, #4]
 8017810:	8103      	strh	r3, [r0, #8]
 8017812:	6102      	str	r2, [r0, #16]
 8017814:	f880 e014 	strb.w	lr, [r0, #20]
 8017818:	b1d3      	cbz	r3, 8017850 <uxr_init_input_reliable_stream+0x4c>
 801781a:	f8c1 e000 	str.w	lr, [r1]
 801781e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017822:	f1bc 0f01 	cmp.w	ip, #1
 8017826:	d913      	bls.n	8017850 <uxr_init_input_reliable_stream+0x4c>
 8017828:	2301      	movs	r3, #1
 801782a:	fbb3 f1fc 	udiv	r1, r3, ip
 801782e:	fb0c 3111 	mls	r1, ip, r1, r3
 8017832:	b289      	uxth	r1, r1
 8017834:	6842      	ldr	r2, [r0, #4]
 8017836:	fbb2 f2fc 	udiv	r2, r2, ip
 801783a:	fb01 f202 	mul.w	r2, r1, r2
 801783e:	6801      	ldr	r1, [r0, #0]
 8017840:	f841 e002 	str.w	lr, [r1, r2]
 8017844:	3301      	adds	r3, #1
 8017846:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801784a:	b29b      	uxth	r3, r3
 801784c:	459c      	cmp	ip, r3
 801784e:	d8ec      	bhi.n	801782a <uxr_init_input_reliable_stream+0x26>
 8017850:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017854:	60c3      	str	r3, [r0, #12]
 8017856:	f85d fb04 	ldr.w	pc, [sp], #4
 801785a:	bf00      	nop

0801785c <uxr_reset_input_reliable_stream>:
 801785c:	8901      	ldrh	r1, [r0, #8]
 801785e:	b1e9      	cbz	r1, 801789c <uxr_reset_input_reliable_stream+0x40>
 8017860:	f04f 0c00 	mov.w	ip, #0
 8017864:	b500      	push	{lr}
 8017866:	4663      	mov	r3, ip
 8017868:	46e6      	mov	lr, ip
 801786a:	fbb3 f2f1 	udiv	r2, r3, r1
 801786e:	fb01 3312 	mls	r3, r1, r2, r3
 8017872:	b29b      	uxth	r3, r3
 8017874:	6842      	ldr	r2, [r0, #4]
 8017876:	fbb2 f2f1 	udiv	r2, r2, r1
 801787a:	fb02 f303 	mul.w	r3, r2, r3
 801787e:	6802      	ldr	r2, [r0, #0]
 8017880:	f842 e003 	str.w	lr, [r2, r3]
 8017884:	f10c 0c01 	add.w	ip, ip, #1
 8017888:	8901      	ldrh	r1, [r0, #8]
 801788a:	fa1f f38c 	uxth.w	r3, ip
 801788e:	4299      	cmp	r1, r3
 8017890:	d8eb      	bhi.n	801786a <uxr_reset_input_reliable_stream+0xe>
 8017892:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017896:	60c3      	str	r3, [r0, #12]
 8017898:	f85d fb04 	ldr.w	pc, [sp], #4
 801789c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80178a0:	60c3      	str	r3, [r0, #12]
 80178a2:	4770      	bx	lr

080178a4 <uxr_receive_reliable_message>:
 80178a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80178a8:	4604      	mov	r4, r0
 80178aa:	460d      	mov	r5, r1
 80178ac:	8901      	ldrh	r1, [r0, #8]
 80178ae:	8980      	ldrh	r0, [r0, #12]
 80178b0:	4690      	mov	r8, r2
 80178b2:	461f      	mov	r7, r3
 80178b4:	f000 fdd2 	bl	801845c <uxr_seq_num_add>
 80178b8:	4629      	mov	r1, r5
 80178ba:	4606      	mov	r6, r0
 80178bc:	89a0      	ldrh	r0, [r4, #12]
 80178be:	f000 fdd5 	bl	801846c <uxr_seq_num_cmp>
 80178c2:	2800      	cmp	r0, #0
 80178c4:	db0a      	blt.n	80178dc <uxr_receive_reliable_message+0x38>
 80178c6:	2600      	movs	r6, #0
 80178c8:	89e0      	ldrh	r0, [r4, #14]
 80178ca:	4629      	mov	r1, r5
 80178cc:	f000 fdce 	bl	801846c <uxr_seq_num_cmp>
 80178d0:	2800      	cmp	r0, #0
 80178d2:	da00      	bge.n	80178d6 <uxr_receive_reliable_message+0x32>
 80178d4:	81e5      	strh	r5, [r4, #14]
 80178d6:	4630      	mov	r0, r6
 80178d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80178dc:	4630      	mov	r0, r6
 80178de:	4629      	mov	r1, r5
 80178e0:	f000 fdc4 	bl	801846c <uxr_seq_num_cmp>
 80178e4:	2800      	cmp	r0, #0
 80178e6:	dbee      	blt.n	80178c6 <uxr_receive_reliable_message+0x22>
 80178e8:	6923      	ldr	r3, [r4, #16]
 80178ea:	4640      	mov	r0, r8
 80178ec:	4798      	blx	r3
 80178ee:	2101      	movs	r1, #1
 80178f0:	4681      	mov	r9, r0
 80178f2:	89a0      	ldrh	r0, [r4, #12]
 80178f4:	f000 fdb2 	bl	801845c <uxr_seq_num_add>
 80178f8:	f1b9 0f00 	cmp.w	r9, #0
 80178fc:	d101      	bne.n	8017902 <uxr_receive_reliable_message+0x5e>
 80178fe:	4285      	cmp	r5, r0
 8017900:	d047      	beq.n	8017992 <uxr_receive_reliable_message+0xee>
 8017902:	8922      	ldrh	r2, [r4, #8]
 8017904:	fbb5 f0f2 	udiv	r0, r5, r2
 8017908:	fb02 5010 	mls	r0, r2, r0, r5
 801790c:	b280      	uxth	r0, r0
 801790e:	6863      	ldr	r3, [r4, #4]
 8017910:	fbb3 f3f2 	udiv	r3, r3, r2
 8017914:	fb00 f303 	mul.w	r3, r0, r3
 8017918:	6820      	ldr	r0, [r4, #0]
 801791a:	3304      	adds	r3, #4
 801791c:	4418      	add	r0, r3
 801791e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017922:	2b00      	cmp	r3, #0
 8017924:	d1cf      	bne.n	80178c6 <uxr_receive_reliable_message+0x22>
 8017926:	4641      	mov	r1, r8
 8017928:	463a      	mov	r2, r7
 801792a:	f003 fb64 	bl	801aff6 <memcpy>
 801792e:	8921      	ldrh	r1, [r4, #8]
 8017930:	fbb5 f2f1 	udiv	r2, r5, r1
 8017934:	fb01 5212 	mls	r2, r1, r2, r5
 8017938:	b292      	uxth	r2, r2
 801793a:	6863      	ldr	r3, [r4, #4]
 801793c:	fbb3 f3f1 	udiv	r3, r3, r1
 8017940:	fb02 f303 	mul.w	r3, r2, r3
 8017944:	6822      	ldr	r2, [r4, #0]
 8017946:	50d7      	str	r7, [r2, r3]
 8017948:	9a08      	ldr	r2, [sp, #32]
 801794a:	2301      	movs	r3, #1
 801794c:	7013      	strb	r3, [r2, #0]
 801794e:	f1b9 0f00 	cmp.w	r9, #0
 8017952:	d0b8      	beq.n	80178c6 <uxr_receive_reliable_message+0x22>
 8017954:	89a6      	ldrh	r6, [r4, #12]
 8017956:	4630      	mov	r0, r6
 8017958:	2101      	movs	r1, #1
 801795a:	f000 fd7f 	bl	801845c <uxr_seq_num_add>
 801795e:	8922      	ldrh	r2, [r4, #8]
 8017960:	6863      	ldr	r3, [r4, #4]
 8017962:	fbb3 f3f2 	udiv	r3, r3, r2
 8017966:	4606      	mov	r6, r0
 8017968:	fbb0 f0f2 	udiv	r0, r0, r2
 801796c:	fb02 6010 	mls	r0, r2, r0, r6
 8017970:	b280      	uxth	r0, r0
 8017972:	fb00 f303 	mul.w	r3, r0, r3
 8017976:	6820      	ldr	r0, [r4, #0]
 8017978:	3304      	adds	r3, #4
 801797a:	4418      	add	r0, r3
 801797c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017980:	2b00      	cmp	r3, #0
 8017982:	d0a0      	beq.n	80178c6 <uxr_receive_reliable_message+0x22>
 8017984:	6923      	ldr	r3, [r4, #16]
 8017986:	4798      	blx	r3
 8017988:	2802      	cmp	r0, #2
 801798a:	d008      	beq.n	801799e <uxr_receive_reliable_message+0xfa>
 801798c:	2801      	cmp	r0, #1
 801798e:	d0e2      	beq.n	8017956 <uxr_receive_reliable_message+0xb2>
 8017990:	e799      	b.n	80178c6 <uxr_receive_reliable_message+0x22>
 8017992:	9b08      	ldr	r3, [sp, #32]
 8017994:	81a5      	strh	r5, [r4, #12]
 8017996:	2601      	movs	r6, #1
 8017998:	f883 9000 	strb.w	r9, [r3]
 801799c:	e794      	b.n	80178c8 <uxr_receive_reliable_message+0x24>
 801799e:	2601      	movs	r6, #1
 80179a0:	e792      	b.n	80178c8 <uxr_receive_reliable_message+0x24>
 80179a2:	bf00      	nop

080179a4 <uxr_next_input_reliable_buffer_available>:
 80179a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80179a8:	4604      	mov	r4, r0
 80179aa:	460f      	mov	r7, r1
 80179ac:	8980      	ldrh	r0, [r0, #12]
 80179ae:	2101      	movs	r1, #1
 80179b0:	4690      	mov	r8, r2
 80179b2:	f000 fd53 	bl	801845c <uxr_seq_num_add>
 80179b6:	8922      	ldrh	r2, [r4, #8]
 80179b8:	fbb0 f6f2 	udiv	r6, r0, r2
 80179bc:	fb02 0616 	mls	r6, r2, r6, r0
 80179c0:	b2b6      	uxth	r6, r6
 80179c2:	6863      	ldr	r3, [r4, #4]
 80179c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80179c8:	fb06 f303 	mul.w	r3, r6, r3
 80179cc:	6826      	ldr	r6, [r4, #0]
 80179ce:	3304      	adds	r3, #4
 80179d0:	441e      	add	r6, r3
 80179d2:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80179d6:	f1b9 0f00 	cmp.w	r9, #0
 80179da:	d023      	beq.n	8017a24 <uxr_next_input_reliable_buffer_available+0x80>
 80179dc:	6923      	ldr	r3, [r4, #16]
 80179de:	4605      	mov	r5, r0
 80179e0:	4630      	mov	r0, r6
 80179e2:	4798      	blx	r3
 80179e4:	4682      	mov	sl, r0
 80179e6:	b300      	cbz	r0, 8017a2a <uxr_next_input_reliable_buffer_available+0x86>
 80179e8:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80179ec:	2101      	movs	r1, #1
 80179ee:	4650      	mov	r0, sl
 80179f0:	f000 fd34 	bl	801845c <uxr_seq_num_add>
 80179f4:	8921      	ldrh	r1, [r4, #8]
 80179f6:	fbb0 f2f1 	udiv	r2, r0, r1
 80179fa:	4682      	mov	sl, r0
 80179fc:	fb01 0212 	mls	r2, r1, r2, r0
 8017a00:	e9d4 0300 	ldrd	r0, r3, [r4]
 8017a04:	b292      	uxth	r2, r2
 8017a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8017a0a:	fb02 f303 	mul.w	r3, r2, r3
 8017a0e:	3304      	adds	r3, #4
 8017a10:	4418      	add	r0, r3
 8017a12:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017a16:	b12b      	cbz	r3, 8017a24 <uxr_next_input_reliable_buffer_available+0x80>
 8017a18:	6923      	ldr	r3, [r4, #16]
 8017a1a:	4798      	blx	r3
 8017a1c:	2802      	cmp	r0, #2
 8017a1e:	d01b      	beq.n	8017a58 <uxr_next_input_reliable_buffer_available+0xb4>
 8017a20:	2801      	cmp	r0, #1
 8017a22:	d0e3      	beq.n	80179ec <uxr_next_input_reliable_buffer_available+0x48>
 8017a24:	2000      	movs	r0, #0
 8017a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a2a:	464a      	mov	r2, r9
 8017a2c:	4631      	mov	r1, r6
 8017a2e:	4638      	mov	r0, r7
 8017a30:	f7f8 f888 	bl	800fb44 <ucdr_init_buffer>
 8017a34:	8921      	ldrh	r1, [r4, #8]
 8017a36:	fbb5 f2f1 	udiv	r2, r5, r1
 8017a3a:	fb01 5212 	mls	r2, r1, r2, r5
 8017a3e:	b292      	uxth	r2, r2
 8017a40:	6863      	ldr	r3, [r4, #4]
 8017a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8017a46:	fb02 f303 	mul.w	r3, r2, r3
 8017a4a:	6822      	ldr	r2, [r4, #0]
 8017a4c:	f842 a003 	str.w	sl, [r2, r3]
 8017a50:	2001      	movs	r0, #1
 8017a52:	81a5      	strh	r5, [r4, #12]
 8017a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a58:	8920      	ldrh	r0, [r4, #8]
 8017a5a:	fbb5 f3f0 	udiv	r3, r5, r0
 8017a5e:	fb00 5513 	mls	r5, r0, r3, r5
 8017a62:	b2ad      	uxth	r5, r5
 8017a64:	6863      	ldr	r3, [r4, #4]
 8017a66:	fbb3 f3f0 	udiv	r3, r3, r0
 8017a6a:	fb03 f505 	mul.w	r5, r3, r5
 8017a6e:	6823      	ldr	r3, [r4, #0]
 8017a70:	2000      	movs	r0, #0
 8017a72:	5158      	str	r0, [r3, r5]
 8017a74:	eb06 0108 	add.w	r1, r6, r8
 8017a78:	eba9 0208 	sub.w	r2, r9, r8
 8017a7c:	4638      	mov	r0, r7
 8017a7e:	f7f8 f861 	bl	800fb44 <ucdr_init_buffer>
 8017a82:	4638      	mov	r0, r7
 8017a84:	4903      	ldr	r1, [pc, #12]	@ (8017a94 <uxr_next_input_reliable_buffer_available+0xf0>)
 8017a86:	4622      	mov	r2, r4
 8017a88:	f7f8 f830 	bl	800faec <ucdr_set_on_full_buffer_callback>
 8017a8c:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8017a90:	2001      	movs	r0, #1
 8017a92:	e7c8      	b.n	8017a26 <uxr_next_input_reliable_buffer_available+0x82>
 8017a94:	08017799 	.word	0x08017799

08017a98 <uxr_process_heartbeat>:
 8017a98:	b538      	push	{r3, r4, r5, lr}
 8017a9a:	4611      	mov	r1, r2
 8017a9c:	4604      	mov	r4, r0
 8017a9e:	89c0      	ldrh	r0, [r0, #14]
 8017aa0:	4615      	mov	r5, r2
 8017aa2:	f000 fce3 	bl	801846c <uxr_seq_num_cmp>
 8017aa6:	2800      	cmp	r0, #0
 8017aa8:	bfb8      	it	lt
 8017aaa:	81e5      	strhlt	r5, [r4, #14]
 8017aac:	bd38      	pop	{r3, r4, r5, pc}
 8017aae:	bf00      	nop

08017ab0 <uxr_compute_acknack>:
 8017ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017ab4:	8903      	ldrh	r3, [r0, #8]
 8017ab6:	8985      	ldrh	r5, [r0, #12]
 8017ab8:	4604      	mov	r4, r0
 8017aba:	460e      	mov	r6, r1
 8017abc:	b1d3      	cbz	r3, 8017af4 <uxr_compute_acknack+0x44>
 8017abe:	4628      	mov	r0, r5
 8017ac0:	2701      	movs	r7, #1
 8017ac2:	e003      	b.n	8017acc <uxr_compute_acknack+0x1c>
 8017ac4:	4567      	cmp	r7, ip
 8017ac6:	d215      	bcs.n	8017af4 <uxr_compute_acknack+0x44>
 8017ac8:	89a0      	ldrh	r0, [r4, #12]
 8017aca:	3701      	adds	r7, #1
 8017acc:	b2b9      	uxth	r1, r7
 8017ace:	f000 fcc5 	bl	801845c <uxr_seq_num_add>
 8017ad2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017ad6:	fbb0 f3fc 	udiv	r3, r0, ip
 8017ada:	fb0c 0313 	mls	r3, ip, r3, r0
 8017ade:	b29a      	uxth	r2, r3
 8017ae0:	e9d4 1300 	ldrd	r1, r3, [r4]
 8017ae4:	fbb3 f3fc 	udiv	r3, r3, ip
 8017ae8:	fb02 f303 	mul.w	r3, r2, r3
 8017aec:	58cb      	ldr	r3, [r1, r3]
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	d1e8      	bne.n	8017ac4 <uxr_compute_acknack+0x14>
 8017af2:	4605      	mov	r5, r0
 8017af4:	8035      	strh	r5, [r6, #0]
 8017af6:	2101      	movs	r1, #1
 8017af8:	4628      	mov	r0, r5
 8017afa:	89e7      	ldrh	r7, [r4, #14]
 8017afc:	f000 fcb2 	bl	8018464 <uxr_seq_num_sub>
 8017b00:	4601      	mov	r1, r0
 8017b02:	4638      	mov	r0, r7
 8017b04:	f000 fcae 	bl	8018464 <uxr_seq_num_sub>
 8017b08:	4605      	mov	r5, r0
 8017b0a:	b318      	cbz	r0, 8017b54 <uxr_compute_acknack+0xa4>
 8017b0c:	f04f 0900 	mov.w	r9, #0
 8017b10:	464f      	mov	r7, r9
 8017b12:	f04f 0801 	mov.w	r8, #1
 8017b16:	fa1f f189 	uxth.w	r1, r9
 8017b1a:	8830      	ldrh	r0, [r6, #0]
 8017b1c:	f000 fc9e 	bl	801845c <uxr_seq_num_add>
 8017b20:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017b24:	fbb0 f3fc 	udiv	r3, r0, ip
 8017b28:	e9d4 1200 	ldrd	r1, r2, [r4]
 8017b2c:	fb03 001c 	mls	r0, r3, ip, r0
 8017b30:	b283      	uxth	r3, r0
 8017b32:	fbb2 f2fc 	udiv	r2, r2, ip
 8017b36:	fb02 f303 	mul.w	r3, r2, r3
 8017b3a:	fa08 f209 	lsl.w	r2, r8, r9
 8017b3e:	58cb      	ldr	r3, [r1, r3]
 8017b40:	f109 0901 	add.w	r9, r9, #1
 8017b44:	b90b      	cbnz	r3, 8017b4a <uxr_compute_acknack+0x9a>
 8017b46:	4317      	orrs	r7, r2
 8017b48:	b2bf      	uxth	r7, r7
 8017b4a:	454d      	cmp	r5, r9
 8017b4c:	d1e3      	bne.n	8017b16 <uxr_compute_acknack+0x66>
 8017b4e:	4638      	mov	r0, r7
 8017b50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017b54:	4607      	mov	r7, r0
 8017b56:	4638      	mov	r0, r7
 8017b58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08017b5c <uxr_init_output_best_effort_stream>:
 8017b5c:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8017b60:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8017b64:	6001      	str	r1, [r0, #0]
 8017b66:	7303      	strb	r3, [r0, #12]
 8017b68:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8017b6c:	4770      	bx	lr
 8017b6e:	bf00      	nop

08017b70 <uxr_reset_output_best_effort_stream>:
 8017b70:	7b02      	ldrb	r2, [r0, #12]
 8017b72:	6042      	str	r2, [r0, #4]
 8017b74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017b78:	81c3      	strh	r3, [r0, #14]
 8017b7a:	4770      	bx	lr

08017b7c <uxr_prepare_best_effort_buffer_to_write>:
 8017b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b7e:	4604      	mov	r4, r0
 8017b80:	b083      	sub	sp, #12
 8017b82:	6840      	ldr	r0, [r0, #4]
 8017b84:	460d      	mov	r5, r1
 8017b86:	4616      	mov	r6, r2
 8017b88:	f7f9 fc8a 	bl	80114a0 <uxr_submessage_padding>
 8017b8c:	6863      	ldr	r3, [r4, #4]
 8017b8e:	4418      	add	r0, r3
 8017b90:	68a3      	ldr	r3, [r4, #8]
 8017b92:	1942      	adds	r2, r0, r5
 8017b94:	4293      	cmp	r3, r2
 8017b96:	bf2c      	ite	cs
 8017b98:	2701      	movcs	r7, #1
 8017b9a:	2700      	movcc	r7, #0
 8017b9c:	d202      	bcs.n	8017ba4 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8017b9e:	4638      	mov	r0, r7
 8017ba0:	b003      	add	sp, #12
 8017ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ba4:	9000      	str	r0, [sp, #0]
 8017ba6:	6821      	ldr	r1, [r4, #0]
 8017ba8:	4630      	mov	r0, r6
 8017baa:	2300      	movs	r3, #0
 8017bac:	f7f7 ffb8 	bl	800fb20 <ucdr_init_buffer_origin_offset>
 8017bb0:	6861      	ldr	r1, [r4, #4]
 8017bb2:	4638      	mov	r0, r7
 8017bb4:	4429      	add	r1, r5
 8017bb6:	6061      	str	r1, [r4, #4]
 8017bb8:	b003      	add	sp, #12
 8017bba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017bbc <uxr_prepare_best_effort_buffer_to_send>:
 8017bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017bc0:	4604      	mov	r4, r0
 8017bc2:	461d      	mov	r5, r3
 8017bc4:	6840      	ldr	r0, [r0, #4]
 8017bc6:	7b23      	ldrb	r3, [r4, #12]
 8017bc8:	4298      	cmp	r0, r3
 8017bca:	bf8c      	ite	hi
 8017bcc:	2601      	movhi	r6, #1
 8017bce:	2600      	movls	r6, #0
 8017bd0:	d802      	bhi.n	8017bd8 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8017bd2:	4630      	mov	r0, r6
 8017bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017bd8:	4688      	mov	r8, r1
 8017bda:	89e0      	ldrh	r0, [r4, #14]
 8017bdc:	2101      	movs	r1, #1
 8017bde:	4617      	mov	r7, r2
 8017be0:	f000 fc3c 	bl	801845c <uxr_seq_num_add>
 8017be4:	6823      	ldr	r3, [r4, #0]
 8017be6:	81e0      	strh	r0, [r4, #14]
 8017be8:	8028      	strh	r0, [r5, #0]
 8017bea:	f8c8 3000 	str.w	r3, [r8]
 8017bee:	6863      	ldr	r3, [r4, #4]
 8017bf0:	603b      	str	r3, [r7, #0]
 8017bf2:	7b23      	ldrb	r3, [r4, #12]
 8017bf4:	6063      	str	r3, [r4, #4]
 8017bf6:	4630      	mov	r0, r6
 8017bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017bfc <on_full_output_buffer>:
 8017bfc:	b538      	push	{r3, r4, r5, lr}
 8017bfe:	6802      	ldr	r2, [r0, #0]
 8017c00:	460c      	mov	r4, r1
 8017c02:	6809      	ldr	r1, [r1, #0]
 8017c04:	8923      	ldrh	r3, [r4, #8]
 8017c06:	eba2 0c01 	sub.w	ip, r2, r1
 8017c0a:	6862      	ldr	r2, [r4, #4]
 8017c0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8017c10:	fbbc fcf2 	udiv	ip, ip, r2
 8017c14:	f10c 0c01 	add.w	ip, ip, #1
 8017c18:	fa1f fc8c 	uxth.w	ip, ip
 8017c1c:	fbbc fef3 	udiv	lr, ip, r3
 8017c20:	fb03 c31e 	mls	r3, r3, lr, ip
 8017c24:	b29b      	uxth	r3, r3
 8017c26:	fb02 f303 	mul.w	r3, r2, r3
 8017c2a:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8017c2e:	58ca      	ldr	r2, [r1, r3]
 8017c30:	4463      	add	r3, ip
 8017c32:	eba2 020c 	sub.w	r2, r2, ip
 8017c36:	3308      	adds	r3, #8
 8017c38:	4605      	mov	r5, r0
 8017c3a:	4419      	add	r1, r3
 8017c3c:	3a04      	subs	r2, #4
 8017c3e:	6903      	ldr	r3, [r0, #16]
 8017c40:	f7f7 ff78 	bl	800fb34 <ucdr_init_buffer_origin>
 8017c44:	4628      	mov	r0, r5
 8017c46:	4903      	ldr	r1, [pc, #12]	@ (8017c54 <on_full_output_buffer+0x58>)
 8017c48:	4622      	mov	r2, r4
 8017c4a:	f7f7 ff4f 	bl	800faec <ucdr_set_on_full_buffer_callback>
 8017c4e:	2000      	movs	r0, #0
 8017c50:	bd38      	pop	{r3, r4, r5, pc}
 8017c52:	bf00      	nop
 8017c54:	08017bfd 	.word	0x08017bfd

08017c58 <uxr_init_output_reliable_stream>:
 8017c58:	b410      	push	{r4}
 8017c5a:	f89d c004 	ldrb.w	ip, [sp, #4]
 8017c5e:	8103      	strh	r3, [r0, #8]
 8017c60:	e9c0 1200 	strd	r1, r2, [r0]
 8017c64:	f880 c00c 	strb.w	ip, [r0, #12]
 8017c68:	b1d3      	cbz	r3, 8017ca0 <uxr_init_output_reliable_stream+0x48>
 8017c6a:	f8c1 c000 	str.w	ip, [r1]
 8017c6e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017c72:	f1bc 0f01 	cmp.w	ip, #1
 8017c76:	d913      	bls.n	8017ca0 <uxr_init_output_reliable_stream+0x48>
 8017c78:	2301      	movs	r3, #1
 8017c7a:	fbb3 f1fc 	udiv	r1, r3, ip
 8017c7e:	fb0c 3111 	mls	r1, ip, r1, r3
 8017c82:	b289      	uxth	r1, r1
 8017c84:	6842      	ldr	r2, [r0, #4]
 8017c86:	6804      	ldr	r4, [r0, #0]
 8017c88:	fbb2 f2fc 	udiv	r2, r2, ip
 8017c8c:	fb01 f202 	mul.w	r2, r1, r2
 8017c90:	7b01      	ldrb	r1, [r0, #12]
 8017c92:	50a1      	str	r1, [r4, r2]
 8017c94:	3301      	adds	r3, #1
 8017c96:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017c9a:	b29b      	uxth	r3, r3
 8017c9c:	459c      	cmp	ip, r3
 8017c9e:	d8ec      	bhi.n	8017c7a <uxr_init_output_reliable_stream+0x22>
 8017ca0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017ca4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017ca8:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8017cac:	4905      	ldr	r1, [pc, #20]	@ (8017cc4 <uxr_init_output_reliable_stream+0x6c>)
 8017cae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017cb2:	f8c0 100e 	str.w	r1, [r0, #14]
 8017cb6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017cba:	2300      	movs	r3, #0
 8017cbc:	8242      	strh	r2, [r0, #18]
 8017cbe:	8403      	strh	r3, [r0, #32]
 8017cc0:	4770      	bx	lr
 8017cc2:	bf00      	nop
 8017cc4:	ffff0000 	.word	0xffff0000

08017cc8 <uxr_reset_output_reliable_stream>:
 8017cc8:	8901      	ldrh	r1, [r0, #8]
 8017cca:	b1b1      	cbz	r1, 8017cfa <uxr_reset_output_reliable_stream+0x32>
 8017ccc:	f04f 0c00 	mov.w	ip, #0
 8017cd0:	4663      	mov	r3, ip
 8017cd2:	fbb3 f2f1 	udiv	r2, r3, r1
 8017cd6:	fb01 3312 	mls	r3, r1, r2, r3
 8017cda:	b29b      	uxth	r3, r3
 8017cdc:	6842      	ldr	r2, [r0, #4]
 8017cde:	fbb2 f2f1 	udiv	r2, r2, r1
 8017ce2:	6801      	ldr	r1, [r0, #0]
 8017ce4:	fb02 f303 	mul.w	r3, r2, r3
 8017ce8:	7b02      	ldrb	r2, [r0, #12]
 8017cea:	50ca      	str	r2, [r1, r3]
 8017cec:	f10c 0c01 	add.w	ip, ip, #1
 8017cf0:	8901      	ldrh	r1, [r0, #8]
 8017cf2:	fa1f f38c 	uxth.w	r3, ip
 8017cf6:	4299      	cmp	r1, r3
 8017cf8:	d8eb      	bhi.n	8017cd2 <uxr_reset_output_reliable_stream+0xa>
 8017cfa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017cfe:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017d02:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8017d06:	4904      	ldr	r1, [pc, #16]	@ (8017d18 <uxr_reset_output_reliable_stream+0x50>)
 8017d08:	f8c0 100e 	str.w	r1, [r0, #14]
 8017d0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017d10:	2300      	movs	r3, #0
 8017d12:	8242      	strh	r2, [r0, #18]
 8017d14:	8403      	strh	r3, [r0, #32]
 8017d16:	4770      	bx	lr
 8017d18:	ffff0000 	.word	0xffff0000

08017d1c <uxr_prepare_reliable_buffer_to_write>:
 8017d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d20:	4604      	mov	r4, r0
 8017d22:	b091      	sub	sp, #68	@ 0x44
 8017d24:	8900      	ldrh	r0, [r0, #8]
 8017d26:	89e6      	ldrh	r6, [r4, #14]
 8017d28:	6823      	ldr	r3, [r4, #0]
 8017d2a:	9204      	str	r2, [sp, #16]
 8017d2c:	fbb6 f2f0 	udiv	r2, r6, r0
 8017d30:	fb00 6212 	mls	r2, r0, r2, r6
 8017d34:	b292      	uxth	r2, r2
 8017d36:	6865      	ldr	r5, [r4, #4]
 8017d38:	fbb5 f5f0 	udiv	r5, r5, r0
 8017d3c:	fb05 3202 	mla	r2, r5, r2, r3
 8017d40:	3204      	adds	r2, #4
 8017d42:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8017d46:	f894 900c 	ldrb.w	r9, [r4, #12]
 8017d4a:	9203      	str	r2, [sp, #12]
 8017d4c:	468b      	mov	fp, r1
 8017d4e:	1f2f      	subs	r7, r5, #4
 8017d50:	2800      	cmp	r0, #0
 8017d52:	f000 814c 	beq.w	8017fee <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8017d56:	f04f 0c00 	mov.w	ip, #0
 8017d5a:	46e2      	mov	sl, ip
 8017d5c:	4661      	mov	r1, ip
 8017d5e:	fbb1 f2f0 	udiv	r2, r1, r0
 8017d62:	fb00 1212 	mls	r2, r0, r2, r1
 8017d66:	b292      	uxth	r2, r2
 8017d68:	fb05 f202 	mul.w	r2, r5, r2
 8017d6c:	f10c 0c01 	add.w	ip, ip, #1
 8017d70:	589a      	ldr	r2, [r3, r2]
 8017d72:	454a      	cmp	r2, r9
 8017d74:	bf08      	it	eq
 8017d76:	f10a 0a01 	addeq.w	sl, sl, #1
 8017d7a:	fa1f f18c 	uxth.w	r1, ip
 8017d7e:	bf08      	it	eq
 8017d80:	fa1f fa8a 	uxtheq.w	sl, sl
 8017d84:	4281      	cmp	r1, r0
 8017d86:	d3ea      	bcc.n	8017d5e <uxr_prepare_reliable_buffer_to_write+0x42>
 8017d88:	4640      	mov	r0, r8
 8017d8a:	2104      	movs	r1, #4
 8017d8c:	f8cd a014 	str.w	sl, [sp, #20]
 8017d90:	f7f7 fedc 	bl	800fb4c <ucdr_alignment>
 8017d94:	4480      	add	r8, r0
 8017d96:	eb08 020b 	add.w	r2, r8, fp
 8017d9a:	42ba      	cmp	r2, r7
 8017d9c:	f240 80cd 	bls.w	8017f3a <uxr_prepare_reliable_buffer_to_write+0x21e>
 8017da0:	7b22      	ldrb	r2, [r4, #12]
 8017da2:	445a      	add	r2, fp
 8017da4:	42ba      	cmp	r2, r7
 8017da6:	f240 80b5 	bls.w	8017f14 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8017daa:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8017dae:	33fc      	adds	r3, #252	@ 0xfc
 8017db0:	b2ba      	uxth	r2, r7
 8017db2:	4413      	add	r3, r2
 8017db4:	b29b      	uxth	r3, r3
 8017db6:	fb0a f903 	mul.w	r9, sl, r3
 8017dba:	45d9      	cmp	r9, fp
 8017dbc:	9305      	str	r3, [sp, #20]
 8017dbe:	9306      	str	r3, [sp, #24]
 8017dc0:	f0c0 80b7 	bcc.w	8017f32 <uxr_prepare_reliable_buffer_to_write+0x216>
 8017dc4:	f108 0304 	add.w	r3, r8, #4
 8017dc8:	42bb      	cmp	r3, r7
 8017dca:	f080 80db 	bcs.w	8017f84 <uxr_prepare_reliable_buffer_to_write+0x268>
 8017dce:	f1a2 0904 	sub.w	r9, r2, #4
 8017dd2:	eba9 0908 	sub.w	r9, r9, r8
 8017dd6:	9b05      	ldr	r3, [sp, #20]
 8017dd8:	fa1f f989 	uxth.w	r9, r9
 8017ddc:	ebab 0b09 	sub.w	fp, fp, r9
 8017de0:	fbbb f2f3 	udiv	r2, fp, r3
 8017de4:	fb03 b312 	mls	r3, r3, r2, fp
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	f000 80c8 	beq.w	8017f7e <uxr_prepare_reliable_buffer_to_write+0x262>
 8017dee:	3201      	adds	r2, #1
 8017df0:	b292      	uxth	r2, r2
 8017df2:	9306      	str	r3, [sp, #24]
 8017df4:	4552      	cmp	r2, sl
 8017df6:	f200 809c 	bhi.w	8017f32 <uxr_prepare_reliable_buffer_to_write+0x216>
 8017dfa:	f10d 0b20 	add.w	fp, sp, #32
 8017dfe:	2a00      	cmp	r2, #0
 8017e00:	d042      	beq.n	8017e88 <uxr_prepare_reliable_buffer_to_write+0x16c>
 8017e02:	f8cd 801c 	str.w	r8, [sp, #28]
 8017e06:	f04f 0a00 	mov.w	sl, #0
 8017e0a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8017e0e:	9505      	str	r5, [sp, #20]
 8017e10:	f10d 0b20 	add.w	fp, sp, #32
 8017e14:	4615      	mov	r5, r2
 8017e16:	e000      	b.n	8017e1a <uxr_prepare_reliable_buffer_to_write+0xfe>
 8017e18:	46c1      	mov	r9, r8
 8017e1a:	8920      	ldrh	r0, [r4, #8]
 8017e1c:	fbb6 f2f0 	udiv	r2, r6, r0
 8017e20:	fb00 6112 	mls	r1, r0, r2, r6
 8017e24:	b28a      	uxth	r2, r1
 8017e26:	6863      	ldr	r3, [r4, #4]
 8017e28:	fbb3 f1f0 	udiv	r1, r3, r0
 8017e2c:	6823      	ldr	r3, [r4, #0]
 8017e2e:	fb02 f101 	mul.w	r1, r2, r1
 8017e32:	3104      	adds	r1, #4
 8017e34:	4419      	add	r1, r3
 8017e36:	4658      	mov	r0, fp
 8017e38:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8017e3c:	9200      	str	r2, [sp, #0]
 8017e3e:	2300      	movs	r3, #0
 8017e40:	463a      	mov	r2, r7
 8017e42:	f7f7 fe6d 	bl	800fb20 <ucdr_init_buffer_origin_offset>
 8017e46:	464a      	mov	r2, r9
 8017e48:	2300      	movs	r3, #0
 8017e4a:	210d      	movs	r1, #13
 8017e4c:	4658      	mov	r0, fp
 8017e4e:	f7f9 fae7 	bl	8011420 <uxr_buffer_submessage_header>
 8017e52:	8921      	ldrh	r1, [r4, #8]
 8017e54:	fbb6 f2f1 	udiv	r2, r6, r1
 8017e58:	fb01 6212 	mls	r2, r1, r2, r6
 8017e5c:	b292      	uxth	r2, r2
 8017e5e:	6863      	ldr	r3, [r4, #4]
 8017e60:	fbb3 f3f1 	udiv	r3, r3, r1
 8017e64:	fb02 f303 	mul.w	r3, r2, r3
 8017e68:	6822      	ldr	r2, [r4, #0]
 8017e6a:	4630      	mov	r0, r6
 8017e6c:	50d7      	str	r7, [r2, r3]
 8017e6e:	2101      	movs	r1, #1
 8017e70:	f000 faf4 	bl	801845c <uxr_seq_num_add>
 8017e74:	f10a 0a01 	add.w	sl, sl, #1
 8017e78:	fa1f f38a 	uxth.w	r3, sl
 8017e7c:	429d      	cmp	r5, r3
 8017e7e:	4606      	mov	r6, r0
 8017e80:	d8ca      	bhi.n	8017e18 <uxr_prepare_reliable_buffer_to_write+0xfc>
 8017e82:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8017e86:	9d05      	ldr	r5, [sp, #20]
 8017e88:	8920      	ldrh	r0, [r4, #8]
 8017e8a:	fbb6 f3f0 	udiv	r3, r6, r0
 8017e8e:	fb00 6313 	mls	r3, r0, r3, r6
 8017e92:	b299      	uxth	r1, r3
 8017e94:	6863      	ldr	r3, [r4, #4]
 8017e96:	fbb3 f3f0 	udiv	r3, r3, r0
 8017e9a:	fb01 f303 	mul.w	r3, r1, r3
 8017e9e:	6821      	ldr	r1, [r4, #0]
 8017ea0:	3304      	adds	r3, #4
 8017ea2:	4419      	add	r1, r3
 8017ea4:	463a      	mov	r2, r7
 8017ea6:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8017eaa:	9000      	str	r0, [sp, #0]
 8017eac:	2300      	movs	r3, #0
 8017eae:	4658      	mov	r0, fp
 8017eb0:	f7f7 fe36 	bl	800fb20 <ucdr_init_buffer_origin_offset>
 8017eb4:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8017eb8:	4658      	mov	r0, fp
 8017eba:	fa1f f289 	uxth.w	r2, r9
 8017ebe:	2302      	movs	r3, #2
 8017ec0:	210d      	movs	r1, #13
 8017ec2:	f7f9 faad 	bl	8011420 <uxr_buffer_submessage_header>
 8017ec6:	9b03      	ldr	r3, [sp, #12]
 8017ec8:	8927      	ldrh	r7, [r4, #8]
 8017eca:	7b20      	ldrb	r0, [r4, #12]
 8017ecc:	f108 0104 	add.w	r1, r8, #4
 8017ed0:	440b      	add	r3, r1
 8017ed2:	4619      	mov	r1, r3
 8017ed4:	fbb6 f3f7 	udiv	r3, r6, r7
 8017ed8:	fb07 6313 	mls	r3, r7, r3, r6
 8017edc:	f1a5 0208 	sub.w	r2, r5, #8
 8017ee0:	b29d      	uxth	r5, r3
 8017ee2:	3004      	adds	r0, #4
 8017ee4:	6863      	ldr	r3, [r4, #4]
 8017ee6:	fbb3 f3f7 	udiv	r3, r3, r7
 8017eea:	fb05 f303 	mul.w	r3, r5, r3
 8017eee:	6825      	ldr	r5, [r4, #0]
 8017ef0:	4448      	add	r0, r9
 8017ef2:	50e8      	str	r0, [r5, r3]
 8017ef4:	9d04      	ldr	r5, [sp, #16]
 8017ef6:	eba2 0208 	sub.w	r2, r2, r8
 8017efa:	4628      	mov	r0, r5
 8017efc:	f7f7 fe22 	bl	800fb44 <ucdr_init_buffer>
 8017f00:	4628      	mov	r0, r5
 8017f02:	493c      	ldr	r1, [pc, #240]	@ (8017ff4 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8017f04:	4622      	mov	r2, r4
 8017f06:	f7f7 fdf1 	bl	800faec <ucdr_set_on_full_buffer_callback>
 8017f0a:	2001      	movs	r0, #1
 8017f0c:	81e6      	strh	r6, [r4, #14]
 8017f0e:	b011      	add	sp, #68	@ 0x44
 8017f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f14:	2101      	movs	r1, #1
 8017f16:	89e0      	ldrh	r0, [r4, #14]
 8017f18:	f000 faa0 	bl	801845c <uxr_seq_num_add>
 8017f1c:	8921      	ldrh	r1, [r4, #8]
 8017f1e:	4605      	mov	r5, r0
 8017f20:	8a60      	ldrh	r0, [r4, #18]
 8017f22:	f000 fa9b 	bl	801845c <uxr_seq_num_add>
 8017f26:	4601      	mov	r1, r0
 8017f28:	4628      	mov	r0, r5
 8017f2a:	f000 fa9f 	bl	801846c <uxr_seq_num_cmp>
 8017f2e:	2800      	cmp	r0, #0
 8017f30:	dd42      	ble.n	8017fb8 <uxr_prepare_reliable_buffer_to_write+0x29c>
 8017f32:	2000      	movs	r0, #0
 8017f34:	b011      	add	sp, #68	@ 0x44
 8017f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f3a:	8921      	ldrh	r1, [r4, #8]
 8017f3c:	8a60      	ldrh	r0, [r4, #18]
 8017f3e:	9205      	str	r2, [sp, #20]
 8017f40:	f000 fa8c 	bl	801845c <uxr_seq_num_add>
 8017f44:	4601      	mov	r1, r0
 8017f46:	4630      	mov	r0, r6
 8017f48:	f000 fa90 	bl	801846c <uxr_seq_num_cmp>
 8017f4c:	2800      	cmp	r0, #0
 8017f4e:	9a05      	ldr	r2, [sp, #20]
 8017f50:	dcef      	bgt.n	8017f32 <uxr_prepare_reliable_buffer_to_write+0x216>
 8017f52:	8927      	ldrh	r7, [r4, #8]
 8017f54:	fbb6 f3f7 	udiv	r3, r6, r7
 8017f58:	fb07 6313 	mls	r3, r7, r3, r6
 8017f5c:	b29d      	uxth	r5, r3
 8017f5e:	6863      	ldr	r3, [r4, #4]
 8017f60:	6824      	ldr	r4, [r4, #0]
 8017f62:	fbb3 f3f7 	udiv	r3, r3, r7
 8017f66:	fb05 f303 	mul.w	r3, r5, r3
 8017f6a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8017f6e:	50e2      	str	r2, [r4, r3]
 8017f70:	2300      	movs	r3, #0
 8017f72:	f8cd 8000 	str.w	r8, [sp]
 8017f76:	f7f7 fdd3 	bl	800fb20 <ucdr_init_buffer_origin_offset>
 8017f7a:	2001      	movs	r0, #1
 8017f7c:	e7da      	b.n	8017f34 <uxr_prepare_reliable_buffer_to_write+0x218>
 8017f7e:	b293      	uxth	r3, r2
 8017f80:	461a      	mov	r2, r3
 8017f82:	e737      	b.n	8017df4 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8017f84:	4630      	mov	r0, r6
 8017f86:	2101      	movs	r1, #1
 8017f88:	9207      	str	r2, [sp, #28]
 8017f8a:	f000 fa67 	bl	801845c <uxr_seq_num_add>
 8017f8e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017f92:	fbb0 f1fc 	udiv	r1, r0, ip
 8017f96:	fb0c 0111 	mls	r1, ip, r1, r0
 8017f9a:	4606      	mov	r6, r0
 8017f9c:	b288      	uxth	r0, r1
 8017f9e:	6863      	ldr	r3, [r4, #4]
 8017fa0:	fbb3 f1fc 	udiv	r1, r3, ip
 8017fa4:	6823      	ldr	r3, [r4, #0]
 8017fa6:	9a07      	ldr	r2, [sp, #28]
 8017fa8:	fb00 f101 	mul.w	r1, r0, r1
 8017fac:	3104      	adds	r1, #4
 8017fae:	440b      	add	r3, r1
 8017fb0:	9303      	str	r3, [sp, #12]
 8017fb2:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8017fb6:	e70a      	b.n	8017dce <uxr_prepare_reliable_buffer_to_write+0xb2>
 8017fb8:	8921      	ldrh	r1, [r4, #8]
 8017fba:	fbb5 f3f1 	udiv	r3, r5, r1
 8017fbe:	fb01 5313 	mls	r3, r1, r3, r5
 8017fc2:	b29a      	uxth	r2, r3
 8017fc4:	6863      	ldr	r3, [r4, #4]
 8017fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8017fca:	6821      	ldr	r1, [r4, #0]
 8017fcc:	9804      	ldr	r0, [sp, #16]
 8017fce:	fb02 f303 	mul.w	r3, r2, r3
 8017fd2:	3304      	adds	r3, #4
 8017fd4:	7b22      	ldrb	r2, [r4, #12]
 8017fd6:	4419      	add	r1, r3
 8017fd8:	445a      	add	r2, fp
 8017fda:	f841 2c04 	str.w	r2, [r1, #-4]
 8017fde:	7b23      	ldrb	r3, [r4, #12]
 8017fe0:	9300      	str	r3, [sp, #0]
 8017fe2:	2300      	movs	r3, #0
 8017fe4:	f7f7 fd9c 	bl	800fb20 <ucdr_init_buffer_origin_offset>
 8017fe8:	81e5      	strh	r5, [r4, #14]
 8017fea:	2001      	movs	r0, #1
 8017fec:	e7a2      	b.n	8017f34 <uxr_prepare_reliable_buffer_to_write+0x218>
 8017fee:	4682      	mov	sl, r0
 8017ff0:	e6ca      	b.n	8017d88 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8017ff2:	bf00      	nop
 8017ff4:	08017bfd 	.word	0x08017bfd

08017ff8 <uxr_prepare_next_reliable_buffer_to_send>:
 8017ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ffa:	4604      	mov	r4, r0
 8017ffc:	460f      	mov	r7, r1
 8017ffe:	8a00      	ldrh	r0, [r0, #16]
 8018000:	2101      	movs	r1, #1
 8018002:	4616      	mov	r6, r2
 8018004:	461d      	mov	r5, r3
 8018006:	f000 fa29 	bl	801845c <uxr_seq_num_add>
 801800a:	8028      	strh	r0, [r5, #0]
 801800c:	8922      	ldrh	r2, [r4, #8]
 801800e:	fbb0 f3f2 	udiv	r3, r0, r2
 8018012:	fb02 0c13 	mls	ip, r2, r3, r0
 8018016:	fa1f fc8c 	uxth.w	ip, ip
 801801a:	6863      	ldr	r3, [r4, #4]
 801801c:	fbb3 f3f2 	udiv	r3, r3, r2
 8018020:	fb0c fc03 	mul.w	ip, ip, r3
 8018024:	6823      	ldr	r3, [r4, #0]
 8018026:	89e1      	ldrh	r1, [r4, #14]
 8018028:	f10c 0c04 	add.w	ip, ip, #4
 801802c:	4463      	add	r3, ip
 801802e:	603b      	str	r3, [r7, #0]
 8018030:	6823      	ldr	r3, [r4, #0]
 8018032:	449c      	add	ip, r3
 8018034:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8018038:	6033      	str	r3, [r6, #0]
 801803a:	f000 fa17 	bl	801846c <uxr_seq_num_cmp>
 801803e:	2800      	cmp	r0, #0
 8018040:	dd01      	ble.n	8018046 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8018042:	2000      	movs	r0, #0
 8018044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018046:	7b23      	ldrb	r3, [r4, #12]
 8018048:	6832      	ldr	r2, [r6, #0]
 801804a:	429a      	cmp	r2, r3
 801804c:	d9f9      	bls.n	8018042 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801804e:	8a61      	ldrh	r1, [r4, #18]
 8018050:	8a20      	ldrh	r0, [r4, #16]
 8018052:	f000 fa07 	bl	8018464 <uxr_seq_num_sub>
 8018056:	8923      	ldrh	r3, [r4, #8]
 8018058:	4283      	cmp	r3, r0
 801805a:	d0f2      	beq.n	8018042 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801805c:	8828      	ldrh	r0, [r5, #0]
 801805e:	89e3      	ldrh	r3, [r4, #14]
 8018060:	8220      	strh	r0, [r4, #16]
 8018062:	4298      	cmp	r0, r3
 8018064:	d001      	beq.n	801806a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8018066:	2001      	movs	r0, #1
 8018068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801806a:	2101      	movs	r1, #1
 801806c:	f000 f9f6 	bl	801845c <uxr_seq_num_add>
 8018070:	81e0      	strh	r0, [r4, #14]
 8018072:	2001      	movs	r0, #1
 8018074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018076:	bf00      	nop

08018078 <uxr_update_output_stream_heartbeat_timestamp>:
 8018078:	b570      	push	{r4, r5, r6, lr}
 801807a:	8a01      	ldrh	r1, [r0, #16]
 801807c:	4604      	mov	r4, r0
 801807e:	8a40      	ldrh	r0, [r0, #18]
 8018080:	4615      	mov	r5, r2
 8018082:	461e      	mov	r6, r3
 8018084:	f000 f9f2 	bl	801846c <uxr_seq_num_cmp>
 8018088:	2800      	cmp	r0, #0
 801808a:	db07      	blt.n	801809c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801808c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018090:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018094:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8018098:	2000      	movs	r0, #0
 801809a:	bd70      	pop	{r4, r5, r6, pc}
 801809c:	f894 0020 	ldrb.w	r0, [r4, #32]
 80180a0:	b940      	cbnz	r0, 80180b4 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80180a2:	2301      	movs	r3, #1
 80180a4:	f884 3020 	strb.w	r3, [r4, #32]
 80180a8:	3564      	adds	r5, #100	@ 0x64
 80180aa:	f146 0600 	adc.w	r6, r6, #0
 80180ae:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80180b2:	bd70      	pop	{r4, r5, r6, pc}
 80180b4:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80180b8:	4295      	cmp	r5, r2
 80180ba:	eb76 0303 	sbcs.w	r3, r6, r3
 80180be:	bfa5      	ittet	ge
 80180c0:	3001      	addge	r0, #1
 80180c2:	f884 0020 	strbge.w	r0, [r4, #32]
 80180c6:	2000      	movlt	r0, #0
 80180c8:	2001      	movge	r0, #1
 80180ca:	e7ed      	b.n	80180a8 <uxr_update_output_stream_heartbeat_timestamp+0x30>

080180cc <uxr_begin_output_nack_buffer_it>:
 80180cc:	8a40      	ldrh	r0, [r0, #18]
 80180ce:	4770      	bx	lr

080180d0 <uxr_next_reliable_nack_buffer_to_send>:
 80180d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180d4:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 80180d8:	b082      	sub	sp, #8
 80180da:	f1b8 0f00 	cmp.w	r8, #0
 80180de:	d011      	beq.n	8018104 <uxr_next_reliable_nack_buffer_to_send+0x34>
 80180e0:	4604      	mov	r4, r0
 80180e2:	8818      	ldrh	r0, [r3, #0]
 80180e4:	460e      	mov	r6, r1
 80180e6:	4617      	mov	r7, r2
 80180e8:	461d      	mov	r5, r3
 80180ea:	2101      	movs	r1, #1
 80180ec:	f000 f9b6 	bl	801845c <uxr_seq_num_add>
 80180f0:	8028      	strh	r0, [r5, #0]
 80180f2:	8a21      	ldrh	r1, [r4, #16]
 80180f4:	f000 f9ba 	bl	801846c <uxr_seq_num_cmp>
 80180f8:	2800      	cmp	r0, #0
 80180fa:	dd07      	ble.n	801810c <uxr_next_reliable_nack_buffer_to_send+0x3c>
 80180fc:	f04f 0800 	mov.w	r8, #0
 8018100:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8018104:	4640      	mov	r0, r8
 8018106:	b002      	add	sp, #8
 8018108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801810c:	8921      	ldrh	r1, [r4, #8]
 801810e:	8828      	ldrh	r0, [r5, #0]
 8018110:	6823      	ldr	r3, [r4, #0]
 8018112:	fbb0 f2f1 	udiv	r2, r0, r1
 8018116:	fb01 0c12 	mls	ip, r1, r2, r0
 801811a:	fa1f f28c 	uxth.w	r2, ip
 801811e:	9301      	str	r3, [sp, #4]
 8018120:	6863      	ldr	r3, [r4, #4]
 8018122:	fbb3 fcf1 	udiv	ip, r3, r1
 8018126:	9b01      	ldr	r3, [sp, #4]
 8018128:	fb02 fc0c 	mul.w	ip, r2, ip
 801812c:	f10c 0c04 	add.w	ip, ip, #4
 8018130:	4463      	add	r3, ip
 8018132:	6033      	str	r3, [r6, #0]
 8018134:	6823      	ldr	r3, [r4, #0]
 8018136:	4463      	add	r3, ip
 8018138:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801813c:	603b      	str	r3, [r7, #0]
 801813e:	7b22      	ldrb	r2, [r4, #12]
 8018140:	429a      	cmp	r2, r3
 8018142:	d0d2      	beq.n	80180ea <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8018144:	4640      	mov	r0, r8
 8018146:	b002      	add	sp, #8
 8018148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801814c <uxr_process_acknack>:
 801814c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801814e:	4604      	mov	r4, r0
 8018150:	460e      	mov	r6, r1
 8018152:	4610      	mov	r0, r2
 8018154:	2101      	movs	r1, #1
 8018156:	f000 f985 	bl	8018464 <uxr_seq_num_sub>
 801815a:	8a61      	ldrh	r1, [r4, #18]
 801815c:	f000 f982 	bl	8018464 <uxr_seq_num_sub>
 8018160:	b1c0      	cbz	r0, 8018194 <uxr_process_acknack+0x48>
 8018162:	4605      	mov	r5, r0
 8018164:	2700      	movs	r7, #0
 8018166:	2101      	movs	r1, #1
 8018168:	8a60      	ldrh	r0, [r4, #18]
 801816a:	f000 f977 	bl	801845c <uxr_seq_num_add>
 801816e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018172:	fbb0 f1fc 	udiv	r1, r0, ip
 8018176:	e9d4 2300 	ldrd	r2, r3, [r4]
 801817a:	fb0c 0111 	mls	r1, ip, r1, r0
 801817e:	b289      	uxth	r1, r1
 8018180:	3701      	adds	r7, #1
 8018182:	fbb3 f3fc 	udiv	r3, r3, ip
 8018186:	fb01 f303 	mul.w	r3, r1, r3
 801818a:	42bd      	cmp	r5, r7
 801818c:	7b21      	ldrb	r1, [r4, #12]
 801818e:	8260      	strh	r0, [r4, #18]
 8018190:	50d1      	str	r1, [r2, r3]
 8018192:	d1e8      	bne.n	8018166 <uxr_process_acknack+0x1a>
 8018194:	3e00      	subs	r6, #0
 8018196:	f04f 0300 	mov.w	r3, #0
 801819a:	bf18      	it	ne
 801819c:	2601      	movne	r6, #1
 801819e:	f884 3020 	strb.w	r3, [r4, #32]
 80181a2:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80181a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080181a8 <uxr_is_output_up_to_date>:
 80181a8:	8a01      	ldrh	r1, [r0, #16]
 80181aa:	8a40      	ldrh	r0, [r0, #18]
 80181ac:	b508      	push	{r3, lr}
 80181ae:	f000 f95d 	bl	801846c <uxr_seq_num_cmp>
 80181b2:	fab0 f080 	clz	r0, r0
 80181b6:	0940      	lsrs	r0, r0, #5
 80181b8:	bd08      	pop	{r3, pc}
 80181ba:	bf00      	nop

080181bc <get_available_free_slots>:
 80181bc:	8902      	ldrh	r2, [r0, #8]
 80181be:	b1da      	cbz	r2, 80181f8 <get_available_free_slots+0x3c>
 80181c0:	b530      	push	{r4, r5, lr}
 80181c2:	2100      	movs	r1, #0
 80181c4:	6843      	ldr	r3, [r0, #4]
 80181c6:	6805      	ldr	r5, [r0, #0]
 80181c8:	7b04      	ldrb	r4, [r0, #12]
 80181ca:	fbb3 fef2 	udiv	lr, r3, r2
 80181ce:	4608      	mov	r0, r1
 80181d0:	460b      	mov	r3, r1
 80181d2:	fbb3 fcf2 	udiv	ip, r3, r2
 80181d6:	fb02 331c 	mls	r3, r2, ip, r3
 80181da:	b29b      	uxth	r3, r3
 80181dc:	fb0e f303 	mul.w	r3, lr, r3
 80181e0:	3101      	adds	r1, #1
 80181e2:	f855 c003 	ldr.w	ip, [r5, r3]
 80181e6:	4564      	cmp	r4, ip
 80181e8:	bf08      	it	eq
 80181ea:	3001      	addeq	r0, #1
 80181ec:	b28b      	uxth	r3, r1
 80181ee:	bf08      	it	eq
 80181f0:	b280      	uxtheq	r0, r0
 80181f2:	4293      	cmp	r3, r2
 80181f4:	d3ed      	bcc.n	80181d2 <get_available_free_slots+0x16>
 80181f6:	bd30      	pop	{r4, r5, pc}
 80181f8:	4610      	mov	r0, r2
 80181fa:	4770      	bx	lr

080181fc <uxr_buffer_request_data>:
 80181fc:	b530      	push	{r4, r5, lr}
 80181fe:	b095      	sub	sp, #84	@ 0x54
 8018200:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8018204:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8018206:	9303      	str	r3, [sp, #12]
 8018208:	2200      	movs	r2, #0
 801820a:	2d00      	cmp	r5, #0
 801820c:	bf14      	ite	ne
 801820e:	2101      	movne	r1, #1
 8018210:	4611      	moveq	r1, r2
 8018212:	4604      	mov	r4, r0
 8018214:	f88d 301c 	strb.w	r3, [sp, #28]
 8018218:	f88d 201d 	strb.w	r2, [sp, #29]
 801821c:	f88d 201e 	strb.w	r2, [sp, #30]
 8018220:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8018224:	d021      	beq.n	801826a <uxr_buffer_request_data+0x6e>
 8018226:	682a      	ldr	r2, [r5, #0]
 8018228:	686b      	ldr	r3, [r5, #4]
 801822a:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 801822e:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8018232:	2210      	movs	r2, #16
 8018234:	2308      	movs	r3, #8
 8018236:	2100      	movs	r1, #0
 8018238:	e9cd 3100 	strd	r3, r1, [sp]
 801823c:	4620      	mov	r0, r4
 801823e:	9905      	ldr	r1, [sp, #20]
 8018240:	ab0c      	add	r3, sp, #48	@ 0x30
 8018242:	f7f8 fe4f 	bl	8010ee4 <uxr_prepare_stream_to_write_submessage>
 8018246:	b918      	cbnz	r0, 8018250 <uxr_buffer_request_data+0x54>
 8018248:	4604      	mov	r4, r0
 801824a:	4620      	mov	r0, r4
 801824c:	b015      	add	sp, #84	@ 0x54
 801824e:	bd30      	pop	{r4, r5, pc}
 8018250:	9904      	ldr	r1, [sp, #16]
 8018252:	aa06      	add	r2, sp, #24
 8018254:	4620      	mov	r0, r4
 8018256:	f7f8 ff7b 	bl	8011150 <uxr_init_base_object_request>
 801825a:	a906      	add	r1, sp, #24
 801825c:	4604      	mov	r4, r0
 801825e:	a80c      	add	r0, sp, #48	@ 0x30
 8018260:	f7fa fa76 	bl	8012750 <uxr_serialize_READ_DATA_Payload>
 8018264:	4620      	mov	r0, r4
 8018266:	b015      	add	sp, #84	@ 0x54
 8018268:	bd30      	pop	{r4, r5, pc}
 801826a:	2208      	movs	r2, #8
 801826c:	e7e2      	b.n	8018234 <uxr_buffer_request_data+0x38>
 801826e:	bf00      	nop

08018270 <uxr_buffer_cancel_data>:
 8018270:	b510      	push	{r4, lr}
 8018272:	b094      	sub	sp, #80	@ 0x50
 8018274:	2300      	movs	r3, #0
 8018276:	9202      	str	r2, [sp, #8]
 8018278:	9205      	str	r2, [sp, #20]
 801827a:	9301      	str	r3, [sp, #4]
 801827c:	2201      	movs	r2, #1
 801827e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018282:	f88d 301e 	strb.w	r3, [sp, #30]
 8018286:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 801828a:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801828e:	2308      	movs	r3, #8
 8018290:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8018294:	9300      	str	r3, [sp, #0]
 8018296:	2210      	movs	r2, #16
 8018298:	ab0c      	add	r3, sp, #48	@ 0x30
 801829a:	4604      	mov	r4, r0
 801829c:	9103      	str	r1, [sp, #12]
 801829e:	f7f8 fe21 	bl	8010ee4 <uxr_prepare_stream_to_write_submessage>
 80182a2:	b918      	cbnz	r0, 80182ac <uxr_buffer_cancel_data+0x3c>
 80182a4:	4604      	mov	r4, r0
 80182a6:	4620      	mov	r0, r4
 80182a8:	b014      	add	sp, #80	@ 0x50
 80182aa:	bd10      	pop	{r4, pc}
 80182ac:	9905      	ldr	r1, [sp, #20]
 80182ae:	aa06      	add	r2, sp, #24
 80182b0:	4620      	mov	r0, r4
 80182b2:	f7f8 ff4d 	bl	8011150 <uxr_init_base_object_request>
 80182b6:	a906      	add	r1, sp, #24
 80182b8:	4604      	mov	r4, r0
 80182ba:	a80c      	add	r0, sp, #48	@ 0x30
 80182bc:	f7fa fa48 	bl	8012750 <uxr_serialize_READ_DATA_Payload>
 80182c0:	4620      	mov	r0, r4
 80182c2:	b014      	add	sp, #80	@ 0x50
 80182c4:	bd10      	pop	{r4, pc}
 80182c6:	bf00      	nop

080182c8 <read_submessage_format>:
 80182c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80182cc:	b095      	sub	sp, #84	@ 0x54
 80182ce:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 80182d2:	b113      	cbz	r3, 80182da <read_submessage_format+0x12>
 80182d4:	b015      	add	sp, #84	@ 0x54
 80182d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80182da:	460c      	mov	r4, r1
 80182dc:	4615      	mov	r5, r2
 80182de:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80182e2:	4607      	mov	r7, r0
 80182e4:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80182e6:	9004      	str	r0, [sp, #16]
 80182e8:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80182ea:	9005      	str	r0, [sp, #20]
 80182ec:	1a52      	subs	r2, r2, r1
 80182ee:	a80c      	add	r0, sp, #48	@ 0x30
 80182f0:	4699      	mov	r9, r3
 80182f2:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 80182f6:	f7f7 fc25 	bl	800fb44 <ucdr_init_buffer>
 80182fa:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80182fe:	a80c      	add	r0, sp, #48	@ 0x30
 8018300:	f7f7 fbf4 	bl	800faec <ucdr_set_on_full_buffer_callback>
 8018304:	69e2      	ldr	r2, [r4, #28]
 8018306:	b19a      	cbz	r2, 8018330 <read_submessage_format+0x68>
 8018308:	f1b8 0f07 	cmp.w	r8, #7
 801830c:	f882 9014 	strb.w	r9, [r2, #20]
 8018310:	d040      	beq.n	8018394 <read_submessage_format+0xcc>
 8018312:	f1b8 0f08 	cmp.w	r8, #8
 8018316:	d02e      	beq.n	8018376 <read_submessage_format+0xae>
 8018318:	f1b8 0f06 	cmp.w	r8, #6
 801831c:	d011      	beq.n	8018342 <read_submessage_format+0x7a>
 801831e:	2301      	movs	r3, #1
 8018320:	7513      	strb	r3, [r2, #20]
 8018322:	4629      	mov	r1, r5
 8018324:	4620      	mov	r0, r4
 8018326:	f7f7 fc5d 	bl	800fbe4 <ucdr_advance_buffer>
 801832a:	b015      	add	sp, #84	@ 0x54
 801832c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018330:	f1b8 0f07 	cmp.w	r8, #7
 8018334:	d02e      	beq.n	8018394 <read_submessage_format+0xcc>
 8018336:	f1b8 0f08 	cmp.w	r8, #8
 801833a:	d01c      	beq.n	8018376 <read_submessage_format+0xae>
 801833c:	f1b8 0f06 	cmp.w	r8, #6
 8018340:	d1ef      	bne.n	8018322 <read_submessage_format+0x5a>
 8018342:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8018346:	f1b8 0f00 	cmp.w	r8, #0
 801834a:	d011      	beq.n	8018370 <read_submessage_format+0xa8>
 801834c:	ab0c      	add	r3, sp, #48	@ 0x30
 801834e:	e9cd 3500 	strd	r3, r5, [sp]
 8018352:	2306      	movs	r3, #6
 8018354:	f88d 3016 	strb.w	r3, [sp, #22]
 8018358:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801835c:	9302      	str	r3, [sp, #8]
 801835e:	4632      	mov	r2, r6
 8018360:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8018364:	4638      	mov	r0, r7
 8018366:	47c0      	blx	r8
 8018368:	2301      	movs	r3, #1
 801836a:	69e2      	ldr	r2, [r4, #28]
 801836c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8018370:	2a00      	cmp	r2, #0
 8018372:	d1d4      	bne.n	801831e <read_submessage_format+0x56>
 8018374:	e7d5      	b.n	8018322 <read_submessage_format+0x5a>
 8018376:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801837a:	2b00      	cmp	r3, #0
 801837c:	d0f8      	beq.n	8018370 <read_submessage_format+0xa8>
 801837e:	a906      	add	r1, sp, #24
 8018380:	a80c      	add	r0, sp, #48	@ 0x30
 8018382:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8018386:	f7fa faa9 	bl	80128dc <uxr_deserialize_SampleIdentity>
 801838a:	b9a0      	cbnz	r0, 80183b6 <read_submessage_format+0xee>
 801838c:	69e2      	ldr	r2, [r4, #28]
 801838e:	2a00      	cmp	r2, #0
 8018390:	d1c5      	bne.n	801831e <read_submessage_format+0x56>
 8018392:	e7c6      	b.n	8018322 <read_submessage_format+0x5a>
 8018394:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8018398:	b13b      	cbz	r3, 80183aa <read_submessage_format+0xe2>
 801839a:	a906      	add	r1, sp, #24
 801839c:	a80c      	add	r0, sp, #48	@ 0x30
 801839e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80183a2:	f7f9 ff6f 	bl	8012284 <uxr_deserialize_BaseObjectRequest>
 80183a6:	bb60      	cbnz	r0, 8018402 <read_submessage_format+0x13a>
 80183a8:	69e2      	ldr	r2, [r4, #28]
 80183aa:	68a3      	ldr	r3, [r4, #8]
 80183ac:	442b      	add	r3, r5
 80183ae:	60a3      	str	r3, [r4, #8]
 80183b0:	2a00      	cmp	r2, #0
 80183b2:	d1b4      	bne.n	801831e <read_submessage_format+0x56>
 80183b4:	e7b5      	b.n	8018322 <read_submessage_format+0x5a>
 80183b6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80183ba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80183bc:	1a52      	subs	r2, r2, r1
 80183be:	eba8 0803 	sub.w	r8, r8, r3
 80183c2:	a80c      	add	r0, sp, #48	@ 0x30
 80183c4:	f7f7 fbbe 	bl	800fb44 <ucdr_init_buffer>
 80183c8:	44a8      	add	r8, r5
 80183ca:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80183ce:	a80c      	add	r0, sp, #48	@ 0x30
 80183d0:	f7f7 fb8c 	bl	800faec <ucdr_set_on_full_buffer_callback>
 80183d4:	fa1f f888 	uxth.w	r8, r8
 80183d8:	ab0c      	add	r3, sp, #48	@ 0x30
 80183da:	9300      	str	r3, [sp, #0]
 80183dc:	f8cd 8004 	str.w	r8, [sp, #4]
 80183e0:	2108      	movs	r1, #8
 80183e2:	f88d 1016 	strb.w	r1, [sp, #22]
 80183e6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80183ea:	9102      	str	r1, [sp, #8]
 80183ec:	ab06      	add	r3, sp, #24
 80183ee:	4632      	mov	r2, r6
 80183f0:	9905      	ldr	r1, [sp, #20]
 80183f2:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 80183f6:	4638      	mov	r0, r7
 80183f8:	47b0      	blx	r6
 80183fa:	2301      	movs	r3, #1
 80183fc:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8018400:	e7c4      	b.n	801838c <read_submessage_format+0xc4>
 8018402:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8018406:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018408:	1a52      	subs	r2, r2, r1
 801840a:	a80c      	add	r0, sp, #48	@ 0x30
 801840c:	eba8 0803 	sub.w	r8, r8, r3
 8018410:	f7f7 fb98 	bl	800fb44 <ucdr_init_buffer>
 8018414:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8018418:	a80c      	add	r0, sp, #48	@ 0x30
 801841a:	f7f7 fb67 	bl	800faec <ucdr_set_on_full_buffer_callback>
 801841e:	ab0c      	add	r3, sp, #48	@ 0x30
 8018420:	9300      	str	r3, [sp, #0]
 8018422:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8018426:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801842a:	44a8      	add	r8, r5
 801842c:	fa1f f888 	uxth.w	r8, r8
 8018430:	f8cd 8004 	str.w	r8, [sp, #4]
 8018434:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8018438:	2107      	movs	r1, #7
 801843a:	f88d 1016 	strb.w	r1, [sp, #22]
 801843e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8018442:	9102      	str	r1, [sp, #8]
 8018444:	4632      	mov	r2, r6
 8018446:	b29b      	uxth	r3, r3
 8018448:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 801844c:	9905      	ldr	r1, [sp, #20]
 801844e:	4638      	mov	r0, r7
 8018450:	47b0      	blx	r6
 8018452:	2301      	movs	r3, #1
 8018454:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8018458:	e7a6      	b.n	80183a8 <read_submessage_format+0xe0>
 801845a:	bf00      	nop

0801845c <uxr_seq_num_add>:
 801845c:	4408      	add	r0, r1
 801845e:	b280      	uxth	r0, r0
 8018460:	4770      	bx	lr
 8018462:	bf00      	nop

08018464 <uxr_seq_num_sub>:
 8018464:	1a40      	subs	r0, r0, r1
 8018466:	b280      	uxth	r0, r0
 8018468:	4770      	bx	lr
 801846a:	bf00      	nop

0801846c <uxr_seq_num_cmp>:
 801846c:	4288      	cmp	r0, r1
 801846e:	d011      	beq.n	8018494 <uxr_seq_num_cmp+0x28>
 8018470:	d309      	bcc.n	8018486 <uxr_seq_num_cmp+0x1a>
 8018472:	4288      	cmp	r0, r1
 8018474:	d910      	bls.n	8018498 <uxr_seq_num_cmp+0x2c>
 8018476:	1a40      	subs	r0, r0, r1
 8018478:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801847c:	bfd4      	ite	le
 801847e:	2001      	movle	r0, #1
 8018480:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8018484:	4770      	bx	lr
 8018486:	1a0b      	subs	r3, r1, r0
 8018488:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801848c:	daf1      	bge.n	8018472 <uxr_seq_num_cmp+0x6>
 801848e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018492:	4770      	bx	lr
 8018494:	2000      	movs	r0, #0
 8018496:	4770      	bx	lr
 8018498:	2001      	movs	r0, #1
 801849a:	4770      	bx	lr

0801849c <uxr_init_framing_io>:
 801849c:	2300      	movs	r3, #0
 801849e:	7041      	strb	r1, [r0, #1]
 80184a0:	7003      	strb	r3, [r0, #0]
 80184a2:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80184a4:	4770      	bx	lr
 80184a6:	bf00      	nop

080184a8 <uxr_write_framed_msg>:
 80184a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184ac:	4617      	mov	r7, r2
 80184ae:	7842      	ldrb	r2, [r0, #1]
 80184b0:	b083      	sub	sp, #12
 80184b2:	460e      	mov	r6, r1
 80184b4:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 80184b8:	469a      	mov	sl, r3
 80184ba:	2901      	cmp	r1, #1
 80184bc:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 80184c0:	4604      	mov	r4, r0
 80184c2:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80184c6:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 80184ca:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 80184ce:	f240 8137 	bls.w	8018740 <uxr_write_framed_msg+0x298>
 80184d2:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80184d6:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 80184da:	2901      	cmp	r1, #1
 80184dc:	f04f 0202 	mov.w	r2, #2
 80184e0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80184e4:	f240 808f 	bls.w	8018606 <uxr_write_framed_msg+0x15e>
 80184e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80184ea:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 80184ee:	b2dd      	uxtb	r5, r3
 80184f0:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80184f4:	2203      	movs	r2, #3
 80184f6:	2901      	cmp	r1, #1
 80184f8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80184fc:	f240 809a 	bls.w	8018634 <uxr_write_framed_msg+0x18c>
 8018500:	18a1      	adds	r1, r4, r2
 8018502:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018504:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8018508:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801850c:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8018510:	3201      	adds	r2, #1
 8018512:	2801      	cmp	r0, #1
 8018514:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018518:	f240 80a0 	bls.w	801865c <uxr_write_framed_msg+0x1b4>
 801851c:	18a0      	adds	r0, r4, r2
 801851e:	3201      	adds	r2, #1
 8018520:	b2d2      	uxtb	r2, r2
 8018522:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8018526:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801852a:	2b00      	cmp	r3, #0
 801852c:	f000 80a9 	beq.w	8018682 <uxr_write_framed_msg+0x1da>
 8018530:	f04f 0900 	mov.w	r9, #0
 8018534:	46c8      	mov	r8, r9
 8018536:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801853a:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801853e:	2901      	cmp	r1, #1
 8018540:	f240 80c3 	bls.w	80186ca <uxr_write_framed_msg+0x222>
 8018544:	2a29      	cmp	r2, #41	@ 0x29
 8018546:	f200 809f 	bhi.w	8018688 <uxr_write_framed_msg+0x1e0>
 801854a:	18a1      	adds	r1, r4, r2
 801854c:	3201      	adds	r2, #1
 801854e:	b2d2      	uxtb	r2, r2
 8018550:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8018554:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018558:	ea89 0303 	eor.w	r3, r9, r3
 801855c:	498c      	ldr	r1, [pc, #560]	@ (8018790 <uxr_write_framed_msg+0x2e8>)
 801855e:	b2db      	uxtb	r3, r3
 8018560:	f108 0801 	add.w	r8, r8, #1
 8018564:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8018568:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 801856c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801856e:	4543      	cmp	r3, r8
 8018570:	d8e1      	bhi.n	8018536 <uxr_write_framed_msg+0x8e>
 8018572:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8018576:	fa5f f889 	uxtb.w	r8, r9
 801857a:	9301      	str	r3, [sp, #4]
 801857c:	f04f 0900 	mov.w	r9, #0
 8018580:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8018584:	fa5f f18a 	uxtb.w	r1, sl
 8018588:	2901      	cmp	r1, #1
 801858a:	d921      	bls.n	80185d0 <uxr_write_framed_msg+0x128>
 801858c:	2a29      	cmp	r2, #41	@ 0x29
 801858e:	f240 80af 	bls.w	80186f0 <uxr_write_framed_msg+0x248>
 8018592:	2500      	movs	r5, #0
 8018594:	e000      	b.n	8018598 <uxr_write_framed_msg+0xf0>
 8018596:	b160      	cbz	r0, 80185b2 <uxr_write_framed_msg+0x10a>
 8018598:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801859c:	1b52      	subs	r2, r2, r5
 801859e:	465b      	mov	r3, fp
 80185a0:	4421      	add	r1, r4
 80185a2:	4638      	mov	r0, r7
 80185a4:	47b0      	blx	r6
 80185a6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80185aa:	4405      	add	r5, r0
 80185ac:	4295      	cmp	r5, r2
 80185ae:	d3f2      	bcc.n	8018596 <uxr_write_framed_msg+0xee>
 80185b0:	d003      	beq.n	80185ba <uxr_write_framed_msg+0x112>
 80185b2:	2000      	movs	r0, #0
 80185b4:	b003      	add	sp, #12
 80185b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185ba:	fa5f f18a 	uxtb.w	r1, sl
 80185be:	f04f 0300 	mov.w	r3, #0
 80185c2:	2901      	cmp	r1, #1
 80185c4:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80185c8:	f04f 0200 	mov.w	r2, #0
 80185cc:	f200 8090 	bhi.w	80186f0 <uxr_write_framed_msg+0x248>
 80185d0:	1c51      	adds	r1, r2, #1
 80185d2:	b2c9      	uxtb	r1, r1
 80185d4:	2929      	cmp	r1, #41	@ 0x29
 80185d6:	d8dc      	bhi.n	8018592 <uxr_write_framed_msg+0xea>
 80185d8:	18a5      	adds	r5, r4, r2
 80185da:	4421      	add	r1, r4
 80185dc:	3202      	adds	r2, #2
 80185de:	f088 0820 	eor.w	r8, r8, #32
 80185e2:	4648      	mov	r0, r9
 80185e4:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 80185e8:	b2d2      	uxtb	r2, r2
 80185ea:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 80185ee:	f04f 0901 	mov.w	r9, #1
 80185f2:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 80185f6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80185fa:	2800      	cmp	r0, #0
 80185fc:	f040 8085 	bne.w	801870a <uxr_write_framed_msg+0x262>
 8018600:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018604:	e7bc      	b.n	8018580 <uxr_write_framed_msg+0xd8>
 8018606:	4611      	mov	r1, r2
 8018608:	f04f 0c03 	mov.w	ip, #3
 801860c:	2204      	movs	r2, #4
 801860e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018610:	4421      	add	r1, r4
 8018612:	b2dd      	uxtb	r5, r3
 8018614:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8018618:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 801861c:	44a4      	add	ip, r4
 801861e:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8018622:	f080 0020 	eor.w	r0, r0, #32
 8018626:	2901      	cmp	r1, #1
 8018628:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 801862c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018630:	f63f af66 	bhi.w	8018500 <uxr_write_framed_msg+0x58>
 8018634:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018636:	18a0      	adds	r0, r4, r2
 8018638:	f085 0520 	eor.w	r5, r5, #32
 801863c:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8018640:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8018644:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8018648:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 801864c:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8018650:	3202      	adds	r2, #2
 8018652:	2801      	cmp	r0, #1
 8018654:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018658:	f63f af60 	bhi.w	801851c <uxr_write_framed_msg+0x74>
 801865c:	1c50      	adds	r0, r2, #1
 801865e:	18a5      	adds	r5, r4, r2
 8018660:	fa54 f080 	uxtab	r0, r4, r0
 8018664:	3202      	adds	r2, #2
 8018666:	f081 0120 	eor.w	r1, r1, #32
 801866a:	b2d2      	uxtb	r2, r2
 801866c:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8018670:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8018674:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8018678:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801867c:	2b00      	cmp	r3, #0
 801867e:	f47f af57 	bne.w	8018530 <uxr_write_framed_msg+0x88>
 8018682:	9301      	str	r3, [sp, #4]
 8018684:	4698      	mov	r8, r3
 8018686:	e779      	b.n	801857c <uxr_write_framed_msg+0xd4>
 8018688:	2500      	movs	r5, #0
 801868a:	e001      	b.n	8018690 <uxr_write_framed_msg+0x1e8>
 801868c:	2800      	cmp	r0, #0
 801868e:	d090      	beq.n	80185b2 <uxr_write_framed_msg+0x10a>
 8018690:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8018694:	1b52      	subs	r2, r2, r5
 8018696:	465b      	mov	r3, fp
 8018698:	4421      	add	r1, r4
 801869a:	4638      	mov	r0, r7
 801869c:	47b0      	blx	r6
 801869e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80186a2:	4405      	add	r5, r0
 80186a4:	4295      	cmp	r5, r2
 80186a6:	d3f1      	bcc.n	801868c <uxr_write_framed_msg+0x1e4>
 80186a8:	d183      	bne.n	80185b2 <uxr_write_framed_msg+0x10a>
 80186aa:	f04f 0300 	mov.w	r3, #0
 80186ae:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80186b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80186b4:	4543      	cmp	r3, r8
 80186b6:	d964      	bls.n	8018782 <uxr_write_framed_msg+0x2da>
 80186b8:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80186bc:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80186c0:	2901      	cmp	r1, #1
 80186c2:	f04f 0200 	mov.w	r2, #0
 80186c6:	f63f af3d 	bhi.w	8018544 <uxr_write_framed_msg+0x9c>
 80186ca:	1c51      	adds	r1, r2, #1
 80186cc:	b2c9      	uxtb	r1, r1
 80186ce:	2929      	cmp	r1, #41	@ 0x29
 80186d0:	d8da      	bhi.n	8018688 <uxr_write_framed_msg+0x1e0>
 80186d2:	18a0      	adds	r0, r4, r2
 80186d4:	4421      	add	r1, r4
 80186d6:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 80186da:	3202      	adds	r2, #2
 80186dc:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 80186e0:	b2d2      	uxtb	r2, r2
 80186e2:	f083 0020 	eor.w	r0, r3, #32
 80186e6:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 80186ea:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80186ee:	e733      	b.n	8018558 <uxr_write_framed_msg+0xb0>
 80186f0:	18a1      	adds	r1, r4, r2
 80186f2:	3201      	adds	r2, #1
 80186f4:	4648      	mov	r0, r9
 80186f6:	b2d2      	uxtb	r2, r2
 80186f8:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 80186fc:	f04f 0901 	mov.w	r9, #1
 8018700:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018704:	2800      	cmp	r0, #0
 8018706:	f43f af7b 	beq.w	8018600 <uxr_write_framed_msg+0x158>
 801870a:	2500      	movs	r5, #0
 801870c:	e002      	b.n	8018714 <uxr_write_framed_msg+0x26c>
 801870e:	2800      	cmp	r0, #0
 8018710:	f43f af4f 	beq.w	80185b2 <uxr_write_framed_msg+0x10a>
 8018714:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8018718:	1b52      	subs	r2, r2, r5
 801871a:	465b      	mov	r3, fp
 801871c:	4421      	add	r1, r4
 801871e:	4638      	mov	r0, r7
 8018720:	47b0      	blx	r6
 8018722:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018726:	4405      	add	r5, r0
 8018728:	4295      	cmp	r5, r2
 801872a:	d3f0      	bcc.n	801870e <uxr_write_framed_msg+0x266>
 801872c:	f47f af41 	bne.w	80185b2 <uxr_write_framed_msg+0x10a>
 8018730:	2300      	movs	r3, #0
 8018732:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8018736:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018738:	b298      	uxth	r0, r3
 801873a:	b003      	add	sp, #12
 801873c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018740:	217d      	movs	r1, #125	@ 0x7d
 8018742:	f082 0220 	eor.w	r2, r2, #32
 8018746:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 801874a:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801874e:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8018752:	2901      	cmp	r1, #1
 8018754:	f04f 0203 	mov.w	r2, #3
 8018758:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801875c:	d804      	bhi.n	8018768 <uxr_write_framed_msg+0x2c0>
 801875e:	4611      	mov	r1, r2
 8018760:	f04f 0c04 	mov.w	ip, #4
 8018764:	2205      	movs	r2, #5
 8018766:	e752      	b.n	801860e <uxr_write_framed_msg+0x166>
 8018768:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801876a:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 801876e:	b2dd      	uxtb	r5, r3
 8018770:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8018774:	2204      	movs	r2, #4
 8018776:	2901      	cmp	r1, #1
 8018778:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801877c:	f63f aec0 	bhi.w	8018500 <uxr_write_framed_msg+0x58>
 8018780:	e758      	b.n	8018634 <uxr_write_framed_msg+0x18c>
 8018782:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8018786:	fa5f f889 	uxtb.w	r8, r9
 801878a:	9301      	str	r3, [sp, #4]
 801878c:	2200      	movs	r2, #0
 801878e:	e6f5      	b.n	801857c <uxr_write_framed_msg+0xd4>
 8018790:	0802077c 	.word	0x0802077c

08018794 <uxr_framing_read_transport>:
 8018794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018798:	4604      	mov	r4, r0
 801879a:	b083      	sub	sp, #12
 801879c:	461f      	mov	r7, r3
 801879e:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 80187a2:	4689      	mov	r9, r1
 80187a4:	4692      	mov	sl, r2
 80187a6:	f7f8 fe81 	bl	80114ac <uxr_millis>
 80187aa:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80187ae:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 80187b2:	42b3      	cmp	r3, r6
 80187b4:	4680      	mov	r8, r0
 80187b6:	d061      	beq.n	801887c <uxr_framing_read_transport+0xe8>
 80187b8:	d81c      	bhi.n	80187f4 <uxr_framing_read_transport+0x60>
 80187ba:	1e75      	subs	r5, r6, #1
 80187bc:	1aed      	subs	r5, r5, r3
 80187be:	b2ed      	uxtb	r5, r5
 80187c0:	2600      	movs	r6, #0
 80187c2:	455d      	cmp	r5, fp
 80187c4:	d81f      	bhi.n	8018806 <uxr_framing_read_transport+0x72>
 80187c6:	19ab      	adds	r3, r5, r6
 80187c8:	455b      	cmp	r3, fp
 80187ca:	bf84      	itt	hi
 80187cc:	ebab 0605 	subhi.w	r6, fp, r5
 80187d0:	b2f6      	uxtbhi	r6, r6
 80187d2:	b9ed      	cbnz	r5, 8018810 <uxr_framing_read_transport+0x7c>
 80187d4:	f04f 0b00 	mov.w	fp, #0
 80187d8:	f7f8 fe68 	bl	80114ac <uxr_millis>
 80187dc:	683b      	ldr	r3, [r7, #0]
 80187de:	eba0 0808 	sub.w	r8, r0, r8
 80187e2:	eba3 0308 	sub.w	r3, r3, r8
 80187e6:	4658      	mov	r0, fp
 80187e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80187ec:	603b      	str	r3, [r7, #0]
 80187ee:	b003      	add	sp, #12
 80187f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187f4:	2e00      	cmp	r6, #0
 80187f6:	d049      	beq.n	801888c <uxr_framing_read_transport+0xf8>
 80187f8:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 80187fc:	b2ed      	uxtb	r5, r5
 80187fe:	3e01      	subs	r6, #1
 8018800:	455d      	cmp	r5, fp
 8018802:	b2f6      	uxtb	r6, r6
 8018804:	d9df      	bls.n	80187c6 <uxr_framing_read_transport+0x32>
 8018806:	fa5f f58b 	uxtb.w	r5, fp
 801880a:	2600      	movs	r6, #0
 801880c:	2d00      	cmp	r5, #0
 801880e:	d0e1      	beq.n	80187d4 <uxr_framing_read_transport+0x40>
 8018810:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8018814:	3102      	adds	r1, #2
 8018816:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018818:	9300      	str	r3, [sp, #0]
 801881a:	683b      	ldr	r3, [r7, #0]
 801881c:	4421      	add	r1, r4
 801881e:	462a      	mov	r2, r5
 8018820:	4650      	mov	r0, sl
 8018822:	47c8      	blx	r9
 8018824:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018828:	4a1a      	ldr	r2, [pc, #104]	@ (8018894 <uxr_framing_read_transport+0x100>)
 801882a:	4403      	add	r3, r0
 801882c:	0859      	lsrs	r1, r3, #1
 801882e:	fba2 2101 	umull	r2, r1, r2, r1
 8018832:	0889      	lsrs	r1, r1, #2
 8018834:	222a      	movs	r2, #42	@ 0x2a
 8018836:	fb02 3111 	mls	r1, r2, r1, r3
 801883a:	4683      	mov	fp, r0
 801883c:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8018840:	2800      	cmp	r0, #0
 8018842:	d0c7      	beq.n	80187d4 <uxr_framing_read_transport+0x40>
 8018844:	42a8      	cmp	r0, r5
 8018846:	d1c7      	bne.n	80187d8 <uxr_framing_read_transport+0x44>
 8018848:	2e00      	cmp	r6, #0
 801884a:	d0c5      	beq.n	80187d8 <uxr_framing_read_transport+0x44>
 801884c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801884e:	9300      	str	r3, [sp, #0]
 8018850:	3102      	adds	r1, #2
 8018852:	4632      	mov	r2, r6
 8018854:	4421      	add	r1, r4
 8018856:	2300      	movs	r3, #0
 8018858:	4650      	mov	r0, sl
 801885a:	47c8      	blx	r9
 801885c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8018860:	4a0c      	ldr	r2, [pc, #48]	@ (8018894 <uxr_framing_read_transport+0x100>)
 8018862:	180b      	adds	r3, r1, r0
 8018864:	0859      	lsrs	r1, r3, #1
 8018866:	fba2 1201 	umull	r1, r2, r2, r1
 801886a:	0892      	lsrs	r2, r2, #2
 801886c:	212a      	movs	r1, #42	@ 0x2a
 801886e:	fb01 3312 	mls	r3, r1, r2, r3
 8018872:	eb00 0b05 	add.w	fp, r0, r5
 8018876:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801887a:	e7ad      	b.n	80187d8 <uxr_framing_read_transport+0x44>
 801887c:	2600      	movs	r6, #0
 801887e:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8018882:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8018884:	d9bf      	bls.n	8018806 <uxr_framing_read_transport+0x72>
 8018886:	2102      	movs	r1, #2
 8018888:	2529      	movs	r5, #41	@ 0x29
 801888a:	e7c4      	b.n	8018816 <uxr_framing_read_transport+0x82>
 801888c:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8018890:	b2ed      	uxtb	r5, r5
 8018892:	e796      	b.n	80187c2 <uxr_framing_read_transport+0x2e>
 8018894:	30c30c31 	.word	0x30c30c31

08018898 <uxr_read_framed_msg>:
 8018898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801889c:	461e      	mov	r6, r3
 801889e:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 80188a2:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 80188a6:	429d      	cmp	r5, r3
 80188a8:	b083      	sub	sp, #12
 80188aa:	4604      	mov	r4, r0
 80188ac:	4688      	mov	r8, r1
 80188ae:	4691      	mov	r9, r2
 80188b0:	f000 8188 	beq.w	8018bc4 <uxr_read_framed_msg+0x32c>
 80188b4:	7823      	ldrb	r3, [r4, #0]
 80188b6:	4dc1      	ldr	r5, [pc, #772]	@ (8018bbc <uxr_read_framed_msg+0x324>)
 80188b8:	4fc1      	ldr	r7, [pc, #772]	@ (8018bc0 <uxr_read_framed_msg+0x328>)
 80188ba:	2b07      	cmp	r3, #7
 80188bc:	d8fd      	bhi.n	80188ba <uxr_read_framed_msg+0x22>
 80188be:	e8df f013 	tbh	[pc, r3, lsl #1]
 80188c2:	0115      	.short	0x0115
 80188c4:	00d600f6 	.word	0x00d600f6
 80188c8:	009000b9 	.word	0x009000b9
 80188cc:	0030004d 	.word	0x0030004d
 80188d0:	0008      	.short	0x0008
 80188d2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80188d6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80188da:	4299      	cmp	r1, r3
 80188dc:	f000 814a 	beq.w	8018b74 <uxr_read_framed_msg+0x2dc>
 80188e0:	18e2      	adds	r2, r4, r3
 80188e2:	7892      	ldrb	r2, [r2, #2]
 80188e4:	2a7d      	cmp	r2, #125	@ 0x7d
 80188e6:	f000 8199 	beq.w	8018c1c <uxr_read_framed_msg+0x384>
 80188ea:	3301      	adds	r3, #1
 80188ec:	0858      	lsrs	r0, r3, #1
 80188ee:	fba5 1000 	umull	r1, r0, r5, r0
 80188f2:	0880      	lsrs	r0, r0, #2
 80188f4:	212a      	movs	r1, #42	@ 0x2a
 80188f6:	fb01 3310 	mls	r3, r1, r0, r3
 80188fa:	2a7e      	cmp	r2, #126	@ 0x7e
 80188fc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018900:	f000 8252 	beq.w	8018da8 <uxr_read_framed_msg+0x510>
 8018904:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8018906:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8018908:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801890c:	b29b      	uxth	r3, r3
 801890e:	2200      	movs	r2, #0
 8018910:	4299      	cmp	r1, r3
 8018912:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8018914:	7022      	strb	r2, [r4, #0]
 8018916:	f000 8179 	beq.w	8018c0c <uxr_read_framed_msg+0x374>
 801891a:	2000      	movs	r0, #0
 801891c:	b003      	add	sp, #12
 801891e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018922:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8018926:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801892a:	4299      	cmp	r1, r3
 801892c:	f000 8131 	beq.w	8018b92 <uxr_read_framed_msg+0x2fa>
 8018930:	18e2      	adds	r2, r4, r3
 8018932:	7890      	ldrb	r0, [r2, #2]
 8018934:	287d      	cmp	r0, #125	@ 0x7d
 8018936:	f000 8190 	beq.w	8018c5a <uxr_read_framed_msg+0x3c2>
 801893a:	3301      	adds	r3, #1
 801893c:	085a      	lsrs	r2, r3, #1
 801893e:	fba5 1202 	umull	r1, r2, r5, r2
 8018942:	0892      	lsrs	r2, r2, #2
 8018944:	212a      	movs	r1, #42	@ 0x2a
 8018946:	fb01 3312 	mls	r3, r1, r2, r3
 801894a:	287e      	cmp	r0, #126	@ 0x7e
 801894c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018950:	f000 821a 	beq.w	8018d88 <uxr_read_framed_msg+0x4f0>
 8018954:	2307      	movs	r3, #7
 8018956:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8018958:	7023      	strb	r3, [r4, #0]
 801895a:	e7ae      	b.n	80188ba <uxr_read_framed_msg+0x22>
 801895c:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801895e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8018962:	459e      	cmp	lr, r3
 8018964:	d938      	bls.n	80189d8 <uxr_read_framed_msg+0x140>
 8018966:	ee07 8a90 	vmov	s15, r8
 801896a:	212a      	movs	r1, #42	@ 0x2a
 801896c:	e020      	b.n	80189b0 <uxr_read_framed_msg+0x118>
 801896e:	f89b c002 	ldrb.w	ip, [fp, #2]
 8018972:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8018976:	f000 80d4 	beq.w	8018b22 <uxr_read_framed_msg+0x28a>
 801897a:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801897e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8018982:	f000 8219 	beq.w	8018db8 <uxr_read_framed_msg+0x520>
 8018986:	f806 c003 	strb.w	ip, [r6, r3]
 801898a:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 801898e:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8018990:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8018994:	ea8a 000c 	eor.w	r0, sl, ip
 8018998:	b2c0      	uxtb	r0, r0
 801899a:	3301      	adds	r3, #1
 801899c:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 80189a0:	b29b      	uxth	r3, r3
 80189a2:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 80189a6:	4573      	cmp	r3, lr
 80189a8:	8663      	strh	r3, [r4, #50]	@ 0x32
 80189aa:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80189ac:	f080 8120 	bcs.w	8018bf0 <uxr_read_framed_msg+0x358>
 80189b0:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 80189b4:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80189b8:	f100 0c01 	add.w	ip, r0, #1
 80189bc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80189c0:	fba5 8202 	umull	r8, r2, r5, r2
 80189c4:	0892      	lsrs	r2, r2, #2
 80189c6:	4582      	cmp	sl, r0
 80189c8:	eb04 0b00 	add.w	fp, r4, r0
 80189cc:	fb01 c212 	mls	r2, r1, r2, ip
 80189d0:	d1cd      	bne.n	801896e <uxr_read_framed_msg+0xd6>
 80189d2:	ee17 8a90 	vmov	r8, s15
 80189d6:	459e      	cmp	lr, r3
 80189d8:	f040 8111 	bne.w	8018bfe <uxr_read_framed_msg+0x366>
 80189dc:	2306      	movs	r3, #6
 80189de:	7023      	strb	r3, [r4, #0]
 80189e0:	e76b      	b.n	80188ba <uxr_read_framed_msg+0x22>
 80189e2:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80189e6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80189ea:	4298      	cmp	r0, r3
 80189ec:	f000 80c2 	beq.w	8018b74 <uxr_read_framed_msg+0x2dc>
 80189f0:	18e2      	adds	r2, r4, r3
 80189f2:	7891      	ldrb	r1, [r2, #2]
 80189f4:	297d      	cmp	r1, #125	@ 0x7d
 80189f6:	f000 814c 	beq.w	8018c92 <uxr_read_framed_msg+0x3fa>
 80189fa:	3301      	adds	r3, #1
 80189fc:	085a      	lsrs	r2, r3, #1
 80189fe:	fba5 0202 	umull	r0, r2, r5, r2
 8018a02:	0892      	lsrs	r2, r2, #2
 8018a04:	202a      	movs	r0, #42	@ 0x2a
 8018a06:	fb00 3312 	mls	r3, r0, r2, r3
 8018a0a:	297e      	cmp	r1, #126	@ 0x7e
 8018a0c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018a10:	f000 81ca 	beq.w	8018da8 <uxr_read_framed_msg+0x510>
 8018a14:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8018a16:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8018a1a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018a1c:	b29b      	uxth	r3, r3
 8018a1e:	2000      	movs	r0, #0
 8018a20:	428b      	cmp	r3, r1
 8018a22:	8623      	strh	r3, [r4, #48]	@ 0x30
 8018a24:	8660      	strh	r0, [r4, #50]	@ 0x32
 8018a26:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8018a28:	f240 80df 	bls.w	8018bea <uxr_read_framed_msg+0x352>
 8018a2c:	7020      	strb	r0, [r4, #0]
 8018a2e:	b003      	add	sp, #12
 8018a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a34:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8018a38:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018a3c:	4299      	cmp	r1, r3
 8018a3e:	f000 80a8 	beq.w	8018b92 <uxr_read_framed_msg+0x2fa>
 8018a42:	18e2      	adds	r2, r4, r3
 8018a44:	7890      	ldrb	r0, [r2, #2]
 8018a46:	287d      	cmp	r0, #125	@ 0x7d
 8018a48:	f000 8164 	beq.w	8018d14 <uxr_read_framed_msg+0x47c>
 8018a4c:	3301      	adds	r3, #1
 8018a4e:	085a      	lsrs	r2, r3, #1
 8018a50:	fba5 1202 	umull	r1, r2, r5, r2
 8018a54:	0892      	lsrs	r2, r2, #2
 8018a56:	212a      	movs	r1, #42	@ 0x2a
 8018a58:	fb01 3312 	mls	r3, r1, r2, r3
 8018a5c:	287e      	cmp	r0, #126	@ 0x7e
 8018a5e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018a62:	f000 8191 	beq.w	8018d88 <uxr_read_framed_msg+0x4f0>
 8018a66:	2304      	movs	r3, #4
 8018a68:	8620      	strh	r0, [r4, #48]	@ 0x30
 8018a6a:	7023      	strb	r3, [r4, #0]
 8018a6c:	e725      	b.n	80188ba <uxr_read_framed_msg+0x22>
 8018a6e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018a72:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8018a76:	4290      	cmp	r0, r2
 8018a78:	f000 80b3 	beq.w	8018be2 <uxr_read_framed_msg+0x34a>
 8018a7c:	18a3      	adds	r3, r4, r2
 8018a7e:	7899      	ldrb	r1, [r3, #2]
 8018a80:	297d      	cmp	r1, #125	@ 0x7d
 8018a82:	f000 8164 	beq.w	8018d4e <uxr_read_framed_msg+0x4b6>
 8018a86:	3201      	adds	r2, #1
 8018a88:	0850      	lsrs	r0, r2, #1
 8018a8a:	fba5 3000 	umull	r3, r0, r5, r0
 8018a8e:	0880      	lsrs	r0, r0, #2
 8018a90:	232a      	movs	r3, #42	@ 0x2a
 8018a92:	fb03 2210 	mls	r2, r3, r0, r2
 8018a96:	297e      	cmp	r1, #126	@ 0x7e
 8018a98:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8018a9c:	f000 8188 	beq.w	8018db0 <uxr_read_framed_msg+0x518>
 8018aa0:	7863      	ldrb	r3, [r4, #1]
 8018aa2:	428b      	cmp	r3, r1
 8018aa4:	bf0c      	ite	eq
 8018aa6:	2303      	moveq	r3, #3
 8018aa8:	2300      	movne	r3, #0
 8018aaa:	7023      	strb	r3, [r4, #0]
 8018aac:	e705      	b.n	80188ba <uxr_read_framed_msg+0x22>
 8018aae:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8018ab2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018ab6:	2200      	movs	r2, #0
 8018ab8:	4299      	cmp	r1, r3
 8018aba:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8018abe:	d06c      	beq.n	8018b9a <uxr_read_framed_msg+0x302>
 8018ac0:	18e2      	adds	r2, r4, r3
 8018ac2:	7890      	ldrb	r0, [r2, #2]
 8018ac4:	287d      	cmp	r0, #125	@ 0x7d
 8018ac6:	f000 8101 	beq.w	8018ccc <uxr_read_framed_msg+0x434>
 8018aca:	3301      	adds	r3, #1
 8018acc:	085a      	lsrs	r2, r3, #1
 8018ace:	fba5 1202 	umull	r1, r2, r5, r2
 8018ad2:	0892      	lsrs	r2, r2, #2
 8018ad4:	212a      	movs	r1, #42	@ 0x2a
 8018ad6:	fb01 3312 	mls	r3, r1, r2, r3
 8018ada:	287e      	cmp	r0, #126	@ 0x7e
 8018adc:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8018ae0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018ae4:	d059      	beq.n	8018b9a <uxr_read_framed_msg+0x302>
 8018ae6:	2302      	movs	r3, #2
 8018ae8:	7023      	strb	r3, [r4, #0]
 8018aea:	e6e6      	b.n	80188ba <uxr_read_framed_msg+0x22>
 8018aec:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8018af0:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8018af4:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8018af8:	1c51      	adds	r1, r2, #1
 8018afa:	084b      	lsrs	r3, r1, #1
 8018afc:	fba5 c303 	umull	ip, r3, r5, r3
 8018b00:	089b      	lsrs	r3, r3, #2
 8018b02:	fb0e 1313 	mls	r3, lr, r3, r1
 8018b06:	4592      	cmp	sl, r2
 8018b08:	eb04 0002 	add.w	r0, r4, r2
 8018b0c:	b2da      	uxtb	r2, r3
 8018b0e:	f43f af04 	beq.w	801891a <uxr_read_framed_msg+0x82>
 8018b12:	7883      	ldrb	r3, [r0, #2]
 8018b14:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8018b18:	2b7e      	cmp	r3, #126	@ 0x7e
 8018b1a:	d1ed      	bne.n	8018af8 <uxr_read_framed_msg+0x260>
 8018b1c:	2301      	movs	r3, #1
 8018b1e:	7023      	strb	r3, [r4, #0]
 8018b20:	e6cb      	b.n	80188ba <uxr_read_framed_msg+0x22>
 8018b22:	f100 0c01 	add.w	ip, r0, #1
 8018b26:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8018b2a:	fba5 8202 	umull	r8, r2, r5, r2
 8018b2e:	0892      	lsrs	r2, r2, #2
 8018b30:	fb01 c212 	mls	r2, r1, r2, ip
 8018b34:	eb04 0c02 	add.w	ip, r4, r2
 8018b38:	b2d2      	uxtb	r2, r2
 8018b3a:	4592      	cmp	sl, r2
 8018b3c:	f100 0002 	add.w	r0, r0, #2
 8018b40:	f43f af47 	beq.w	80189d2 <uxr_read_framed_msg+0x13a>
 8018b44:	0842      	lsrs	r2, r0, #1
 8018b46:	f89c a002 	ldrb.w	sl, [ip, #2]
 8018b4a:	fba5 8202 	umull	r8, r2, r5, r2
 8018b4e:	0892      	lsrs	r2, r2, #2
 8018b50:	fb01 0012 	mls	r0, r1, r2, r0
 8018b54:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8018b58:	f08a 0c20 	eor.w	ip, sl, #32
 8018b5c:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8018b60:	f47f af11 	bne.w	8018986 <uxr_read_framed_msg+0xee>
 8018b64:	459e      	cmp	lr, r3
 8018b66:	ee17 8a90 	vmov	r8, s15
 8018b6a:	f43f af37 	beq.w	80189dc <uxr_read_framed_msg+0x144>
 8018b6e:	2301      	movs	r3, #1
 8018b70:	7023      	strb	r3, [r4, #0]
 8018b72:	e6a2      	b.n	80188ba <uxr_read_framed_msg+0x22>
 8018b74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018b76:	9300      	str	r3, [sp, #0]
 8018b78:	2301      	movs	r3, #1
 8018b7a:	9301      	str	r3, [sp, #4]
 8018b7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018b7e:	464a      	mov	r2, r9
 8018b80:	4641      	mov	r1, r8
 8018b82:	4620      	mov	r0, r4
 8018b84:	f7ff fe06 	bl	8018794 <uxr_framing_read_transport>
 8018b88:	2800      	cmp	r0, #0
 8018b8a:	f43f aec6 	beq.w	801891a <uxr_read_framed_msg+0x82>
 8018b8e:	7823      	ldrb	r3, [r4, #0]
 8018b90:	e693      	b.n	80188ba <uxr_read_framed_msg+0x22>
 8018b92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018b94:	9300      	str	r3, [sp, #0]
 8018b96:	2302      	movs	r3, #2
 8018b98:	e7ef      	b.n	8018b7a <uxr_read_framed_msg+0x2e2>
 8018b9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018b9c:	9300      	str	r3, [sp, #0]
 8018b9e:	2304      	movs	r3, #4
 8018ba0:	9301      	str	r3, [sp, #4]
 8018ba2:	464a      	mov	r2, r9
 8018ba4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018ba6:	4641      	mov	r1, r8
 8018ba8:	4620      	mov	r0, r4
 8018baa:	f7ff fdf3 	bl	8018794 <uxr_framing_read_transport>
 8018bae:	2800      	cmp	r0, #0
 8018bb0:	d1ed      	bne.n	8018b8e <uxr_read_framed_msg+0x2f6>
 8018bb2:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8018bb6:	2b7e      	cmp	r3, #126	@ 0x7e
 8018bb8:	d0e9      	beq.n	8018b8e <uxr_read_framed_msg+0x2f6>
 8018bba:	e6ae      	b.n	801891a <uxr_read_framed_msg+0x82>
 8018bbc:	30c30c31 	.word	0x30c30c31
 8018bc0:	0802077c 	.word	0x0802077c
 8018bc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018bc6:	9300      	str	r3, [sp, #0]
 8018bc8:	2305      	movs	r3, #5
 8018bca:	9301      	str	r3, [sp, #4]
 8018bcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018bce:	f7ff fde1 	bl	8018794 <uxr_framing_read_transport>
 8018bd2:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8018bd6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018bda:	429a      	cmp	r2, r3
 8018bdc:	f43f ae9d 	beq.w	801891a <uxr_read_framed_msg+0x82>
 8018be0:	e668      	b.n	80188b4 <uxr_read_framed_msg+0x1c>
 8018be2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018be4:	9300      	str	r3, [sp, #0]
 8018be6:	2303      	movs	r3, #3
 8018be8:	e7c7      	b.n	8018b7a <uxr_read_framed_msg+0x2e2>
 8018bea:	2305      	movs	r3, #5
 8018bec:	7023      	strb	r3, [r4, #0]
 8018bee:	e664      	b.n	80188ba <uxr_read_framed_msg+0x22>
 8018bf0:	ee17 8a90 	vmov	r8, s15
 8018bf4:	f43f aef2 	beq.w	80189dc <uxr_read_framed_msg+0x144>
 8018bf8:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8018bfc:	d08e      	beq.n	8018b1c <uxr_read_framed_msg+0x284>
 8018bfe:	ebae 0303 	sub.w	r3, lr, r3
 8018c02:	3302      	adds	r3, #2
 8018c04:	9301      	str	r3, [sp, #4]
 8018c06:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018c08:	9300      	str	r3, [sp, #0]
 8018c0a:	e7b7      	b.n	8018b7c <uxr_read_framed_msg+0x2e4>
 8018c0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018c0e:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8018c12:	7013      	strb	r3, [r2, #0]
 8018c14:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8018c16:	b003      	add	sp, #12
 8018c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c1c:	f103 0c01 	add.w	ip, r3, #1
 8018c20:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8018c24:	fba5 0202 	umull	r0, r2, r5, r2
 8018c28:	0892      	lsrs	r2, r2, #2
 8018c2a:	202a      	movs	r0, #42	@ 0x2a
 8018c2c:	fb00 c212 	mls	r2, r0, r2, ip
 8018c30:	fa5f fc82 	uxtb.w	ip, r2
 8018c34:	4561      	cmp	r1, ip
 8018c36:	d09d      	beq.n	8018b74 <uxr_read_framed_msg+0x2dc>
 8018c38:	3302      	adds	r3, #2
 8018c3a:	4422      	add	r2, r4
 8018c3c:	0859      	lsrs	r1, r3, #1
 8018c3e:	7892      	ldrb	r2, [r2, #2]
 8018c40:	fba5 c101 	umull	ip, r1, r5, r1
 8018c44:	0889      	lsrs	r1, r1, #2
 8018c46:	fb00 3311 	mls	r3, r0, r1, r3
 8018c4a:	2a7e      	cmp	r2, #126	@ 0x7e
 8018c4c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018c50:	f000 80aa 	beq.w	8018da8 <uxr_read_framed_msg+0x510>
 8018c54:	f082 0220 	eor.w	r2, r2, #32
 8018c58:	e654      	b.n	8018904 <uxr_read_framed_msg+0x6c>
 8018c5a:	1c58      	adds	r0, r3, #1
 8018c5c:	0842      	lsrs	r2, r0, #1
 8018c5e:	fba5 c202 	umull	ip, r2, r5, r2
 8018c62:	0892      	lsrs	r2, r2, #2
 8018c64:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8018c68:	fb0c 0212 	mls	r2, ip, r2, r0
 8018c6c:	b2d0      	uxtb	r0, r2
 8018c6e:	4281      	cmp	r1, r0
 8018c70:	d08f      	beq.n	8018b92 <uxr_read_framed_msg+0x2fa>
 8018c72:	4422      	add	r2, r4
 8018c74:	3302      	adds	r3, #2
 8018c76:	7890      	ldrb	r0, [r2, #2]
 8018c78:	085a      	lsrs	r2, r3, #1
 8018c7a:	fba5 1202 	umull	r1, r2, r5, r2
 8018c7e:	0892      	lsrs	r2, r2, #2
 8018c80:	fb0c 3312 	mls	r3, ip, r2, r3
 8018c84:	287e      	cmp	r0, #126	@ 0x7e
 8018c86:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018c8a:	d07d      	beq.n	8018d88 <uxr_read_framed_msg+0x4f0>
 8018c8c:	f080 0020 	eor.w	r0, r0, #32
 8018c90:	e660      	b.n	8018954 <uxr_read_framed_msg+0xbc>
 8018c92:	1c59      	adds	r1, r3, #1
 8018c94:	084a      	lsrs	r2, r1, #1
 8018c96:	fba5 c202 	umull	ip, r2, r5, r2
 8018c9a:	0892      	lsrs	r2, r2, #2
 8018c9c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8018ca0:	fb0c 1212 	mls	r2, ip, r2, r1
 8018ca4:	b2d1      	uxtb	r1, r2
 8018ca6:	4288      	cmp	r0, r1
 8018ca8:	f43f af64 	beq.w	8018b74 <uxr_read_framed_msg+0x2dc>
 8018cac:	4422      	add	r2, r4
 8018cae:	3302      	adds	r3, #2
 8018cb0:	7891      	ldrb	r1, [r2, #2]
 8018cb2:	085a      	lsrs	r2, r3, #1
 8018cb4:	fba5 0202 	umull	r0, r2, r5, r2
 8018cb8:	0892      	lsrs	r2, r2, #2
 8018cba:	fb0c 3312 	mls	r3, ip, r2, r3
 8018cbe:	297e      	cmp	r1, #126	@ 0x7e
 8018cc0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018cc4:	d070      	beq.n	8018da8 <uxr_read_framed_msg+0x510>
 8018cc6:	f081 0120 	eor.w	r1, r1, #32
 8018cca:	e6a3      	b.n	8018a14 <uxr_read_framed_msg+0x17c>
 8018ccc:	f103 0c01 	add.w	ip, r3, #1
 8018cd0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8018cd4:	fba5 0202 	umull	r0, r2, r5, r2
 8018cd8:	0892      	lsrs	r2, r2, #2
 8018cda:	202a      	movs	r0, #42	@ 0x2a
 8018cdc:	fb00 c212 	mls	r2, r0, r2, ip
 8018ce0:	fa5f fc82 	uxtb.w	ip, r2
 8018ce4:	4561      	cmp	r1, ip
 8018ce6:	f43f af58 	beq.w	8018b9a <uxr_read_framed_msg+0x302>
 8018cea:	4422      	add	r2, r4
 8018cec:	3302      	adds	r3, #2
 8018cee:	7891      	ldrb	r1, [r2, #2]
 8018cf0:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8018cf4:	085a      	lsrs	r2, r3, #1
 8018cf6:	fba5 c202 	umull	ip, r2, r5, r2
 8018cfa:	0892      	lsrs	r2, r2, #2
 8018cfc:	fb00 3312 	mls	r3, r0, r2, r3
 8018d00:	297e      	cmp	r1, #126	@ 0x7e
 8018d02:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018d06:	f43f af48 	beq.w	8018b9a <uxr_read_framed_msg+0x302>
 8018d0a:	f081 0120 	eor.w	r1, r1, #32
 8018d0e:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8018d12:	e6e8      	b.n	8018ae6 <uxr_read_framed_msg+0x24e>
 8018d14:	1c58      	adds	r0, r3, #1
 8018d16:	0842      	lsrs	r2, r0, #1
 8018d18:	fba5 c202 	umull	ip, r2, r5, r2
 8018d1c:	0892      	lsrs	r2, r2, #2
 8018d1e:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8018d22:	fb0c 0212 	mls	r2, ip, r2, r0
 8018d26:	b2d0      	uxtb	r0, r2
 8018d28:	4281      	cmp	r1, r0
 8018d2a:	f43f af32 	beq.w	8018b92 <uxr_read_framed_msg+0x2fa>
 8018d2e:	4422      	add	r2, r4
 8018d30:	3302      	adds	r3, #2
 8018d32:	7890      	ldrb	r0, [r2, #2]
 8018d34:	085a      	lsrs	r2, r3, #1
 8018d36:	fba5 1202 	umull	r1, r2, r5, r2
 8018d3a:	0892      	lsrs	r2, r2, #2
 8018d3c:	fb0c 3312 	mls	r3, ip, r2, r3
 8018d40:	287e      	cmp	r0, #126	@ 0x7e
 8018d42:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018d46:	d01f      	beq.n	8018d88 <uxr_read_framed_msg+0x4f0>
 8018d48:	f080 0020 	eor.w	r0, r0, #32
 8018d4c:	e68b      	b.n	8018a66 <uxr_read_framed_msg+0x1ce>
 8018d4e:	1c51      	adds	r1, r2, #1
 8018d50:	084b      	lsrs	r3, r1, #1
 8018d52:	fba5 c303 	umull	ip, r3, r5, r3
 8018d56:	089b      	lsrs	r3, r3, #2
 8018d58:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8018d5c:	fb0c 1313 	mls	r3, ip, r3, r1
 8018d60:	b2d9      	uxtb	r1, r3
 8018d62:	4288      	cmp	r0, r1
 8018d64:	f43f af3d 	beq.w	8018be2 <uxr_read_framed_msg+0x34a>
 8018d68:	3202      	adds	r2, #2
 8018d6a:	4423      	add	r3, r4
 8018d6c:	0850      	lsrs	r0, r2, #1
 8018d6e:	789b      	ldrb	r3, [r3, #2]
 8018d70:	fba5 1000 	umull	r1, r0, r5, r0
 8018d74:	0880      	lsrs	r0, r0, #2
 8018d76:	fb0c 2210 	mls	r2, ip, r0, r2
 8018d7a:	2b7e      	cmp	r3, #126	@ 0x7e
 8018d7c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8018d80:	d016      	beq.n	8018db0 <uxr_read_framed_msg+0x518>
 8018d82:	f083 0120 	eor.w	r1, r3, #32
 8018d86:	e68b      	b.n	8018aa0 <uxr_read_framed_msg+0x208>
 8018d88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018d8a:	9300      	str	r3, [sp, #0]
 8018d8c:	2302      	movs	r3, #2
 8018d8e:	9301      	str	r3, [sp, #4]
 8018d90:	464a      	mov	r2, r9
 8018d92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018d94:	4641      	mov	r1, r8
 8018d96:	4620      	mov	r0, r4
 8018d98:	f7ff fcfc 	bl	8018794 <uxr_framing_read_transport>
 8018d9c:	2800      	cmp	r0, #0
 8018d9e:	f47f aef6 	bne.w	8018b8e <uxr_read_framed_msg+0x2f6>
 8018da2:	2301      	movs	r3, #1
 8018da4:	7023      	strb	r3, [r4, #0]
 8018da6:	e588      	b.n	80188ba <uxr_read_framed_msg+0x22>
 8018da8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018daa:	9300      	str	r3, [sp, #0]
 8018dac:	2301      	movs	r3, #1
 8018dae:	e7ee      	b.n	8018d8e <uxr_read_framed_msg+0x4f6>
 8018db0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018db2:	9300      	str	r3, [sp, #0]
 8018db4:	2303      	movs	r3, #3
 8018db6:	e7ea      	b.n	8018d8e <uxr_read_framed_msg+0x4f6>
 8018db8:	ee17 8a90 	vmov	r8, s15
 8018dbc:	e6ae      	b.n	8018b1c <uxr_read_framed_msg+0x284>
 8018dbe:	bf00      	nop

08018dc0 <rcl_get_default_domain_id>:
 8018dc0:	b530      	push	{r4, r5, lr}
 8018dc2:	b083      	sub	sp, #12
 8018dc4:	2300      	movs	r3, #0
 8018dc6:	9300      	str	r3, [sp, #0]
 8018dc8:	b1d0      	cbz	r0, 8018e00 <rcl_get_default_domain_id+0x40>
 8018dca:	4604      	mov	r4, r0
 8018dcc:	4669      	mov	r1, sp
 8018dce:	4815      	ldr	r0, [pc, #84]	@ (8018e24 <rcl_get_default_domain_id+0x64>)
 8018dd0:	f7fc fbda 	bl	8015588 <rcutils_get_env>
 8018dd4:	4602      	mov	r2, r0
 8018dd6:	b110      	cbz	r0, 8018dde <rcl_get_default_domain_id+0x1e>
 8018dd8:	2001      	movs	r0, #1
 8018dda:	b003      	add	sp, #12
 8018ddc:	bd30      	pop	{r4, r5, pc}
 8018dde:	9b00      	ldr	r3, [sp, #0]
 8018de0:	b18b      	cbz	r3, 8018e06 <rcl_get_default_domain_id+0x46>
 8018de2:	7818      	ldrb	r0, [r3, #0]
 8018de4:	2800      	cmp	r0, #0
 8018de6:	d0f8      	beq.n	8018dda <rcl_get_default_domain_id+0x1a>
 8018de8:	a901      	add	r1, sp, #4
 8018dea:	4618      	mov	r0, r3
 8018dec:	9201      	str	r2, [sp, #4]
 8018dee:	f000 fe81 	bl	8019af4 <strtoul>
 8018df2:	4605      	mov	r5, r0
 8018df4:	b150      	cbz	r0, 8018e0c <rcl_get_default_domain_id+0x4c>
 8018df6:	1c43      	adds	r3, r0, #1
 8018df8:	d00d      	beq.n	8018e16 <rcl_get_default_domain_id+0x56>
 8018dfa:	6025      	str	r5, [r4, #0]
 8018dfc:	2000      	movs	r0, #0
 8018dfe:	e7ec      	b.n	8018dda <rcl_get_default_domain_id+0x1a>
 8018e00:	200b      	movs	r0, #11
 8018e02:	b003      	add	sp, #12
 8018e04:	bd30      	pop	{r4, r5, pc}
 8018e06:	4618      	mov	r0, r3
 8018e08:	b003      	add	sp, #12
 8018e0a:	bd30      	pop	{r4, r5, pc}
 8018e0c:	9b01      	ldr	r3, [sp, #4]
 8018e0e:	781b      	ldrb	r3, [r3, #0]
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d0f2      	beq.n	8018dfa <rcl_get_default_domain_id+0x3a>
 8018e14:	e7e0      	b.n	8018dd8 <rcl_get_default_domain_id+0x18>
 8018e16:	f002 f8b9 	bl	801af8c <__errno>
 8018e1a:	6803      	ldr	r3, [r0, #0]
 8018e1c:	2b22      	cmp	r3, #34	@ 0x22
 8018e1e:	d1ec      	bne.n	8018dfa <rcl_get_default_domain_id+0x3a>
 8018e20:	e7da      	b.n	8018dd8 <rcl_get_default_domain_id+0x18>
 8018e22:	bf00      	nop
 8018e24:	0802097c 	.word	0x0802097c

08018e28 <rcl_expand_topic_name>:
 8018e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e2c:	b08b      	sub	sp, #44	@ 0x2c
 8018e2e:	9306      	str	r3, [sp, #24]
 8018e30:	2800      	cmp	r0, #0
 8018e32:	f000 80ad 	beq.w	8018f90 <rcl_expand_topic_name+0x168>
 8018e36:	460e      	mov	r6, r1
 8018e38:	2900      	cmp	r1, #0
 8018e3a:	f000 80a9 	beq.w	8018f90 <rcl_expand_topic_name+0x168>
 8018e3e:	4617      	mov	r7, r2
 8018e40:	2a00      	cmp	r2, #0
 8018e42:	f000 80a5 	beq.w	8018f90 <rcl_expand_topic_name+0x168>
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	f000 80a2 	beq.w	8018f90 <rcl_expand_topic_name+0x168>
 8018e4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018e4e:	2b00      	cmp	r3, #0
 8018e50:	f000 809e 	beq.w	8018f90 <rcl_expand_topic_name+0x168>
 8018e54:	2200      	movs	r2, #0
 8018e56:	a909      	add	r1, sp, #36	@ 0x24
 8018e58:	4680      	mov	r8, r0
 8018e5a:	f000 f9fb 	bl	8019254 <rcl_validate_topic_name>
 8018e5e:	4604      	mov	r4, r0
 8018e60:	2800      	cmp	r0, #0
 8018e62:	f040 8096 	bne.w	8018f92 <rcl_expand_topic_name+0x16a>
 8018e66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	f040 809a 	bne.w	8018fa2 <rcl_expand_topic_name+0x17a>
 8018e6e:	4602      	mov	r2, r0
 8018e70:	a909      	add	r1, sp, #36	@ 0x24
 8018e72:	4630      	mov	r0, r6
 8018e74:	f7fc ffe6 	bl	8015e44 <rmw_validate_node_name>
 8018e78:	2800      	cmp	r0, #0
 8018e7a:	f040 808e 	bne.w	8018f9a <rcl_expand_topic_name+0x172>
 8018e7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018e80:	2a00      	cmp	r2, #0
 8018e82:	f040 8093 	bne.w	8018fac <rcl_expand_topic_name+0x184>
 8018e86:	a909      	add	r1, sp, #36	@ 0x24
 8018e88:	4638      	mov	r0, r7
 8018e8a:	f7fc ffbd 	bl	8015e08 <rmw_validate_namespace>
 8018e8e:	2800      	cmp	r0, #0
 8018e90:	f040 8083 	bne.w	8018f9a <rcl_expand_topic_name+0x172>
 8018e94:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8018e96:	2c00      	cmp	r4, #0
 8018e98:	f040 80ed 	bne.w	8019076 <rcl_expand_topic_name+0x24e>
 8018e9c:	217b      	movs	r1, #123	@ 0x7b
 8018e9e:	4640      	mov	r0, r8
 8018ea0:	f001 ff8e 	bl	801adc0 <strchr>
 8018ea4:	f898 3000 	ldrb.w	r3, [r8]
 8018ea8:	2b2f      	cmp	r3, #47	@ 0x2f
 8018eaa:	4605      	mov	r5, r0
 8018eac:	f000 809e 	beq.w	8018fec <rcl_expand_topic_name+0x1c4>
 8018eb0:	2b7e      	cmp	r3, #126	@ 0x7e
 8018eb2:	f040 80a2 	bne.w	8018ffa <rcl_expand_topic_name+0x1d2>
 8018eb6:	4638      	mov	r0, r7
 8018eb8:	f7e7 f9f2 	bl	80002a0 <strlen>
 8018ebc:	4a82      	ldr	r2, [pc, #520]	@ (80190c8 <rcl_expand_topic_name+0x2a0>)
 8018ebe:	4b83      	ldr	r3, [pc, #524]	@ (80190cc <rcl_expand_topic_name+0x2a4>)
 8018ec0:	2801      	cmp	r0, #1
 8018ec2:	bf18      	it	ne
 8018ec4:	4613      	movne	r3, r2
 8018ec6:	9302      	str	r3, [sp, #8]
 8018ec8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8018eca:	9300      	str	r3, [sp, #0]
 8018ecc:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8018ed0:	f108 0301 	add.w	r3, r8, #1
 8018ed4:	9305      	str	r3, [sp, #20]
 8018ed6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8018eda:	9301      	str	r3, [sp, #4]
 8018edc:	ab14      	add	r3, sp, #80	@ 0x50
 8018ede:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018ee0:	f7fc fb7a 	bl	80155d8 <rcutils_format_string_limit>
 8018ee4:	4682      	mov	sl, r0
 8018ee6:	2800      	cmp	r0, #0
 8018ee8:	f000 80c7 	beq.w	801907a <rcl_expand_topic_name+0x252>
 8018eec:	2d00      	cmp	r5, #0
 8018eee:	f000 80a2 	beq.w	8019036 <rcl_expand_topic_name+0x20e>
 8018ef2:	217b      	movs	r1, #123	@ 0x7b
 8018ef4:	f001 ff64 	bl	801adc0 <strchr>
 8018ef8:	46d1      	mov	r9, sl
 8018efa:	4605      	mov	r5, r0
 8018efc:	9407      	str	r4, [sp, #28]
 8018efe:	46d3      	mov	fp, sl
 8018f00:	464c      	mov	r4, r9
 8018f02:	2d00      	cmp	r5, #0
 8018f04:	f000 80be 	beq.w	8019084 <rcl_expand_topic_name+0x25c>
 8018f08:	217d      	movs	r1, #125	@ 0x7d
 8018f0a:	4620      	mov	r0, r4
 8018f0c:	f001 ff58 	bl	801adc0 <strchr>
 8018f10:	eba0 0905 	sub.w	r9, r0, r5
 8018f14:	f109 0a01 	add.w	sl, r9, #1
 8018f18:	486d      	ldr	r0, [pc, #436]	@ (80190d0 <rcl_expand_topic_name+0x2a8>)
 8018f1a:	4652      	mov	r2, sl
 8018f1c:	4629      	mov	r1, r5
 8018f1e:	f001 ff5c 	bl	801adda <strncmp>
 8018f22:	2800      	cmp	r0, #0
 8018f24:	d067      	beq.n	8018ff6 <rcl_expand_topic_name+0x1ce>
 8018f26:	486b      	ldr	r0, [pc, #428]	@ (80190d4 <rcl_expand_topic_name+0x2ac>)
 8018f28:	4652      	mov	r2, sl
 8018f2a:	4629      	mov	r1, r5
 8018f2c:	f001 ff55 	bl	801adda <strncmp>
 8018f30:	b130      	cbz	r0, 8018f40 <rcl_expand_topic_name+0x118>
 8018f32:	4869      	ldr	r0, [pc, #420]	@ (80190d8 <rcl_expand_topic_name+0x2b0>)
 8018f34:	4652      	mov	r2, sl
 8018f36:	4629      	mov	r1, r5
 8018f38:	f001 ff4f 	bl	801adda <strncmp>
 8018f3c:	2800      	cmp	r0, #0
 8018f3e:	d137      	bne.n	8018fb0 <rcl_expand_topic_name+0x188>
 8018f40:	46b9      	mov	r9, r7
 8018f42:	ab16      	add	r3, sp, #88	@ 0x58
 8018f44:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018f48:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018f4c:	ab14      	add	r3, sp, #80	@ 0x50
 8018f4e:	4628      	mov	r0, r5
 8018f50:	cb0c      	ldmia	r3, {r2, r3}
 8018f52:	4651      	mov	r1, sl
 8018f54:	f7fc fc7c 	bl	8015850 <rcutils_strndup>
 8018f58:	4605      	mov	r5, r0
 8018f5a:	2800      	cmp	r0, #0
 8018f5c:	f000 809c 	beq.w	8019098 <rcl_expand_topic_name+0x270>
 8018f60:	464a      	mov	r2, r9
 8018f62:	4620      	mov	r0, r4
 8018f64:	ab14      	add	r3, sp, #80	@ 0x50
 8018f66:	4629      	mov	r1, r5
 8018f68:	f7fc fb70 	bl	801564c <rcutils_repl_str>
 8018f6c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018f6e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018f70:	4604      	mov	r4, r0
 8018f72:	4628      	mov	r0, r5
 8018f74:	4798      	blx	r3
 8018f76:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018f78:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018f7a:	4658      	mov	r0, fp
 8018f7c:	4798      	blx	r3
 8018f7e:	2c00      	cmp	r4, #0
 8018f80:	d07b      	beq.n	801907a <rcl_expand_topic_name+0x252>
 8018f82:	217b      	movs	r1, #123	@ 0x7b
 8018f84:	4620      	mov	r0, r4
 8018f86:	f001 ff1b 	bl	801adc0 <strchr>
 8018f8a:	46a3      	mov	fp, r4
 8018f8c:	4605      	mov	r5, r0
 8018f8e:	e7b8      	b.n	8018f02 <rcl_expand_topic_name+0xda>
 8018f90:	240b      	movs	r4, #11
 8018f92:	4620      	mov	r0, r4
 8018f94:	b00b      	add	sp, #44	@ 0x2c
 8018f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f9a:	f7f9 fd57 	bl	8012a4c <rcl_convert_rmw_ret_to_rcl_ret>
 8018f9e:	4604      	mov	r4, r0
 8018fa0:	e7f7      	b.n	8018f92 <rcl_expand_topic_name+0x16a>
 8018fa2:	2467      	movs	r4, #103	@ 0x67
 8018fa4:	4620      	mov	r0, r4
 8018fa6:	b00b      	add	sp, #44	@ 0x2c
 8018fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fac:	24c9      	movs	r4, #201	@ 0xc9
 8018fae:	e7f0      	b.n	8018f92 <rcl_expand_topic_name+0x16a>
 8018fb0:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8018fb4:	9806      	ldr	r0, [sp, #24]
 8018fb6:	1c69      	adds	r1, r5, #1
 8018fb8:	f7fc fd64 	bl	8015a84 <rcutils_string_map_getn>
 8018fbc:	4681      	mov	r9, r0
 8018fbe:	2800      	cmp	r0, #0
 8018fc0:	d1bf      	bne.n	8018f42 <rcl_expand_topic_name+0x11a>
 8018fc2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018fc4:	aa16      	add	r2, sp, #88	@ 0x58
 8018fc6:	6018      	str	r0, [r3, #0]
 8018fc8:	ca07      	ldmia	r2, {r0, r1, r2}
 8018fca:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018fce:	ab14      	add	r3, sp, #80	@ 0x50
 8018fd0:	cb0c      	ldmia	r3, {r2, r3}
 8018fd2:	4651      	mov	r1, sl
 8018fd4:	4628      	mov	r0, r5
 8018fd6:	f7fc fc3b 	bl	8015850 <rcutils_strndup>
 8018fda:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018fdc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018fde:	4798      	blx	r3
 8018fe0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018fe2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018fe4:	4658      	mov	r0, fp
 8018fe6:	2469      	movs	r4, #105	@ 0x69
 8018fe8:	4798      	blx	r3
 8018fea:	e7d2      	b.n	8018f92 <rcl_expand_topic_name+0x16a>
 8018fec:	2800      	cmp	r0, #0
 8018fee:	d05b      	beq.n	80190a8 <rcl_expand_topic_name+0x280>
 8018ff0:	46c1      	mov	r9, r8
 8018ff2:	46a2      	mov	sl, r4
 8018ff4:	e782      	b.n	8018efc <rcl_expand_topic_name+0xd4>
 8018ff6:	46b1      	mov	r9, r6
 8018ff8:	e7a3      	b.n	8018f42 <rcl_expand_topic_name+0x11a>
 8018ffa:	2800      	cmp	r0, #0
 8018ffc:	d1f8      	bne.n	8018ff0 <rcl_expand_topic_name+0x1c8>
 8018ffe:	4638      	mov	r0, r7
 8019000:	f7e7 f94e 	bl	80002a0 <strlen>
 8019004:	4a35      	ldr	r2, [pc, #212]	@ (80190dc <rcl_expand_topic_name+0x2b4>)
 8019006:	4b36      	ldr	r3, [pc, #216]	@ (80190e0 <rcl_expand_topic_name+0x2b8>)
 8019008:	f8cd 8010 	str.w	r8, [sp, #16]
 801900c:	2801      	cmp	r0, #1
 801900e:	bf18      	it	ne
 8019010:	4613      	movne	r3, r2
 8019012:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8019016:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801901a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801901c:	9703      	str	r7, [sp, #12]
 801901e:	9200      	str	r2, [sp, #0]
 8019020:	ab14      	add	r3, sp, #80	@ 0x50
 8019022:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019024:	f7fc fad8 	bl	80155d8 <rcutils_format_string_limit>
 8019028:	4682      	mov	sl, r0
 801902a:	4653      	mov	r3, sl
 801902c:	b32b      	cbz	r3, 801907a <rcl_expand_topic_name+0x252>
 801902e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019030:	f8c3 a000 	str.w	sl, [r3]
 8019034:	e7ad      	b.n	8018f92 <rcl_expand_topic_name+0x16a>
 8019036:	f89a 3000 	ldrb.w	r3, [sl]
 801903a:	2b2f      	cmp	r3, #47	@ 0x2f
 801903c:	d0f7      	beq.n	801902e <rcl_expand_topic_name+0x206>
 801903e:	4638      	mov	r0, r7
 8019040:	f7e7 f92e 	bl	80002a0 <strlen>
 8019044:	4a25      	ldr	r2, [pc, #148]	@ (80190dc <rcl_expand_topic_name+0x2b4>)
 8019046:	4b26      	ldr	r3, [pc, #152]	@ (80190e0 <rcl_expand_topic_name+0x2b8>)
 8019048:	f8cd a010 	str.w	sl, [sp, #16]
 801904c:	2801      	cmp	r0, #1
 801904e:	bf18      	it	ne
 8019050:	4613      	movne	r3, r2
 8019052:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8019056:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801905a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801905c:	9703      	str	r7, [sp, #12]
 801905e:	9200      	str	r2, [sp, #0]
 8019060:	ab14      	add	r3, sp, #80	@ 0x50
 8019062:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019064:	f7fc fab8 	bl	80155d8 <rcutils_format_string_limit>
 8019068:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801906a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801906c:	4605      	mov	r5, r0
 801906e:	4650      	mov	r0, sl
 8019070:	4798      	blx	r3
 8019072:	46aa      	mov	sl, r5
 8019074:	e7d9      	b.n	801902a <rcl_expand_topic_name+0x202>
 8019076:	24ca      	movs	r4, #202	@ 0xca
 8019078:	e78b      	b.n	8018f92 <rcl_expand_topic_name+0x16a>
 801907a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801907c:	2300      	movs	r3, #0
 801907e:	6013      	str	r3, [r2, #0]
 8019080:	240a      	movs	r4, #10
 8019082:	e786      	b.n	8018f92 <rcl_expand_topic_name+0x16a>
 8019084:	465b      	mov	r3, fp
 8019086:	9c07      	ldr	r4, [sp, #28]
 8019088:	46da      	mov	sl, fp
 801908a:	2b00      	cmp	r3, #0
 801908c:	d1d3      	bne.n	8019036 <rcl_expand_topic_name+0x20e>
 801908e:	f898 3000 	ldrb.w	r3, [r8]
 8019092:	2b2f      	cmp	r3, #47	@ 0x2f
 8019094:	d0cb      	beq.n	801902e <rcl_expand_topic_name+0x206>
 8019096:	e7b2      	b.n	8018ffe <rcl_expand_topic_name+0x1d6>
 8019098:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 801909c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801909e:	6015      	str	r5, [r2, #0]
 80190a0:	4658      	mov	r0, fp
 80190a2:	4798      	blx	r3
 80190a4:	240a      	movs	r4, #10
 80190a6:	e774      	b.n	8018f92 <rcl_expand_topic_name+0x16a>
 80190a8:	ab17      	add	r3, sp, #92	@ 0x5c
 80190aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80190ae:	e88d 0003 	stmia.w	sp, {r0, r1}
 80190b2:	ab14      	add	r3, sp, #80	@ 0x50
 80190b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80190b6:	4640      	mov	r0, r8
 80190b8:	f7fc fba8 	bl	801580c <rcutils_strdup>
 80190bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80190be:	2800      	cmp	r0, #0
 80190c0:	6018      	str	r0, [r3, #0]
 80190c2:	bf08      	it	eq
 80190c4:	240a      	moveq	r4, #10
 80190c6:	e764      	b.n	8018f92 <rcl_expand_topic_name+0x16a>
 80190c8:	0802098c 	.word	0x0802098c
 80190cc:	0801ff48 	.word	0x0801ff48
 80190d0:	08020994 	.word	0x08020994
 80190d4:	0802099c 	.word	0x0802099c
 80190d8:	080209a4 	.word	0x080209a4
 80190dc:	080200dc 	.word	0x080200dc
 80190e0:	0801ff58 	.word	0x0801ff58

080190e4 <rcl_get_default_topic_name_substitutions>:
 80190e4:	2800      	cmp	r0, #0
 80190e6:	bf0c      	ite	eq
 80190e8:	200b      	moveq	r0, #11
 80190ea:	2000      	movne	r0, #0
 80190ec:	4770      	bx	lr
 80190ee:	bf00      	nop

080190f0 <rcl_get_zero_initialized_guard_condition>:
 80190f0:	4a03      	ldr	r2, [pc, #12]	@ (8019100 <rcl_get_zero_initialized_guard_condition+0x10>)
 80190f2:	4603      	mov	r3, r0
 80190f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80190f8:	e883 0003 	stmia.w	r3, {r0, r1}
 80190fc:	4618      	mov	r0, r3
 80190fe:	4770      	bx	lr
 8019100:	080209b0 	.word	0x080209b0

08019104 <rcl_guard_condition_init_from_rmw>:
 8019104:	b082      	sub	sp, #8
 8019106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801910a:	b086      	sub	sp, #24
 801910c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8019110:	4604      	mov	r4, r0
 8019112:	f84c 3f04 	str.w	r3, [ip, #4]!
 8019116:	460e      	mov	r6, r1
 8019118:	4617      	mov	r7, r2
 801911a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801911e:	f10d 0e04 	add.w	lr, sp, #4
 8019122:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019126:	f8dc 3000 	ldr.w	r3, [ip]
 801912a:	f8ce 3000 	str.w	r3, [lr]
 801912e:	a801      	add	r0, sp, #4
 8019130:	f7f4 fdd6 	bl	800dce0 <rcutils_allocator_is_valid>
 8019134:	b350      	cbz	r0, 801918c <rcl_guard_condition_init_from_rmw+0x88>
 8019136:	b34c      	cbz	r4, 801918c <rcl_guard_condition_init_from_rmw+0x88>
 8019138:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801913c:	f1b8 0f00 	cmp.w	r8, #0
 8019140:	d11e      	bne.n	8019180 <rcl_guard_condition_init_from_rmw+0x7c>
 8019142:	b31f      	cbz	r7, 801918c <rcl_guard_condition_init_from_rmw+0x88>
 8019144:	4638      	mov	r0, r7
 8019146:	f7f9 fc9f 	bl	8012a88 <rcl_context_is_valid>
 801914a:	b328      	cbz	r0, 8019198 <rcl_guard_condition_init_from_rmw+0x94>
 801914c:	9b01      	ldr	r3, [sp, #4]
 801914e:	9905      	ldr	r1, [sp, #20]
 8019150:	201c      	movs	r0, #28
 8019152:	4798      	blx	r3
 8019154:	4605      	mov	r5, r0
 8019156:	6060      	str	r0, [r4, #4]
 8019158:	b358      	cbz	r0, 80191b2 <rcl_guard_condition_init_from_rmw+0xae>
 801915a:	b1fe      	cbz	r6, 801919c <rcl_guard_condition_init_from_rmw+0x98>
 801915c:	6006      	str	r6, [r0, #0]
 801915e:	f880 8004 	strb.w	r8, [r0, #4]
 8019162:	ac01      	add	r4, sp, #4
 8019164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019166:	f105 0c08 	add.w	ip, r5, #8
 801916a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801916e:	6823      	ldr	r3, [r4, #0]
 8019170:	f8cc 3000 	str.w	r3, [ip]
 8019174:	2000      	movs	r0, #0
 8019176:	b006      	add	sp, #24
 8019178:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801917c:	b002      	add	sp, #8
 801917e:	4770      	bx	lr
 8019180:	2064      	movs	r0, #100	@ 0x64
 8019182:	b006      	add	sp, #24
 8019184:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019188:	b002      	add	sp, #8
 801918a:	4770      	bx	lr
 801918c:	200b      	movs	r0, #11
 801918e:	b006      	add	sp, #24
 8019190:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019194:	b002      	add	sp, #8
 8019196:	4770      	bx	lr
 8019198:	2065      	movs	r0, #101	@ 0x65
 801919a:	e7f2      	b.n	8019182 <rcl_guard_condition_init_from_rmw+0x7e>
 801919c:	6838      	ldr	r0, [r7, #0]
 801919e:	3028      	adds	r0, #40	@ 0x28
 80191a0:	f000 fa3a 	bl	8019618 <rmw_create_guard_condition>
 80191a4:	6028      	str	r0, [r5, #0]
 80191a6:	6865      	ldr	r5, [r4, #4]
 80191a8:	682e      	ldr	r6, [r5, #0]
 80191aa:	b126      	cbz	r6, 80191b6 <rcl_guard_condition_init_from_rmw+0xb2>
 80191ac:	2301      	movs	r3, #1
 80191ae:	712b      	strb	r3, [r5, #4]
 80191b0:	e7d7      	b.n	8019162 <rcl_guard_condition_init_from_rmw+0x5e>
 80191b2:	200a      	movs	r0, #10
 80191b4:	e7e5      	b.n	8019182 <rcl_guard_condition_init_from_rmw+0x7e>
 80191b6:	4628      	mov	r0, r5
 80191b8:	9b02      	ldr	r3, [sp, #8]
 80191ba:	9905      	ldr	r1, [sp, #20]
 80191bc:	4798      	blx	r3
 80191be:	6066      	str	r6, [r4, #4]
 80191c0:	2001      	movs	r0, #1
 80191c2:	e7de      	b.n	8019182 <rcl_guard_condition_init_from_rmw+0x7e>

080191c4 <rcl_guard_condition_fini>:
 80191c4:	b570      	push	{r4, r5, r6, lr}
 80191c6:	b082      	sub	sp, #8
 80191c8:	b1f0      	cbz	r0, 8019208 <rcl_guard_condition_fini+0x44>
 80191ca:	6843      	ldr	r3, [r0, #4]
 80191cc:	4604      	mov	r4, r0
 80191ce:	b163      	cbz	r3, 80191ea <rcl_guard_condition_fini+0x26>
 80191d0:	6818      	ldr	r0, [r3, #0]
 80191d2:	68de      	ldr	r6, [r3, #12]
 80191d4:	6999      	ldr	r1, [r3, #24]
 80191d6:	b160      	cbz	r0, 80191f2 <rcl_guard_condition_fini+0x2e>
 80191d8:	791d      	ldrb	r5, [r3, #4]
 80191da:	b965      	cbnz	r5, 80191f6 <rcl_guard_condition_fini+0x32>
 80191dc:	4618      	mov	r0, r3
 80191de:	47b0      	blx	r6
 80191e0:	2300      	movs	r3, #0
 80191e2:	4628      	mov	r0, r5
 80191e4:	6063      	str	r3, [r4, #4]
 80191e6:	b002      	add	sp, #8
 80191e8:	bd70      	pop	{r4, r5, r6, pc}
 80191ea:	461d      	mov	r5, r3
 80191ec:	4628      	mov	r0, r5
 80191ee:	b002      	add	sp, #8
 80191f0:	bd70      	pop	{r4, r5, r6, pc}
 80191f2:	4605      	mov	r5, r0
 80191f4:	e7f2      	b.n	80191dc <rcl_guard_condition_fini+0x18>
 80191f6:	9101      	str	r1, [sp, #4]
 80191f8:	f000 fa22 	bl	8019640 <rmw_destroy_guard_condition>
 80191fc:	1e05      	subs	r5, r0, #0
 80191fe:	6863      	ldr	r3, [r4, #4]
 8019200:	9901      	ldr	r1, [sp, #4]
 8019202:	bf18      	it	ne
 8019204:	2501      	movne	r5, #1
 8019206:	e7e9      	b.n	80191dc <rcl_guard_condition_fini+0x18>
 8019208:	250b      	movs	r5, #11
 801920a:	4628      	mov	r0, r5
 801920c:	b002      	add	sp, #8
 801920e:	bd70      	pop	{r4, r5, r6, pc}

08019210 <rcl_guard_condition_get_default_options>:
 8019210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019212:	b087      	sub	sp, #28
 8019214:	4606      	mov	r6, r0
 8019216:	4668      	mov	r0, sp
 8019218:	f7f4 fd54 	bl	800dcc4 <rcutils_get_default_allocator>
 801921c:	4b09      	ldr	r3, [pc, #36]	@ (8019244 <rcl_guard_condition_get_default_options+0x34>)
 801921e:	46ee      	mov	lr, sp
 8019220:	469c      	mov	ip, r3
 8019222:	461d      	mov	r5, r3
 8019224:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019228:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801922c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801922e:	4634      	mov	r4, r6
 8019230:	f8de 7000 	ldr.w	r7, [lr]
 8019234:	f8cc 7000 	str.w	r7, [ip]
 8019238:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801923a:	4630      	mov	r0, r6
 801923c:	6027      	str	r7, [r4, #0]
 801923e:	b007      	add	sp, #28
 8019240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019242:	bf00      	nop
 8019244:	20011c6c 	.word	0x20011c6c

08019248 <rcl_guard_condition_get_rmw_handle>:
 8019248:	b110      	cbz	r0, 8019250 <rcl_guard_condition_get_rmw_handle+0x8>
 801924a:	6840      	ldr	r0, [r0, #4]
 801924c:	b100      	cbz	r0, 8019250 <rcl_guard_condition_get_rmw_handle+0x8>
 801924e:	6800      	ldr	r0, [r0, #0]
 8019250:	4770      	bx	lr
 8019252:	bf00      	nop

08019254 <rcl_validate_topic_name>:
 8019254:	2800      	cmp	r0, #0
 8019256:	d07a      	beq.n	801934e <rcl_validate_topic_name+0xfa>
 8019258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801925c:	460e      	mov	r6, r1
 801925e:	2900      	cmp	r1, #0
 8019260:	d07c      	beq.n	801935c <rcl_validate_topic_name+0x108>
 8019262:	4617      	mov	r7, r2
 8019264:	4605      	mov	r5, r0
 8019266:	f7e7 f81b 	bl	80002a0 <strlen>
 801926a:	b1b0      	cbz	r0, 801929a <rcl_validate_topic_name+0x46>
 801926c:	f895 9000 	ldrb.w	r9, [r5]
 8019270:	f8df c180 	ldr.w	ip, [pc, #384]	@ 80193f4 <rcl_validate_topic_name+0x1a0>
 8019274:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8019278:	f013 0304 	ands.w	r3, r3, #4
 801927c:	d169      	bne.n	8019352 <rcl_validate_topic_name+0xfe>
 801927e:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8019282:	f815 2008 	ldrb.w	r2, [r5, r8]
 8019286:	2a2f      	cmp	r2, #47	@ 0x2f
 8019288:	d10e      	bne.n	80192a8 <rcl_validate_topic_name+0x54>
 801928a:	2202      	movs	r2, #2
 801928c:	6032      	str	r2, [r6, #0]
 801928e:	b36f      	cbz	r7, 80192ec <rcl_validate_topic_name+0x98>
 8019290:	f8c7 8000 	str.w	r8, [r7]
 8019294:	4618      	mov	r0, r3
 8019296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801929a:	2301      	movs	r3, #1
 801929c:	6033      	str	r3, [r6, #0]
 801929e:	b32f      	cbz	r7, 80192ec <rcl_validate_topic_name+0x98>
 80192a0:	2000      	movs	r0, #0
 80192a2:	6038      	str	r0, [r7, #0]
 80192a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80192a8:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 80192ac:	461c      	mov	r4, r3
 80192ae:	4619      	mov	r1, r3
 80192b0:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 80192b4:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80192b8:	f1be 0f09 	cmp.w	lr, #9
 80192bc:	d919      	bls.n	80192f2 <rcl_validate_topic_name+0x9e>
 80192be:	f022 0e20 	bic.w	lr, r2, #32
 80192c2:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 80192c6:	f1be 0f19 	cmp.w	lr, #25
 80192ca:	d912      	bls.n	80192f2 <rcl_validate_topic_name+0x9e>
 80192cc:	2a5f      	cmp	r2, #95	@ 0x5f
 80192ce:	d019      	beq.n	8019304 <rcl_validate_topic_name+0xb0>
 80192d0:	2a2f      	cmp	r2, #47	@ 0x2f
 80192d2:	d051      	beq.n	8019378 <rcl_validate_topic_name+0x124>
 80192d4:	2a7e      	cmp	r2, #126	@ 0x7e
 80192d6:	d048      	beq.n	801936a <rcl_validate_topic_name+0x116>
 80192d8:	2a7b      	cmp	r2, #123	@ 0x7b
 80192da:	d054      	beq.n	8019386 <rcl_validate_topic_name+0x132>
 80192dc:	2a7d      	cmp	r2, #125	@ 0x7d
 80192de:	d161      	bne.n	80193a4 <rcl_validate_topic_name+0x150>
 80192e0:	2c00      	cmp	r4, #0
 80192e2:	d155      	bne.n	8019390 <rcl_validate_topic_name+0x13c>
 80192e4:	2305      	movs	r3, #5
 80192e6:	6033      	str	r3, [r6, #0]
 80192e8:	b107      	cbz	r7, 80192ec <rcl_validate_topic_name+0x98>
 80192ea:	6039      	str	r1, [r7, #0]
 80192ec:	2000      	movs	r0, #0
 80192ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80192f2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80192f6:	0752      	lsls	r2, r2, #29
 80192f8:	d504      	bpl.n	8019304 <rcl_validate_topic_name+0xb0>
 80192fa:	b11c      	cbz	r4, 8019304 <rcl_validate_topic_name+0xb0>
 80192fc:	b111      	cbz	r1, 8019304 <rcl_validate_topic_name+0xb0>
 80192fe:	1e4a      	subs	r2, r1, #1
 8019300:	429a      	cmp	r2, r3
 8019302:	d02d      	beq.n	8019360 <rcl_validate_topic_name+0x10c>
 8019304:	3101      	adds	r1, #1
 8019306:	4288      	cmp	r0, r1
 8019308:	d1d2      	bne.n	80192b0 <rcl_validate_topic_name+0x5c>
 801930a:	2c00      	cmp	r4, #0
 801930c:	d145      	bne.n	801939a <rcl_validate_topic_name+0x146>
 801930e:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8019312:	d04f      	beq.n	80193b4 <rcl_validate_topic_name+0x160>
 8019314:	4620      	mov	r0, r4
 8019316:	2301      	movs	r3, #1
 8019318:	e006      	b.n	8019328 <rcl_validate_topic_name+0xd4>
 801931a:	428b      	cmp	r3, r1
 801931c:	f105 0501 	add.w	r5, r5, #1
 8019320:	f103 0201 	add.w	r2, r3, #1
 8019324:	d236      	bcs.n	8019394 <rcl_validate_topic_name+0x140>
 8019326:	4613      	mov	r3, r2
 8019328:	4580      	cmp	r8, r0
 801932a:	f100 0001 	add.w	r0, r0, #1
 801932e:	d0f4      	beq.n	801931a <rcl_validate_topic_name+0xc6>
 8019330:	782a      	ldrb	r2, [r5, #0]
 8019332:	2a2f      	cmp	r2, #47	@ 0x2f
 8019334:	d1f1      	bne.n	801931a <rcl_validate_topic_name+0xc6>
 8019336:	786a      	ldrb	r2, [r5, #1]
 8019338:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801933c:	0754      	lsls	r4, r2, #29
 801933e:	d5ec      	bpl.n	801931a <rcl_validate_topic_name+0xc6>
 8019340:	2204      	movs	r2, #4
 8019342:	6032      	str	r2, [r6, #0]
 8019344:	2f00      	cmp	r7, #0
 8019346:	d0d1      	beq.n	80192ec <rcl_validate_topic_name+0x98>
 8019348:	603b      	str	r3, [r7, #0]
 801934a:	2000      	movs	r0, #0
 801934c:	e7aa      	b.n	80192a4 <rcl_validate_topic_name+0x50>
 801934e:	200b      	movs	r0, #11
 8019350:	4770      	bx	lr
 8019352:	2304      	movs	r3, #4
 8019354:	6033      	str	r3, [r6, #0]
 8019356:	2f00      	cmp	r7, #0
 8019358:	d1a2      	bne.n	80192a0 <rcl_validate_topic_name+0x4c>
 801935a:	e7c7      	b.n	80192ec <rcl_validate_topic_name+0x98>
 801935c:	200b      	movs	r0, #11
 801935e:	e7a1      	b.n	80192a4 <rcl_validate_topic_name+0x50>
 8019360:	2309      	movs	r3, #9
 8019362:	6033      	str	r3, [r6, #0]
 8019364:	2f00      	cmp	r7, #0
 8019366:	d1c0      	bne.n	80192ea <rcl_validate_topic_name+0x96>
 8019368:	e7c0      	b.n	80192ec <rcl_validate_topic_name+0x98>
 801936a:	2900      	cmp	r1, #0
 801936c:	d0ca      	beq.n	8019304 <rcl_validate_topic_name+0xb0>
 801936e:	2306      	movs	r3, #6
 8019370:	6033      	str	r3, [r6, #0]
 8019372:	2f00      	cmp	r7, #0
 8019374:	d1b9      	bne.n	80192ea <rcl_validate_topic_name+0x96>
 8019376:	e7b9      	b.n	80192ec <rcl_validate_topic_name+0x98>
 8019378:	2c00      	cmp	r4, #0
 801937a:	d0c3      	beq.n	8019304 <rcl_validate_topic_name+0xb0>
 801937c:	2308      	movs	r3, #8
 801937e:	6033      	str	r3, [r6, #0]
 8019380:	2f00      	cmp	r7, #0
 8019382:	d1b2      	bne.n	80192ea <rcl_validate_topic_name+0x96>
 8019384:	e7b2      	b.n	80192ec <rcl_validate_topic_name+0x98>
 8019386:	2c00      	cmp	r4, #0
 8019388:	d1f8      	bne.n	801937c <rcl_validate_topic_name+0x128>
 801938a:	460b      	mov	r3, r1
 801938c:	2401      	movs	r4, #1
 801938e:	e7b9      	b.n	8019304 <rcl_validate_topic_name+0xb0>
 8019390:	2400      	movs	r4, #0
 8019392:	e7b7      	b.n	8019304 <rcl_validate_topic_name+0xb0>
 8019394:	2000      	movs	r0, #0
 8019396:	6030      	str	r0, [r6, #0]
 8019398:	e784      	b.n	80192a4 <rcl_validate_topic_name+0x50>
 801939a:	2205      	movs	r2, #5
 801939c:	6032      	str	r2, [r6, #0]
 801939e:	2f00      	cmp	r7, #0
 80193a0:	d1d2      	bne.n	8019348 <rcl_validate_topic_name+0xf4>
 80193a2:	e7a3      	b.n	80192ec <rcl_validate_topic_name+0x98>
 80193a4:	2c00      	cmp	r4, #0
 80193a6:	bf14      	ite	ne
 80193a8:	2308      	movne	r3, #8
 80193aa:	2303      	moveq	r3, #3
 80193ac:	6033      	str	r3, [r6, #0]
 80193ae:	2f00      	cmp	r7, #0
 80193b0:	d19b      	bne.n	80192ea <rcl_validate_topic_name+0x96>
 80193b2:	e79b      	b.n	80192ec <rcl_validate_topic_name+0x98>
 80193b4:	2301      	movs	r3, #1
 80193b6:	e00a      	b.n	80193ce <rcl_validate_topic_name+0x17a>
 80193b8:	2c01      	cmp	r4, #1
 80193ba:	d013      	beq.n	80193e4 <rcl_validate_topic_name+0x190>
 80193bc:	4299      	cmp	r1, r3
 80193be:	f104 0401 	add.w	r4, r4, #1
 80193c2:	f105 0501 	add.w	r5, r5, #1
 80193c6:	f103 0201 	add.w	r2, r3, #1
 80193ca:	d9e3      	bls.n	8019394 <rcl_validate_topic_name+0x140>
 80193cc:	4613      	mov	r3, r2
 80193ce:	45a0      	cmp	r8, r4
 80193d0:	d0f4      	beq.n	80193bc <rcl_validate_topic_name+0x168>
 80193d2:	782a      	ldrb	r2, [r5, #0]
 80193d4:	2a2f      	cmp	r2, #47	@ 0x2f
 80193d6:	d1ef      	bne.n	80193b8 <rcl_validate_topic_name+0x164>
 80193d8:	786a      	ldrb	r2, [r5, #1]
 80193da:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80193de:	0752      	lsls	r2, r2, #29
 80193e0:	d5ec      	bpl.n	80193bc <rcl_validate_topic_name+0x168>
 80193e2:	e7ad      	b.n	8019340 <rcl_validate_topic_name+0xec>
 80193e4:	2307      	movs	r3, #7
 80193e6:	6033      	str	r3, [r6, #0]
 80193e8:	2f00      	cmp	r7, #0
 80193ea:	f43f af7f 	beq.w	80192ec <rcl_validate_topic_name+0x98>
 80193ee:	603c      	str	r4, [r7, #0]
 80193f0:	2000      	movs	r0, #0
 80193f2:	e757      	b.n	80192a4 <rcl_validate_topic_name+0x50>
 80193f4:	08020a28 	.word	0x08020a28

080193f8 <rcutils_string_array_fini>:
 80193f8:	b320      	cbz	r0, 8019444 <rcutils_string_array_fini+0x4c>
 80193fa:	b570      	push	{r4, r5, r6, lr}
 80193fc:	4604      	mov	r4, r0
 80193fe:	6840      	ldr	r0, [r0, #4]
 8019400:	b1d8      	cbz	r0, 801943a <rcutils_string_array_fini+0x42>
 8019402:	f104 0008 	add.w	r0, r4, #8
 8019406:	f7f4 fc6b 	bl	800dce0 <rcutils_allocator_is_valid>
 801940a:	b1b8      	cbz	r0, 801943c <rcutils_string_array_fini+0x44>
 801940c:	6823      	ldr	r3, [r4, #0]
 801940e:	b1bb      	cbz	r3, 8019440 <rcutils_string_array_fini+0x48>
 8019410:	2500      	movs	r5, #0
 8019412:	6860      	ldr	r0, [r4, #4]
 8019414:	462e      	mov	r6, r5
 8019416:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801941a:	68e3      	ldr	r3, [r4, #12]
 801941c:	69a1      	ldr	r1, [r4, #24]
 801941e:	4798      	blx	r3
 8019420:	e9d4 3000 	ldrd	r3, r0, [r4]
 8019424:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8019428:	3501      	adds	r5, #1
 801942a:	429d      	cmp	r5, r3
 801942c:	d3f3      	bcc.n	8019416 <rcutils_string_array_fini+0x1e>
 801942e:	68e3      	ldr	r3, [r4, #12]
 8019430:	69a1      	ldr	r1, [r4, #24]
 8019432:	4798      	blx	r3
 8019434:	2000      	movs	r0, #0
 8019436:	e9c4 0000 	strd	r0, r0, [r4]
 801943a:	bd70      	pop	{r4, r5, r6, pc}
 801943c:	200b      	movs	r0, #11
 801943e:	bd70      	pop	{r4, r5, r6, pc}
 8019440:	6860      	ldr	r0, [r4, #4]
 8019442:	e7f4      	b.n	801942e <rcutils_string_array_fini+0x36>
 8019444:	200b      	movs	r0, #11
 8019446:	4770      	bx	lr

08019448 <on_status>:
 8019448:	b082      	sub	sp, #8
 801944a:	b002      	add	sp, #8
 801944c:	4770      	bx	lr
 801944e:	bf00      	nop

08019450 <on_topic>:
 8019450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019454:	4a22      	ldr	r2, [pc, #136]	@ (80194e0 <on_topic+0x90>)
 8019456:	b094      	sub	sp, #80	@ 0x50
 8019458:	6812      	ldr	r2, [r2, #0]
 801945a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801945c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8019460:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8019464:	b3c2      	cbz	r2, 80194d8 <on_topic+0x88>
 8019466:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801946a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801946e:	e001      	b.n	8019474 <on_topic+0x24>
 8019470:	6852      	ldr	r2, [r2, #4]
 8019472:	b38a      	cbz	r2, 80194d8 <on_topic+0x88>
 8019474:	6894      	ldr	r4, [r2, #8]
 8019476:	8aa3      	ldrh	r3, [r4, #20]
 8019478:	428b      	cmp	r3, r1
 801947a:	d1f9      	bne.n	8019470 <on_topic+0x20>
 801947c:	7da3      	ldrb	r3, [r4, #22]
 801947e:	4283      	cmp	r3, r0
 8019480:	d1f6      	bne.n	8019470 <on_topic+0x20>
 8019482:	2248      	movs	r2, #72	@ 0x48
 8019484:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8019488:	4668      	mov	r0, sp
 801948a:	f001 fdb4 	bl	801aff6 <memcpy>
 801948e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8019492:	cb0c      	ldmia	r3, {r2, r3}
 8019494:	4620      	mov	r0, r4
 8019496:	f7f5 f853 	bl	800e540 <rmw_uxrce_get_static_input_buffer_for_entity>
 801949a:	4607      	mov	r7, r0
 801949c:	b1e0      	cbz	r0, 80194d8 <on_topic+0x88>
 801949e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80194a2:	4632      	mov	r2, r6
 80194a4:	4628      	mov	r0, r5
 80194a6:	f108 0110 	add.w	r1, r8, #16
 80194aa:	f7fd ffc9 	bl	8017440 <ucdr_deserialize_array_uint8_t>
 80194ae:	b930      	cbnz	r0, 80194be <on_topic+0x6e>
 80194b0:	480c      	ldr	r0, [pc, #48]	@ (80194e4 <on_topic+0x94>)
 80194b2:	4639      	mov	r1, r7
 80194b4:	b014      	add	sp, #80	@ 0x50
 80194b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80194ba:	f7fc bd31 	b.w	8015f20 <put_memory>
 80194be:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80194c2:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 80194c6:	f7fd fe59 	bl	801717c <rmw_uros_epoch_nanos>
 80194ca:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 80194ce:	2305      	movs	r3, #5
 80194d0:	e942 0102 	strd	r0, r1, [r2, #-8]
 80194d4:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80194d8:	b014      	add	sp, #80	@ 0x50
 80194da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194de:	bf00      	nop
 80194e0:	20011acc 	.word	0x20011acc
 80194e4:	20011abc 	.word	0x20011abc

080194e8 <on_request>:
 80194e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194ec:	4823      	ldr	r0, [pc, #140]	@ (801957c <on_request+0x94>)
 80194ee:	b094      	sub	sp, #80	@ 0x50
 80194f0:	6800      	ldr	r0, [r0, #0]
 80194f2:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80194f4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80194f8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80194fa:	2800      	cmp	r0, #0
 80194fc:	d03b      	beq.n	8019576 <on_request+0x8e>
 80194fe:	461d      	mov	r5, r3
 8019500:	e001      	b.n	8019506 <on_request+0x1e>
 8019502:	6840      	ldr	r0, [r0, #4]
 8019504:	b3b8      	cbz	r0, 8019576 <on_request+0x8e>
 8019506:	6884      	ldr	r4, [r0, #8]
 8019508:	8b21      	ldrh	r1, [r4, #24]
 801950a:	4291      	cmp	r1, r2
 801950c:	d1f9      	bne.n	8019502 <on_request+0x1a>
 801950e:	2248      	movs	r2, #72	@ 0x48
 8019510:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8019514:	4668      	mov	r0, sp
 8019516:	f001 fd6e 	bl	801aff6 <memcpy>
 801951a:	f104 0320 	add.w	r3, r4, #32
 801951e:	cb0c      	ldmia	r3, {r2, r3}
 8019520:	4620      	mov	r0, r4
 8019522:	f7f5 f80d 	bl	800e540 <rmw_uxrce_get_static_input_buffer_for_entity>
 8019526:	4680      	mov	r8, r0
 8019528:	b328      	cbz	r0, 8019576 <on_request+0x8e>
 801952a:	4638      	mov	r0, r7
 801952c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8019530:	4632      	mov	r2, r6
 8019532:	f107 0110 	add.w	r1, r7, #16
 8019536:	f7fd ff83 	bl	8017440 <ucdr_deserialize_array_uint8_t>
 801953a:	b930      	cbnz	r0, 801954a <on_request+0x62>
 801953c:	4810      	ldr	r0, [pc, #64]	@ (8019580 <on_request+0x98>)
 801953e:	4641      	mov	r1, r8
 8019540:	b014      	add	sp, #80	@ 0x50
 8019542:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019546:	f7fc bceb 	b.w	8015f20 <put_memory>
 801954a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801954c:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8019550:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8019554:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8019558:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801955c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019560:	e88c 0003 	stmia.w	ip, {r0, r1}
 8019564:	f7fd fe0a 	bl	801717c <rmw_uros_epoch_nanos>
 8019568:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801956c:	2303      	movs	r3, #3
 801956e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019572:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8019576:	b014      	add	sp, #80	@ 0x50
 8019578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801957c:	20011a9c 	.word	0x20011a9c
 8019580:	20011abc 	.word	0x20011abc

08019584 <on_reply>:
 8019584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019588:	4821      	ldr	r0, [pc, #132]	@ (8019610 <on_reply+0x8c>)
 801958a:	b094      	sub	sp, #80	@ 0x50
 801958c:	6800      	ldr	r0, [r0, #0]
 801958e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8019590:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8019594:	9113      	str	r1, [sp, #76]	@ 0x4c
 8019596:	b3b8      	cbz	r0, 8019608 <on_reply+0x84>
 8019598:	461d      	mov	r5, r3
 801959a:	e001      	b.n	80195a0 <on_reply+0x1c>
 801959c:	6840      	ldr	r0, [r0, #4]
 801959e:	b398      	cbz	r0, 8019608 <on_reply+0x84>
 80195a0:	6884      	ldr	r4, [r0, #8]
 80195a2:	8b21      	ldrh	r1, [r4, #24]
 80195a4:	4291      	cmp	r1, r2
 80195a6:	d1f9      	bne.n	801959c <on_reply+0x18>
 80195a8:	2248      	movs	r2, #72	@ 0x48
 80195aa:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80195ae:	4668      	mov	r0, sp
 80195b0:	f001 fd21 	bl	801aff6 <memcpy>
 80195b4:	f104 0320 	add.w	r3, r4, #32
 80195b8:	cb0c      	ldmia	r3, {r2, r3}
 80195ba:	4620      	mov	r0, r4
 80195bc:	f7f4 ffc0 	bl	800e540 <rmw_uxrce_get_static_input_buffer_for_entity>
 80195c0:	4680      	mov	r8, r0
 80195c2:	b308      	cbz	r0, 8019608 <on_reply+0x84>
 80195c4:	4638      	mov	r0, r7
 80195c6:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80195ca:	4632      	mov	r2, r6
 80195cc:	f107 0110 	add.w	r1, r7, #16
 80195d0:	f7fd ff36 	bl	8017440 <ucdr_deserialize_array_uint8_t>
 80195d4:	b930      	cbnz	r0, 80195e4 <on_reply+0x60>
 80195d6:	480f      	ldr	r0, [pc, #60]	@ (8019614 <on_reply+0x90>)
 80195d8:	4641      	mov	r1, r8
 80195da:	b014      	add	sp, #80	@ 0x50
 80195dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80195e0:	f7fc bc9e 	b.w	8015f20 <put_memory>
 80195e4:	2200      	movs	r2, #0
 80195e6:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 80195ea:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80195ee:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80195f2:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 80195f6:	f7fd fdc1 	bl	801717c <rmw_uros_epoch_nanos>
 80195fa:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80195fe:	2304      	movs	r3, #4
 8019600:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019604:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8019608:	b014      	add	sp, #80	@ 0x50
 801960a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801960e:	bf00      	nop
 8019610:	2000d1b0 	.word	0x2000d1b0
 8019614:	20011abc 	.word	0x20011abc

08019618 <rmw_create_guard_condition>:
 8019618:	b538      	push	{r3, r4, r5, lr}
 801961a:	4605      	mov	r5, r0
 801961c:	4807      	ldr	r0, [pc, #28]	@ (801963c <rmw_create_guard_condition+0x24>)
 801961e:	f7fc fc6f 	bl	8015f00 <get_memory>
 8019622:	b148      	cbz	r0, 8019638 <rmw_create_guard_condition+0x20>
 8019624:	6884      	ldr	r4, [r0, #8]
 8019626:	2300      	movs	r3, #0
 8019628:	7423      	strb	r3, [r4, #16]
 801962a:	61e5      	str	r5, [r4, #28]
 801962c:	f7fc fcd0 	bl	8015fd0 <rmw_get_implementation_identifier>
 8019630:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8019634:	f104 0014 	add.w	r0, r4, #20
 8019638:	bd38      	pop	{r3, r4, r5, pc}
 801963a:	bf00      	nop
 801963c:	20011a5c 	.word	0x20011a5c

08019640 <rmw_destroy_guard_condition>:
 8019640:	b508      	push	{r3, lr}
 8019642:	4b08      	ldr	r3, [pc, #32]	@ (8019664 <rmw_destroy_guard_condition+0x24>)
 8019644:	6819      	ldr	r1, [r3, #0]
 8019646:	b911      	cbnz	r1, 801964e <rmw_destroy_guard_condition+0xe>
 8019648:	e00a      	b.n	8019660 <rmw_destroy_guard_condition+0x20>
 801964a:	6849      	ldr	r1, [r1, #4]
 801964c:	b141      	cbz	r1, 8019660 <rmw_destroy_guard_condition+0x20>
 801964e:	688b      	ldr	r3, [r1, #8]
 8019650:	3314      	adds	r3, #20
 8019652:	4298      	cmp	r0, r3
 8019654:	d1f9      	bne.n	801964a <rmw_destroy_guard_condition+0xa>
 8019656:	4803      	ldr	r0, [pc, #12]	@ (8019664 <rmw_destroy_guard_condition+0x24>)
 8019658:	f7fc fc62 	bl	8015f20 <put_memory>
 801965c:	2000      	movs	r0, #0
 801965e:	bd08      	pop	{r3, pc}
 8019660:	2001      	movs	r0, #1
 8019662:	bd08      	pop	{r3, pc}
 8019664:	20011a5c 	.word	0x20011a5c

08019668 <calloc>:
 8019668:	4b02      	ldr	r3, [pc, #8]	@ (8019674 <calloc+0xc>)
 801966a:	460a      	mov	r2, r1
 801966c:	4601      	mov	r1, r0
 801966e:	6818      	ldr	r0, [r3, #0]
 8019670:	f000 b802 	b.w	8019678 <_calloc_r>
 8019674:	200000c8 	.word	0x200000c8

08019678 <_calloc_r>:
 8019678:	b570      	push	{r4, r5, r6, lr}
 801967a:	fba1 5402 	umull	r5, r4, r1, r2
 801967e:	b93c      	cbnz	r4, 8019690 <_calloc_r+0x18>
 8019680:	4629      	mov	r1, r5
 8019682:	f000 f899 	bl	80197b8 <_malloc_r>
 8019686:	4606      	mov	r6, r0
 8019688:	b928      	cbnz	r0, 8019696 <_calloc_r+0x1e>
 801968a:	2600      	movs	r6, #0
 801968c:	4630      	mov	r0, r6
 801968e:	bd70      	pop	{r4, r5, r6, pc}
 8019690:	220c      	movs	r2, #12
 8019692:	6002      	str	r2, [r0, #0]
 8019694:	e7f9      	b.n	801968a <_calloc_r+0x12>
 8019696:	462a      	mov	r2, r5
 8019698:	4621      	mov	r1, r4
 801969a:	f001 fb89 	bl	801adb0 <memset>
 801969e:	e7f5      	b.n	801968c <_calloc_r+0x14>

080196a0 <exit>:
 80196a0:	b508      	push	{r3, lr}
 80196a2:	4b06      	ldr	r3, [pc, #24]	@ (80196bc <exit+0x1c>)
 80196a4:	4604      	mov	r4, r0
 80196a6:	b113      	cbz	r3, 80196ae <exit+0xe>
 80196a8:	2100      	movs	r1, #0
 80196aa:	f3af 8000 	nop.w
 80196ae:	4b04      	ldr	r3, [pc, #16]	@ (80196c0 <exit+0x20>)
 80196b0:	681b      	ldr	r3, [r3, #0]
 80196b2:	b103      	cbz	r3, 80196b6 <exit+0x16>
 80196b4:	4798      	blx	r3
 80196b6:	4620      	mov	r0, r4
 80196b8:	f7ec f87e 	bl	80057b8 <_exit>
 80196bc:	00000000 	.word	0x00000000
 80196c0:	20011dc0 	.word	0x20011dc0

080196c4 <getenv>:
 80196c4:	b507      	push	{r0, r1, r2, lr}
 80196c6:	4b04      	ldr	r3, [pc, #16]	@ (80196d8 <getenv+0x14>)
 80196c8:	4601      	mov	r1, r0
 80196ca:	aa01      	add	r2, sp, #4
 80196cc:	6818      	ldr	r0, [r3, #0]
 80196ce:	f000 f805 	bl	80196dc <_findenv_r>
 80196d2:	b003      	add	sp, #12
 80196d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80196d8:	200000c8 	.word	0x200000c8

080196dc <_findenv_r>:
 80196dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196e0:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8019750 <_findenv_r+0x74>
 80196e4:	4606      	mov	r6, r0
 80196e6:	4689      	mov	r9, r1
 80196e8:	4617      	mov	r7, r2
 80196ea:	f002 fb05 	bl	801bcf8 <__env_lock>
 80196ee:	f8da 4000 	ldr.w	r4, [sl]
 80196f2:	b134      	cbz	r4, 8019702 <_findenv_r+0x26>
 80196f4:	464b      	mov	r3, r9
 80196f6:	4698      	mov	r8, r3
 80196f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80196fc:	b13a      	cbz	r2, 801970e <_findenv_r+0x32>
 80196fe:	2a3d      	cmp	r2, #61	@ 0x3d
 8019700:	d1f9      	bne.n	80196f6 <_findenv_r+0x1a>
 8019702:	4630      	mov	r0, r6
 8019704:	f002 fafe 	bl	801bd04 <__env_unlock>
 8019708:	2000      	movs	r0, #0
 801970a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801970e:	eba8 0809 	sub.w	r8, r8, r9
 8019712:	46a3      	mov	fp, r4
 8019714:	f854 0b04 	ldr.w	r0, [r4], #4
 8019718:	2800      	cmp	r0, #0
 801971a:	d0f2      	beq.n	8019702 <_findenv_r+0x26>
 801971c:	4642      	mov	r2, r8
 801971e:	4649      	mov	r1, r9
 8019720:	f001 fb5b 	bl	801adda <strncmp>
 8019724:	2800      	cmp	r0, #0
 8019726:	d1f4      	bne.n	8019712 <_findenv_r+0x36>
 8019728:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801972c:	eb03 0508 	add.w	r5, r3, r8
 8019730:	f813 3008 	ldrb.w	r3, [r3, r8]
 8019734:	2b3d      	cmp	r3, #61	@ 0x3d
 8019736:	d1ec      	bne.n	8019712 <_findenv_r+0x36>
 8019738:	f8da 3000 	ldr.w	r3, [sl]
 801973c:	ebab 0303 	sub.w	r3, fp, r3
 8019740:	109b      	asrs	r3, r3, #2
 8019742:	4630      	mov	r0, r6
 8019744:	603b      	str	r3, [r7, #0]
 8019746:	f002 fadd 	bl	801bd04 <__env_unlock>
 801974a:	1c68      	adds	r0, r5, #1
 801974c:	e7dd      	b.n	801970a <_findenv_r+0x2e>
 801974e:	bf00      	nop
 8019750:	20000008 	.word	0x20000008

08019754 <malloc>:
 8019754:	4b02      	ldr	r3, [pc, #8]	@ (8019760 <malloc+0xc>)
 8019756:	4601      	mov	r1, r0
 8019758:	6818      	ldr	r0, [r3, #0]
 801975a:	f000 b82d 	b.w	80197b8 <_malloc_r>
 801975e:	bf00      	nop
 8019760:	200000c8 	.word	0x200000c8

08019764 <free>:
 8019764:	4b02      	ldr	r3, [pc, #8]	@ (8019770 <free+0xc>)
 8019766:	4601      	mov	r1, r0
 8019768:	6818      	ldr	r0, [r3, #0]
 801976a:	f002 bad1 	b.w	801bd10 <_free_r>
 801976e:	bf00      	nop
 8019770:	200000c8 	.word	0x200000c8

08019774 <sbrk_aligned>:
 8019774:	b570      	push	{r4, r5, r6, lr}
 8019776:	4e0f      	ldr	r6, [pc, #60]	@ (80197b4 <sbrk_aligned+0x40>)
 8019778:	460c      	mov	r4, r1
 801977a:	6831      	ldr	r1, [r6, #0]
 801977c:	4605      	mov	r5, r0
 801977e:	b911      	cbnz	r1, 8019786 <sbrk_aligned+0x12>
 8019780:	f001 fbe2 	bl	801af48 <_sbrk_r>
 8019784:	6030      	str	r0, [r6, #0]
 8019786:	4621      	mov	r1, r4
 8019788:	4628      	mov	r0, r5
 801978a:	f001 fbdd 	bl	801af48 <_sbrk_r>
 801978e:	1c43      	adds	r3, r0, #1
 8019790:	d103      	bne.n	801979a <sbrk_aligned+0x26>
 8019792:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8019796:	4620      	mov	r0, r4
 8019798:	bd70      	pop	{r4, r5, r6, pc}
 801979a:	1cc4      	adds	r4, r0, #3
 801979c:	f024 0403 	bic.w	r4, r4, #3
 80197a0:	42a0      	cmp	r0, r4
 80197a2:	d0f8      	beq.n	8019796 <sbrk_aligned+0x22>
 80197a4:	1a21      	subs	r1, r4, r0
 80197a6:	4628      	mov	r0, r5
 80197a8:	f001 fbce 	bl	801af48 <_sbrk_r>
 80197ac:	3001      	adds	r0, #1
 80197ae:	d1f2      	bne.n	8019796 <sbrk_aligned+0x22>
 80197b0:	e7ef      	b.n	8019792 <sbrk_aligned+0x1e>
 80197b2:	bf00      	nop
 80197b4:	20011c80 	.word	0x20011c80

080197b8 <_malloc_r>:
 80197b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80197bc:	1ccd      	adds	r5, r1, #3
 80197be:	f025 0503 	bic.w	r5, r5, #3
 80197c2:	3508      	adds	r5, #8
 80197c4:	2d0c      	cmp	r5, #12
 80197c6:	bf38      	it	cc
 80197c8:	250c      	movcc	r5, #12
 80197ca:	2d00      	cmp	r5, #0
 80197cc:	4606      	mov	r6, r0
 80197ce:	db01      	blt.n	80197d4 <_malloc_r+0x1c>
 80197d0:	42a9      	cmp	r1, r5
 80197d2:	d904      	bls.n	80197de <_malloc_r+0x26>
 80197d4:	230c      	movs	r3, #12
 80197d6:	6033      	str	r3, [r6, #0]
 80197d8:	2000      	movs	r0, #0
 80197da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80197de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80198b4 <_malloc_r+0xfc>
 80197e2:	f000 f869 	bl	80198b8 <__malloc_lock>
 80197e6:	f8d8 3000 	ldr.w	r3, [r8]
 80197ea:	461c      	mov	r4, r3
 80197ec:	bb44      	cbnz	r4, 8019840 <_malloc_r+0x88>
 80197ee:	4629      	mov	r1, r5
 80197f0:	4630      	mov	r0, r6
 80197f2:	f7ff ffbf 	bl	8019774 <sbrk_aligned>
 80197f6:	1c43      	adds	r3, r0, #1
 80197f8:	4604      	mov	r4, r0
 80197fa:	d158      	bne.n	80198ae <_malloc_r+0xf6>
 80197fc:	f8d8 4000 	ldr.w	r4, [r8]
 8019800:	4627      	mov	r7, r4
 8019802:	2f00      	cmp	r7, #0
 8019804:	d143      	bne.n	801988e <_malloc_r+0xd6>
 8019806:	2c00      	cmp	r4, #0
 8019808:	d04b      	beq.n	80198a2 <_malloc_r+0xea>
 801980a:	6823      	ldr	r3, [r4, #0]
 801980c:	4639      	mov	r1, r7
 801980e:	4630      	mov	r0, r6
 8019810:	eb04 0903 	add.w	r9, r4, r3
 8019814:	f001 fb98 	bl	801af48 <_sbrk_r>
 8019818:	4581      	cmp	r9, r0
 801981a:	d142      	bne.n	80198a2 <_malloc_r+0xea>
 801981c:	6821      	ldr	r1, [r4, #0]
 801981e:	1a6d      	subs	r5, r5, r1
 8019820:	4629      	mov	r1, r5
 8019822:	4630      	mov	r0, r6
 8019824:	f7ff ffa6 	bl	8019774 <sbrk_aligned>
 8019828:	3001      	adds	r0, #1
 801982a:	d03a      	beq.n	80198a2 <_malloc_r+0xea>
 801982c:	6823      	ldr	r3, [r4, #0]
 801982e:	442b      	add	r3, r5
 8019830:	6023      	str	r3, [r4, #0]
 8019832:	f8d8 3000 	ldr.w	r3, [r8]
 8019836:	685a      	ldr	r2, [r3, #4]
 8019838:	bb62      	cbnz	r2, 8019894 <_malloc_r+0xdc>
 801983a:	f8c8 7000 	str.w	r7, [r8]
 801983e:	e00f      	b.n	8019860 <_malloc_r+0xa8>
 8019840:	6822      	ldr	r2, [r4, #0]
 8019842:	1b52      	subs	r2, r2, r5
 8019844:	d420      	bmi.n	8019888 <_malloc_r+0xd0>
 8019846:	2a0b      	cmp	r2, #11
 8019848:	d917      	bls.n	801987a <_malloc_r+0xc2>
 801984a:	1961      	adds	r1, r4, r5
 801984c:	42a3      	cmp	r3, r4
 801984e:	6025      	str	r5, [r4, #0]
 8019850:	bf18      	it	ne
 8019852:	6059      	strne	r1, [r3, #4]
 8019854:	6863      	ldr	r3, [r4, #4]
 8019856:	bf08      	it	eq
 8019858:	f8c8 1000 	streq.w	r1, [r8]
 801985c:	5162      	str	r2, [r4, r5]
 801985e:	604b      	str	r3, [r1, #4]
 8019860:	4630      	mov	r0, r6
 8019862:	f000 f82f 	bl	80198c4 <__malloc_unlock>
 8019866:	f104 000b 	add.w	r0, r4, #11
 801986a:	1d23      	adds	r3, r4, #4
 801986c:	f020 0007 	bic.w	r0, r0, #7
 8019870:	1ac2      	subs	r2, r0, r3
 8019872:	bf1c      	itt	ne
 8019874:	1a1b      	subne	r3, r3, r0
 8019876:	50a3      	strne	r3, [r4, r2]
 8019878:	e7af      	b.n	80197da <_malloc_r+0x22>
 801987a:	6862      	ldr	r2, [r4, #4]
 801987c:	42a3      	cmp	r3, r4
 801987e:	bf0c      	ite	eq
 8019880:	f8c8 2000 	streq.w	r2, [r8]
 8019884:	605a      	strne	r2, [r3, #4]
 8019886:	e7eb      	b.n	8019860 <_malloc_r+0xa8>
 8019888:	4623      	mov	r3, r4
 801988a:	6864      	ldr	r4, [r4, #4]
 801988c:	e7ae      	b.n	80197ec <_malloc_r+0x34>
 801988e:	463c      	mov	r4, r7
 8019890:	687f      	ldr	r7, [r7, #4]
 8019892:	e7b6      	b.n	8019802 <_malloc_r+0x4a>
 8019894:	461a      	mov	r2, r3
 8019896:	685b      	ldr	r3, [r3, #4]
 8019898:	42a3      	cmp	r3, r4
 801989a:	d1fb      	bne.n	8019894 <_malloc_r+0xdc>
 801989c:	2300      	movs	r3, #0
 801989e:	6053      	str	r3, [r2, #4]
 80198a0:	e7de      	b.n	8019860 <_malloc_r+0xa8>
 80198a2:	230c      	movs	r3, #12
 80198a4:	6033      	str	r3, [r6, #0]
 80198a6:	4630      	mov	r0, r6
 80198a8:	f000 f80c 	bl	80198c4 <__malloc_unlock>
 80198ac:	e794      	b.n	80197d8 <_malloc_r+0x20>
 80198ae:	6005      	str	r5, [r0, #0]
 80198b0:	e7d6      	b.n	8019860 <_malloc_r+0xa8>
 80198b2:	bf00      	nop
 80198b4:	20011c84 	.word	0x20011c84

080198b8 <__malloc_lock>:
 80198b8:	4801      	ldr	r0, [pc, #4]	@ (80198c0 <__malloc_lock+0x8>)
 80198ba:	f001 bb92 	b.w	801afe2 <__retarget_lock_acquire_recursive>
 80198be:	bf00      	nop
 80198c0:	20011dc9 	.word	0x20011dc9

080198c4 <__malloc_unlock>:
 80198c4:	4801      	ldr	r0, [pc, #4]	@ (80198cc <__malloc_unlock+0x8>)
 80198c6:	f001 bb8d 	b.w	801afe4 <__retarget_lock_release_recursive>
 80198ca:	bf00      	nop
 80198cc:	20011dc9 	.word	0x20011dc9

080198d0 <srand>:
 80198d0:	b538      	push	{r3, r4, r5, lr}
 80198d2:	4b10      	ldr	r3, [pc, #64]	@ (8019914 <srand+0x44>)
 80198d4:	681d      	ldr	r5, [r3, #0]
 80198d6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80198d8:	4604      	mov	r4, r0
 80198da:	b9b3      	cbnz	r3, 801990a <srand+0x3a>
 80198dc:	2018      	movs	r0, #24
 80198de:	f7ff ff39 	bl	8019754 <malloc>
 80198e2:	4602      	mov	r2, r0
 80198e4:	6328      	str	r0, [r5, #48]	@ 0x30
 80198e6:	b920      	cbnz	r0, 80198f2 <srand+0x22>
 80198e8:	4b0b      	ldr	r3, [pc, #44]	@ (8019918 <srand+0x48>)
 80198ea:	480c      	ldr	r0, [pc, #48]	@ (801991c <srand+0x4c>)
 80198ec:	2146      	movs	r1, #70	@ 0x46
 80198ee:	f001 fb97 	bl	801b020 <__assert_func>
 80198f2:	490b      	ldr	r1, [pc, #44]	@ (8019920 <srand+0x50>)
 80198f4:	4b0b      	ldr	r3, [pc, #44]	@ (8019924 <srand+0x54>)
 80198f6:	e9c0 1300 	strd	r1, r3, [r0]
 80198fa:	4b0b      	ldr	r3, [pc, #44]	@ (8019928 <srand+0x58>)
 80198fc:	6083      	str	r3, [r0, #8]
 80198fe:	230b      	movs	r3, #11
 8019900:	8183      	strh	r3, [r0, #12]
 8019902:	2100      	movs	r1, #0
 8019904:	2001      	movs	r0, #1
 8019906:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801990a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801990c:	2200      	movs	r2, #0
 801990e:	611c      	str	r4, [r3, #16]
 8019910:	615a      	str	r2, [r3, #20]
 8019912:	bd38      	pop	{r3, r4, r5, pc}
 8019914:	200000c8 	.word	0x200000c8
 8019918:	080209b8 	.word	0x080209b8
 801991c:	080209cf 	.word	0x080209cf
 8019920:	abcd330e 	.word	0xabcd330e
 8019924:	e66d1234 	.word	0xe66d1234
 8019928:	0005deec 	.word	0x0005deec

0801992c <rand>:
 801992c:	4b16      	ldr	r3, [pc, #88]	@ (8019988 <rand+0x5c>)
 801992e:	b510      	push	{r4, lr}
 8019930:	681c      	ldr	r4, [r3, #0]
 8019932:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019934:	b9b3      	cbnz	r3, 8019964 <rand+0x38>
 8019936:	2018      	movs	r0, #24
 8019938:	f7ff ff0c 	bl	8019754 <malloc>
 801993c:	4602      	mov	r2, r0
 801993e:	6320      	str	r0, [r4, #48]	@ 0x30
 8019940:	b920      	cbnz	r0, 801994c <rand+0x20>
 8019942:	4b12      	ldr	r3, [pc, #72]	@ (801998c <rand+0x60>)
 8019944:	4812      	ldr	r0, [pc, #72]	@ (8019990 <rand+0x64>)
 8019946:	2152      	movs	r1, #82	@ 0x52
 8019948:	f001 fb6a 	bl	801b020 <__assert_func>
 801994c:	4911      	ldr	r1, [pc, #68]	@ (8019994 <rand+0x68>)
 801994e:	4b12      	ldr	r3, [pc, #72]	@ (8019998 <rand+0x6c>)
 8019950:	e9c0 1300 	strd	r1, r3, [r0]
 8019954:	4b11      	ldr	r3, [pc, #68]	@ (801999c <rand+0x70>)
 8019956:	6083      	str	r3, [r0, #8]
 8019958:	230b      	movs	r3, #11
 801995a:	8183      	strh	r3, [r0, #12]
 801995c:	2100      	movs	r1, #0
 801995e:	2001      	movs	r0, #1
 8019960:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019964:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8019966:	480e      	ldr	r0, [pc, #56]	@ (80199a0 <rand+0x74>)
 8019968:	690b      	ldr	r3, [r1, #16]
 801996a:	694c      	ldr	r4, [r1, #20]
 801996c:	4a0d      	ldr	r2, [pc, #52]	@ (80199a4 <rand+0x78>)
 801996e:	4358      	muls	r0, r3
 8019970:	fb02 0004 	mla	r0, r2, r4, r0
 8019974:	fba3 3202 	umull	r3, r2, r3, r2
 8019978:	3301      	adds	r3, #1
 801997a:	eb40 0002 	adc.w	r0, r0, r2
 801997e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8019982:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8019986:	bd10      	pop	{r4, pc}
 8019988:	200000c8 	.word	0x200000c8
 801998c:	080209b8 	.word	0x080209b8
 8019990:	080209cf 	.word	0x080209cf
 8019994:	abcd330e 	.word	0xabcd330e
 8019998:	e66d1234 	.word	0xe66d1234
 801999c:	0005deec 	.word	0x0005deec
 80199a0:	5851f42d 	.word	0x5851f42d
 80199a4:	4c957f2d 	.word	0x4c957f2d

080199a8 <realloc>:
 80199a8:	4b02      	ldr	r3, [pc, #8]	@ (80199b4 <realloc+0xc>)
 80199aa:	460a      	mov	r2, r1
 80199ac:	4601      	mov	r1, r0
 80199ae:	6818      	ldr	r0, [r3, #0]
 80199b0:	f000 b802 	b.w	80199b8 <_realloc_r>
 80199b4:	200000c8 	.word	0x200000c8

080199b8 <_realloc_r>:
 80199b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199bc:	4680      	mov	r8, r0
 80199be:	4615      	mov	r5, r2
 80199c0:	460c      	mov	r4, r1
 80199c2:	b921      	cbnz	r1, 80199ce <_realloc_r+0x16>
 80199c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80199c8:	4611      	mov	r1, r2
 80199ca:	f7ff bef5 	b.w	80197b8 <_malloc_r>
 80199ce:	b92a      	cbnz	r2, 80199dc <_realloc_r+0x24>
 80199d0:	f002 f99e 	bl	801bd10 <_free_r>
 80199d4:	2400      	movs	r4, #0
 80199d6:	4620      	mov	r0, r4
 80199d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80199dc:	f002 fe94 	bl	801c708 <_malloc_usable_size_r>
 80199e0:	4285      	cmp	r5, r0
 80199e2:	4606      	mov	r6, r0
 80199e4:	d802      	bhi.n	80199ec <_realloc_r+0x34>
 80199e6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80199ea:	d8f4      	bhi.n	80199d6 <_realloc_r+0x1e>
 80199ec:	4629      	mov	r1, r5
 80199ee:	4640      	mov	r0, r8
 80199f0:	f7ff fee2 	bl	80197b8 <_malloc_r>
 80199f4:	4607      	mov	r7, r0
 80199f6:	2800      	cmp	r0, #0
 80199f8:	d0ec      	beq.n	80199d4 <_realloc_r+0x1c>
 80199fa:	42b5      	cmp	r5, r6
 80199fc:	462a      	mov	r2, r5
 80199fe:	4621      	mov	r1, r4
 8019a00:	bf28      	it	cs
 8019a02:	4632      	movcs	r2, r6
 8019a04:	f001 faf7 	bl	801aff6 <memcpy>
 8019a08:	4621      	mov	r1, r4
 8019a0a:	4640      	mov	r0, r8
 8019a0c:	f002 f980 	bl	801bd10 <_free_r>
 8019a10:	463c      	mov	r4, r7
 8019a12:	e7e0      	b.n	80199d6 <_realloc_r+0x1e>

08019a14 <_strtoul_l.constprop.0>:
 8019a14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019a18:	4e34      	ldr	r6, [pc, #208]	@ (8019aec <_strtoul_l.constprop.0+0xd8>)
 8019a1a:	4686      	mov	lr, r0
 8019a1c:	460d      	mov	r5, r1
 8019a1e:	4628      	mov	r0, r5
 8019a20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019a24:	5d37      	ldrb	r7, [r6, r4]
 8019a26:	f017 0708 	ands.w	r7, r7, #8
 8019a2a:	d1f8      	bne.n	8019a1e <_strtoul_l.constprop.0+0xa>
 8019a2c:	2c2d      	cmp	r4, #45	@ 0x2d
 8019a2e:	d12f      	bne.n	8019a90 <_strtoul_l.constprop.0+0x7c>
 8019a30:	782c      	ldrb	r4, [r5, #0]
 8019a32:	2701      	movs	r7, #1
 8019a34:	1c85      	adds	r5, r0, #2
 8019a36:	f033 0010 	bics.w	r0, r3, #16
 8019a3a:	d109      	bne.n	8019a50 <_strtoul_l.constprop.0+0x3c>
 8019a3c:	2c30      	cmp	r4, #48	@ 0x30
 8019a3e:	d12c      	bne.n	8019a9a <_strtoul_l.constprop.0+0x86>
 8019a40:	7828      	ldrb	r0, [r5, #0]
 8019a42:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8019a46:	2858      	cmp	r0, #88	@ 0x58
 8019a48:	d127      	bne.n	8019a9a <_strtoul_l.constprop.0+0x86>
 8019a4a:	786c      	ldrb	r4, [r5, #1]
 8019a4c:	2310      	movs	r3, #16
 8019a4e:	3502      	adds	r5, #2
 8019a50:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8019a54:	2600      	movs	r6, #0
 8019a56:	fbb8 f8f3 	udiv	r8, r8, r3
 8019a5a:	fb03 f908 	mul.w	r9, r3, r8
 8019a5e:	ea6f 0909 	mvn.w	r9, r9
 8019a62:	4630      	mov	r0, r6
 8019a64:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8019a68:	f1bc 0f09 	cmp.w	ip, #9
 8019a6c:	d81c      	bhi.n	8019aa8 <_strtoul_l.constprop.0+0x94>
 8019a6e:	4664      	mov	r4, ip
 8019a70:	42a3      	cmp	r3, r4
 8019a72:	dd2a      	ble.n	8019aca <_strtoul_l.constprop.0+0xb6>
 8019a74:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8019a78:	d007      	beq.n	8019a8a <_strtoul_l.constprop.0+0x76>
 8019a7a:	4580      	cmp	r8, r0
 8019a7c:	d322      	bcc.n	8019ac4 <_strtoul_l.constprop.0+0xb0>
 8019a7e:	d101      	bne.n	8019a84 <_strtoul_l.constprop.0+0x70>
 8019a80:	45a1      	cmp	r9, r4
 8019a82:	db1f      	blt.n	8019ac4 <_strtoul_l.constprop.0+0xb0>
 8019a84:	fb00 4003 	mla	r0, r0, r3, r4
 8019a88:	2601      	movs	r6, #1
 8019a8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019a8e:	e7e9      	b.n	8019a64 <_strtoul_l.constprop.0+0x50>
 8019a90:	2c2b      	cmp	r4, #43	@ 0x2b
 8019a92:	bf04      	itt	eq
 8019a94:	782c      	ldrbeq	r4, [r5, #0]
 8019a96:	1c85      	addeq	r5, r0, #2
 8019a98:	e7cd      	b.n	8019a36 <_strtoul_l.constprop.0+0x22>
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	d1d8      	bne.n	8019a50 <_strtoul_l.constprop.0+0x3c>
 8019a9e:	2c30      	cmp	r4, #48	@ 0x30
 8019aa0:	bf0c      	ite	eq
 8019aa2:	2308      	moveq	r3, #8
 8019aa4:	230a      	movne	r3, #10
 8019aa6:	e7d3      	b.n	8019a50 <_strtoul_l.constprop.0+0x3c>
 8019aa8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8019aac:	f1bc 0f19 	cmp.w	ip, #25
 8019ab0:	d801      	bhi.n	8019ab6 <_strtoul_l.constprop.0+0xa2>
 8019ab2:	3c37      	subs	r4, #55	@ 0x37
 8019ab4:	e7dc      	b.n	8019a70 <_strtoul_l.constprop.0+0x5c>
 8019ab6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8019aba:	f1bc 0f19 	cmp.w	ip, #25
 8019abe:	d804      	bhi.n	8019aca <_strtoul_l.constprop.0+0xb6>
 8019ac0:	3c57      	subs	r4, #87	@ 0x57
 8019ac2:	e7d5      	b.n	8019a70 <_strtoul_l.constprop.0+0x5c>
 8019ac4:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8019ac8:	e7df      	b.n	8019a8a <_strtoul_l.constprop.0+0x76>
 8019aca:	1c73      	adds	r3, r6, #1
 8019acc:	d106      	bne.n	8019adc <_strtoul_l.constprop.0+0xc8>
 8019ace:	2322      	movs	r3, #34	@ 0x22
 8019ad0:	f8ce 3000 	str.w	r3, [lr]
 8019ad4:	4630      	mov	r0, r6
 8019ad6:	b932      	cbnz	r2, 8019ae6 <_strtoul_l.constprop.0+0xd2>
 8019ad8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019adc:	b107      	cbz	r7, 8019ae0 <_strtoul_l.constprop.0+0xcc>
 8019ade:	4240      	negs	r0, r0
 8019ae0:	2a00      	cmp	r2, #0
 8019ae2:	d0f9      	beq.n	8019ad8 <_strtoul_l.constprop.0+0xc4>
 8019ae4:	b106      	cbz	r6, 8019ae8 <_strtoul_l.constprop.0+0xd4>
 8019ae6:	1e69      	subs	r1, r5, #1
 8019ae8:	6011      	str	r1, [r2, #0]
 8019aea:	e7f5      	b.n	8019ad8 <_strtoul_l.constprop.0+0xc4>
 8019aec:	08020a28 	.word	0x08020a28

08019af0 <_strtoul_r>:
 8019af0:	f7ff bf90 	b.w	8019a14 <_strtoul_l.constprop.0>

08019af4 <strtoul>:
 8019af4:	4613      	mov	r3, r2
 8019af6:	460a      	mov	r2, r1
 8019af8:	4601      	mov	r1, r0
 8019afa:	4802      	ldr	r0, [pc, #8]	@ (8019b04 <strtoul+0x10>)
 8019afc:	6800      	ldr	r0, [r0, #0]
 8019afe:	f7ff bf89 	b.w	8019a14 <_strtoul_l.constprop.0>
 8019b02:	bf00      	nop
 8019b04:	200000c8 	.word	0x200000c8

08019b08 <__cvt>:
 8019b08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019b0c:	ec57 6b10 	vmov	r6, r7, d0
 8019b10:	2f00      	cmp	r7, #0
 8019b12:	460c      	mov	r4, r1
 8019b14:	4619      	mov	r1, r3
 8019b16:	463b      	mov	r3, r7
 8019b18:	bfbb      	ittet	lt
 8019b1a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8019b1e:	461f      	movlt	r7, r3
 8019b20:	2300      	movge	r3, #0
 8019b22:	232d      	movlt	r3, #45	@ 0x2d
 8019b24:	700b      	strb	r3, [r1, #0]
 8019b26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019b28:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8019b2c:	4691      	mov	r9, r2
 8019b2e:	f023 0820 	bic.w	r8, r3, #32
 8019b32:	bfbc      	itt	lt
 8019b34:	4632      	movlt	r2, r6
 8019b36:	4616      	movlt	r6, r2
 8019b38:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8019b3c:	d005      	beq.n	8019b4a <__cvt+0x42>
 8019b3e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8019b42:	d100      	bne.n	8019b46 <__cvt+0x3e>
 8019b44:	3401      	adds	r4, #1
 8019b46:	2102      	movs	r1, #2
 8019b48:	e000      	b.n	8019b4c <__cvt+0x44>
 8019b4a:	2103      	movs	r1, #3
 8019b4c:	ab03      	add	r3, sp, #12
 8019b4e:	9301      	str	r3, [sp, #4]
 8019b50:	ab02      	add	r3, sp, #8
 8019b52:	9300      	str	r3, [sp, #0]
 8019b54:	ec47 6b10 	vmov	d0, r6, r7
 8019b58:	4653      	mov	r3, sl
 8019b5a:	4622      	mov	r2, r4
 8019b5c:	f001 fb08 	bl	801b170 <_dtoa_r>
 8019b60:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8019b64:	4605      	mov	r5, r0
 8019b66:	d119      	bne.n	8019b9c <__cvt+0x94>
 8019b68:	f019 0f01 	tst.w	r9, #1
 8019b6c:	d00e      	beq.n	8019b8c <__cvt+0x84>
 8019b6e:	eb00 0904 	add.w	r9, r0, r4
 8019b72:	2200      	movs	r2, #0
 8019b74:	2300      	movs	r3, #0
 8019b76:	4630      	mov	r0, r6
 8019b78:	4639      	mov	r1, r7
 8019b7a:	f7e6 ffbd 	bl	8000af8 <__aeabi_dcmpeq>
 8019b7e:	b108      	cbz	r0, 8019b84 <__cvt+0x7c>
 8019b80:	f8cd 900c 	str.w	r9, [sp, #12]
 8019b84:	2230      	movs	r2, #48	@ 0x30
 8019b86:	9b03      	ldr	r3, [sp, #12]
 8019b88:	454b      	cmp	r3, r9
 8019b8a:	d31e      	bcc.n	8019bca <__cvt+0xc2>
 8019b8c:	9b03      	ldr	r3, [sp, #12]
 8019b8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019b90:	1b5b      	subs	r3, r3, r5
 8019b92:	4628      	mov	r0, r5
 8019b94:	6013      	str	r3, [r2, #0]
 8019b96:	b004      	add	sp, #16
 8019b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b9c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8019ba0:	eb00 0904 	add.w	r9, r0, r4
 8019ba4:	d1e5      	bne.n	8019b72 <__cvt+0x6a>
 8019ba6:	7803      	ldrb	r3, [r0, #0]
 8019ba8:	2b30      	cmp	r3, #48	@ 0x30
 8019baa:	d10a      	bne.n	8019bc2 <__cvt+0xba>
 8019bac:	2200      	movs	r2, #0
 8019bae:	2300      	movs	r3, #0
 8019bb0:	4630      	mov	r0, r6
 8019bb2:	4639      	mov	r1, r7
 8019bb4:	f7e6 ffa0 	bl	8000af8 <__aeabi_dcmpeq>
 8019bb8:	b918      	cbnz	r0, 8019bc2 <__cvt+0xba>
 8019bba:	f1c4 0401 	rsb	r4, r4, #1
 8019bbe:	f8ca 4000 	str.w	r4, [sl]
 8019bc2:	f8da 3000 	ldr.w	r3, [sl]
 8019bc6:	4499      	add	r9, r3
 8019bc8:	e7d3      	b.n	8019b72 <__cvt+0x6a>
 8019bca:	1c59      	adds	r1, r3, #1
 8019bcc:	9103      	str	r1, [sp, #12]
 8019bce:	701a      	strb	r2, [r3, #0]
 8019bd0:	e7d9      	b.n	8019b86 <__cvt+0x7e>

08019bd2 <__exponent>:
 8019bd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019bd4:	2900      	cmp	r1, #0
 8019bd6:	bfba      	itte	lt
 8019bd8:	4249      	neglt	r1, r1
 8019bda:	232d      	movlt	r3, #45	@ 0x2d
 8019bdc:	232b      	movge	r3, #43	@ 0x2b
 8019bde:	2909      	cmp	r1, #9
 8019be0:	7002      	strb	r2, [r0, #0]
 8019be2:	7043      	strb	r3, [r0, #1]
 8019be4:	dd29      	ble.n	8019c3a <__exponent+0x68>
 8019be6:	f10d 0307 	add.w	r3, sp, #7
 8019bea:	461d      	mov	r5, r3
 8019bec:	270a      	movs	r7, #10
 8019bee:	461a      	mov	r2, r3
 8019bf0:	fbb1 f6f7 	udiv	r6, r1, r7
 8019bf4:	fb07 1416 	mls	r4, r7, r6, r1
 8019bf8:	3430      	adds	r4, #48	@ 0x30
 8019bfa:	f802 4c01 	strb.w	r4, [r2, #-1]
 8019bfe:	460c      	mov	r4, r1
 8019c00:	2c63      	cmp	r4, #99	@ 0x63
 8019c02:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8019c06:	4631      	mov	r1, r6
 8019c08:	dcf1      	bgt.n	8019bee <__exponent+0x1c>
 8019c0a:	3130      	adds	r1, #48	@ 0x30
 8019c0c:	1e94      	subs	r4, r2, #2
 8019c0e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8019c12:	1c41      	adds	r1, r0, #1
 8019c14:	4623      	mov	r3, r4
 8019c16:	42ab      	cmp	r3, r5
 8019c18:	d30a      	bcc.n	8019c30 <__exponent+0x5e>
 8019c1a:	f10d 0309 	add.w	r3, sp, #9
 8019c1e:	1a9b      	subs	r3, r3, r2
 8019c20:	42ac      	cmp	r4, r5
 8019c22:	bf88      	it	hi
 8019c24:	2300      	movhi	r3, #0
 8019c26:	3302      	adds	r3, #2
 8019c28:	4403      	add	r3, r0
 8019c2a:	1a18      	subs	r0, r3, r0
 8019c2c:	b003      	add	sp, #12
 8019c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019c30:	f813 6b01 	ldrb.w	r6, [r3], #1
 8019c34:	f801 6f01 	strb.w	r6, [r1, #1]!
 8019c38:	e7ed      	b.n	8019c16 <__exponent+0x44>
 8019c3a:	2330      	movs	r3, #48	@ 0x30
 8019c3c:	3130      	adds	r1, #48	@ 0x30
 8019c3e:	7083      	strb	r3, [r0, #2]
 8019c40:	70c1      	strb	r1, [r0, #3]
 8019c42:	1d03      	adds	r3, r0, #4
 8019c44:	e7f1      	b.n	8019c2a <__exponent+0x58>
	...

08019c48 <_printf_float>:
 8019c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c4c:	b08d      	sub	sp, #52	@ 0x34
 8019c4e:	460c      	mov	r4, r1
 8019c50:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8019c54:	4616      	mov	r6, r2
 8019c56:	461f      	mov	r7, r3
 8019c58:	4605      	mov	r5, r0
 8019c5a:	f001 f8e7 	bl	801ae2c <_localeconv_r>
 8019c5e:	6803      	ldr	r3, [r0, #0]
 8019c60:	9304      	str	r3, [sp, #16]
 8019c62:	4618      	mov	r0, r3
 8019c64:	f7e6 fb1c 	bl	80002a0 <strlen>
 8019c68:	2300      	movs	r3, #0
 8019c6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8019c6c:	f8d8 3000 	ldr.w	r3, [r8]
 8019c70:	9005      	str	r0, [sp, #20]
 8019c72:	3307      	adds	r3, #7
 8019c74:	f023 0307 	bic.w	r3, r3, #7
 8019c78:	f103 0208 	add.w	r2, r3, #8
 8019c7c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8019c80:	f8d4 b000 	ldr.w	fp, [r4]
 8019c84:	f8c8 2000 	str.w	r2, [r8]
 8019c88:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019c8c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8019c90:	9307      	str	r3, [sp, #28]
 8019c92:	f8cd 8018 	str.w	r8, [sp, #24]
 8019c96:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8019c9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019c9e:	4b9c      	ldr	r3, [pc, #624]	@ (8019f10 <_printf_float+0x2c8>)
 8019ca0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019ca4:	f7e6 ff5a 	bl	8000b5c <__aeabi_dcmpun>
 8019ca8:	bb70      	cbnz	r0, 8019d08 <_printf_float+0xc0>
 8019caa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019cae:	4b98      	ldr	r3, [pc, #608]	@ (8019f10 <_printf_float+0x2c8>)
 8019cb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019cb4:	f7e6 ff34 	bl	8000b20 <__aeabi_dcmple>
 8019cb8:	bb30      	cbnz	r0, 8019d08 <_printf_float+0xc0>
 8019cba:	2200      	movs	r2, #0
 8019cbc:	2300      	movs	r3, #0
 8019cbe:	4640      	mov	r0, r8
 8019cc0:	4649      	mov	r1, r9
 8019cc2:	f7e6 ff23 	bl	8000b0c <__aeabi_dcmplt>
 8019cc6:	b110      	cbz	r0, 8019cce <_printf_float+0x86>
 8019cc8:	232d      	movs	r3, #45	@ 0x2d
 8019cca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019cce:	4a91      	ldr	r2, [pc, #580]	@ (8019f14 <_printf_float+0x2cc>)
 8019cd0:	4b91      	ldr	r3, [pc, #580]	@ (8019f18 <_printf_float+0x2d0>)
 8019cd2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8019cd6:	bf94      	ite	ls
 8019cd8:	4690      	movls	r8, r2
 8019cda:	4698      	movhi	r8, r3
 8019cdc:	2303      	movs	r3, #3
 8019cde:	6123      	str	r3, [r4, #16]
 8019ce0:	f02b 0304 	bic.w	r3, fp, #4
 8019ce4:	6023      	str	r3, [r4, #0]
 8019ce6:	f04f 0900 	mov.w	r9, #0
 8019cea:	9700      	str	r7, [sp, #0]
 8019cec:	4633      	mov	r3, r6
 8019cee:	aa0b      	add	r2, sp, #44	@ 0x2c
 8019cf0:	4621      	mov	r1, r4
 8019cf2:	4628      	mov	r0, r5
 8019cf4:	f000 f9d2 	bl	801a09c <_printf_common>
 8019cf8:	3001      	adds	r0, #1
 8019cfa:	f040 808d 	bne.w	8019e18 <_printf_float+0x1d0>
 8019cfe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019d02:	b00d      	add	sp, #52	@ 0x34
 8019d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d08:	4642      	mov	r2, r8
 8019d0a:	464b      	mov	r3, r9
 8019d0c:	4640      	mov	r0, r8
 8019d0e:	4649      	mov	r1, r9
 8019d10:	f7e6 ff24 	bl	8000b5c <__aeabi_dcmpun>
 8019d14:	b140      	cbz	r0, 8019d28 <_printf_float+0xe0>
 8019d16:	464b      	mov	r3, r9
 8019d18:	2b00      	cmp	r3, #0
 8019d1a:	bfbc      	itt	lt
 8019d1c:	232d      	movlt	r3, #45	@ 0x2d
 8019d1e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8019d22:	4a7e      	ldr	r2, [pc, #504]	@ (8019f1c <_printf_float+0x2d4>)
 8019d24:	4b7e      	ldr	r3, [pc, #504]	@ (8019f20 <_printf_float+0x2d8>)
 8019d26:	e7d4      	b.n	8019cd2 <_printf_float+0x8a>
 8019d28:	6863      	ldr	r3, [r4, #4]
 8019d2a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8019d2e:	9206      	str	r2, [sp, #24]
 8019d30:	1c5a      	adds	r2, r3, #1
 8019d32:	d13b      	bne.n	8019dac <_printf_float+0x164>
 8019d34:	2306      	movs	r3, #6
 8019d36:	6063      	str	r3, [r4, #4]
 8019d38:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8019d3c:	2300      	movs	r3, #0
 8019d3e:	6022      	str	r2, [r4, #0]
 8019d40:	9303      	str	r3, [sp, #12]
 8019d42:	ab0a      	add	r3, sp, #40	@ 0x28
 8019d44:	e9cd a301 	strd	sl, r3, [sp, #4]
 8019d48:	ab09      	add	r3, sp, #36	@ 0x24
 8019d4a:	9300      	str	r3, [sp, #0]
 8019d4c:	6861      	ldr	r1, [r4, #4]
 8019d4e:	ec49 8b10 	vmov	d0, r8, r9
 8019d52:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8019d56:	4628      	mov	r0, r5
 8019d58:	f7ff fed6 	bl	8019b08 <__cvt>
 8019d5c:	9b06      	ldr	r3, [sp, #24]
 8019d5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019d60:	2b47      	cmp	r3, #71	@ 0x47
 8019d62:	4680      	mov	r8, r0
 8019d64:	d129      	bne.n	8019dba <_printf_float+0x172>
 8019d66:	1cc8      	adds	r0, r1, #3
 8019d68:	db02      	blt.n	8019d70 <_printf_float+0x128>
 8019d6a:	6863      	ldr	r3, [r4, #4]
 8019d6c:	4299      	cmp	r1, r3
 8019d6e:	dd41      	ble.n	8019df4 <_printf_float+0x1ac>
 8019d70:	f1aa 0a02 	sub.w	sl, sl, #2
 8019d74:	fa5f fa8a 	uxtb.w	sl, sl
 8019d78:	3901      	subs	r1, #1
 8019d7a:	4652      	mov	r2, sl
 8019d7c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8019d80:	9109      	str	r1, [sp, #36]	@ 0x24
 8019d82:	f7ff ff26 	bl	8019bd2 <__exponent>
 8019d86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019d88:	1813      	adds	r3, r2, r0
 8019d8a:	2a01      	cmp	r2, #1
 8019d8c:	4681      	mov	r9, r0
 8019d8e:	6123      	str	r3, [r4, #16]
 8019d90:	dc02      	bgt.n	8019d98 <_printf_float+0x150>
 8019d92:	6822      	ldr	r2, [r4, #0]
 8019d94:	07d2      	lsls	r2, r2, #31
 8019d96:	d501      	bpl.n	8019d9c <_printf_float+0x154>
 8019d98:	3301      	adds	r3, #1
 8019d9a:	6123      	str	r3, [r4, #16]
 8019d9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8019da0:	2b00      	cmp	r3, #0
 8019da2:	d0a2      	beq.n	8019cea <_printf_float+0xa2>
 8019da4:	232d      	movs	r3, #45	@ 0x2d
 8019da6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019daa:	e79e      	b.n	8019cea <_printf_float+0xa2>
 8019dac:	9a06      	ldr	r2, [sp, #24]
 8019dae:	2a47      	cmp	r2, #71	@ 0x47
 8019db0:	d1c2      	bne.n	8019d38 <_printf_float+0xf0>
 8019db2:	2b00      	cmp	r3, #0
 8019db4:	d1c0      	bne.n	8019d38 <_printf_float+0xf0>
 8019db6:	2301      	movs	r3, #1
 8019db8:	e7bd      	b.n	8019d36 <_printf_float+0xee>
 8019dba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8019dbe:	d9db      	bls.n	8019d78 <_printf_float+0x130>
 8019dc0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8019dc4:	d118      	bne.n	8019df8 <_printf_float+0x1b0>
 8019dc6:	2900      	cmp	r1, #0
 8019dc8:	6863      	ldr	r3, [r4, #4]
 8019dca:	dd0b      	ble.n	8019de4 <_printf_float+0x19c>
 8019dcc:	6121      	str	r1, [r4, #16]
 8019dce:	b913      	cbnz	r3, 8019dd6 <_printf_float+0x18e>
 8019dd0:	6822      	ldr	r2, [r4, #0]
 8019dd2:	07d0      	lsls	r0, r2, #31
 8019dd4:	d502      	bpl.n	8019ddc <_printf_float+0x194>
 8019dd6:	3301      	adds	r3, #1
 8019dd8:	440b      	add	r3, r1
 8019dda:	6123      	str	r3, [r4, #16]
 8019ddc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8019dde:	f04f 0900 	mov.w	r9, #0
 8019de2:	e7db      	b.n	8019d9c <_printf_float+0x154>
 8019de4:	b913      	cbnz	r3, 8019dec <_printf_float+0x1a4>
 8019de6:	6822      	ldr	r2, [r4, #0]
 8019de8:	07d2      	lsls	r2, r2, #31
 8019dea:	d501      	bpl.n	8019df0 <_printf_float+0x1a8>
 8019dec:	3302      	adds	r3, #2
 8019dee:	e7f4      	b.n	8019dda <_printf_float+0x192>
 8019df0:	2301      	movs	r3, #1
 8019df2:	e7f2      	b.n	8019dda <_printf_float+0x192>
 8019df4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8019df8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019dfa:	4299      	cmp	r1, r3
 8019dfc:	db05      	blt.n	8019e0a <_printf_float+0x1c2>
 8019dfe:	6823      	ldr	r3, [r4, #0]
 8019e00:	6121      	str	r1, [r4, #16]
 8019e02:	07d8      	lsls	r0, r3, #31
 8019e04:	d5ea      	bpl.n	8019ddc <_printf_float+0x194>
 8019e06:	1c4b      	adds	r3, r1, #1
 8019e08:	e7e7      	b.n	8019dda <_printf_float+0x192>
 8019e0a:	2900      	cmp	r1, #0
 8019e0c:	bfd4      	ite	le
 8019e0e:	f1c1 0202 	rsble	r2, r1, #2
 8019e12:	2201      	movgt	r2, #1
 8019e14:	4413      	add	r3, r2
 8019e16:	e7e0      	b.n	8019dda <_printf_float+0x192>
 8019e18:	6823      	ldr	r3, [r4, #0]
 8019e1a:	055a      	lsls	r2, r3, #21
 8019e1c:	d407      	bmi.n	8019e2e <_printf_float+0x1e6>
 8019e1e:	6923      	ldr	r3, [r4, #16]
 8019e20:	4642      	mov	r2, r8
 8019e22:	4631      	mov	r1, r6
 8019e24:	4628      	mov	r0, r5
 8019e26:	47b8      	blx	r7
 8019e28:	3001      	adds	r0, #1
 8019e2a:	d12b      	bne.n	8019e84 <_printf_float+0x23c>
 8019e2c:	e767      	b.n	8019cfe <_printf_float+0xb6>
 8019e2e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8019e32:	f240 80dd 	bls.w	8019ff0 <_printf_float+0x3a8>
 8019e36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8019e3a:	2200      	movs	r2, #0
 8019e3c:	2300      	movs	r3, #0
 8019e3e:	f7e6 fe5b 	bl	8000af8 <__aeabi_dcmpeq>
 8019e42:	2800      	cmp	r0, #0
 8019e44:	d033      	beq.n	8019eae <_printf_float+0x266>
 8019e46:	4a37      	ldr	r2, [pc, #220]	@ (8019f24 <_printf_float+0x2dc>)
 8019e48:	2301      	movs	r3, #1
 8019e4a:	4631      	mov	r1, r6
 8019e4c:	4628      	mov	r0, r5
 8019e4e:	47b8      	blx	r7
 8019e50:	3001      	adds	r0, #1
 8019e52:	f43f af54 	beq.w	8019cfe <_printf_float+0xb6>
 8019e56:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8019e5a:	4543      	cmp	r3, r8
 8019e5c:	db02      	blt.n	8019e64 <_printf_float+0x21c>
 8019e5e:	6823      	ldr	r3, [r4, #0]
 8019e60:	07d8      	lsls	r0, r3, #31
 8019e62:	d50f      	bpl.n	8019e84 <_printf_float+0x23c>
 8019e64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019e68:	4631      	mov	r1, r6
 8019e6a:	4628      	mov	r0, r5
 8019e6c:	47b8      	blx	r7
 8019e6e:	3001      	adds	r0, #1
 8019e70:	f43f af45 	beq.w	8019cfe <_printf_float+0xb6>
 8019e74:	f04f 0900 	mov.w	r9, #0
 8019e78:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8019e7c:	f104 0a1a 	add.w	sl, r4, #26
 8019e80:	45c8      	cmp	r8, r9
 8019e82:	dc09      	bgt.n	8019e98 <_printf_float+0x250>
 8019e84:	6823      	ldr	r3, [r4, #0]
 8019e86:	079b      	lsls	r3, r3, #30
 8019e88:	f100 8103 	bmi.w	801a092 <_printf_float+0x44a>
 8019e8c:	68e0      	ldr	r0, [r4, #12]
 8019e8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019e90:	4298      	cmp	r0, r3
 8019e92:	bfb8      	it	lt
 8019e94:	4618      	movlt	r0, r3
 8019e96:	e734      	b.n	8019d02 <_printf_float+0xba>
 8019e98:	2301      	movs	r3, #1
 8019e9a:	4652      	mov	r2, sl
 8019e9c:	4631      	mov	r1, r6
 8019e9e:	4628      	mov	r0, r5
 8019ea0:	47b8      	blx	r7
 8019ea2:	3001      	adds	r0, #1
 8019ea4:	f43f af2b 	beq.w	8019cfe <_printf_float+0xb6>
 8019ea8:	f109 0901 	add.w	r9, r9, #1
 8019eac:	e7e8      	b.n	8019e80 <_printf_float+0x238>
 8019eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019eb0:	2b00      	cmp	r3, #0
 8019eb2:	dc39      	bgt.n	8019f28 <_printf_float+0x2e0>
 8019eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8019f24 <_printf_float+0x2dc>)
 8019eb6:	2301      	movs	r3, #1
 8019eb8:	4631      	mov	r1, r6
 8019eba:	4628      	mov	r0, r5
 8019ebc:	47b8      	blx	r7
 8019ebe:	3001      	adds	r0, #1
 8019ec0:	f43f af1d 	beq.w	8019cfe <_printf_float+0xb6>
 8019ec4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8019ec8:	ea59 0303 	orrs.w	r3, r9, r3
 8019ecc:	d102      	bne.n	8019ed4 <_printf_float+0x28c>
 8019ece:	6823      	ldr	r3, [r4, #0]
 8019ed0:	07d9      	lsls	r1, r3, #31
 8019ed2:	d5d7      	bpl.n	8019e84 <_printf_float+0x23c>
 8019ed4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019ed8:	4631      	mov	r1, r6
 8019eda:	4628      	mov	r0, r5
 8019edc:	47b8      	blx	r7
 8019ede:	3001      	adds	r0, #1
 8019ee0:	f43f af0d 	beq.w	8019cfe <_printf_float+0xb6>
 8019ee4:	f04f 0a00 	mov.w	sl, #0
 8019ee8:	f104 0b1a 	add.w	fp, r4, #26
 8019eec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019eee:	425b      	negs	r3, r3
 8019ef0:	4553      	cmp	r3, sl
 8019ef2:	dc01      	bgt.n	8019ef8 <_printf_float+0x2b0>
 8019ef4:	464b      	mov	r3, r9
 8019ef6:	e793      	b.n	8019e20 <_printf_float+0x1d8>
 8019ef8:	2301      	movs	r3, #1
 8019efa:	465a      	mov	r2, fp
 8019efc:	4631      	mov	r1, r6
 8019efe:	4628      	mov	r0, r5
 8019f00:	47b8      	blx	r7
 8019f02:	3001      	adds	r0, #1
 8019f04:	f43f aefb 	beq.w	8019cfe <_printf_float+0xb6>
 8019f08:	f10a 0a01 	add.w	sl, sl, #1
 8019f0c:	e7ee      	b.n	8019eec <_printf_float+0x2a4>
 8019f0e:	bf00      	nop
 8019f10:	7fefffff 	.word	0x7fefffff
 8019f14:	08020b28 	.word	0x08020b28
 8019f18:	08020b2c 	.word	0x08020b2c
 8019f1c:	08020b30 	.word	0x08020b30
 8019f20:	08020b34 	.word	0x08020b34
 8019f24:	08020de7 	.word	0x08020de7
 8019f28:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8019f2a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8019f2e:	4553      	cmp	r3, sl
 8019f30:	bfa8      	it	ge
 8019f32:	4653      	movge	r3, sl
 8019f34:	2b00      	cmp	r3, #0
 8019f36:	4699      	mov	r9, r3
 8019f38:	dc36      	bgt.n	8019fa8 <_printf_float+0x360>
 8019f3a:	f04f 0b00 	mov.w	fp, #0
 8019f3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019f42:	f104 021a 	add.w	r2, r4, #26
 8019f46:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8019f48:	9306      	str	r3, [sp, #24]
 8019f4a:	eba3 0309 	sub.w	r3, r3, r9
 8019f4e:	455b      	cmp	r3, fp
 8019f50:	dc31      	bgt.n	8019fb6 <_printf_float+0x36e>
 8019f52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019f54:	459a      	cmp	sl, r3
 8019f56:	dc3a      	bgt.n	8019fce <_printf_float+0x386>
 8019f58:	6823      	ldr	r3, [r4, #0]
 8019f5a:	07da      	lsls	r2, r3, #31
 8019f5c:	d437      	bmi.n	8019fce <_printf_float+0x386>
 8019f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019f60:	ebaa 0903 	sub.w	r9, sl, r3
 8019f64:	9b06      	ldr	r3, [sp, #24]
 8019f66:	ebaa 0303 	sub.w	r3, sl, r3
 8019f6a:	4599      	cmp	r9, r3
 8019f6c:	bfa8      	it	ge
 8019f6e:	4699      	movge	r9, r3
 8019f70:	f1b9 0f00 	cmp.w	r9, #0
 8019f74:	dc33      	bgt.n	8019fde <_printf_float+0x396>
 8019f76:	f04f 0800 	mov.w	r8, #0
 8019f7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019f7e:	f104 0b1a 	add.w	fp, r4, #26
 8019f82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019f84:	ebaa 0303 	sub.w	r3, sl, r3
 8019f88:	eba3 0309 	sub.w	r3, r3, r9
 8019f8c:	4543      	cmp	r3, r8
 8019f8e:	f77f af79 	ble.w	8019e84 <_printf_float+0x23c>
 8019f92:	2301      	movs	r3, #1
 8019f94:	465a      	mov	r2, fp
 8019f96:	4631      	mov	r1, r6
 8019f98:	4628      	mov	r0, r5
 8019f9a:	47b8      	blx	r7
 8019f9c:	3001      	adds	r0, #1
 8019f9e:	f43f aeae 	beq.w	8019cfe <_printf_float+0xb6>
 8019fa2:	f108 0801 	add.w	r8, r8, #1
 8019fa6:	e7ec      	b.n	8019f82 <_printf_float+0x33a>
 8019fa8:	4642      	mov	r2, r8
 8019faa:	4631      	mov	r1, r6
 8019fac:	4628      	mov	r0, r5
 8019fae:	47b8      	blx	r7
 8019fb0:	3001      	adds	r0, #1
 8019fb2:	d1c2      	bne.n	8019f3a <_printf_float+0x2f2>
 8019fb4:	e6a3      	b.n	8019cfe <_printf_float+0xb6>
 8019fb6:	2301      	movs	r3, #1
 8019fb8:	4631      	mov	r1, r6
 8019fba:	4628      	mov	r0, r5
 8019fbc:	9206      	str	r2, [sp, #24]
 8019fbe:	47b8      	blx	r7
 8019fc0:	3001      	adds	r0, #1
 8019fc2:	f43f ae9c 	beq.w	8019cfe <_printf_float+0xb6>
 8019fc6:	9a06      	ldr	r2, [sp, #24]
 8019fc8:	f10b 0b01 	add.w	fp, fp, #1
 8019fcc:	e7bb      	b.n	8019f46 <_printf_float+0x2fe>
 8019fce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019fd2:	4631      	mov	r1, r6
 8019fd4:	4628      	mov	r0, r5
 8019fd6:	47b8      	blx	r7
 8019fd8:	3001      	adds	r0, #1
 8019fda:	d1c0      	bne.n	8019f5e <_printf_float+0x316>
 8019fdc:	e68f      	b.n	8019cfe <_printf_float+0xb6>
 8019fde:	9a06      	ldr	r2, [sp, #24]
 8019fe0:	464b      	mov	r3, r9
 8019fe2:	4442      	add	r2, r8
 8019fe4:	4631      	mov	r1, r6
 8019fe6:	4628      	mov	r0, r5
 8019fe8:	47b8      	blx	r7
 8019fea:	3001      	adds	r0, #1
 8019fec:	d1c3      	bne.n	8019f76 <_printf_float+0x32e>
 8019fee:	e686      	b.n	8019cfe <_printf_float+0xb6>
 8019ff0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8019ff4:	f1ba 0f01 	cmp.w	sl, #1
 8019ff8:	dc01      	bgt.n	8019ffe <_printf_float+0x3b6>
 8019ffa:	07db      	lsls	r3, r3, #31
 8019ffc:	d536      	bpl.n	801a06c <_printf_float+0x424>
 8019ffe:	2301      	movs	r3, #1
 801a000:	4642      	mov	r2, r8
 801a002:	4631      	mov	r1, r6
 801a004:	4628      	mov	r0, r5
 801a006:	47b8      	blx	r7
 801a008:	3001      	adds	r0, #1
 801a00a:	f43f ae78 	beq.w	8019cfe <_printf_float+0xb6>
 801a00e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a012:	4631      	mov	r1, r6
 801a014:	4628      	mov	r0, r5
 801a016:	47b8      	blx	r7
 801a018:	3001      	adds	r0, #1
 801a01a:	f43f ae70 	beq.w	8019cfe <_printf_float+0xb6>
 801a01e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801a022:	2200      	movs	r2, #0
 801a024:	2300      	movs	r3, #0
 801a026:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801a02a:	f7e6 fd65 	bl	8000af8 <__aeabi_dcmpeq>
 801a02e:	b9c0      	cbnz	r0, 801a062 <_printf_float+0x41a>
 801a030:	4653      	mov	r3, sl
 801a032:	f108 0201 	add.w	r2, r8, #1
 801a036:	4631      	mov	r1, r6
 801a038:	4628      	mov	r0, r5
 801a03a:	47b8      	blx	r7
 801a03c:	3001      	adds	r0, #1
 801a03e:	d10c      	bne.n	801a05a <_printf_float+0x412>
 801a040:	e65d      	b.n	8019cfe <_printf_float+0xb6>
 801a042:	2301      	movs	r3, #1
 801a044:	465a      	mov	r2, fp
 801a046:	4631      	mov	r1, r6
 801a048:	4628      	mov	r0, r5
 801a04a:	47b8      	blx	r7
 801a04c:	3001      	adds	r0, #1
 801a04e:	f43f ae56 	beq.w	8019cfe <_printf_float+0xb6>
 801a052:	f108 0801 	add.w	r8, r8, #1
 801a056:	45d0      	cmp	r8, sl
 801a058:	dbf3      	blt.n	801a042 <_printf_float+0x3fa>
 801a05a:	464b      	mov	r3, r9
 801a05c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801a060:	e6df      	b.n	8019e22 <_printf_float+0x1da>
 801a062:	f04f 0800 	mov.w	r8, #0
 801a066:	f104 0b1a 	add.w	fp, r4, #26
 801a06a:	e7f4      	b.n	801a056 <_printf_float+0x40e>
 801a06c:	2301      	movs	r3, #1
 801a06e:	4642      	mov	r2, r8
 801a070:	e7e1      	b.n	801a036 <_printf_float+0x3ee>
 801a072:	2301      	movs	r3, #1
 801a074:	464a      	mov	r2, r9
 801a076:	4631      	mov	r1, r6
 801a078:	4628      	mov	r0, r5
 801a07a:	47b8      	blx	r7
 801a07c:	3001      	adds	r0, #1
 801a07e:	f43f ae3e 	beq.w	8019cfe <_printf_float+0xb6>
 801a082:	f108 0801 	add.w	r8, r8, #1
 801a086:	68e3      	ldr	r3, [r4, #12]
 801a088:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801a08a:	1a5b      	subs	r3, r3, r1
 801a08c:	4543      	cmp	r3, r8
 801a08e:	dcf0      	bgt.n	801a072 <_printf_float+0x42a>
 801a090:	e6fc      	b.n	8019e8c <_printf_float+0x244>
 801a092:	f04f 0800 	mov.w	r8, #0
 801a096:	f104 0919 	add.w	r9, r4, #25
 801a09a:	e7f4      	b.n	801a086 <_printf_float+0x43e>

0801a09c <_printf_common>:
 801a09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a0a0:	4616      	mov	r6, r2
 801a0a2:	4698      	mov	r8, r3
 801a0a4:	688a      	ldr	r2, [r1, #8]
 801a0a6:	690b      	ldr	r3, [r1, #16]
 801a0a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a0ac:	4293      	cmp	r3, r2
 801a0ae:	bfb8      	it	lt
 801a0b0:	4613      	movlt	r3, r2
 801a0b2:	6033      	str	r3, [r6, #0]
 801a0b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a0b8:	4607      	mov	r7, r0
 801a0ba:	460c      	mov	r4, r1
 801a0bc:	b10a      	cbz	r2, 801a0c2 <_printf_common+0x26>
 801a0be:	3301      	adds	r3, #1
 801a0c0:	6033      	str	r3, [r6, #0]
 801a0c2:	6823      	ldr	r3, [r4, #0]
 801a0c4:	0699      	lsls	r1, r3, #26
 801a0c6:	bf42      	ittt	mi
 801a0c8:	6833      	ldrmi	r3, [r6, #0]
 801a0ca:	3302      	addmi	r3, #2
 801a0cc:	6033      	strmi	r3, [r6, #0]
 801a0ce:	6825      	ldr	r5, [r4, #0]
 801a0d0:	f015 0506 	ands.w	r5, r5, #6
 801a0d4:	d106      	bne.n	801a0e4 <_printf_common+0x48>
 801a0d6:	f104 0a19 	add.w	sl, r4, #25
 801a0da:	68e3      	ldr	r3, [r4, #12]
 801a0dc:	6832      	ldr	r2, [r6, #0]
 801a0de:	1a9b      	subs	r3, r3, r2
 801a0e0:	42ab      	cmp	r3, r5
 801a0e2:	dc26      	bgt.n	801a132 <_printf_common+0x96>
 801a0e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a0e8:	6822      	ldr	r2, [r4, #0]
 801a0ea:	3b00      	subs	r3, #0
 801a0ec:	bf18      	it	ne
 801a0ee:	2301      	movne	r3, #1
 801a0f0:	0692      	lsls	r2, r2, #26
 801a0f2:	d42b      	bmi.n	801a14c <_printf_common+0xb0>
 801a0f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a0f8:	4641      	mov	r1, r8
 801a0fa:	4638      	mov	r0, r7
 801a0fc:	47c8      	blx	r9
 801a0fe:	3001      	adds	r0, #1
 801a100:	d01e      	beq.n	801a140 <_printf_common+0xa4>
 801a102:	6823      	ldr	r3, [r4, #0]
 801a104:	6922      	ldr	r2, [r4, #16]
 801a106:	f003 0306 	and.w	r3, r3, #6
 801a10a:	2b04      	cmp	r3, #4
 801a10c:	bf02      	ittt	eq
 801a10e:	68e5      	ldreq	r5, [r4, #12]
 801a110:	6833      	ldreq	r3, [r6, #0]
 801a112:	1aed      	subeq	r5, r5, r3
 801a114:	68a3      	ldr	r3, [r4, #8]
 801a116:	bf0c      	ite	eq
 801a118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a11c:	2500      	movne	r5, #0
 801a11e:	4293      	cmp	r3, r2
 801a120:	bfc4      	itt	gt
 801a122:	1a9b      	subgt	r3, r3, r2
 801a124:	18ed      	addgt	r5, r5, r3
 801a126:	2600      	movs	r6, #0
 801a128:	341a      	adds	r4, #26
 801a12a:	42b5      	cmp	r5, r6
 801a12c:	d11a      	bne.n	801a164 <_printf_common+0xc8>
 801a12e:	2000      	movs	r0, #0
 801a130:	e008      	b.n	801a144 <_printf_common+0xa8>
 801a132:	2301      	movs	r3, #1
 801a134:	4652      	mov	r2, sl
 801a136:	4641      	mov	r1, r8
 801a138:	4638      	mov	r0, r7
 801a13a:	47c8      	blx	r9
 801a13c:	3001      	adds	r0, #1
 801a13e:	d103      	bne.n	801a148 <_printf_common+0xac>
 801a140:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a148:	3501      	adds	r5, #1
 801a14a:	e7c6      	b.n	801a0da <_printf_common+0x3e>
 801a14c:	18e1      	adds	r1, r4, r3
 801a14e:	1c5a      	adds	r2, r3, #1
 801a150:	2030      	movs	r0, #48	@ 0x30
 801a152:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a156:	4422      	add	r2, r4
 801a158:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a15c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801a160:	3302      	adds	r3, #2
 801a162:	e7c7      	b.n	801a0f4 <_printf_common+0x58>
 801a164:	2301      	movs	r3, #1
 801a166:	4622      	mov	r2, r4
 801a168:	4641      	mov	r1, r8
 801a16a:	4638      	mov	r0, r7
 801a16c:	47c8      	blx	r9
 801a16e:	3001      	adds	r0, #1
 801a170:	d0e6      	beq.n	801a140 <_printf_common+0xa4>
 801a172:	3601      	adds	r6, #1
 801a174:	e7d9      	b.n	801a12a <_printf_common+0x8e>
	...

0801a178 <_printf_i>:
 801a178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a17c:	7e0f      	ldrb	r7, [r1, #24]
 801a17e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a180:	2f78      	cmp	r7, #120	@ 0x78
 801a182:	4691      	mov	r9, r2
 801a184:	4680      	mov	r8, r0
 801a186:	460c      	mov	r4, r1
 801a188:	469a      	mov	sl, r3
 801a18a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801a18e:	d807      	bhi.n	801a1a0 <_printf_i+0x28>
 801a190:	2f62      	cmp	r7, #98	@ 0x62
 801a192:	d80a      	bhi.n	801a1aa <_printf_i+0x32>
 801a194:	2f00      	cmp	r7, #0
 801a196:	f000 80d2 	beq.w	801a33e <_printf_i+0x1c6>
 801a19a:	2f58      	cmp	r7, #88	@ 0x58
 801a19c:	f000 80b9 	beq.w	801a312 <_printf_i+0x19a>
 801a1a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a1a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801a1a8:	e03a      	b.n	801a220 <_printf_i+0xa8>
 801a1aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801a1ae:	2b15      	cmp	r3, #21
 801a1b0:	d8f6      	bhi.n	801a1a0 <_printf_i+0x28>
 801a1b2:	a101      	add	r1, pc, #4	@ (adr r1, 801a1b8 <_printf_i+0x40>)
 801a1b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a1b8:	0801a211 	.word	0x0801a211
 801a1bc:	0801a225 	.word	0x0801a225
 801a1c0:	0801a1a1 	.word	0x0801a1a1
 801a1c4:	0801a1a1 	.word	0x0801a1a1
 801a1c8:	0801a1a1 	.word	0x0801a1a1
 801a1cc:	0801a1a1 	.word	0x0801a1a1
 801a1d0:	0801a225 	.word	0x0801a225
 801a1d4:	0801a1a1 	.word	0x0801a1a1
 801a1d8:	0801a1a1 	.word	0x0801a1a1
 801a1dc:	0801a1a1 	.word	0x0801a1a1
 801a1e0:	0801a1a1 	.word	0x0801a1a1
 801a1e4:	0801a325 	.word	0x0801a325
 801a1e8:	0801a24f 	.word	0x0801a24f
 801a1ec:	0801a2df 	.word	0x0801a2df
 801a1f0:	0801a1a1 	.word	0x0801a1a1
 801a1f4:	0801a1a1 	.word	0x0801a1a1
 801a1f8:	0801a347 	.word	0x0801a347
 801a1fc:	0801a1a1 	.word	0x0801a1a1
 801a200:	0801a24f 	.word	0x0801a24f
 801a204:	0801a1a1 	.word	0x0801a1a1
 801a208:	0801a1a1 	.word	0x0801a1a1
 801a20c:	0801a2e7 	.word	0x0801a2e7
 801a210:	6833      	ldr	r3, [r6, #0]
 801a212:	1d1a      	adds	r2, r3, #4
 801a214:	681b      	ldr	r3, [r3, #0]
 801a216:	6032      	str	r2, [r6, #0]
 801a218:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a21c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a220:	2301      	movs	r3, #1
 801a222:	e09d      	b.n	801a360 <_printf_i+0x1e8>
 801a224:	6833      	ldr	r3, [r6, #0]
 801a226:	6820      	ldr	r0, [r4, #0]
 801a228:	1d19      	adds	r1, r3, #4
 801a22a:	6031      	str	r1, [r6, #0]
 801a22c:	0606      	lsls	r6, r0, #24
 801a22e:	d501      	bpl.n	801a234 <_printf_i+0xbc>
 801a230:	681d      	ldr	r5, [r3, #0]
 801a232:	e003      	b.n	801a23c <_printf_i+0xc4>
 801a234:	0645      	lsls	r5, r0, #25
 801a236:	d5fb      	bpl.n	801a230 <_printf_i+0xb8>
 801a238:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a23c:	2d00      	cmp	r5, #0
 801a23e:	da03      	bge.n	801a248 <_printf_i+0xd0>
 801a240:	232d      	movs	r3, #45	@ 0x2d
 801a242:	426d      	negs	r5, r5
 801a244:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a248:	4859      	ldr	r0, [pc, #356]	@ (801a3b0 <_printf_i+0x238>)
 801a24a:	230a      	movs	r3, #10
 801a24c:	e011      	b.n	801a272 <_printf_i+0xfa>
 801a24e:	6821      	ldr	r1, [r4, #0]
 801a250:	6833      	ldr	r3, [r6, #0]
 801a252:	0608      	lsls	r0, r1, #24
 801a254:	f853 5b04 	ldr.w	r5, [r3], #4
 801a258:	d402      	bmi.n	801a260 <_printf_i+0xe8>
 801a25a:	0649      	lsls	r1, r1, #25
 801a25c:	bf48      	it	mi
 801a25e:	b2ad      	uxthmi	r5, r5
 801a260:	2f6f      	cmp	r7, #111	@ 0x6f
 801a262:	4853      	ldr	r0, [pc, #332]	@ (801a3b0 <_printf_i+0x238>)
 801a264:	6033      	str	r3, [r6, #0]
 801a266:	bf14      	ite	ne
 801a268:	230a      	movne	r3, #10
 801a26a:	2308      	moveq	r3, #8
 801a26c:	2100      	movs	r1, #0
 801a26e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a272:	6866      	ldr	r6, [r4, #4]
 801a274:	60a6      	str	r6, [r4, #8]
 801a276:	2e00      	cmp	r6, #0
 801a278:	bfa2      	ittt	ge
 801a27a:	6821      	ldrge	r1, [r4, #0]
 801a27c:	f021 0104 	bicge.w	r1, r1, #4
 801a280:	6021      	strge	r1, [r4, #0]
 801a282:	b90d      	cbnz	r5, 801a288 <_printf_i+0x110>
 801a284:	2e00      	cmp	r6, #0
 801a286:	d04b      	beq.n	801a320 <_printf_i+0x1a8>
 801a288:	4616      	mov	r6, r2
 801a28a:	fbb5 f1f3 	udiv	r1, r5, r3
 801a28e:	fb03 5711 	mls	r7, r3, r1, r5
 801a292:	5dc7      	ldrb	r7, [r0, r7]
 801a294:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a298:	462f      	mov	r7, r5
 801a29a:	42bb      	cmp	r3, r7
 801a29c:	460d      	mov	r5, r1
 801a29e:	d9f4      	bls.n	801a28a <_printf_i+0x112>
 801a2a0:	2b08      	cmp	r3, #8
 801a2a2:	d10b      	bne.n	801a2bc <_printf_i+0x144>
 801a2a4:	6823      	ldr	r3, [r4, #0]
 801a2a6:	07df      	lsls	r7, r3, #31
 801a2a8:	d508      	bpl.n	801a2bc <_printf_i+0x144>
 801a2aa:	6923      	ldr	r3, [r4, #16]
 801a2ac:	6861      	ldr	r1, [r4, #4]
 801a2ae:	4299      	cmp	r1, r3
 801a2b0:	bfde      	ittt	le
 801a2b2:	2330      	movle	r3, #48	@ 0x30
 801a2b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a2b8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801a2bc:	1b92      	subs	r2, r2, r6
 801a2be:	6122      	str	r2, [r4, #16]
 801a2c0:	f8cd a000 	str.w	sl, [sp]
 801a2c4:	464b      	mov	r3, r9
 801a2c6:	aa03      	add	r2, sp, #12
 801a2c8:	4621      	mov	r1, r4
 801a2ca:	4640      	mov	r0, r8
 801a2cc:	f7ff fee6 	bl	801a09c <_printf_common>
 801a2d0:	3001      	adds	r0, #1
 801a2d2:	d14a      	bne.n	801a36a <_printf_i+0x1f2>
 801a2d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a2d8:	b004      	add	sp, #16
 801a2da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a2de:	6823      	ldr	r3, [r4, #0]
 801a2e0:	f043 0320 	orr.w	r3, r3, #32
 801a2e4:	6023      	str	r3, [r4, #0]
 801a2e6:	4833      	ldr	r0, [pc, #204]	@ (801a3b4 <_printf_i+0x23c>)
 801a2e8:	2778      	movs	r7, #120	@ 0x78
 801a2ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a2ee:	6823      	ldr	r3, [r4, #0]
 801a2f0:	6831      	ldr	r1, [r6, #0]
 801a2f2:	061f      	lsls	r7, r3, #24
 801a2f4:	f851 5b04 	ldr.w	r5, [r1], #4
 801a2f8:	d402      	bmi.n	801a300 <_printf_i+0x188>
 801a2fa:	065f      	lsls	r7, r3, #25
 801a2fc:	bf48      	it	mi
 801a2fe:	b2ad      	uxthmi	r5, r5
 801a300:	6031      	str	r1, [r6, #0]
 801a302:	07d9      	lsls	r1, r3, #31
 801a304:	bf44      	itt	mi
 801a306:	f043 0320 	orrmi.w	r3, r3, #32
 801a30a:	6023      	strmi	r3, [r4, #0]
 801a30c:	b11d      	cbz	r5, 801a316 <_printf_i+0x19e>
 801a30e:	2310      	movs	r3, #16
 801a310:	e7ac      	b.n	801a26c <_printf_i+0xf4>
 801a312:	4827      	ldr	r0, [pc, #156]	@ (801a3b0 <_printf_i+0x238>)
 801a314:	e7e9      	b.n	801a2ea <_printf_i+0x172>
 801a316:	6823      	ldr	r3, [r4, #0]
 801a318:	f023 0320 	bic.w	r3, r3, #32
 801a31c:	6023      	str	r3, [r4, #0]
 801a31e:	e7f6      	b.n	801a30e <_printf_i+0x196>
 801a320:	4616      	mov	r6, r2
 801a322:	e7bd      	b.n	801a2a0 <_printf_i+0x128>
 801a324:	6833      	ldr	r3, [r6, #0]
 801a326:	6825      	ldr	r5, [r4, #0]
 801a328:	6961      	ldr	r1, [r4, #20]
 801a32a:	1d18      	adds	r0, r3, #4
 801a32c:	6030      	str	r0, [r6, #0]
 801a32e:	062e      	lsls	r6, r5, #24
 801a330:	681b      	ldr	r3, [r3, #0]
 801a332:	d501      	bpl.n	801a338 <_printf_i+0x1c0>
 801a334:	6019      	str	r1, [r3, #0]
 801a336:	e002      	b.n	801a33e <_printf_i+0x1c6>
 801a338:	0668      	lsls	r0, r5, #25
 801a33a:	d5fb      	bpl.n	801a334 <_printf_i+0x1bc>
 801a33c:	8019      	strh	r1, [r3, #0]
 801a33e:	2300      	movs	r3, #0
 801a340:	6123      	str	r3, [r4, #16]
 801a342:	4616      	mov	r6, r2
 801a344:	e7bc      	b.n	801a2c0 <_printf_i+0x148>
 801a346:	6833      	ldr	r3, [r6, #0]
 801a348:	1d1a      	adds	r2, r3, #4
 801a34a:	6032      	str	r2, [r6, #0]
 801a34c:	681e      	ldr	r6, [r3, #0]
 801a34e:	6862      	ldr	r2, [r4, #4]
 801a350:	2100      	movs	r1, #0
 801a352:	4630      	mov	r0, r6
 801a354:	f7e5 ff54 	bl	8000200 <memchr>
 801a358:	b108      	cbz	r0, 801a35e <_printf_i+0x1e6>
 801a35a:	1b80      	subs	r0, r0, r6
 801a35c:	6060      	str	r0, [r4, #4]
 801a35e:	6863      	ldr	r3, [r4, #4]
 801a360:	6123      	str	r3, [r4, #16]
 801a362:	2300      	movs	r3, #0
 801a364:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a368:	e7aa      	b.n	801a2c0 <_printf_i+0x148>
 801a36a:	6923      	ldr	r3, [r4, #16]
 801a36c:	4632      	mov	r2, r6
 801a36e:	4649      	mov	r1, r9
 801a370:	4640      	mov	r0, r8
 801a372:	47d0      	blx	sl
 801a374:	3001      	adds	r0, #1
 801a376:	d0ad      	beq.n	801a2d4 <_printf_i+0x15c>
 801a378:	6823      	ldr	r3, [r4, #0]
 801a37a:	079b      	lsls	r3, r3, #30
 801a37c:	d413      	bmi.n	801a3a6 <_printf_i+0x22e>
 801a37e:	68e0      	ldr	r0, [r4, #12]
 801a380:	9b03      	ldr	r3, [sp, #12]
 801a382:	4298      	cmp	r0, r3
 801a384:	bfb8      	it	lt
 801a386:	4618      	movlt	r0, r3
 801a388:	e7a6      	b.n	801a2d8 <_printf_i+0x160>
 801a38a:	2301      	movs	r3, #1
 801a38c:	4632      	mov	r2, r6
 801a38e:	4649      	mov	r1, r9
 801a390:	4640      	mov	r0, r8
 801a392:	47d0      	blx	sl
 801a394:	3001      	adds	r0, #1
 801a396:	d09d      	beq.n	801a2d4 <_printf_i+0x15c>
 801a398:	3501      	adds	r5, #1
 801a39a:	68e3      	ldr	r3, [r4, #12]
 801a39c:	9903      	ldr	r1, [sp, #12]
 801a39e:	1a5b      	subs	r3, r3, r1
 801a3a0:	42ab      	cmp	r3, r5
 801a3a2:	dcf2      	bgt.n	801a38a <_printf_i+0x212>
 801a3a4:	e7eb      	b.n	801a37e <_printf_i+0x206>
 801a3a6:	2500      	movs	r5, #0
 801a3a8:	f104 0619 	add.w	r6, r4, #25
 801a3ac:	e7f5      	b.n	801a39a <_printf_i+0x222>
 801a3ae:	bf00      	nop
 801a3b0:	08020b38 	.word	0x08020b38
 801a3b4:	08020b49 	.word	0x08020b49

0801a3b8 <_scanf_float>:
 801a3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3bc:	b087      	sub	sp, #28
 801a3be:	4617      	mov	r7, r2
 801a3c0:	9303      	str	r3, [sp, #12]
 801a3c2:	688b      	ldr	r3, [r1, #8]
 801a3c4:	1e5a      	subs	r2, r3, #1
 801a3c6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801a3ca:	bf81      	itttt	hi
 801a3cc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801a3d0:	eb03 0b05 	addhi.w	fp, r3, r5
 801a3d4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801a3d8:	608b      	strhi	r3, [r1, #8]
 801a3da:	680b      	ldr	r3, [r1, #0]
 801a3dc:	460a      	mov	r2, r1
 801a3de:	f04f 0500 	mov.w	r5, #0
 801a3e2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801a3e6:	f842 3b1c 	str.w	r3, [r2], #28
 801a3ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a3ee:	4680      	mov	r8, r0
 801a3f0:	460c      	mov	r4, r1
 801a3f2:	bf98      	it	ls
 801a3f4:	f04f 0b00 	movls.w	fp, #0
 801a3f8:	9201      	str	r2, [sp, #4]
 801a3fa:	4616      	mov	r6, r2
 801a3fc:	46aa      	mov	sl, r5
 801a3fe:	46a9      	mov	r9, r5
 801a400:	9502      	str	r5, [sp, #8]
 801a402:	68a2      	ldr	r2, [r4, #8]
 801a404:	b152      	cbz	r2, 801a41c <_scanf_float+0x64>
 801a406:	683b      	ldr	r3, [r7, #0]
 801a408:	781b      	ldrb	r3, [r3, #0]
 801a40a:	2b4e      	cmp	r3, #78	@ 0x4e
 801a40c:	d864      	bhi.n	801a4d8 <_scanf_float+0x120>
 801a40e:	2b40      	cmp	r3, #64	@ 0x40
 801a410:	d83c      	bhi.n	801a48c <_scanf_float+0xd4>
 801a412:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801a416:	b2c8      	uxtb	r0, r1
 801a418:	280e      	cmp	r0, #14
 801a41a:	d93a      	bls.n	801a492 <_scanf_float+0xda>
 801a41c:	f1b9 0f00 	cmp.w	r9, #0
 801a420:	d003      	beq.n	801a42a <_scanf_float+0x72>
 801a422:	6823      	ldr	r3, [r4, #0]
 801a424:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a428:	6023      	str	r3, [r4, #0]
 801a42a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801a42e:	f1ba 0f01 	cmp.w	sl, #1
 801a432:	f200 8117 	bhi.w	801a664 <_scanf_float+0x2ac>
 801a436:	9b01      	ldr	r3, [sp, #4]
 801a438:	429e      	cmp	r6, r3
 801a43a:	f200 8108 	bhi.w	801a64e <_scanf_float+0x296>
 801a43e:	2001      	movs	r0, #1
 801a440:	b007      	add	sp, #28
 801a442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a446:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801a44a:	2a0d      	cmp	r2, #13
 801a44c:	d8e6      	bhi.n	801a41c <_scanf_float+0x64>
 801a44e:	a101      	add	r1, pc, #4	@ (adr r1, 801a454 <_scanf_float+0x9c>)
 801a450:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801a454:	0801a59b 	.word	0x0801a59b
 801a458:	0801a41d 	.word	0x0801a41d
 801a45c:	0801a41d 	.word	0x0801a41d
 801a460:	0801a41d 	.word	0x0801a41d
 801a464:	0801a5fb 	.word	0x0801a5fb
 801a468:	0801a5d3 	.word	0x0801a5d3
 801a46c:	0801a41d 	.word	0x0801a41d
 801a470:	0801a41d 	.word	0x0801a41d
 801a474:	0801a5a9 	.word	0x0801a5a9
 801a478:	0801a41d 	.word	0x0801a41d
 801a47c:	0801a41d 	.word	0x0801a41d
 801a480:	0801a41d 	.word	0x0801a41d
 801a484:	0801a41d 	.word	0x0801a41d
 801a488:	0801a561 	.word	0x0801a561
 801a48c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801a490:	e7db      	b.n	801a44a <_scanf_float+0x92>
 801a492:	290e      	cmp	r1, #14
 801a494:	d8c2      	bhi.n	801a41c <_scanf_float+0x64>
 801a496:	a001      	add	r0, pc, #4	@ (adr r0, 801a49c <_scanf_float+0xe4>)
 801a498:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801a49c:	0801a551 	.word	0x0801a551
 801a4a0:	0801a41d 	.word	0x0801a41d
 801a4a4:	0801a551 	.word	0x0801a551
 801a4a8:	0801a5e7 	.word	0x0801a5e7
 801a4ac:	0801a41d 	.word	0x0801a41d
 801a4b0:	0801a4f9 	.word	0x0801a4f9
 801a4b4:	0801a537 	.word	0x0801a537
 801a4b8:	0801a537 	.word	0x0801a537
 801a4bc:	0801a537 	.word	0x0801a537
 801a4c0:	0801a537 	.word	0x0801a537
 801a4c4:	0801a537 	.word	0x0801a537
 801a4c8:	0801a537 	.word	0x0801a537
 801a4cc:	0801a537 	.word	0x0801a537
 801a4d0:	0801a537 	.word	0x0801a537
 801a4d4:	0801a537 	.word	0x0801a537
 801a4d8:	2b6e      	cmp	r3, #110	@ 0x6e
 801a4da:	d809      	bhi.n	801a4f0 <_scanf_float+0x138>
 801a4dc:	2b60      	cmp	r3, #96	@ 0x60
 801a4de:	d8b2      	bhi.n	801a446 <_scanf_float+0x8e>
 801a4e0:	2b54      	cmp	r3, #84	@ 0x54
 801a4e2:	d07b      	beq.n	801a5dc <_scanf_float+0x224>
 801a4e4:	2b59      	cmp	r3, #89	@ 0x59
 801a4e6:	d199      	bne.n	801a41c <_scanf_float+0x64>
 801a4e8:	2d07      	cmp	r5, #7
 801a4ea:	d197      	bne.n	801a41c <_scanf_float+0x64>
 801a4ec:	2508      	movs	r5, #8
 801a4ee:	e02c      	b.n	801a54a <_scanf_float+0x192>
 801a4f0:	2b74      	cmp	r3, #116	@ 0x74
 801a4f2:	d073      	beq.n	801a5dc <_scanf_float+0x224>
 801a4f4:	2b79      	cmp	r3, #121	@ 0x79
 801a4f6:	e7f6      	b.n	801a4e6 <_scanf_float+0x12e>
 801a4f8:	6821      	ldr	r1, [r4, #0]
 801a4fa:	05c8      	lsls	r0, r1, #23
 801a4fc:	d51b      	bpl.n	801a536 <_scanf_float+0x17e>
 801a4fe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801a502:	6021      	str	r1, [r4, #0]
 801a504:	f109 0901 	add.w	r9, r9, #1
 801a508:	f1bb 0f00 	cmp.w	fp, #0
 801a50c:	d003      	beq.n	801a516 <_scanf_float+0x15e>
 801a50e:	3201      	adds	r2, #1
 801a510:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 801a514:	60a2      	str	r2, [r4, #8]
 801a516:	68a3      	ldr	r3, [r4, #8]
 801a518:	3b01      	subs	r3, #1
 801a51a:	60a3      	str	r3, [r4, #8]
 801a51c:	6923      	ldr	r3, [r4, #16]
 801a51e:	3301      	adds	r3, #1
 801a520:	6123      	str	r3, [r4, #16]
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	3b01      	subs	r3, #1
 801a526:	2b00      	cmp	r3, #0
 801a528:	607b      	str	r3, [r7, #4]
 801a52a:	f340 8087 	ble.w	801a63c <_scanf_float+0x284>
 801a52e:	683b      	ldr	r3, [r7, #0]
 801a530:	3301      	adds	r3, #1
 801a532:	603b      	str	r3, [r7, #0]
 801a534:	e765      	b.n	801a402 <_scanf_float+0x4a>
 801a536:	eb1a 0105 	adds.w	r1, sl, r5
 801a53a:	f47f af6f 	bne.w	801a41c <_scanf_float+0x64>
 801a53e:	6822      	ldr	r2, [r4, #0]
 801a540:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801a544:	6022      	str	r2, [r4, #0]
 801a546:	460d      	mov	r5, r1
 801a548:	468a      	mov	sl, r1
 801a54a:	f806 3b01 	strb.w	r3, [r6], #1
 801a54e:	e7e2      	b.n	801a516 <_scanf_float+0x15e>
 801a550:	6822      	ldr	r2, [r4, #0]
 801a552:	0610      	lsls	r0, r2, #24
 801a554:	f57f af62 	bpl.w	801a41c <_scanf_float+0x64>
 801a558:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801a55c:	6022      	str	r2, [r4, #0]
 801a55e:	e7f4      	b.n	801a54a <_scanf_float+0x192>
 801a560:	f1ba 0f00 	cmp.w	sl, #0
 801a564:	d10e      	bne.n	801a584 <_scanf_float+0x1cc>
 801a566:	f1b9 0f00 	cmp.w	r9, #0
 801a56a:	d10e      	bne.n	801a58a <_scanf_float+0x1d2>
 801a56c:	6822      	ldr	r2, [r4, #0]
 801a56e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801a572:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801a576:	d108      	bne.n	801a58a <_scanf_float+0x1d2>
 801a578:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801a57c:	6022      	str	r2, [r4, #0]
 801a57e:	f04f 0a01 	mov.w	sl, #1
 801a582:	e7e2      	b.n	801a54a <_scanf_float+0x192>
 801a584:	f1ba 0f02 	cmp.w	sl, #2
 801a588:	d055      	beq.n	801a636 <_scanf_float+0x27e>
 801a58a:	2d01      	cmp	r5, #1
 801a58c:	d002      	beq.n	801a594 <_scanf_float+0x1dc>
 801a58e:	2d04      	cmp	r5, #4
 801a590:	f47f af44 	bne.w	801a41c <_scanf_float+0x64>
 801a594:	3501      	adds	r5, #1
 801a596:	b2ed      	uxtb	r5, r5
 801a598:	e7d7      	b.n	801a54a <_scanf_float+0x192>
 801a59a:	f1ba 0f01 	cmp.w	sl, #1
 801a59e:	f47f af3d 	bne.w	801a41c <_scanf_float+0x64>
 801a5a2:	f04f 0a02 	mov.w	sl, #2
 801a5a6:	e7d0      	b.n	801a54a <_scanf_float+0x192>
 801a5a8:	b97d      	cbnz	r5, 801a5ca <_scanf_float+0x212>
 801a5aa:	f1b9 0f00 	cmp.w	r9, #0
 801a5ae:	f47f af38 	bne.w	801a422 <_scanf_float+0x6a>
 801a5b2:	6822      	ldr	r2, [r4, #0]
 801a5b4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801a5b8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801a5bc:	f040 8108 	bne.w	801a7d0 <_scanf_float+0x418>
 801a5c0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801a5c4:	6022      	str	r2, [r4, #0]
 801a5c6:	2501      	movs	r5, #1
 801a5c8:	e7bf      	b.n	801a54a <_scanf_float+0x192>
 801a5ca:	2d03      	cmp	r5, #3
 801a5cc:	d0e2      	beq.n	801a594 <_scanf_float+0x1dc>
 801a5ce:	2d05      	cmp	r5, #5
 801a5d0:	e7de      	b.n	801a590 <_scanf_float+0x1d8>
 801a5d2:	2d02      	cmp	r5, #2
 801a5d4:	f47f af22 	bne.w	801a41c <_scanf_float+0x64>
 801a5d8:	2503      	movs	r5, #3
 801a5da:	e7b6      	b.n	801a54a <_scanf_float+0x192>
 801a5dc:	2d06      	cmp	r5, #6
 801a5de:	f47f af1d 	bne.w	801a41c <_scanf_float+0x64>
 801a5e2:	2507      	movs	r5, #7
 801a5e4:	e7b1      	b.n	801a54a <_scanf_float+0x192>
 801a5e6:	6822      	ldr	r2, [r4, #0]
 801a5e8:	0591      	lsls	r1, r2, #22
 801a5ea:	f57f af17 	bpl.w	801a41c <_scanf_float+0x64>
 801a5ee:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801a5f2:	6022      	str	r2, [r4, #0]
 801a5f4:	f8cd 9008 	str.w	r9, [sp, #8]
 801a5f8:	e7a7      	b.n	801a54a <_scanf_float+0x192>
 801a5fa:	6822      	ldr	r2, [r4, #0]
 801a5fc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801a600:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801a604:	d006      	beq.n	801a614 <_scanf_float+0x25c>
 801a606:	0550      	lsls	r0, r2, #21
 801a608:	f57f af08 	bpl.w	801a41c <_scanf_float+0x64>
 801a60c:	f1b9 0f00 	cmp.w	r9, #0
 801a610:	f000 80de 	beq.w	801a7d0 <_scanf_float+0x418>
 801a614:	0591      	lsls	r1, r2, #22
 801a616:	bf58      	it	pl
 801a618:	9902      	ldrpl	r1, [sp, #8]
 801a61a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801a61e:	bf58      	it	pl
 801a620:	eba9 0101 	subpl.w	r1, r9, r1
 801a624:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801a628:	bf58      	it	pl
 801a62a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801a62e:	6022      	str	r2, [r4, #0]
 801a630:	f04f 0900 	mov.w	r9, #0
 801a634:	e789      	b.n	801a54a <_scanf_float+0x192>
 801a636:	f04f 0a03 	mov.w	sl, #3
 801a63a:	e786      	b.n	801a54a <_scanf_float+0x192>
 801a63c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801a640:	4639      	mov	r1, r7
 801a642:	4640      	mov	r0, r8
 801a644:	4798      	blx	r3
 801a646:	2800      	cmp	r0, #0
 801a648:	f43f aedb 	beq.w	801a402 <_scanf_float+0x4a>
 801a64c:	e6e6      	b.n	801a41c <_scanf_float+0x64>
 801a64e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801a652:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a656:	463a      	mov	r2, r7
 801a658:	4640      	mov	r0, r8
 801a65a:	4798      	blx	r3
 801a65c:	6923      	ldr	r3, [r4, #16]
 801a65e:	3b01      	subs	r3, #1
 801a660:	6123      	str	r3, [r4, #16]
 801a662:	e6e8      	b.n	801a436 <_scanf_float+0x7e>
 801a664:	1e6b      	subs	r3, r5, #1
 801a666:	2b06      	cmp	r3, #6
 801a668:	d824      	bhi.n	801a6b4 <_scanf_float+0x2fc>
 801a66a:	2d02      	cmp	r5, #2
 801a66c:	d836      	bhi.n	801a6dc <_scanf_float+0x324>
 801a66e:	9b01      	ldr	r3, [sp, #4]
 801a670:	429e      	cmp	r6, r3
 801a672:	f67f aee4 	bls.w	801a43e <_scanf_float+0x86>
 801a676:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801a67a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a67e:	463a      	mov	r2, r7
 801a680:	4640      	mov	r0, r8
 801a682:	4798      	blx	r3
 801a684:	6923      	ldr	r3, [r4, #16]
 801a686:	3b01      	subs	r3, #1
 801a688:	6123      	str	r3, [r4, #16]
 801a68a:	e7f0      	b.n	801a66e <_scanf_float+0x2b6>
 801a68c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801a690:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801a694:	463a      	mov	r2, r7
 801a696:	4640      	mov	r0, r8
 801a698:	4798      	blx	r3
 801a69a:	6923      	ldr	r3, [r4, #16]
 801a69c:	3b01      	subs	r3, #1
 801a69e:	6123      	str	r3, [r4, #16]
 801a6a0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801a6a4:	fa5f fa8a 	uxtb.w	sl, sl
 801a6a8:	f1ba 0f02 	cmp.w	sl, #2
 801a6ac:	d1ee      	bne.n	801a68c <_scanf_float+0x2d4>
 801a6ae:	3d03      	subs	r5, #3
 801a6b0:	b2ed      	uxtb	r5, r5
 801a6b2:	1b76      	subs	r6, r6, r5
 801a6b4:	6823      	ldr	r3, [r4, #0]
 801a6b6:	05da      	lsls	r2, r3, #23
 801a6b8:	d530      	bpl.n	801a71c <_scanf_float+0x364>
 801a6ba:	055b      	lsls	r3, r3, #21
 801a6bc:	d511      	bpl.n	801a6e2 <_scanf_float+0x32a>
 801a6be:	9b01      	ldr	r3, [sp, #4]
 801a6c0:	429e      	cmp	r6, r3
 801a6c2:	f67f aebc 	bls.w	801a43e <_scanf_float+0x86>
 801a6c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801a6ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a6ce:	463a      	mov	r2, r7
 801a6d0:	4640      	mov	r0, r8
 801a6d2:	4798      	blx	r3
 801a6d4:	6923      	ldr	r3, [r4, #16]
 801a6d6:	3b01      	subs	r3, #1
 801a6d8:	6123      	str	r3, [r4, #16]
 801a6da:	e7f0      	b.n	801a6be <_scanf_float+0x306>
 801a6dc:	46aa      	mov	sl, r5
 801a6de:	46b3      	mov	fp, r6
 801a6e0:	e7de      	b.n	801a6a0 <_scanf_float+0x2e8>
 801a6e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801a6e6:	6923      	ldr	r3, [r4, #16]
 801a6e8:	2965      	cmp	r1, #101	@ 0x65
 801a6ea:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801a6ee:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 801a6f2:	6123      	str	r3, [r4, #16]
 801a6f4:	d00c      	beq.n	801a710 <_scanf_float+0x358>
 801a6f6:	2945      	cmp	r1, #69	@ 0x45
 801a6f8:	d00a      	beq.n	801a710 <_scanf_float+0x358>
 801a6fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801a6fe:	463a      	mov	r2, r7
 801a700:	4640      	mov	r0, r8
 801a702:	4798      	blx	r3
 801a704:	6923      	ldr	r3, [r4, #16]
 801a706:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801a70a:	3b01      	subs	r3, #1
 801a70c:	1eb5      	subs	r5, r6, #2
 801a70e:	6123      	str	r3, [r4, #16]
 801a710:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801a714:	463a      	mov	r2, r7
 801a716:	4640      	mov	r0, r8
 801a718:	4798      	blx	r3
 801a71a:	462e      	mov	r6, r5
 801a71c:	6822      	ldr	r2, [r4, #0]
 801a71e:	f012 0210 	ands.w	r2, r2, #16
 801a722:	d001      	beq.n	801a728 <_scanf_float+0x370>
 801a724:	2000      	movs	r0, #0
 801a726:	e68b      	b.n	801a440 <_scanf_float+0x88>
 801a728:	7032      	strb	r2, [r6, #0]
 801a72a:	6823      	ldr	r3, [r4, #0]
 801a72c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801a730:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801a734:	d11c      	bne.n	801a770 <_scanf_float+0x3b8>
 801a736:	9b02      	ldr	r3, [sp, #8]
 801a738:	454b      	cmp	r3, r9
 801a73a:	eba3 0209 	sub.w	r2, r3, r9
 801a73e:	d123      	bne.n	801a788 <_scanf_float+0x3d0>
 801a740:	9901      	ldr	r1, [sp, #4]
 801a742:	2200      	movs	r2, #0
 801a744:	4640      	mov	r0, r8
 801a746:	f002 fdeb 	bl	801d320 <_strtod_r>
 801a74a:	9b03      	ldr	r3, [sp, #12]
 801a74c:	6821      	ldr	r1, [r4, #0]
 801a74e:	681b      	ldr	r3, [r3, #0]
 801a750:	f011 0f02 	tst.w	r1, #2
 801a754:	ec57 6b10 	vmov	r6, r7, d0
 801a758:	f103 0204 	add.w	r2, r3, #4
 801a75c:	d01f      	beq.n	801a79e <_scanf_float+0x3e6>
 801a75e:	9903      	ldr	r1, [sp, #12]
 801a760:	600a      	str	r2, [r1, #0]
 801a762:	681b      	ldr	r3, [r3, #0]
 801a764:	e9c3 6700 	strd	r6, r7, [r3]
 801a768:	68e3      	ldr	r3, [r4, #12]
 801a76a:	3301      	adds	r3, #1
 801a76c:	60e3      	str	r3, [r4, #12]
 801a76e:	e7d9      	b.n	801a724 <_scanf_float+0x36c>
 801a770:	9b04      	ldr	r3, [sp, #16]
 801a772:	2b00      	cmp	r3, #0
 801a774:	d0e4      	beq.n	801a740 <_scanf_float+0x388>
 801a776:	9905      	ldr	r1, [sp, #20]
 801a778:	230a      	movs	r3, #10
 801a77a:	3101      	adds	r1, #1
 801a77c:	4640      	mov	r0, r8
 801a77e:	f002 fe4f 	bl	801d420 <_strtol_r>
 801a782:	9b04      	ldr	r3, [sp, #16]
 801a784:	9e05      	ldr	r6, [sp, #20]
 801a786:	1ac2      	subs	r2, r0, r3
 801a788:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801a78c:	429e      	cmp	r6, r3
 801a78e:	bf28      	it	cs
 801a790:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801a794:	4910      	ldr	r1, [pc, #64]	@ (801a7d8 <_scanf_float+0x420>)
 801a796:	4630      	mov	r0, r6
 801a798:	f000 f984 	bl	801aaa4 <siprintf>
 801a79c:	e7d0      	b.n	801a740 <_scanf_float+0x388>
 801a79e:	f011 0f04 	tst.w	r1, #4
 801a7a2:	9903      	ldr	r1, [sp, #12]
 801a7a4:	600a      	str	r2, [r1, #0]
 801a7a6:	d1dc      	bne.n	801a762 <_scanf_float+0x3aa>
 801a7a8:	681d      	ldr	r5, [r3, #0]
 801a7aa:	4632      	mov	r2, r6
 801a7ac:	463b      	mov	r3, r7
 801a7ae:	4630      	mov	r0, r6
 801a7b0:	4639      	mov	r1, r7
 801a7b2:	f7e6 f9d3 	bl	8000b5c <__aeabi_dcmpun>
 801a7b6:	b128      	cbz	r0, 801a7c4 <_scanf_float+0x40c>
 801a7b8:	4808      	ldr	r0, [pc, #32]	@ (801a7dc <_scanf_float+0x424>)
 801a7ba:	f000 fc2b 	bl	801b014 <nanf>
 801a7be:	ed85 0a00 	vstr	s0, [r5]
 801a7c2:	e7d1      	b.n	801a768 <_scanf_float+0x3b0>
 801a7c4:	4630      	mov	r0, r6
 801a7c6:	4639      	mov	r1, r7
 801a7c8:	f7e6 fa26 	bl	8000c18 <__aeabi_d2f>
 801a7cc:	6028      	str	r0, [r5, #0]
 801a7ce:	e7cb      	b.n	801a768 <_scanf_float+0x3b0>
 801a7d0:	f04f 0900 	mov.w	r9, #0
 801a7d4:	e629      	b.n	801a42a <_scanf_float+0x72>
 801a7d6:	bf00      	nop
 801a7d8:	08020b5a 	.word	0x08020b5a
 801a7dc:	08020b9a 	.word	0x08020b9a

0801a7e0 <std>:
 801a7e0:	2300      	movs	r3, #0
 801a7e2:	b510      	push	{r4, lr}
 801a7e4:	4604      	mov	r4, r0
 801a7e6:	e9c0 3300 	strd	r3, r3, [r0]
 801a7ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a7ee:	6083      	str	r3, [r0, #8]
 801a7f0:	8181      	strh	r1, [r0, #12]
 801a7f2:	6643      	str	r3, [r0, #100]	@ 0x64
 801a7f4:	81c2      	strh	r2, [r0, #14]
 801a7f6:	6183      	str	r3, [r0, #24]
 801a7f8:	4619      	mov	r1, r3
 801a7fa:	2208      	movs	r2, #8
 801a7fc:	305c      	adds	r0, #92	@ 0x5c
 801a7fe:	f000 fad7 	bl	801adb0 <memset>
 801a802:	4b0d      	ldr	r3, [pc, #52]	@ (801a838 <std+0x58>)
 801a804:	6263      	str	r3, [r4, #36]	@ 0x24
 801a806:	4b0d      	ldr	r3, [pc, #52]	@ (801a83c <std+0x5c>)
 801a808:	62a3      	str	r3, [r4, #40]	@ 0x28
 801a80a:	4b0d      	ldr	r3, [pc, #52]	@ (801a840 <std+0x60>)
 801a80c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801a80e:	4b0d      	ldr	r3, [pc, #52]	@ (801a844 <std+0x64>)
 801a810:	6323      	str	r3, [r4, #48]	@ 0x30
 801a812:	4b0d      	ldr	r3, [pc, #52]	@ (801a848 <std+0x68>)
 801a814:	6224      	str	r4, [r4, #32]
 801a816:	429c      	cmp	r4, r3
 801a818:	d006      	beq.n	801a828 <std+0x48>
 801a81a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801a81e:	4294      	cmp	r4, r2
 801a820:	d002      	beq.n	801a828 <std+0x48>
 801a822:	33d0      	adds	r3, #208	@ 0xd0
 801a824:	429c      	cmp	r4, r3
 801a826:	d105      	bne.n	801a834 <std+0x54>
 801a828:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801a82c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a830:	f000 bbd6 	b.w	801afe0 <__retarget_lock_init_recursive>
 801a834:	bd10      	pop	{r4, pc}
 801a836:	bf00      	nop
 801a838:	0801ab39 	.word	0x0801ab39
 801a83c:	0801ab5f 	.word	0x0801ab5f
 801a840:	0801ab97 	.word	0x0801ab97
 801a844:	0801abbb 	.word	0x0801abbb
 801a848:	20011c88 	.word	0x20011c88

0801a84c <stdio_exit_handler>:
 801a84c:	4a02      	ldr	r2, [pc, #8]	@ (801a858 <stdio_exit_handler+0xc>)
 801a84e:	4903      	ldr	r1, [pc, #12]	@ (801a85c <stdio_exit_handler+0x10>)
 801a850:	4803      	ldr	r0, [pc, #12]	@ (801a860 <stdio_exit_handler+0x14>)
 801a852:	f000 b869 	b.w	801a928 <_fwalk_sglue>
 801a856:	bf00      	nop
 801a858:	200000bc 	.word	0x200000bc
 801a85c:	0801e095 	.word	0x0801e095
 801a860:	200000cc 	.word	0x200000cc

0801a864 <cleanup_stdio>:
 801a864:	6841      	ldr	r1, [r0, #4]
 801a866:	4b0c      	ldr	r3, [pc, #48]	@ (801a898 <cleanup_stdio+0x34>)
 801a868:	4299      	cmp	r1, r3
 801a86a:	b510      	push	{r4, lr}
 801a86c:	4604      	mov	r4, r0
 801a86e:	d001      	beq.n	801a874 <cleanup_stdio+0x10>
 801a870:	f003 fc10 	bl	801e094 <_fflush_r>
 801a874:	68a1      	ldr	r1, [r4, #8]
 801a876:	4b09      	ldr	r3, [pc, #36]	@ (801a89c <cleanup_stdio+0x38>)
 801a878:	4299      	cmp	r1, r3
 801a87a:	d002      	beq.n	801a882 <cleanup_stdio+0x1e>
 801a87c:	4620      	mov	r0, r4
 801a87e:	f003 fc09 	bl	801e094 <_fflush_r>
 801a882:	68e1      	ldr	r1, [r4, #12]
 801a884:	4b06      	ldr	r3, [pc, #24]	@ (801a8a0 <cleanup_stdio+0x3c>)
 801a886:	4299      	cmp	r1, r3
 801a888:	d004      	beq.n	801a894 <cleanup_stdio+0x30>
 801a88a:	4620      	mov	r0, r4
 801a88c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a890:	f003 bc00 	b.w	801e094 <_fflush_r>
 801a894:	bd10      	pop	{r4, pc}
 801a896:	bf00      	nop
 801a898:	20011c88 	.word	0x20011c88
 801a89c:	20011cf0 	.word	0x20011cf0
 801a8a0:	20011d58 	.word	0x20011d58

0801a8a4 <global_stdio_init.part.0>:
 801a8a4:	b510      	push	{r4, lr}
 801a8a6:	4b0b      	ldr	r3, [pc, #44]	@ (801a8d4 <global_stdio_init.part.0+0x30>)
 801a8a8:	4c0b      	ldr	r4, [pc, #44]	@ (801a8d8 <global_stdio_init.part.0+0x34>)
 801a8aa:	4a0c      	ldr	r2, [pc, #48]	@ (801a8dc <global_stdio_init.part.0+0x38>)
 801a8ac:	601a      	str	r2, [r3, #0]
 801a8ae:	4620      	mov	r0, r4
 801a8b0:	2200      	movs	r2, #0
 801a8b2:	2104      	movs	r1, #4
 801a8b4:	f7ff ff94 	bl	801a7e0 <std>
 801a8b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801a8bc:	2201      	movs	r2, #1
 801a8be:	2109      	movs	r1, #9
 801a8c0:	f7ff ff8e 	bl	801a7e0 <std>
 801a8c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801a8c8:	2202      	movs	r2, #2
 801a8ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a8ce:	2112      	movs	r1, #18
 801a8d0:	f7ff bf86 	b.w	801a7e0 <std>
 801a8d4:	20011dc0 	.word	0x20011dc0
 801a8d8:	20011c88 	.word	0x20011c88
 801a8dc:	0801a84d 	.word	0x0801a84d

0801a8e0 <__sfp_lock_acquire>:
 801a8e0:	4801      	ldr	r0, [pc, #4]	@ (801a8e8 <__sfp_lock_acquire+0x8>)
 801a8e2:	f000 bb7e 	b.w	801afe2 <__retarget_lock_acquire_recursive>
 801a8e6:	bf00      	nop
 801a8e8:	20011dca 	.word	0x20011dca

0801a8ec <__sfp_lock_release>:
 801a8ec:	4801      	ldr	r0, [pc, #4]	@ (801a8f4 <__sfp_lock_release+0x8>)
 801a8ee:	f000 bb79 	b.w	801afe4 <__retarget_lock_release_recursive>
 801a8f2:	bf00      	nop
 801a8f4:	20011dca 	.word	0x20011dca

0801a8f8 <__sinit>:
 801a8f8:	b510      	push	{r4, lr}
 801a8fa:	4604      	mov	r4, r0
 801a8fc:	f7ff fff0 	bl	801a8e0 <__sfp_lock_acquire>
 801a900:	6a23      	ldr	r3, [r4, #32]
 801a902:	b11b      	cbz	r3, 801a90c <__sinit+0x14>
 801a904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a908:	f7ff bff0 	b.w	801a8ec <__sfp_lock_release>
 801a90c:	4b04      	ldr	r3, [pc, #16]	@ (801a920 <__sinit+0x28>)
 801a90e:	6223      	str	r3, [r4, #32]
 801a910:	4b04      	ldr	r3, [pc, #16]	@ (801a924 <__sinit+0x2c>)
 801a912:	681b      	ldr	r3, [r3, #0]
 801a914:	2b00      	cmp	r3, #0
 801a916:	d1f5      	bne.n	801a904 <__sinit+0xc>
 801a918:	f7ff ffc4 	bl	801a8a4 <global_stdio_init.part.0>
 801a91c:	e7f2      	b.n	801a904 <__sinit+0xc>
 801a91e:	bf00      	nop
 801a920:	0801a865 	.word	0x0801a865
 801a924:	20011dc0 	.word	0x20011dc0

0801a928 <_fwalk_sglue>:
 801a928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a92c:	4607      	mov	r7, r0
 801a92e:	4688      	mov	r8, r1
 801a930:	4614      	mov	r4, r2
 801a932:	2600      	movs	r6, #0
 801a934:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a938:	f1b9 0901 	subs.w	r9, r9, #1
 801a93c:	d505      	bpl.n	801a94a <_fwalk_sglue+0x22>
 801a93e:	6824      	ldr	r4, [r4, #0]
 801a940:	2c00      	cmp	r4, #0
 801a942:	d1f7      	bne.n	801a934 <_fwalk_sglue+0xc>
 801a944:	4630      	mov	r0, r6
 801a946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a94a:	89ab      	ldrh	r3, [r5, #12]
 801a94c:	2b01      	cmp	r3, #1
 801a94e:	d907      	bls.n	801a960 <_fwalk_sglue+0x38>
 801a950:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a954:	3301      	adds	r3, #1
 801a956:	d003      	beq.n	801a960 <_fwalk_sglue+0x38>
 801a958:	4629      	mov	r1, r5
 801a95a:	4638      	mov	r0, r7
 801a95c:	47c0      	blx	r8
 801a95e:	4306      	orrs	r6, r0
 801a960:	3568      	adds	r5, #104	@ 0x68
 801a962:	e7e9      	b.n	801a938 <_fwalk_sglue+0x10>

0801a964 <_fwrite_r>:
 801a964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a968:	9c08      	ldr	r4, [sp, #32]
 801a96a:	468a      	mov	sl, r1
 801a96c:	4690      	mov	r8, r2
 801a96e:	fb02 f903 	mul.w	r9, r2, r3
 801a972:	4606      	mov	r6, r0
 801a974:	b118      	cbz	r0, 801a97e <_fwrite_r+0x1a>
 801a976:	6a03      	ldr	r3, [r0, #32]
 801a978:	b90b      	cbnz	r3, 801a97e <_fwrite_r+0x1a>
 801a97a:	f7ff ffbd 	bl	801a8f8 <__sinit>
 801a97e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a980:	07dd      	lsls	r5, r3, #31
 801a982:	d405      	bmi.n	801a990 <_fwrite_r+0x2c>
 801a984:	89a3      	ldrh	r3, [r4, #12]
 801a986:	0598      	lsls	r0, r3, #22
 801a988:	d402      	bmi.n	801a990 <_fwrite_r+0x2c>
 801a98a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a98c:	f000 fb29 	bl	801afe2 <__retarget_lock_acquire_recursive>
 801a990:	89a3      	ldrh	r3, [r4, #12]
 801a992:	0719      	lsls	r1, r3, #28
 801a994:	d516      	bpl.n	801a9c4 <_fwrite_r+0x60>
 801a996:	6923      	ldr	r3, [r4, #16]
 801a998:	b1a3      	cbz	r3, 801a9c4 <_fwrite_r+0x60>
 801a99a:	2500      	movs	r5, #0
 801a99c:	454d      	cmp	r5, r9
 801a99e:	d01f      	beq.n	801a9e0 <_fwrite_r+0x7c>
 801a9a0:	68a7      	ldr	r7, [r4, #8]
 801a9a2:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801a9a6:	3f01      	subs	r7, #1
 801a9a8:	2f00      	cmp	r7, #0
 801a9aa:	60a7      	str	r7, [r4, #8]
 801a9ac:	da04      	bge.n	801a9b8 <_fwrite_r+0x54>
 801a9ae:	69a3      	ldr	r3, [r4, #24]
 801a9b0:	429f      	cmp	r7, r3
 801a9b2:	db0f      	blt.n	801a9d4 <_fwrite_r+0x70>
 801a9b4:	290a      	cmp	r1, #10
 801a9b6:	d00d      	beq.n	801a9d4 <_fwrite_r+0x70>
 801a9b8:	6823      	ldr	r3, [r4, #0]
 801a9ba:	1c5a      	adds	r2, r3, #1
 801a9bc:	6022      	str	r2, [r4, #0]
 801a9be:	7019      	strb	r1, [r3, #0]
 801a9c0:	3501      	adds	r5, #1
 801a9c2:	e7eb      	b.n	801a99c <_fwrite_r+0x38>
 801a9c4:	4621      	mov	r1, r4
 801a9c6:	4630      	mov	r0, r6
 801a9c8:	f000 f972 	bl	801acb0 <__swsetup_r>
 801a9cc:	2800      	cmp	r0, #0
 801a9ce:	d0e4      	beq.n	801a99a <_fwrite_r+0x36>
 801a9d0:	2500      	movs	r5, #0
 801a9d2:	e005      	b.n	801a9e0 <_fwrite_r+0x7c>
 801a9d4:	4622      	mov	r2, r4
 801a9d6:	4630      	mov	r0, r6
 801a9d8:	f000 f92c 	bl	801ac34 <__swbuf_r>
 801a9dc:	3001      	adds	r0, #1
 801a9de:	d1ef      	bne.n	801a9c0 <_fwrite_r+0x5c>
 801a9e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a9e2:	07da      	lsls	r2, r3, #31
 801a9e4:	d405      	bmi.n	801a9f2 <_fwrite_r+0x8e>
 801a9e6:	89a3      	ldrh	r3, [r4, #12]
 801a9e8:	059b      	lsls	r3, r3, #22
 801a9ea:	d402      	bmi.n	801a9f2 <_fwrite_r+0x8e>
 801a9ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a9ee:	f000 faf9 	bl	801afe4 <__retarget_lock_release_recursive>
 801a9f2:	fbb5 f0f8 	udiv	r0, r5, r8
 801a9f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801a9fc <fwrite>:
 801a9fc:	b507      	push	{r0, r1, r2, lr}
 801a9fe:	9300      	str	r3, [sp, #0]
 801aa00:	4613      	mov	r3, r2
 801aa02:	460a      	mov	r2, r1
 801aa04:	4601      	mov	r1, r0
 801aa06:	4803      	ldr	r0, [pc, #12]	@ (801aa14 <fwrite+0x18>)
 801aa08:	6800      	ldr	r0, [r0, #0]
 801aa0a:	f7ff ffab 	bl	801a964 <_fwrite_r>
 801aa0e:	b003      	add	sp, #12
 801aa10:	f85d fb04 	ldr.w	pc, [sp], #4
 801aa14:	200000c8 	.word	0x200000c8

0801aa18 <iprintf>:
 801aa18:	b40f      	push	{r0, r1, r2, r3}
 801aa1a:	b507      	push	{r0, r1, r2, lr}
 801aa1c:	4906      	ldr	r1, [pc, #24]	@ (801aa38 <iprintf+0x20>)
 801aa1e:	ab04      	add	r3, sp, #16
 801aa20:	6808      	ldr	r0, [r1, #0]
 801aa22:	f853 2b04 	ldr.w	r2, [r3], #4
 801aa26:	6881      	ldr	r1, [r0, #8]
 801aa28:	9301      	str	r3, [sp, #4]
 801aa2a:	f003 f849 	bl	801dac0 <_vfiprintf_r>
 801aa2e:	b003      	add	sp, #12
 801aa30:	f85d eb04 	ldr.w	lr, [sp], #4
 801aa34:	b004      	add	sp, #16
 801aa36:	4770      	bx	lr
 801aa38:	200000c8 	.word	0x200000c8

0801aa3c <sniprintf>:
 801aa3c:	b40c      	push	{r2, r3}
 801aa3e:	b530      	push	{r4, r5, lr}
 801aa40:	4b17      	ldr	r3, [pc, #92]	@ (801aaa0 <sniprintf+0x64>)
 801aa42:	1e0c      	subs	r4, r1, #0
 801aa44:	681d      	ldr	r5, [r3, #0]
 801aa46:	b09d      	sub	sp, #116	@ 0x74
 801aa48:	da08      	bge.n	801aa5c <sniprintf+0x20>
 801aa4a:	238b      	movs	r3, #139	@ 0x8b
 801aa4c:	602b      	str	r3, [r5, #0]
 801aa4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801aa52:	b01d      	add	sp, #116	@ 0x74
 801aa54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801aa58:	b002      	add	sp, #8
 801aa5a:	4770      	bx	lr
 801aa5c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801aa60:	f8ad 3014 	strh.w	r3, [sp, #20]
 801aa64:	bf14      	ite	ne
 801aa66:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801aa6a:	4623      	moveq	r3, r4
 801aa6c:	9304      	str	r3, [sp, #16]
 801aa6e:	9307      	str	r3, [sp, #28]
 801aa70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801aa74:	9002      	str	r0, [sp, #8]
 801aa76:	9006      	str	r0, [sp, #24]
 801aa78:	f8ad 3016 	strh.w	r3, [sp, #22]
 801aa7c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801aa7e:	ab21      	add	r3, sp, #132	@ 0x84
 801aa80:	a902      	add	r1, sp, #8
 801aa82:	4628      	mov	r0, r5
 801aa84:	9301      	str	r3, [sp, #4]
 801aa86:	f002 fd29 	bl	801d4dc <_svfiprintf_r>
 801aa8a:	1c43      	adds	r3, r0, #1
 801aa8c:	bfbc      	itt	lt
 801aa8e:	238b      	movlt	r3, #139	@ 0x8b
 801aa90:	602b      	strlt	r3, [r5, #0]
 801aa92:	2c00      	cmp	r4, #0
 801aa94:	d0dd      	beq.n	801aa52 <sniprintf+0x16>
 801aa96:	9b02      	ldr	r3, [sp, #8]
 801aa98:	2200      	movs	r2, #0
 801aa9a:	701a      	strb	r2, [r3, #0]
 801aa9c:	e7d9      	b.n	801aa52 <sniprintf+0x16>
 801aa9e:	bf00      	nop
 801aaa0:	200000c8 	.word	0x200000c8

0801aaa4 <siprintf>:
 801aaa4:	b40e      	push	{r1, r2, r3}
 801aaa6:	b500      	push	{lr}
 801aaa8:	b09c      	sub	sp, #112	@ 0x70
 801aaaa:	ab1d      	add	r3, sp, #116	@ 0x74
 801aaac:	9002      	str	r0, [sp, #8]
 801aaae:	9006      	str	r0, [sp, #24]
 801aab0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801aab4:	4809      	ldr	r0, [pc, #36]	@ (801aadc <siprintf+0x38>)
 801aab6:	9107      	str	r1, [sp, #28]
 801aab8:	9104      	str	r1, [sp, #16]
 801aaba:	4909      	ldr	r1, [pc, #36]	@ (801aae0 <siprintf+0x3c>)
 801aabc:	f853 2b04 	ldr.w	r2, [r3], #4
 801aac0:	9105      	str	r1, [sp, #20]
 801aac2:	6800      	ldr	r0, [r0, #0]
 801aac4:	9301      	str	r3, [sp, #4]
 801aac6:	a902      	add	r1, sp, #8
 801aac8:	f002 fd08 	bl	801d4dc <_svfiprintf_r>
 801aacc:	9b02      	ldr	r3, [sp, #8]
 801aace:	2200      	movs	r2, #0
 801aad0:	701a      	strb	r2, [r3, #0]
 801aad2:	b01c      	add	sp, #112	@ 0x70
 801aad4:	f85d eb04 	ldr.w	lr, [sp], #4
 801aad8:	b003      	add	sp, #12
 801aada:	4770      	bx	lr
 801aadc:	200000c8 	.word	0x200000c8
 801aae0:	ffff0208 	.word	0xffff0208

0801aae4 <siscanf>:
 801aae4:	b40e      	push	{r1, r2, r3}
 801aae6:	b530      	push	{r4, r5, lr}
 801aae8:	b09c      	sub	sp, #112	@ 0x70
 801aaea:	ac1f      	add	r4, sp, #124	@ 0x7c
 801aaec:	f44f 7201 	mov.w	r2, #516	@ 0x204
 801aaf0:	f854 5b04 	ldr.w	r5, [r4], #4
 801aaf4:	f8ad 2014 	strh.w	r2, [sp, #20]
 801aaf8:	9002      	str	r0, [sp, #8]
 801aafa:	9006      	str	r0, [sp, #24]
 801aafc:	f7e5 fbd0 	bl	80002a0 <strlen>
 801ab00:	4b0b      	ldr	r3, [pc, #44]	@ (801ab30 <siscanf+0x4c>)
 801ab02:	9003      	str	r0, [sp, #12]
 801ab04:	9007      	str	r0, [sp, #28]
 801ab06:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ab08:	480a      	ldr	r0, [pc, #40]	@ (801ab34 <siscanf+0x50>)
 801ab0a:	9401      	str	r4, [sp, #4]
 801ab0c:	2300      	movs	r3, #0
 801ab0e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ab10:	9314      	str	r3, [sp, #80]	@ 0x50
 801ab12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ab16:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ab1a:	462a      	mov	r2, r5
 801ab1c:	4623      	mov	r3, r4
 801ab1e:	a902      	add	r1, sp, #8
 801ab20:	6800      	ldr	r0, [r0, #0]
 801ab22:	f002 fe2f 	bl	801d784 <__ssvfiscanf_r>
 801ab26:	b01c      	add	sp, #112	@ 0x70
 801ab28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ab2c:	b003      	add	sp, #12
 801ab2e:	4770      	bx	lr
 801ab30:	0801ab5b 	.word	0x0801ab5b
 801ab34:	200000c8 	.word	0x200000c8

0801ab38 <__sread>:
 801ab38:	b510      	push	{r4, lr}
 801ab3a:	460c      	mov	r4, r1
 801ab3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ab40:	f000 f9f0 	bl	801af24 <_read_r>
 801ab44:	2800      	cmp	r0, #0
 801ab46:	bfab      	itete	ge
 801ab48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801ab4a:	89a3      	ldrhlt	r3, [r4, #12]
 801ab4c:	181b      	addge	r3, r3, r0
 801ab4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801ab52:	bfac      	ite	ge
 801ab54:	6563      	strge	r3, [r4, #84]	@ 0x54
 801ab56:	81a3      	strhlt	r3, [r4, #12]
 801ab58:	bd10      	pop	{r4, pc}

0801ab5a <__seofread>:
 801ab5a:	2000      	movs	r0, #0
 801ab5c:	4770      	bx	lr

0801ab5e <__swrite>:
 801ab5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab62:	461f      	mov	r7, r3
 801ab64:	898b      	ldrh	r3, [r1, #12]
 801ab66:	05db      	lsls	r3, r3, #23
 801ab68:	4605      	mov	r5, r0
 801ab6a:	460c      	mov	r4, r1
 801ab6c:	4616      	mov	r6, r2
 801ab6e:	d505      	bpl.n	801ab7c <__swrite+0x1e>
 801ab70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ab74:	2302      	movs	r3, #2
 801ab76:	2200      	movs	r2, #0
 801ab78:	f000 f9c2 	bl	801af00 <_lseek_r>
 801ab7c:	89a3      	ldrh	r3, [r4, #12]
 801ab7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ab82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801ab86:	81a3      	strh	r3, [r4, #12]
 801ab88:	4632      	mov	r2, r6
 801ab8a:	463b      	mov	r3, r7
 801ab8c:	4628      	mov	r0, r5
 801ab8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ab92:	f000 b9e9 	b.w	801af68 <_write_r>

0801ab96 <__sseek>:
 801ab96:	b510      	push	{r4, lr}
 801ab98:	460c      	mov	r4, r1
 801ab9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ab9e:	f000 f9af 	bl	801af00 <_lseek_r>
 801aba2:	1c43      	adds	r3, r0, #1
 801aba4:	89a3      	ldrh	r3, [r4, #12]
 801aba6:	bf15      	itete	ne
 801aba8:	6560      	strne	r0, [r4, #84]	@ 0x54
 801abaa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801abae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801abb2:	81a3      	strheq	r3, [r4, #12]
 801abb4:	bf18      	it	ne
 801abb6:	81a3      	strhne	r3, [r4, #12]
 801abb8:	bd10      	pop	{r4, pc}

0801abba <__sclose>:
 801abba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801abbe:	f000 b939 	b.w	801ae34 <_close_r>

0801abc2 <_vsniprintf_r>:
 801abc2:	b530      	push	{r4, r5, lr}
 801abc4:	4614      	mov	r4, r2
 801abc6:	2c00      	cmp	r4, #0
 801abc8:	b09b      	sub	sp, #108	@ 0x6c
 801abca:	4605      	mov	r5, r0
 801abcc:	461a      	mov	r2, r3
 801abce:	da05      	bge.n	801abdc <_vsniprintf_r+0x1a>
 801abd0:	238b      	movs	r3, #139	@ 0x8b
 801abd2:	6003      	str	r3, [r0, #0]
 801abd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801abd8:	b01b      	add	sp, #108	@ 0x6c
 801abda:	bd30      	pop	{r4, r5, pc}
 801abdc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801abe0:	f8ad 300c 	strh.w	r3, [sp, #12]
 801abe4:	bf14      	ite	ne
 801abe6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801abea:	4623      	moveq	r3, r4
 801abec:	9302      	str	r3, [sp, #8]
 801abee:	9305      	str	r3, [sp, #20]
 801abf0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801abf4:	9100      	str	r1, [sp, #0]
 801abf6:	9104      	str	r1, [sp, #16]
 801abf8:	f8ad 300e 	strh.w	r3, [sp, #14]
 801abfc:	4669      	mov	r1, sp
 801abfe:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ac00:	f002 fc6c 	bl	801d4dc <_svfiprintf_r>
 801ac04:	1c43      	adds	r3, r0, #1
 801ac06:	bfbc      	itt	lt
 801ac08:	238b      	movlt	r3, #139	@ 0x8b
 801ac0a:	602b      	strlt	r3, [r5, #0]
 801ac0c:	2c00      	cmp	r4, #0
 801ac0e:	d0e3      	beq.n	801abd8 <_vsniprintf_r+0x16>
 801ac10:	9b00      	ldr	r3, [sp, #0]
 801ac12:	2200      	movs	r2, #0
 801ac14:	701a      	strb	r2, [r3, #0]
 801ac16:	e7df      	b.n	801abd8 <_vsniprintf_r+0x16>

0801ac18 <vsniprintf>:
 801ac18:	b507      	push	{r0, r1, r2, lr}
 801ac1a:	9300      	str	r3, [sp, #0]
 801ac1c:	4613      	mov	r3, r2
 801ac1e:	460a      	mov	r2, r1
 801ac20:	4601      	mov	r1, r0
 801ac22:	4803      	ldr	r0, [pc, #12]	@ (801ac30 <vsniprintf+0x18>)
 801ac24:	6800      	ldr	r0, [r0, #0]
 801ac26:	f7ff ffcc 	bl	801abc2 <_vsniprintf_r>
 801ac2a:	b003      	add	sp, #12
 801ac2c:	f85d fb04 	ldr.w	pc, [sp], #4
 801ac30:	200000c8 	.word	0x200000c8

0801ac34 <__swbuf_r>:
 801ac34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac36:	460e      	mov	r6, r1
 801ac38:	4614      	mov	r4, r2
 801ac3a:	4605      	mov	r5, r0
 801ac3c:	b118      	cbz	r0, 801ac46 <__swbuf_r+0x12>
 801ac3e:	6a03      	ldr	r3, [r0, #32]
 801ac40:	b90b      	cbnz	r3, 801ac46 <__swbuf_r+0x12>
 801ac42:	f7ff fe59 	bl	801a8f8 <__sinit>
 801ac46:	69a3      	ldr	r3, [r4, #24]
 801ac48:	60a3      	str	r3, [r4, #8]
 801ac4a:	89a3      	ldrh	r3, [r4, #12]
 801ac4c:	071a      	lsls	r2, r3, #28
 801ac4e:	d501      	bpl.n	801ac54 <__swbuf_r+0x20>
 801ac50:	6923      	ldr	r3, [r4, #16]
 801ac52:	b943      	cbnz	r3, 801ac66 <__swbuf_r+0x32>
 801ac54:	4621      	mov	r1, r4
 801ac56:	4628      	mov	r0, r5
 801ac58:	f000 f82a 	bl	801acb0 <__swsetup_r>
 801ac5c:	b118      	cbz	r0, 801ac66 <__swbuf_r+0x32>
 801ac5e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801ac62:	4638      	mov	r0, r7
 801ac64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac66:	6823      	ldr	r3, [r4, #0]
 801ac68:	6922      	ldr	r2, [r4, #16]
 801ac6a:	1a98      	subs	r0, r3, r2
 801ac6c:	6963      	ldr	r3, [r4, #20]
 801ac6e:	b2f6      	uxtb	r6, r6
 801ac70:	4283      	cmp	r3, r0
 801ac72:	4637      	mov	r7, r6
 801ac74:	dc05      	bgt.n	801ac82 <__swbuf_r+0x4e>
 801ac76:	4621      	mov	r1, r4
 801ac78:	4628      	mov	r0, r5
 801ac7a:	f003 fa0b 	bl	801e094 <_fflush_r>
 801ac7e:	2800      	cmp	r0, #0
 801ac80:	d1ed      	bne.n	801ac5e <__swbuf_r+0x2a>
 801ac82:	68a3      	ldr	r3, [r4, #8]
 801ac84:	3b01      	subs	r3, #1
 801ac86:	60a3      	str	r3, [r4, #8]
 801ac88:	6823      	ldr	r3, [r4, #0]
 801ac8a:	1c5a      	adds	r2, r3, #1
 801ac8c:	6022      	str	r2, [r4, #0]
 801ac8e:	701e      	strb	r6, [r3, #0]
 801ac90:	6962      	ldr	r2, [r4, #20]
 801ac92:	1c43      	adds	r3, r0, #1
 801ac94:	429a      	cmp	r2, r3
 801ac96:	d004      	beq.n	801aca2 <__swbuf_r+0x6e>
 801ac98:	89a3      	ldrh	r3, [r4, #12]
 801ac9a:	07db      	lsls	r3, r3, #31
 801ac9c:	d5e1      	bpl.n	801ac62 <__swbuf_r+0x2e>
 801ac9e:	2e0a      	cmp	r6, #10
 801aca0:	d1df      	bne.n	801ac62 <__swbuf_r+0x2e>
 801aca2:	4621      	mov	r1, r4
 801aca4:	4628      	mov	r0, r5
 801aca6:	f003 f9f5 	bl	801e094 <_fflush_r>
 801acaa:	2800      	cmp	r0, #0
 801acac:	d0d9      	beq.n	801ac62 <__swbuf_r+0x2e>
 801acae:	e7d6      	b.n	801ac5e <__swbuf_r+0x2a>

0801acb0 <__swsetup_r>:
 801acb0:	b538      	push	{r3, r4, r5, lr}
 801acb2:	4b29      	ldr	r3, [pc, #164]	@ (801ad58 <__swsetup_r+0xa8>)
 801acb4:	4605      	mov	r5, r0
 801acb6:	6818      	ldr	r0, [r3, #0]
 801acb8:	460c      	mov	r4, r1
 801acba:	b118      	cbz	r0, 801acc4 <__swsetup_r+0x14>
 801acbc:	6a03      	ldr	r3, [r0, #32]
 801acbe:	b90b      	cbnz	r3, 801acc4 <__swsetup_r+0x14>
 801acc0:	f7ff fe1a 	bl	801a8f8 <__sinit>
 801acc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801acc8:	0719      	lsls	r1, r3, #28
 801acca:	d422      	bmi.n	801ad12 <__swsetup_r+0x62>
 801accc:	06da      	lsls	r2, r3, #27
 801acce:	d407      	bmi.n	801ace0 <__swsetup_r+0x30>
 801acd0:	2209      	movs	r2, #9
 801acd2:	602a      	str	r2, [r5, #0]
 801acd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801acd8:	81a3      	strh	r3, [r4, #12]
 801acda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801acde:	e033      	b.n	801ad48 <__swsetup_r+0x98>
 801ace0:	0758      	lsls	r0, r3, #29
 801ace2:	d512      	bpl.n	801ad0a <__swsetup_r+0x5a>
 801ace4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ace6:	b141      	cbz	r1, 801acfa <__swsetup_r+0x4a>
 801ace8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801acec:	4299      	cmp	r1, r3
 801acee:	d002      	beq.n	801acf6 <__swsetup_r+0x46>
 801acf0:	4628      	mov	r0, r5
 801acf2:	f001 f80d 	bl	801bd10 <_free_r>
 801acf6:	2300      	movs	r3, #0
 801acf8:	6363      	str	r3, [r4, #52]	@ 0x34
 801acfa:	89a3      	ldrh	r3, [r4, #12]
 801acfc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801ad00:	81a3      	strh	r3, [r4, #12]
 801ad02:	2300      	movs	r3, #0
 801ad04:	6063      	str	r3, [r4, #4]
 801ad06:	6923      	ldr	r3, [r4, #16]
 801ad08:	6023      	str	r3, [r4, #0]
 801ad0a:	89a3      	ldrh	r3, [r4, #12]
 801ad0c:	f043 0308 	orr.w	r3, r3, #8
 801ad10:	81a3      	strh	r3, [r4, #12]
 801ad12:	6923      	ldr	r3, [r4, #16]
 801ad14:	b94b      	cbnz	r3, 801ad2a <__swsetup_r+0x7a>
 801ad16:	89a3      	ldrh	r3, [r4, #12]
 801ad18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801ad1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ad20:	d003      	beq.n	801ad2a <__swsetup_r+0x7a>
 801ad22:	4621      	mov	r1, r4
 801ad24:	4628      	mov	r0, r5
 801ad26:	f003 fa15 	bl	801e154 <__smakebuf_r>
 801ad2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ad2e:	f013 0201 	ands.w	r2, r3, #1
 801ad32:	d00a      	beq.n	801ad4a <__swsetup_r+0x9a>
 801ad34:	2200      	movs	r2, #0
 801ad36:	60a2      	str	r2, [r4, #8]
 801ad38:	6962      	ldr	r2, [r4, #20]
 801ad3a:	4252      	negs	r2, r2
 801ad3c:	61a2      	str	r2, [r4, #24]
 801ad3e:	6922      	ldr	r2, [r4, #16]
 801ad40:	b942      	cbnz	r2, 801ad54 <__swsetup_r+0xa4>
 801ad42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801ad46:	d1c5      	bne.n	801acd4 <__swsetup_r+0x24>
 801ad48:	bd38      	pop	{r3, r4, r5, pc}
 801ad4a:	0799      	lsls	r1, r3, #30
 801ad4c:	bf58      	it	pl
 801ad4e:	6962      	ldrpl	r2, [r4, #20]
 801ad50:	60a2      	str	r2, [r4, #8]
 801ad52:	e7f4      	b.n	801ad3e <__swsetup_r+0x8e>
 801ad54:	2000      	movs	r0, #0
 801ad56:	e7f7      	b.n	801ad48 <__swsetup_r+0x98>
 801ad58:	200000c8 	.word	0x200000c8

0801ad5c <memcmp>:
 801ad5c:	b510      	push	{r4, lr}
 801ad5e:	3901      	subs	r1, #1
 801ad60:	4402      	add	r2, r0
 801ad62:	4290      	cmp	r0, r2
 801ad64:	d101      	bne.n	801ad6a <memcmp+0xe>
 801ad66:	2000      	movs	r0, #0
 801ad68:	e005      	b.n	801ad76 <memcmp+0x1a>
 801ad6a:	7803      	ldrb	r3, [r0, #0]
 801ad6c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ad70:	42a3      	cmp	r3, r4
 801ad72:	d001      	beq.n	801ad78 <memcmp+0x1c>
 801ad74:	1b18      	subs	r0, r3, r4
 801ad76:	bd10      	pop	{r4, pc}
 801ad78:	3001      	adds	r0, #1
 801ad7a:	e7f2      	b.n	801ad62 <memcmp+0x6>

0801ad7c <memmove>:
 801ad7c:	4288      	cmp	r0, r1
 801ad7e:	b510      	push	{r4, lr}
 801ad80:	eb01 0402 	add.w	r4, r1, r2
 801ad84:	d902      	bls.n	801ad8c <memmove+0x10>
 801ad86:	4284      	cmp	r4, r0
 801ad88:	4623      	mov	r3, r4
 801ad8a:	d807      	bhi.n	801ad9c <memmove+0x20>
 801ad8c:	1e43      	subs	r3, r0, #1
 801ad8e:	42a1      	cmp	r1, r4
 801ad90:	d008      	beq.n	801ada4 <memmove+0x28>
 801ad92:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ad96:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ad9a:	e7f8      	b.n	801ad8e <memmove+0x12>
 801ad9c:	4402      	add	r2, r0
 801ad9e:	4601      	mov	r1, r0
 801ada0:	428a      	cmp	r2, r1
 801ada2:	d100      	bne.n	801ada6 <memmove+0x2a>
 801ada4:	bd10      	pop	{r4, pc}
 801ada6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801adaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801adae:	e7f7      	b.n	801ada0 <memmove+0x24>

0801adb0 <memset>:
 801adb0:	4402      	add	r2, r0
 801adb2:	4603      	mov	r3, r0
 801adb4:	4293      	cmp	r3, r2
 801adb6:	d100      	bne.n	801adba <memset+0xa>
 801adb8:	4770      	bx	lr
 801adba:	f803 1b01 	strb.w	r1, [r3], #1
 801adbe:	e7f9      	b.n	801adb4 <memset+0x4>

0801adc0 <strchr>:
 801adc0:	b2c9      	uxtb	r1, r1
 801adc2:	4603      	mov	r3, r0
 801adc4:	4618      	mov	r0, r3
 801adc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801adca:	b112      	cbz	r2, 801add2 <strchr+0x12>
 801adcc:	428a      	cmp	r2, r1
 801adce:	d1f9      	bne.n	801adc4 <strchr+0x4>
 801add0:	4770      	bx	lr
 801add2:	2900      	cmp	r1, #0
 801add4:	bf18      	it	ne
 801add6:	2000      	movne	r0, #0
 801add8:	4770      	bx	lr

0801adda <strncmp>:
 801adda:	b510      	push	{r4, lr}
 801addc:	b16a      	cbz	r2, 801adfa <strncmp+0x20>
 801adde:	3901      	subs	r1, #1
 801ade0:	1884      	adds	r4, r0, r2
 801ade2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ade6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801adea:	429a      	cmp	r2, r3
 801adec:	d103      	bne.n	801adf6 <strncmp+0x1c>
 801adee:	42a0      	cmp	r0, r4
 801adf0:	d001      	beq.n	801adf6 <strncmp+0x1c>
 801adf2:	2a00      	cmp	r2, #0
 801adf4:	d1f5      	bne.n	801ade2 <strncmp+0x8>
 801adf6:	1ad0      	subs	r0, r2, r3
 801adf8:	bd10      	pop	{r4, pc}
 801adfa:	4610      	mov	r0, r2
 801adfc:	e7fc      	b.n	801adf8 <strncmp+0x1e>

0801adfe <strstr>:
 801adfe:	780a      	ldrb	r2, [r1, #0]
 801ae00:	b570      	push	{r4, r5, r6, lr}
 801ae02:	b96a      	cbnz	r2, 801ae20 <strstr+0x22>
 801ae04:	bd70      	pop	{r4, r5, r6, pc}
 801ae06:	429a      	cmp	r2, r3
 801ae08:	d109      	bne.n	801ae1e <strstr+0x20>
 801ae0a:	460c      	mov	r4, r1
 801ae0c:	4605      	mov	r5, r0
 801ae0e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801ae12:	2b00      	cmp	r3, #0
 801ae14:	d0f6      	beq.n	801ae04 <strstr+0x6>
 801ae16:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801ae1a:	429e      	cmp	r6, r3
 801ae1c:	d0f7      	beq.n	801ae0e <strstr+0x10>
 801ae1e:	3001      	adds	r0, #1
 801ae20:	7803      	ldrb	r3, [r0, #0]
 801ae22:	2b00      	cmp	r3, #0
 801ae24:	d1ef      	bne.n	801ae06 <strstr+0x8>
 801ae26:	4618      	mov	r0, r3
 801ae28:	e7ec      	b.n	801ae04 <strstr+0x6>
	...

0801ae2c <_localeconv_r>:
 801ae2c:	4800      	ldr	r0, [pc, #0]	@ (801ae30 <_localeconv_r+0x4>)
 801ae2e:	4770      	bx	lr
 801ae30:	20000208 	.word	0x20000208

0801ae34 <_close_r>:
 801ae34:	b538      	push	{r3, r4, r5, lr}
 801ae36:	4d06      	ldr	r5, [pc, #24]	@ (801ae50 <_close_r+0x1c>)
 801ae38:	2300      	movs	r3, #0
 801ae3a:	4604      	mov	r4, r0
 801ae3c:	4608      	mov	r0, r1
 801ae3e:	602b      	str	r3, [r5, #0]
 801ae40:	f7ea fcfe 	bl	8005840 <_close>
 801ae44:	1c43      	adds	r3, r0, #1
 801ae46:	d102      	bne.n	801ae4e <_close_r+0x1a>
 801ae48:	682b      	ldr	r3, [r5, #0]
 801ae4a:	b103      	cbz	r3, 801ae4e <_close_r+0x1a>
 801ae4c:	6023      	str	r3, [r4, #0]
 801ae4e:	bd38      	pop	{r3, r4, r5, pc}
 801ae50:	20011dc4 	.word	0x20011dc4

0801ae54 <_reclaim_reent>:
 801ae54:	4b29      	ldr	r3, [pc, #164]	@ (801aefc <_reclaim_reent+0xa8>)
 801ae56:	681b      	ldr	r3, [r3, #0]
 801ae58:	4283      	cmp	r3, r0
 801ae5a:	b570      	push	{r4, r5, r6, lr}
 801ae5c:	4604      	mov	r4, r0
 801ae5e:	d04b      	beq.n	801aef8 <_reclaim_reent+0xa4>
 801ae60:	69c3      	ldr	r3, [r0, #28]
 801ae62:	b1ab      	cbz	r3, 801ae90 <_reclaim_reent+0x3c>
 801ae64:	68db      	ldr	r3, [r3, #12]
 801ae66:	b16b      	cbz	r3, 801ae84 <_reclaim_reent+0x30>
 801ae68:	2500      	movs	r5, #0
 801ae6a:	69e3      	ldr	r3, [r4, #28]
 801ae6c:	68db      	ldr	r3, [r3, #12]
 801ae6e:	5959      	ldr	r1, [r3, r5]
 801ae70:	2900      	cmp	r1, #0
 801ae72:	d13b      	bne.n	801aeec <_reclaim_reent+0x98>
 801ae74:	3504      	adds	r5, #4
 801ae76:	2d80      	cmp	r5, #128	@ 0x80
 801ae78:	d1f7      	bne.n	801ae6a <_reclaim_reent+0x16>
 801ae7a:	69e3      	ldr	r3, [r4, #28]
 801ae7c:	4620      	mov	r0, r4
 801ae7e:	68d9      	ldr	r1, [r3, #12]
 801ae80:	f000 ff46 	bl	801bd10 <_free_r>
 801ae84:	69e3      	ldr	r3, [r4, #28]
 801ae86:	6819      	ldr	r1, [r3, #0]
 801ae88:	b111      	cbz	r1, 801ae90 <_reclaim_reent+0x3c>
 801ae8a:	4620      	mov	r0, r4
 801ae8c:	f000 ff40 	bl	801bd10 <_free_r>
 801ae90:	6961      	ldr	r1, [r4, #20]
 801ae92:	b111      	cbz	r1, 801ae9a <_reclaim_reent+0x46>
 801ae94:	4620      	mov	r0, r4
 801ae96:	f000 ff3b 	bl	801bd10 <_free_r>
 801ae9a:	69e1      	ldr	r1, [r4, #28]
 801ae9c:	b111      	cbz	r1, 801aea4 <_reclaim_reent+0x50>
 801ae9e:	4620      	mov	r0, r4
 801aea0:	f000 ff36 	bl	801bd10 <_free_r>
 801aea4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801aea6:	b111      	cbz	r1, 801aeae <_reclaim_reent+0x5a>
 801aea8:	4620      	mov	r0, r4
 801aeaa:	f000 ff31 	bl	801bd10 <_free_r>
 801aeae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801aeb0:	b111      	cbz	r1, 801aeb8 <_reclaim_reent+0x64>
 801aeb2:	4620      	mov	r0, r4
 801aeb4:	f000 ff2c 	bl	801bd10 <_free_r>
 801aeb8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801aeba:	b111      	cbz	r1, 801aec2 <_reclaim_reent+0x6e>
 801aebc:	4620      	mov	r0, r4
 801aebe:	f000 ff27 	bl	801bd10 <_free_r>
 801aec2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801aec4:	b111      	cbz	r1, 801aecc <_reclaim_reent+0x78>
 801aec6:	4620      	mov	r0, r4
 801aec8:	f000 ff22 	bl	801bd10 <_free_r>
 801aecc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801aece:	b111      	cbz	r1, 801aed6 <_reclaim_reent+0x82>
 801aed0:	4620      	mov	r0, r4
 801aed2:	f000 ff1d 	bl	801bd10 <_free_r>
 801aed6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801aed8:	b111      	cbz	r1, 801aee0 <_reclaim_reent+0x8c>
 801aeda:	4620      	mov	r0, r4
 801aedc:	f000 ff18 	bl	801bd10 <_free_r>
 801aee0:	6a23      	ldr	r3, [r4, #32]
 801aee2:	b14b      	cbz	r3, 801aef8 <_reclaim_reent+0xa4>
 801aee4:	4620      	mov	r0, r4
 801aee6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aeea:	4718      	bx	r3
 801aeec:	680e      	ldr	r6, [r1, #0]
 801aeee:	4620      	mov	r0, r4
 801aef0:	f000 ff0e 	bl	801bd10 <_free_r>
 801aef4:	4631      	mov	r1, r6
 801aef6:	e7bb      	b.n	801ae70 <_reclaim_reent+0x1c>
 801aef8:	bd70      	pop	{r4, r5, r6, pc}
 801aefa:	bf00      	nop
 801aefc:	200000c8 	.word	0x200000c8

0801af00 <_lseek_r>:
 801af00:	b538      	push	{r3, r4, r5, lr}
 801af02:	4d07      	ldr	r5, [pc, #28]	@ (801af20 <_lseek_r+0x20>)
 801af04:	4604      	mov	r4, r0
 801af06:	4608      	mov	r0, r1
 801af08:	4611      	mov	r1, r2
 801af0a:	2200      	movs	r2, #0
 801af0c:	602a      	str	r2, [r5, #0]
 801af0e:	461a      	mov	r2, r3
 801af10:	f7ea fcbd 	bl	800588e <_lseek>
 801af14:	1c43      	adds	r3, r0, #1
 801af16:	d102      	bne.n	801af1e <_lseek_r+0x1e>
 801af18:	682b      	ldr	r3, [r5, #0]
 801af1a:	b103      	cbz	r3, 801af1e <_lseek_r+0x1e>
 801af1c:	6023      	str	r3, [r4, #0]
 801af1e:	bd38      	pop	{r3, r4, r5, pc}
 801af20:	20011dc4 	.word	0x20011dc4

0801af24 <_read_r>:
 801af24:	b538      	push	{r3, r4, r5, lr}
 801af26:	4d07      	ldr	r5, [pc, #28]	@ (801af44 <_read_r+0x20>)
 801af28:	4604      	mov	r4, r0
 801af2a:	4608      	mov	r0, r1
 801af2c:	4611      	mov	r1, r2
 801af2e:	2200      	movs	r2, #0
 801af30:	602a      	str	r2, [r5, #0]
 801af32:	461a      	mov	r2, r3
 801af34:	f7ea fc4b 	bl	80057ce <_read>
 801af38:	1c43      	adds	r3, r0, #1
 801af3a:	d102      	bne.n	801af42 <_read_r+0x1e>
 801af3c:	682b      	ldr	r3, [r5, #0]
 801af3e:	b103      	cbz	r3, 801af42 <_read_r+0x1e>
 801af40:	6023      	str	r3, [r4, #0]
 801af42:	bd38      	pop	{r3, r4, r5, pc}
 801af44:	20011dc4 	.word	0x20011dc4

0801af48 <_sbrk_r>:
 801af48:	b538      	push	{r3, r4, r5, lr}
 801af4a:	4d06      	ldr	r5, [pc, #24]	@ (801af64 <_sbrk_r+0x1c>)
 801af4c:	2300      	movs	r3, #0
 801af4e:	4604      	mov	r4, r0
 801af50:	4608      	mov	r0, r1
 801af52:	602b      	str	r3, [r5, #0]
 801af54:	f7ea fca8 	bl	80058a8 <_sbrk>
 801af58:	1c43      	adds	r3, r0, #1
 801af5a:	d102      	bne.n	801af62 <_sbrk_r+0x1a>
 801af5c:	682b      	ldr	r3, [r5, #0]
 801af5e:	b103      	cbz	r3, 801af62 <_sbrk_r+0x1a>
 801af60:	6023      	str	r3, [r4, #0]
 801af62:	bd38      	pop	{r3, r4, r5, pc}
 801af64:	20011dc4 	.word	0x20011dc4

0801af68 <_write_r>:
 801af68:	b538      	push	{r3, r4, r5, lr}
 801af6a:	4d07      	ldr	r5, [pc, #28]	@ (801af88 <_write_r+0x20>)
 801af6c:	4604      	mov	r4, r0
 801af6e:	4608      	mov	r0, r1
 801af70:	4611      	mov	r1, r2
 801af72:	2200      	movs	r2, #0
 801af74:	602a      	str	r2, [r5, #0]
 801af76:	461a      	mov	r2, r3
 801af78:	f7ea fc46 	bl	8005808 <_write>
 801af7c:	1c43      	adds	r3, r0, #1
 801af7e:	d102      	bne.n	801af86 <_write_r+0x1e>
 801af80:	682b      	ldr	r3, [r5, #0]
 801af82:	b103      	cbz	r3, 801af86 <_write_r+0x1e>
 801af84:	6023      	str	r3, [r4, #0]
 801af86:	bd38      	pop	{r3, r4, r5, pc}
 801af88:	20011dc4 	.word	0x20011dc4

0801af8c <__errno>:
 801af8c:	4b01      	ldr	r3, [pc, #4]	@ (801af94 <__errno+0x8>)
 801af8e:	6818      	ldr	r0, [r3, #0]
 801af90:	4770      	bx	lr
 801af92:	bf00      	nop
 801af94:	200000c8 	.word	0x200000c8

0801af98 <__libc_init_array>:
 801af98:	b570      	push	{r4, r5, r6, lr}
 801af9a:	4d0d      	ldr	r5, [pc, #52]	@ (801afd0 <__libc_init_array+0x38>)
 801af9c:	4c0d      	ldr	r4, [pc, #52]	@ (801afd4 <__libc_init_array+0x3c>)
 801af9e:	1b64      	subs	r4, r4, r5
 801afa0:	10a4      	asrs	r4, r4, #2
 801afa2:	2600      	movs	r6, #0
 801afa4:	42a6      	cmp	r6, r4
 801afa6:	d109      	bne.n	801afbc <__libc_init_array+0x24>
 801afa8:	4d0b      	ldr	r5, [pc, #44]	@ (801afd8 <__libc_init_array+0x40>)
 801afaa:	4c0c      	ldr	r4, [pc, #48]	@ (801afdc <__libc_init_array+0x44>)
 801afac:	f004 fd02 	bl	801f9b4 <_init>
 801afb0:	1b64      	subs	r4, r4, r5
 801afb2:	10a4      	asrs	r4, r4, #2
 801afb4:	2600      	movs	r6, #0
 801afb6:	42a6      	cmp	r6, r4
 801afb8:	d105      	bne.n	801afc6 <__libc_init_array+0x2e>
 801afba:	bd70      	pop	{r4, r5, r6, pc}
 801afbc:	f855 3b04 	ldr.w	r3, [r5], #4
 801afc0:	4798      	blx	r3
 801afc2:	3601      	adds	r6, #1
 801afc4:	e7ee      	b.n	801afa4 <__libc_init_array+0xc>
 801afc6:	f855 3b04 	ldr.w	r3, [r5], #4
 801afca:	4798      	blx	r3
 801afcc:	3601      	adds	r6, #1
 801afce:	e7f2      	b.n	801afb6 <__libc_init_array+0x1e>
 801afd0:	08020e90 	.word	0x08020e90
 801afd4:	08020e90 	.word	0x08020e90
 801afd8:	08020e90 	.word	0x08020e90
 801afdc:	08020e98 	.word	0x08020e98

0801afe0 <__retarget_lock_init_recursive>:
 801afe0:	4770      	bx	lr

0801afe2 <__retarget_lock_acquire_recursive>:
 801afe2:	4770      	bx	lr

0801afe4 <__retarget_lock_release_recursive>:
 801afe4:	4770      	bx	lr

0801afe6 <strcpy>:
 801afe6:	4603      	mov	r3, r0
 801afe8:	f811 2b01 	ldrb.w	r2, [r1], #1
 801afec:	f803 2b01 	strb.w	r2, [r3], #1
 801aff0:	2a00      	cmp	r2, #0
 801aff2:	d1f9      	bne.n	801afe8 <strcpy+0x2>
 801aff4:	4770      	bx	lr

0801aff6 <memcpy>:
 801aff6:	440a      	add	r2, r1
 801aff8:	4291      	cmp	r1, r2
 801affa:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801affe:	d100      	bne.n	801b002 <memcpy+0xc>
 801b000:	4770      	bx	lr
 801b002:	b510      	push	{r4, lr}
 801b004:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b008:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b00c:	4291      	cmp	r1, r2
 801b00e:	d1f9      	bne.n	801b004 <memcpy+0xe>
 801b010:	bd10      	pop	{r4, pc}
	...

0801b014 <nanf>:
 801b014:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801b01c <nanf+0x8>
 801b018:	4770      	bx	lr
 801b01a:	bf00      	nop
 801b01c:	7fc00000 	.word	0x7fc00000

0801b020 <__assert_func>:
 801b020:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b022:	4614      	mov	r4, r2
 801b024:	461a      	mov	r2, r3
 801b026:	4b09      	ldr	r3, [pc, #36]	@ (801b04c <__assert_func+0x2c>)
 801b028:	681b      	ldr	r3, [r3, #0]
 801b02a:	4605      	mov	r5, r0
 801b02c:	68d8      	ldr	r0, [r3, #12]
 801b02e:	b954      	cbnz	r4, 801b046 <__assert_func+0x26>
 801b030:	4b07      	ldr	r3, [pc, #28]	@ (801b050 <__assert_func+0x30>)
 801b032:	461c      	mov	r4, r3
 801b034:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b038:	9100      	str	r1, [sp, #0]
 801b03a:	462b      	mov	r3, r5
 801b03c:	4905      	ldr	r1, [pc, #20]	@ (801b054 <__assert_func+0x34>)
 801b03e:	f003 f851 	bl	801e0e4 <fiprintf>
 801b042:	f003 f961 	bl	801e308 <abort>
 801b046:	4b04      	ldr	r3, [pc, #16]	@ (801b058 <__assert_func+0x38>)
 801b048:	e7f4      	b.n	801b034 <__assert_func+0x14>
 801b04a:	bf00      	nop
 801b04c:	200000c8 	.word	0x200000c8
 801b050:	08020b9a 	.word	0x08020b9a
 801b054:	08020b6c 	.word	0x08020b6c
 801b058:	08020b5f 	.word	0x08020b5f

0801b05c <quorem>:
 801b05c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b060:	6903      	ldr	r3, [r0, #16]
 801b062:	690c      	ldr	r4, [r1, #16]
 801b064:	42a3      	cmp	r3, r4
 801b066:	4607      	mov	r7, r0
 801b068:	db7e      	blt.n	801b168 <quorem+0x10c>
 801b06a:	3c01      	subs	r4, #1
 801b06c:	f101 0814 	add.w	r8, r1, #20
 801b070:	00a3      	lsls	r3, r4, #2
 801b072:	f100 0514 	add.w	r5, r0, #20
 801b076:	9300      	str	r3, [sp, #0]
 801b078:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b07c:	9301      	str	r3, [sp, #4]
 801b07e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b082:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b086:	3301      	adds	r3, #1
 801b088:	429a      	cmp	r2, r3
 801b08a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b08e:	fbb2 f6f3 	udiv	r6, r2, r3
 801b092:	d32e      	bcc.n	801b0f2 <quorem+0x96>
 801b094:	f04f 0a00 	mov.w	sl, #0
 801b098:	46c4      	mov	ip, r8
 801b09a:	46ae      	mov	lr, r5
 801b09c:	46d3      	mov	fp, sl
 801b09e:	f85c 3b04 	ldr.w	r3, [ip], #4
 801b0a2:	b298      	uxth	r0, r3
 801b0a4:	fb06 a000 	mla	r0, r6, r0, sl
 801b0a8:	0c02      	lsrs	r2, r0, #16
 801b0aa:	0c1b      	lsrs	r3, r3, #16
 801b0ac:	fb06 2303 	mla	r3, r6, r3, r2
 801b0b0:	f8de 2000 	ldr.w	r2, [lr]
 801b0b4:	b280      	uxth	r0, r0
 801b0b6:	b292      	uxth	r2, r2
 801b0b8:	1a12      	subs	r2, r2, r0
 801b0ba:	445a      	add	r2, fp
 801b0bc:	f8de 0000 	ldr.w	r0, [lr]
 801b0c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b0c4:	b29b      	uxth	r3, r3
 801b0c6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801b0ca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801b0ce:	b292      	uxth	r2, r2
 801b0d0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801b0d4:	45e1      	cmp	r9, ip
 801b0d6:	f84e 2b04 	str.w	r2, [lr], #4
 801b0da:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801b0de:	d2de      	bcs.n	801b09e <quorem+0x42>
 801b0e0:	9b00      	ldr	r3, [sp, #0]
 801b0e2:	58eb      	ldr	r3, [r5, r3]
 801b0e4:	b92b      	cbnz	r3, 801b0f2 <quorem+0x96>
 801b0e6:	9b01      	ldr	r3, [sp, #4]
 801b0e8:	3b04      	subs	r3, #4
 801b0ea:	429d      	cmp	r5, r3
 801b0ec:	461a      	mov	r2, r3
 801b0ee:	d32f      	bcc.n	801b150 <quorem+0xf4>
 801b0f0:	613c      	str	r4, [r7, #16]
 801b0f2:	4638      	mov	r0, r7
 801b0f4:	f001 f91a 	bl	801c32c <__mcmp>
 801b0f8:	2800      	cmp	r0, #0
 801b0fa:	db25      	blt.n	801b148 <quorem+0xec>
 801b0fc:	4629      	mov	r1, r5
 801b0fe:	2000      	movs	r0, #0
 801b100:	f858 2b04 	ldr.w	r2, [r8], #4
 801b104:	f8d1 c000 	ldr.w	ip, [r1]
 801b108:	fa1f fe82 	uxth.w	lr, r2
 801b10c:	fa1f f38c 	uxth.w	r3, ip
 801b110:	eba3 030e 	sub.w	r3, r3, lr
 801b114:	4403      	add	r3, r0
 801b116:	0c12      	lsrs	r2, r2, #16
 801b118:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801b11c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801b120:	b29b      	uxth	r3, r3
 801b122:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b126:	45c1      	cmp	r9, r8
 801b128:	f841 3b04 	str.w	r3, [r1], #4
 801b12c:	ea4f 4022 	mov.w	r0, r2, asr #16
 801b130:	d2e6      	bcs.n	801b100 <quorem+0xa4>
 801b132:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b136:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b13a:	b922      	cbnz	r2, 801b146 <quorem+0xea>
 801b13c:	3b04      	subs	r3, #4
 801b13e:	429d      	cmp	r5, r3
 801b140:	461a      	mov	r2, r3
 801b142:	d30b      	bcc.n	801b15c <quorem+0x100>
 801b144:	613c      	str	r4, [r7, #16]
 801b146:	3601      	adds	r6, #1
 801b148:	4630      	mov	r0, r6
 801b14a:	b003      	add	sp, #12
 801b14c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b150:	6812      	ldr	r2, [r2, #0]
 801b152:	3b04      	subs	r3, #4
 801b154:	2a00      	cmp	r2, #0
 801b156:	d1cb      	bne.n	801b0f0 <quorem+0x94>
 801b158:	3c01      	subs	r4, #1
 801b15a:	e7c6      	b.n	801b0ea <quorem+0x8e>
 801b15c:	6812      	ldr	r2, [r2, #0]
 801b15e:	3b04      	subs	r3, #4
 801b160:	2a00      	cmp	r2, #0
 801b162:	d1ef      	bne.n	801b144 <quorem+0xe8>
 801b164:	3c01      	subs	r4, #1
 801b166:	e7ea      	b.n	801b13e <quorem+0xe2>
 801b168:	2000      	movs	r0, #0
 801b16a:	e7ee      	b.n	801b14a <quorem+0xee>
 801b16c:	0000      	movs	r0, r0
	...

0801b170 <_dtoa_r>:
 801b170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b174:	69c7      	ldr	r7, [r0, #28]
 801b176:	b099      	sub	sp, #100	@ 0x64
 801b178:	ed8d 0b02 	vstr	d0, [sp, #8]
 801b17c:	ec55 4b10 	vmov	r4, r5, d0
 801b180:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801b182:	9109      	str	r1, [sp, #36]	@ 0x24
 801b184:	4683      	mov	fp, r0
 801b186:	920e      	str	r2, [sp, #56]	@ 0x38
 801b188:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b18a:	b97f      	cbnz	r7, 801b1ac <_dtoa_r+0x3c>
 801b18c:	2010      	movs	r0, #16
 801b18e:	f7fe fae1 	bl	8019754 <malloc>
 801b192:	4602      	mov	r2, r0
 801b194:	f8cb 001c 	str.w	r0, [fp, #28]
 801b198:	b920      	cbnz	r0, 801b1a4 <_dtoa_r+0x34>
 801b19a:	4ba7      	ldr	r3, [pc, #668]	@ (801b438 <_dtoa_r+0x2c8>)
 801b19c:	21ef      	movs	r1, #239	@ 0xef
 801b19e:	48a7      	ldr	r0, [pc, #668]	@ (801b43c <_dtoa_r+0x2cc>)
 801b1a0:	f7ff ff3e 	bl	801b020 <__assert_func>
 801b1a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801b1a8:	6007      	str	r7, [r0, #0]
 801b1aa:	60c7      	str	r7, [r0, #12]
 801b1ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 801b1b0:	6819      	ldr	r1, [r3, #0]
 801b1b2:	b159      	cbz	r1, 801b1cc <_dtoa_r+0x5c>
 801b1b4:	685a      	ldr	r2, [r3, #4]
 801b1b6:	604a      	str	r2, [r1, #4]
 801b1b8:	2301      	movs	r3, #1
 801b1ba:	4093      	lsls	r3, r2
 801b1bc:	608b      	str	r3, [r1, #8]
 801b1be:	4658      	mov	r0, fp
 801b1c0:	f000 fe30 	bl	801be24 <_Bfree>
 801b1c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801b1c8:	2200      	movs	r2, #0
 801b1ca:	601a      	str	r2, [r3, #0]
 801b1cc:	1e2b      	subs	r3, r5, #0
 801b1ce:	bfb9      	ittee	lt
 801b1d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801b1d4:	9303      	strlt	r3, [sp, #12]
 801b1d6:	2300      	movge	r3, #0
 801b1d8:	6033      	strge	r3, [r6, #0]
 801b1da:	9f03      	ldr	r7, [sp, #12]
 801b1dc:	4b98      	ldr	r3, [pc, #608]	@ (801b440 <_dtoa_r+0x2d0>)
 801b1de:	bfbc      	itt	lt
 801b1e0:	2201      	movlt	r2, #1
 801b1e2:	6032      	strlt	r2, [r6, #0]
 801b1e4:	43bb      	bics	r3, r7
 801b1e6:	d112      	bne.n	801b20e <_dtoa_r+0x9e>
 801b1e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b1ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 801b1ee:	6013      	str	r3, [r2, #0]
 801b1f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801b1f4:	4323      	orrs	r3, r4
 801b1f6:	f000 854d 	beq.w	801bc94 <_dtoa_r+0xb24>
 801b1fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b1fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801b454 <_dtoa_r+0x2e4>
 801b200:	2b00      	cmp	r3, #0
 801b202:	f000 854f 	beq.w	801bca4 <_dtoa_r+0xb34>
 801b206:	f10a 0303 	add.w	r3, sl, #3
 801b20a:	f000 bd49 	b.w	801bca0 <_dtoa_r+0xb30>
 801b20e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b212:	2200      	movs	r2, #0
 801b214:	ec51 0b17 	vmov	r0, r1, d7
 801b218:	2300      	movs	r3, #0
 801b21a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801b21e:	f7e5 fc6b 	bl	8000af8 <__aeabi_dcmpeq>
 801b222:	4680      	mov	r8, r0
 801b224:	b158      	cbz	r0, 801b23e <_dtoa_r+0xce>
 801b226:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b228:	2301      	movs	r3, #1
 801b22a:	6013      	str	r3, [r2, #0]
 801b22c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b22e:	b113      	cbz	r3, 801b236 <_dtoa_r+0xc6>
 801b230:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801b232:	4b84      	ldr	r3, [pc, #528]	@ (801b444 <_dtoa_r+0x2d4>)
 801b234:	6013      	str	r3, [r2, #0]
 801b236:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801b458 <_dtoa_r+0x2e8>
 801b23a:	f000 bd33 	b.w	801bca4 <_dtoa_r+0xb34>
 801b23e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801b242:	aa16      	add	r2, sp, #88	@ 0x58
 801b244:	a917      	add	r1, sp, #92	@ 0x5c
 801b246:	4658      	mov	r0, fp
 801b248:	f001 f990 	bl	801c56c <__d2b>
 801b24c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801b250:	4681      	mov	r9, r0
 801b252:	2e00      	cmp	r6, #0
 801b254:	d077      	beq.n	801b346 <_dtoa_r+0x1d6>
 801b256:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b258:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801b25c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b260:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801b264:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801b268:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801b26c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801b270:	4619      	mov	r1, r3
 801b272:	2200      	movs	r2, #0
 801b274:	4b74      	ldr	r3, [pc, #464]	@ (801b448 <_dtoa_r+0x2d8>)
 801b276:	f7e5 f81f 	bl	80002b8 <__aeabi_dsub>
 801b27a:	a369      	add	r3, pc, #420	@ (adr r3, 801b420 <_dtoa_r+0x2b0>)
 801b27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b280:	f7e5 f9d2 	bl	8000628 <__aeabi_dmul>
 801b284:	a368      	add	r3, pc, #416	@ (adr r3, 801b428 <_dtoa_r+0x2b8>)
 801b286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b28a:	f7e5 f817 	bl	80002bc <__adddf3>
 801b28e:	4604      	mov	r4, r0
 801b290:	4630      	mov	r0, r6
 801b292:	460d      	mov	r5, r1
 801b294:	f7e5 f95e 	bl	8000554 <__aeabi_i2d>
 801b298:	a365      	add	r3, pc, #404	@ (adr r3, 801b430 <_dtoa_r+0x2c0>)
 801b29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b29e:	f7e5 f9c3 	bl	8000628 <__aeabi_dmul>
 801b2a2:	4602      	mov	r2, r0
 801b2a4:	460b      	mov	r3, r1
 801b2a6:	4620      	mov	r0, r4
 801b2a8:	4629      	mov	r1, r5
 801b2aa:	f7e5 f807 	bl	80002bc <__adddf3>
 801b2ae:	4604      	mov	r4, r0
 801b2b0:	460d      	mov	r5, r1
 801b2b2:	f7e5 fc69 	bl	8000b88 <__aeabi_d2iz>
 801b2b6:	2200      	movs	r2, #0
 801b2b8:	4607      	mov	r7, r0
 801b2ba:	2300      	movs	r3, #0
 801b2bc:	4620      	mov	r0, r4
 801b2be:	4629      	mov	r1, r5
 801b2c0:	f7e5 fc24 	bl	8000b0c <__aeabi_dcmplt>
 801b2c4:	b140      	cbz	r0, 801b2d8 <_dtoa_r+0x168>
 801b2c6:	4638      	mov	r0, r7
 801b2c8:	f7e5 f944 	bl	8000554 <__aeabi_i2d>
 801b2cc:	4622      	mov	r2, r4
 801b2ce:	462b      	mov	r3, r5
 801b2d0:	f7e5 fc12 	bl	8000af8 <__aeabi_dcmpeq>
 801b2d4:	b900      	cbnz	r0, 801b2d8 <_dtoa_r+0x168>
 801b2d6:	3f01      	subs	r7, #1
 801b2d8:	2f16      	cmp	r7, #22
 801b2da:	d851      	bhi.n	801b380 <_dtoa_r+0x210>
 801b2dc:	4b5b      	ldr	r3, [pc, #364]	@ (801b44c <_dtoa_r+0x2dc>)
 801b2de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801b2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801b2ea:	f7e5 fc0f 	bl	8000b0c <__aeabi_dcmplt>
 801b2ee:	2800      	cmp	r0, #0
 801b2f0:	d048      	beq.n	801b384 <_dtoa_r+0x214>
 801b2f2:	3f01      	subs	r7, #1
 801b2f4:	2300      	movs	r3, #0
 801b2f6:	9312      	str	r3, [sp, #72]	@ 0x48
 801b2f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801b2fa:	1b9b      	subs	r3, r3, r6
 801b2fc:	1e5a      	subs	r2, r3, #1
 801b2fe:	bf44      	itt	mi
 801b300:	f1c3 0801 	rsbmi	r8, r3, #1
 801b304:	2300      	movmi	r3, #0
 801b306:	9208      	str	r2, [sp, #32]
 801b308:	bf54      	ite	pl
 801b30a:	f04f 0800 	movpl.w	r8, #0
 801b30e:	9308      	strmi	r3, [sp, #32]
 801b310:	2f00      	cmp	r7, #0
 801b312:	db39      	blt.n	801b388 <_dtoa_r+0x218>
 801b314:	9b08      	ldr	r3, [sp, #32]
 801b316:	970f      	str	r7, [sp, #60]	@ 0x3c
 801b318:	443b      	add	r3, r7
 801b31a:	9308      	str	r3, [sp, #32]
 801b31c:	2300      	movs	r3, #0
 801b31e:	930a      	str	r3, [sp, #40]	@ 0x28
 801b320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b322:	2b09      	cmp	r3, #9
 801b324:	d864      	bhi.n	801b3f0 <_dtoa_r+0x280>
 801b326:	2b05      	cmp	r3, #5
 801b328:	bfc4      	itt	gt
 801b32a:	3b04      	subgt	r3, #4
 801b32c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801b32e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b330:	f1a3 0302 	sub.w	r3, r3, #2
 801b334:	bfcc      	ite	gt
 801b336:	2400      	movgt	r4, #0
 801b338:	2401      	movle	r4, #1
 801b33a:	2b03      	cmp	r3, #3
 801b33c:	d863      	bhi.n	801b406 <_dtoa_r+0x296>
 801b33e:	e8df f003 	tbb	[pc, r3]
 801b342:	372a      	.short	0x372a
 801b344:	5535      	.short	0x5535
 801b346:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801b34a:	441e      	add	r6, r3
 801b34c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801b350:	2b20      	cmp	r3, #32
 801b352:	bfc1      	itttt	gt
 801b354:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801b358:	409f      	lslgt	r7, r3
 801b35a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801b35e:	fa24 f303 	lsrgt.w	r3, r4, r3
 801b362:	bfd6      	itet	le
 801b364:	f1c3 0320 	rsble	r3, r3, #32
 801b368:	ea47 0003 	orrgt.w	r0, r7, r3
 801b36c:	fa04 f003 	lslle.w	r0, r4, r3
 801b370:	f7e5 f8e0 	bl	8000534 <__aeabi_ui2d>
 801b374:	2201      	movs	r2, #1
 801b376:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801b37a:	3e01      	subs	r6, #1
 801b37c:	9214      	str	r2, [sp, #80]	@ 0x50
 801b37e:	e777      	b.n	801b270 <_dtoa_r+0x100>
 801b380:	2301      	movs	r3, #1
 801b382:	e7b8      	b.n	801b2f6 <_dtoa_r+0x186>
 801b384:	9012      	str	r0, [sp, #72]	@ 0x48
 801b386:	e7b7      	b.n	801b2f8 <_dtoa_r+0x188>
 801b388:	427b      	negs	r3, r7
 801b38a:	930a      	str	r3, [sp, #40]	@ 0x28
 801b38c:	2300      	movs	r3, #0
 801b38e:	eba8 0807 	sub.w	r8, r8, r7
 801b392:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b394:	e7c4      	b.n	801b320 <_dtoa_r+0x1b0>
 801b396:	2300      	movs	r3, #0
 801b398:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b39a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b39c:	2b00      	cmp	r3, #0
 801b39e:	dc35      	bgt.n	801b40c <_dtoa_r+0x29c>
 801b3a0:	2301      	movs	r3, #1
 801b3a2:	9300      	str	r3, [sp, #0]
 801b3a4:	9307      	str	r3, [sp, #28]
 801b3a6:	461a      	mov	r2, r3
 801b3a8:	920e      	str	r2, [sp, #56]	@ 0x38
 801b3aa:	e00b      	b.n	801b3c4 <_dtoa_r+0x254>
 801b3ac:	2301      	movs	r3, #1
 801b3ae:	e7f3      	b.n	801b398 <_dtoa_r+0x228>
 801b3b0:	2300      	movs	r3, #0
 801b3b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b3b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b3b6:	18fb      	adds	r3, r7, r3
 801b3b8:	9300      	str	r3, [sp, #0]
 801b3ba:	3301      	adds	r3, #1
 801b3bc:	2b01      	cmp	r3, #1
 801b3be:	9307      	str	r3, [sp, #28]
 801b3c0:	bfb8      	it	lt
 801b3c2:	2301      	movlt	r3, #1
 801b3c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 801b3c8:	2100      	movs	r1, #0
 801b3ca:	2204      	movs	r2, #4
 801b3cc:	f102 0514 	add.w	r5, r2, #20
 801b3d0:	429d      	cmp	r5, r3
 801b3d2:	d91f      	bls.n	801b414 <_dtoa_r+0x2a4>
 801b3d4:	6041      	str	r1, [r0, #4]
 801b3d6:	4658      	mov	r0, fp
 801b3d8:	f000 fce4 	bl	801bda4 <_Balloc>
 801b3dc:	4682      	mov	sl, r0
 801b3de:	2800      	cmp	r0, #0
 801b3e0:	d13c      	bne.n	801b45c <_dtoa_r+0x2ec>
 801b3e2:	4b1b      	ldr	r3, [pc, #108]	@ (801b450 <_dtoa_r+0x2e0>)
 801b3e4:	4602      	mov	r2, r0
 801b3e6:	f240 11af 	movw	r1, #431	@ 0x1af
 801b3ea:	e6d8      	b.n	801b19e <_dtoa_r+0x2e>
 801b3ec:	2301      	movs	r3, #1
 801b3ee:	e7e0      	b.n	801b3b2 <_dtoa_r+0x242>
 801b3f0:	2401      	movs	r4, #1
 801b3f2:	2300      	movs	r3, #0
 801b3f4:	9309      	str	r3, [sp, #36]	@ 0x24
 801b3f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 801b3f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b3fc:	9300      	str	r3, [sp, #0]
 801b3fe:	9307      	str	r3, [sp, #28]
 801b400:	2200      	movs	r2, #0
 801b402:	2312      	movs	r3, #18
 801b404:	e7d0      	b.n	801b3a8 <_dtoa_r+0x238>
 801b406:	2301      	movs	r3, #1
 801b408:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b40a:	e7f5      	b.n	801b3f8 <_dtoa_r+0x288>
 801b40c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b40e:	9300      	str	r3, [sp, #0]
 801b410:	9307      	str	r3, [sp, #28]
 801b412:	e7d7      	b.n	801b3c4 <_dtoa_r+0x254>
 801b414:	3101      	adds	r1, #1
 801b416:	0052      	lsls	r2, r2, #1
 801b418:	e7d8      	b.n	801b3cc <_dtoa_r+0x25c>
 801b41a:	bf00      	nop
 801b41c:	f3af 8000 	nop.w
 801b420:	636f4361 	.word	0x636f4361
 801b424:	3fd287a7 	.word	0x3fd287a7
 801b428:	8b60c8b3 	.word	0x8b60c8b3
 801b42c:	3fc68a28 	.word	0x3fc68a28
 801b430:	509f79fb 	.word	0x509f79fb
 801b434:	3fd34413 	.word	0x3fd34413
 801b438:	080209b8 	.word	0x080209b8
 801b43c:	08020ba8 	.word	0x08020ba8
 801b440:	7ff00000 	.word	0x7ff00000
 801b444:	08020de8 	.word	0x08020de8
 801b448:	3ff80000 	.word	0x3ff80000
 801b44c:	08020ca0 	.word	0x08020ca0
 801b450:	08020c00 	.word	0x08020c00
 801b454:	08020ba4 	.word	0x08020ba4
 801b458:	08020de7 	.word	0x08020de7
 801b45c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801b460:	6018      	str	r0, [r3, #0]
 801b462:	9b07      	ldr	r3, [sp, #28]
 801b464:	2b0e      	cmp	r3, #14
 801b466:	f200 80a4 	bhi.w	801b5b2 <_dtoa_r+0x442>
 801b46a:	2c00      	cmp	r4, #0
 801b46c:	f000 80a1 	beq.w	801b5b2 <_dtoa_r+0x442>
 801b470:	2f00      	cmp	r7, #0
 801b472:	dd33      	ble.n	801b4dc <_dtoa_r+0x36c>
 801b474:	4bad      	ldr	r3, [pc, #692]	@ (801b72c <_dtoa_r+0x5bc>)
 801b476:	f007 020f 	and.w	r2, r7, #15
 801b47a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b47e:	ed93 7b00 	vldr	d7, [r3]
 801b482:	05f8      	lsls	r0, r7, #23
 801b484:	ed8d 7b04 	vstr	d7, [sp, #16]
 801b488:	ea4f 1427 	mov.w	r4, r7, asr #4
 801b48c:	d516      	bpl.n	801b4bc <_dtoa_r+0x34c>
 801b48e:	4ba8      	ldr	r3, [pc, #672]	@ (801b730 <_dtoa_r+0x5c0>)
 801b490:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801b494:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b498:	f7e5 f9f0 	bl	800087c <__aeabi_ddiv>
 801b49c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b4a0:	f004 040f 	and.w	r4, r4, #15
 801b4a4:	2603      	movs	r6, #3
 801b4a6:	4da2      	ldr	r5, [pc, #648]	@ (801b730 <_dtoa_r+0x5c0>)
 801b4a8:	b954      	cbnz	r4, 801b4c0 <_dtoa_r+0x350>
 801b4aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b4ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b4b2:	f7e5 f9e3 	bl	800087c <__aeabi_ddiv>
 801b4b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b4ba:	e028      	b.n	801b50e <_dtoa_r+0x39e>
 801b4bc:	2602      	movs	r6, #2
 801b4be:	e7f2      	b.n	801b4a6 <_dtoa_r+0x336>
 801b4c0:	07e1      	lsls	r1, r4, #31
 801b4c2:	d508      	bpl.n	801b4d6 <_dtoa_r+0x366>
 801b4c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b4c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b4cc:	f7e5 f8ac 	bl	8000628 <__aeabi_dmul>
 801b4d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b4d4:	3601      	adds	r6, #1
 801b4d6:	1064      	asrs	r4, r4, #1
 801b4d8:	3508      	adds	r5, #8
 801b4da:	e7e5      	b.n	801b4a8 <_dtoa_r+0x338>
 801b4dc:	f000 80d2 	beq.w	801b684 <_dtoa_r+0x514>
 801b4e0:	427c      	negs	r4, r7
 801b4e2:	4b92      	ldr	r3, [pc, #584]	@ (801b72c <_dtoa_r+0x5bc>)
 801b4e4:	4d92      	ldr	r5, [pc, #584]	@ (801b730 <_dtoa_r+0x5c0>)
 801b4e6:	f004 020f 	and.w	r2, r4, #15
 801b4ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801b4f6:	f7e5 f897 	bl	8000628 <__aeabi_dmul>
 801b4fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b4fe:	1124      	asrs	r4, r4, #4
 801b500:	2300      	movs	r3, #0
 801b502:	2602      	movs	r6, #2
 801b504:	2c00      	cmp	r4, #0
 801b506:	f040 80b2 	bne.w	801b66e <_dtoa_r+0x4fe>
 801b50a:	2b00      	cmp	r3, #0
 801b50c:	d1d3      	bne.n	801b4b6 <_dtoa_r+0x346>
 801b50e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b510:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801b514:	2b00      	cmp	r3, #0
 801b516:	f000 80b7 	beq.w	801b688 <_dtoa_r+0x518>
 801b51a:	4b86      	ldr	r3, [pc, #536]	@ (801b734 <_dtoa_r+0x5c4>)
 801b51c:	2200      	movs	r2, #0
 801b51e:	4620      	mov	r0, r4
 801b520:	4629      	mov	r1, r5
 801b522:	f7e5 faf3 	bl	8000b0c <__aeabi_dcmplt>
 801b526:	2800      	cmp	r0, #0
 801b528:	f000 80ae 	beq.w	801b688 <_dtoa_r+0x518>
 801b52c:	9b07      	ldr	r3, [sp, #28]
 801b52e:	2b00      	cmp	r3, #0
 801b530:	f000 80aa 	beq.w	801b688 <_dtoa_r+0x518>
 801b534:	9b00      	ldr	r3, [sp, #0]
 801b536:	2b00      	cmp	r3, #0
 801b538:	dd37      	ble.n	801b5aa <_dtoa_r+0x43a>
 801b53a:	1e7b      	subs	r3, r7, #1
 801b53c:	9304      	str	r3, [sp, #16]
 801b53e:	4620      	mov	r0, r4
 801b540:	4b7d      	ldr	r3, [pc, #500]	@ (801b738 <_dtoa_r+0x5c8>)
 801b542:	2200      	movs	r2, #0
 801b544:	4629      	mov	r1, r5
 801b546:	f7e5 f86f 	bl	8000628 <__aeabi_dmul>
 801b54a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b54e:	9c00      	ldr	r4, [sp, #0]
 801b550:	3601      	adds	r6, #1
 801b552:	4630      	mov	r0, r6
 801b554:	f7e4 fffe 	bl	8000554 <__aeabi_i2d>
 801b558:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b55c:	f7e5 f864 	bl	8000628 <__aeabi_dmul>
 801b560:	4b76      	ldr	r3, [pc, #472]	@ (801b73c <_dtoa_r+0x5cc>)
 801b562:	2200      	movs	r2, #0
 801b564:	f7e4 feaa 	bl	80002bc <__adddf3>
 801b568:	4605      	mov	r5, r0
 801b56a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801b56e:	2c00      	cmp	r4, #0
 801b570:	f040 808d 	bne.w	801b68e <_dtoa_r+0x51e>
 801b574:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b578:	4b71      	ldr	r3, [pc, #452]	@ (801b740 <_dtoa_r+0x5d0>)
 801b57a:	2200      	movs	r2, #0
 801b57c:	f7e4 fe9c 	bl	80002b8 <__aeabi_dsub>
 801b580:	4602      	mov	r2, r0
 801b582:	460b      	mov	r3, r1
 801b584:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801b588:	462a      	mov	r2, r5
 801b58a:	4633      	mov	r3, r6
 801b58c:	f7e5 fadc 	bl	8000b48 <__aeabi_dcmpgt>
 801b590:	2800      	cmp	r0, #0
 801b592:	f040 828b 	bne.w	801baac <_dtoa_r+0x93c>
 801b596:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b59a:	462a      	mov	r2, r5
 801b59c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801b5a0:	f7e5 fab4 	bl	8000b0c <__aeabi_dcmplt>
 801b5a4:	2800      	cmp	r0, #0
 801b5a6:	f040 8128 	bne.w	801b7fa <_dtoa_r+0x68a>
 801b5aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801b5ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801b5b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801b5b4:	2b00      	cmp	r3, #0
 801b5b6:	f2c0 815a 	blt.w	801b86e <_dtoa_r+0x6fe>
 801b5ba:	2f0e      	cmp	r7, #14
 801b5bc:	f300 8157 	bgt.w	801b86e <_dtoa_r+0x6fe>
 801b5c0:	4b5a      	ldr	r3, [pc, #360]	@ (801b72c <_dtoa_r+0x5bc>)
 801b5c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801b5c6:	ed93 7b00 	vldr	d7, [r3]
 801b5ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b5cc:	2b00      	cmp	r3, #0
 801b5ce:	ed8d 7b00 	vstr	d7, [sp]
 801b5d2:	da03      	bge.n	801b5dc <_dtoa_r+0x46c>
 801b5d4:	9b07      	ldr	r3, [sp, #28]
 801b5d6:	2b00      	cmp	r3, #0
 801b5d8:	f340 8101 	ble.w	801b7de <_dtoa_r+0x66e>
 801b5dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801b5e0:	4656      	mov	r6, sl
 801b5e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b5e6:	4620      	mov	r0, r4
 801b5e8:	4629      	mov	r1, r5
 801b5ea:	f7e5 f947 	bl	800087c <__aeabi_ddiv>
 801b5ee:	f7e5 facb 	bl	8000b88 <__aeabi_d2iz>
 801b5f2:	4680      	mov	r8, r0
 801b5f4:	f7e4 ffae 	bl	8000554 <__aeabi_i2d>
 801b5f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b5fc:	f7e5 f814 	bl	8000628 <__aeabi_dmul>
 801b600:	4602      	mov	r2, r0
 801b602:	460b      	mov	r3, r1
 801b604:	4620      	mov	r0, r4
 801b606:	4629      	mov	r1, r5
 801b608:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801b60c:	f7e4 fe54 	bl	80002b8 <__aeabi_dsub>
 801b610:	f806 4b01 	strb.w	r4, [r6], #1
 801b614:	9d07      	ldr	r5, [sp, #28]
 801b616:	eba6 040a 	sub.w	r4, r6, sl
 801b61a:	42a5      	cmp	r5, r4
 801b61c:	4602      	mov	r2, r0
 801b61e:	460b      	mov	r3, r1
 801b620:	f040 8117 	bne.w	801b852 <_dtoa_r+0x6e2>
 801b624:	f7e4 fe4a 	bl	80002bc <__adddf3>
 801b628:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b62c:	4604      	mov	r4, r0
 801b62e:	460d      	mov	r5, r1
 801b630:	f7e5 fa8a 	bl	8000b48 <__aeabi_dcmpgt>
 801b634:	2800      	cmp	r0, #0
 801b636:	f040 80f9 	bne.w	801b82c <_dtoa_r+0x6bc>
 801b63a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b63e:	4620      	mov	r0, r4
 801b640:	4629      	mov	r1, r5
 801b642:	f7e5 fa59 	bl	8000af8 <__aeabi_dcmpeq>
 801b646:	b118      	cbz	r0, 801b650 <_dtoa_r+0x4e0>
 801b648:	f018 0f01 	tst.w	r8, #1
 801b64c:	f040 80ee 	bne.w	801b82c <_dtoa_r+0x6bc>
 801b650:	4649      	mov	r1, r9
 801b652:	4658      	mov	r0, fp
 801b654:	f000 fbe6 	bl	801be24 <_Bfree>
 801b658:	2300      	movs	r3, #0
 801b65a:	7033      	strb	r3, [r6, #0]
 801b65c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b65e:	3701      	adds	r7, #1
 801b660:	601f      	str	r7, [r3, #0]
 801b662:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b664:	2b00      	cmp	r3, #0
 801b666:	f000 831d 	beq.w	801bca4 <_dtoa_r+0xb34>
 801b66a:	601e      	str	r6, [r3, #0]
 801b66c:	e31a      	b.n	801bca4 <_dtoa_r+0xb34>
 801b66e:	07e2      	lsls	r2, r4, #31
 801b670:	d505      	bpl.n	801b67e <_dtoa_r+0x50e>
 801b672:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b676:	f7e4 ffd7 	bl	8000628 <__aeabi_dmul>
 801b67a:	3601      	adds	r6, #1
 801b67c:	2301      	movs	r3, #1
 801b67e:	1064      	asrs	r4, r4, #1
 801b680:	3508      	adds	r5, #8
 801b682:	e73f      	b.n	801b504 <_dtoa_r+0x394>
 801b684:	2602      	movs	r6, #2
 801b686:	e742      	b.n	801b50e <_dtoa_r+0x39e>
 801b688:	9c07      	ldr	r4, [sp, #28]
 801b68a:	9704      	str	r7, [sp, #16]
 801b68c:	e761      	b.n	801b552 <_dtoa_r+0x3e2>
 801b68e:	4b27      	ldr	r3, [pc, #156]	@ (801b72c <_dtoa_r+0x5bc>)
 801b690:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801b692:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b696:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801b69a:	4454      	add	r4, sl
 801b69c:	2900      	cmp	r1, #0
 801b69e:	d053      	beq.n	801b748 <_dtoa_r+0x5d8>
 801b6a0:	4928      	ldr	r1, [pc, #160]	@ (801b744 <_dtoa_r+0x5d4>)
 801b6a2:	2000      	movs	r0, #0
 801b6a4:	f7e5 f8ea 	bl	800087c <__aeabi_ddiv>
 801b6a8:	4633      	mov	r3, r6
 801b6aa:	462a      	mov	r2, r5
 801b6ac:	f7e4 fe04 	bl	80002b8 <__aeabi_dsub>
 801b6b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801b6b4:	4656      	mov	r6, sl
 801b6b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b6ba:	f7e5 fa65 	bl	8000b88 <__aeabi_d2iz>
 801b6be:	4605      	mov	r5, r0
 801b6c0:	f7e4 ff48 	bl	8000554 <__aeabi_i2d>
 801b6c4:	4602      	mov	r2, r0
 801b6c6:	460b      	mov	r3, r1
 801b6c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b6cc:	f7e4 fdf4 	bl	80002b8 <__aeabi_dsub>
 801b6d0:	3530      	adds	r5, #48	@ 0x30
 801b6d2:	4602      	mov	r2, r0
 801b6d4:	460b      	mov	r3, r1
 801b6d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801b6da:	f806 5b01 	strb.w	r5, [r6], #1
 801b6de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801b6e2:	f7e5 fa13 	bl	8000b0c <__aeabi_dcmplt>
 801b6e6:	2800      	cmp	r0, #0
 801b6e8:	d171      	bne.n	801b7ce <_dtoa_r+0x65e>
 801b6ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b6ee:	4911      	ldr	r1, [pc, #68]	@ (801b734 <_dtoa_r+0x5c4>)
 801b6f0:	2000      	movs	r0, #0
 801b6f2:	f7e4 fde1 	bl	80002b8 <__aeabi_dsub>
 801b6f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801b6fa:	f7e5 fa07 	bl	8000b0c <__aeabi_dcmplt>
 801b6fe:	2800      	cmp	r0, #0
 801b700:	f040 8095 	bne.w	801b82e <_dtoa_r+0x6be>
 801b704:	42a6      	cmp	r6, r4
 801b706:	f43f af50 	beq.w	801b5aa <_dtoa_r+0x43a>
 801b70a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801b70e:	4b0a      	ldr	r3, [pc, #40]	@ (801b738 <_dtoa_r+0x5c8>)
 801b710:	2200      	movs	r2, #0
 801b712:	f7e4 ff89 	bl	8000628 <__aeabi_dmul>
 801b716:	4b08      	ldr	r3, [pc, #32]	@ (801b738 <_dtoa_r+0x5c8>)
 801b718:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801b71c:	2200      	movs	r2, #0
 801b71e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b722:	f7e4 ff81 	bl	8000628 <__aeabi_dmul>
 801b726:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b72a:	e7c4      	b.n	801b6b6 <_dtoa_r+0x546>
 801b72c:	08020ca0 	.word	0x08020ca0
 801b730:	08020c78 	.word	0x08020c78
 801b734:	3ff00000 	.word	0x3ff00000
 801b738:	40240000 	.word	0x40240000
 801b73c:	401c0000 	.word	0x401c0000
 801b740:	40140000 	.word	0x40140000
 801b744:	3fe00000 	.word	0x3fe00000
 801b748:	4631      	mov	r1, r6
 801b74a:	4628      	mov	r0, r5
 801b74c:	f7e4 ff6c 	bl	8000628 <__aeabi_dmul>
 801b750:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801b754:	9415      	str	r4, [sp, #84]	@ 0x54
 801b756:	4656      	mov	r6, sl
 801b758:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b75c:	f7e5 fa14 	bl	8000b88 <__aeabi_d2iz>
 801b760:	4605      	mov	r5, r0
 801b762:	f7e4 fef7 	bl	8000554 <__aeabi_i2d>
 801b766:	4602      	mov	r2, r0
 801b768:	460b      	mov	r3, r1
 801b76a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b76e:	f7e4 fda3 	bl	80002b8 <__aeabi_dsub>
 801b772:	3530      	adds	r5, #48	@ 0x30
 801b774:	f806 5b01 	strb.w	r5, [r6], #1
 801b778:	4602      	mov	r2, r0
 801b77a:	460b      	mov	r3, r1
 801b77c:	42a6      	cmp	r6, r4
 801b77e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801b782:	f04f 0200 	mov.w	r2, #0
 801b786:	d124      	bne.n	801b7d2 <_dtoa_r+0x662>
 801b788:	4bac      	ldr	r3, [pc, #688]	@ (801ba3c <_dtoa_r+0x8cc>)
 801b78a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801b78e:	f7e4 fd95 	bl	80002bc <__adddf3>
 801b792:	4602      	mov	r2, r0
 801b794:	460b      	mov	r3, r1
 801b796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b79a:	f7e5 f9d5 	bl	8000b48 <__aeabi_dcmpgt>
 801b79e:	2800      	cmp	r0, #0
 801b7a0:	d145      	bne.n	801b82e <_dtoa_r+0x6be>
 801b7a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801b7a6:	49a5      	ldr	r1, [pc, #660]	@ (801ba3c <_dtoa_r+0x8cc>)
 801b7a8:	2000      	movs	r0, #0
 801b7aa:	f7e4 fd85 	bl	80002b8 <__aeabi_dsub>
 801b7ae:	4602      	mov	r2, r0
 801b7b0:	460b      	mov	r3, r1
 801b7b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b7b6:	f7e5 f9a9 	bl	8000b0c <__aeabi_dcmplt>
 801b7ba:	2800      	cmp	r0, #0
 801b7bc:	f43f aef5 	beq.w	801b5aa <_dtoa_r+0x43a>
 801b7c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801b7c2:	1e73      	subs	r3, r6, #1
 801b7c4:	9315      	str	r3, [sp, #84]	@ 0x54
 801b7c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801b7ca:	2b30      	cmp	r3, #48	@ 0x30
 801b7cc:	d0f8      	beq.n	801b7c0 <_dtoa_r+0x650>
 801b7ce:	9f04      	ldr	r7, [sp, #16]
 801b7d0:	e73e      	b.n	801b650 <_dtoa_r+0x4e0>
 801b7d2:	4b9b      	ldr	r3, [pc, #620]	@ (801ba40 <_dtoa_r+0x8d0>)
 801b7d4:	f7e4 ff28 	bl	8000628 <__aeabi_dmul>
 801b7d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b7dc:	e7bc      	b.n	801b758 <_dtoa_r+0x5e8>
 801b7de:	d10c      	bne.n	801b7fa <_dtoa_r+0x68a>
 801b7e0:	4b98      	ldr	r3, [pc, #608]	@ (801ba44 <_dtoa_r+0x8d4>)
 801b7e2:	2200      	movs	r2, #0
 801b7e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b7e8:	f7e4 ff1e 	bl	8000628 <__aeabi_dmul>
 801b7ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b7f0:	f7e5 f9a0 	bl	8000b34 <__aeabi_dcmpge>
 801b7f4:	2800      	cmp	r0, #0
 801b7f6:	f000 8157 	beq.w	801baa8 <_dtoa_r+0x938>
 801b7fa:	2400      	movs	r4, #0
 801b7fc:	4625      	mov	r5, r4
 801b7fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b800:	43db      	mvns	r3, r3
 801b802:	9304      	str	r3, [sp, #16]
 801b804:	4656      	mov	r6, sl
 801b806:	2700      	movs	r7, #0
 801b808:	4621      	mov	r1, r4
 801b80a:	4658      	mov	r0, fp
 801b80c:	f000 fb0a 	bl	801be24 <_Bfree>
 801b810:	2d00      	cmp	r5, #0
 801b812:	d0dc      	beq.n	801b7ce <_dtoa_r+0x65e>
 801b814:	b12f      	cbz	r7, 801b822 <_dtoa_r+0x6b2>
 801b816:	42af      	cmp	r7, r5
 801b818:	d003      	beq.n	801b822 <_dtoa_r+0x6b2>
 801b81a:	4639      	mov	r1, r7
 801b81c:	4658      	mov	r0, fp
 801b81e:	f000 fb01 	bl	801be24 <_Bfree>
 801b822:	4629      	mov	r1, r5
 801b824:	4658      	mov	r0, fp
 801b826:	f000 fafd 	bl	801be24 <_Bfree>
 801b82a:	e7d0      	b.n	801b7ce <_dtoa_r+0x65e>
 801b82c:	9704      	str	r7, [sp, #16]
 801b82e:	4633      	mov	r3, r6
 801b830:	461e      	mov	r6, r3
 801b832:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b836:	2a39      	cmp	r2, #57	@ 0x39
 801b838:	d107      	bne.n	801b84a <_dtoa_r+0x6da>
 801b83a:	459a      	cmp	sl, r3
 801b83c:	d1f8      	bne.n	801b830 <_dtoa_r+0x6c0>
 801b83e:	9a04      	ldr	r2, [sp, #16]
 801b840:	3201      	adds	r2, #1
 801b842:	9204      	str	r2, [sp, #16]
 801b844:	2230      	movs	r2, #48	@ 0x30
 801b846:	f88a 2000 	strb.w	r2, [sl]
 801b84a:	781a      	ldrb	r2, [r3, #0]
 801b84c:	3201      	adds	r2, #1
 801b84e:	701a      	strb	r2, [r3, #0]
 801b850:	e7bd      	b.n	801b7ce <_dtoa_r+0x65e>
 801b852:	4b7b      	ldr	r3, [pc, #492]	@ (801ba40 <_dtoa_r+0x8d0>)
 801b854:	2200      	movs	r2, #0
 801b856:	f7e4 fee7 	bl	8000628 <__aeabi_dmul>
 801b85a:	2200      	movs	r2, #0
 801b85c:	2300      	movs	r3, #0
 801b85e:	4604      	mov	r4, r0
 801b860:	460d      	mov	r5, r1
 801b862:	f7e5 f949 	bl	8000af8 <__aeabi_dcmpeq>
 801b866:	2800      	cmp	r0, #0
 801b868:	f43f aebb 	beq.w	801b5e2 <_dtoa_r+0x472>
 801b86c:	e6f0      	b.n	801b650 <_dtoa_r+0x4e0>
 801b86e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801b870:	2a00      	cmp	r2, #0
 801b872:	f000 80db 	beq.w	801ba2c <_dtoa_r+0x8bc>
 801b876:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b878:	2a01      	cmp	r2, #1
 801b87a:	f300 80bf 	bgt.w	801b9fc <_dtoa_r+0x88c>
 801b87e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801b880:	2a00      	cmp	r2, #0
 801b882:	f000 80b7 	beq.w	801b9f4 <_dtoa_r+0x884>
 801b886:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801b88a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801b88c:	4646      	mov	r6, r8
 801b88e:	9a08      	ldr	r2, [sp, #32]
 801b890:	2101      	movs	r1, #1
 801b892:	441a      	add	r2, r3
 801b894:	4658      	mov	r0, fp
 801b896:	4498      	add	r8, r3
 801b898:	9208      	str	r2, [sp, #32]
 801b89a:	f000 fbc1 	bl	801c020 <__i2b>
 801b89e:	4605      	mov	r5, r0
 801b8a0:	b15e      	cbz	r6, 801b8ba <_dtoa_r+0x74a>
 801b8a2:	9b08      	ldr	r3, [sp, #32]
 801b8a4:	2b00      	cmp	r3, #0
 801b8a6:	dd08      	ble.n	801b8ba <_dtoa_r+0x74a>
 801b8a8:	42b3      	cmp	r3, r6
 801b8aa:	9a08      	ldr	r2, [sp, #32]
 801b8ac:	bfa8      	it	ge
 801b8ae:	4633      	movge	r3, r6
 801b8b0:	eba8 0803 	sub.w	r8, r8, r3
 801b8b4:	1af6      	subs	r6, r6, r3
 801b8b6:	1ad3      	subs	r3, r2, r3
 801b8b8:	9308      	str	r3, [sp, #32]
 801b8ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b8bc:	b1f3      	cbz	r3, 801b8fc <_dtoa_r+0x78c>
 801b8be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b8c0:	2b00      	cmp	r3, #0
 801b8c2:	f000 80b7 	beq.w	801ba34 <_dtoa_r+0x8c4>
 801b8c6:	b18c      	cbz	r4, 801b8ec <_dtoa_r+0x77c>
 801b8c8:	4629      	mov	r1, r5
 801b8ca:	4622      	mov	r2, r4
 801b8cc:	4658      	mov	r0, fp
 801b8ce:	f000 fc67 	bl	801c1a0 <__pow5mult>
 801b8d2:	464a      	mov	r2, r9
 801b8d4:	4601      	mov	r1, r0
 801b8d6:	4605      	mov	r5, r0
 801b8d8:	4658      	mov	r0, fp
 801b8da:	f000 fbb7 	bl	801c04c <__multiply>
 801b8de:	4649      	mov	r1, r9
 801b8e0:	9004      	str	r0, [sp, #16]
 801b8e2:	4658      	mov	r0, fp
 801b8e4:	f000 fa9e 	bl	801be24 <_Bfree>
 801b8e8:	9b04      	ldr	r3, [sp, #16]
 801b8ea:	4699      	mov	r9, r3
 801b8ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b8ee:	1b1a      	subs	r2, r3, r4
 801b8f0:	d004      	beq.n	801b8fc <_dtoa_r+0x78c>
 801b8f2:	4649      	mov	r1, r9
 801b8f4:	4658      	mov	r0, fp
 801b8f6:	f000 fc53 	bl	801c1a0 <__pow5mult>
 801b8fa:	4681      	mov	r9, r0
 801b8fc:	2101      	movs	r1, #1
 801b8fe:	4658      	mov	r0, fp
 801b900:	f000 fb8e 	bl	801c020 <__i2b>
 801b904:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b906:	4604      	mov	r4, r0
 801b908:	2b00      	cmp	r3, #0
 801b90a:	f000 81cf 	beq.w	801bcac <_dtoa_r+0xb3c>
 801b90e:	461a      	mov	r2, r3
 801b910:	4601      	mov	r1, r0
 801b912:	4658      	mov	r0, fp
 801b914:	f000 fc44 	bl	801c1a0 <__pow5mult>
 801b918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b91a:	2b01      	cmp	r3, #1
 801b91c:	4604      	mov	r4, r0
 801b91e:	f300 8095 	bgt.w	801ba4c <_dtoa_r+0x8dc>
 801b922:	9b02      	ldr	r3, [sp, #8]
 801b924:	2b00      	cmp	r3, #0
 801b926:	f040 8087 	bne.w	801ba38 <_dtoa_r+0x8c8>
 801b92a:	9b03      	ldr	r3, [sp, #12]
 801b92c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b930:	2b00      	cmp	r3, #0
 801b932:	f040 8089 	bne.w	801ba48 <_dtoa_r+0x8d8>
 801b936:	9b03      	ldr	r3, [sp, #12]
 801b938:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b93c:	0d1b      	lsrs	r3, r3, #20
 801b93e:	051b      	lsls	r3, r3, #20
 801b940:	b12b      	cbz	r3, 801b94e <_dtoa_r+0x7de>
 801b942:	9b08      	ldr	r3, [sp, #32]
 801b944:	3301      	adds	r3, #1
 801b946:	9308      	str	r3, [sp, #32]
 801b948:	f108 0801 	add.w	r8, r8, #1
 801b94c:	2301      	movs	r3, #1
 801b94e:	930a      	str	r3, [sp, #40]	@ 0x28
 801b950:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b952:	2b00      	cmp	r3, #0
 801b954:	f000 81b0 	beq.w	801bcb8 <_dtoa_r+0xb48>
 801b958:	6923      	ldr	r3, [r4, #16]
 801b95a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b95e:	6918      	ldr	r0, [r3, #16]
 801b960:	f000 fb12 	bl	801bf88 <__hi0bits>
 801b964:	f1c0 0020 	rsb	r0, r0, #32
 801b968:	9b08      	ldr	r3, [sp, #32]
 801b96a:	4418      	add	r0, r3
 801b96c:	f010 001f 	ands.w	r0, r0, #31
 801b970:	d077      	beq.n	801ba62 <_dtoa_r+0x8f2>
 801b972:	f1c0 0320 	rsb	r3, r0, #32
 801b976:	2b04      	cmp	r3, #4
 801b978:	dd6b      	ble.n	801ba52 <_dtoa_r+0x8e2>
 801b97a:	9b08      	ldr	r3, [sp, #32]
 801b97c:	f1c0 001c 	rsb	r0, r0, #28
 801b980:	4403      	add	r3, r0
 801b982:	4480      	add	r8, r0
 801b984:	4406      	add	r6, r0
 801b986:	9308      	str	r3, [sp, #32]
 801b988:	f1b8 0f00 	cmp.w	r8, #0
 801b98c:	dd05      	ble.n	801b99a <_dtoa_r+0x82a>
 801b98e:	4649      	mov	r1, r9
 801b990:	4642      	mov	r2, r8
 801b992:	4658      	mov	r0, fp
 801b994:	f000 fc5e 	bl	801c254 <__lshift>
 801b998:	4681      	mov	r9, r0
 801b99a:	9b08      	ldr	r3, [sp, #32]
 801b99c:	2b00      	cmp	r3, #0
 801b99e:	dd05      	ble.n	801b9ac <_dtoa_r+0x83c>
 801b9a0:	4621      	mov	r1, r4
 801b9a2:	461a      	mov	r2, r3
 801b9a4:	4658      	mov	r0, fp
 801b9a6:	f000 fc55 	bl	801c254 <__lshift>
 801b9aa:	4604      	mov	r4, r0
 801b9ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b9ae:	2b00      	cmp	r3, #0
 801b9b0:	d059      	beq.n	801ba66 <_dtoa_r+0x8f6>
 801b9b2:	4621      	mov	r1, r4
 801b9b4:	4648      	mov	r0, r9
 801b9b6:	f000 fcb9 	bl	801c32c <__mcmp>
 801b9ba:	2800      	cmp	r0, #0
 801b9bc:	da53      	bge.n	801ba66 <_dtoa_r+0x8f6>
 801b9be:	1e7b      	subs	r3, r7, #1
 801b9c0:	9304      	str	r3, [sp, #16]
 801b9c2:	4649      	mov	r1, r9
 801b9c4:	2300      	movs	r3, #0
 801b9c6:	220a      	movs	r2, #10
 801b9c8:	4658      	mov	r0, fp
 801b9ca:	f000 fa4d 	bl	801be68 <__multadd>
 801b9ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b9d0:	4681      	mov	r9, r0
 801b9d2:	2b00      	cmp	r3, #0
 801b9d4:	f000 8172 	beq.w	801bcbc <_dtoa_r+0xb4c>
 801b9d8:	2300      	movs	r3, #0
 801b9da:	4629      	mov	r1, r5
 801b9dc:	220a      	movs	r2, #10
 801b9de:	4658      	mov	r0, fp
 801b9e0:	f000 fa42 	bl	801be68 <__multadd>
 801b9e4:	9b00      	ldr	r3, [sp, #0]
 801b9e6:	2b00      	cmp	r3, #0
 801b9e8:	4605      	mov	r5, r0
 801b9ea:	dc67      	bgt.n	801babc <_dtoa_r+0x94c>
 801b9ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b9ee:	2b02      	cmp	r3, #2
 801b9f0:	dc41      	bgt.n	801ba76 <_dtoa_r+0x906>
 801b9f2:	e063      	b.n	801babc <_dtoa_r+0x94c>
 801b9f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801b9f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801b9fa:	e746      	b.n	801b88a <_dtoa_r+0x71a>
 801b9fc:	9b07      	ldr	r3, [sp, #28]
 801b9fe:	1e5c      	subs	r4, r3, #1
 801ba00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ba02:	42a3      	cmp	r3, r4
 801ba04:	bfbf      	itttt	lt
 801ba06:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801ba08:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801ba0a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801ba0c:	1ae3      	sublt	r3, r4, r3
 801ba0e:	bfb4      	ite	lt
 801ba10:	18d2      	addlt	r2, r2, r3
 801ba12:	1b1c      	subge	r4, r3, r4
 801ba14:	9b07      	ldr	r3, [sp, #28]
 801ba16:	bfbc      	itt	lt
 801ba18:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801ba1a:	2400      	movlt	r4, #0
 801ba1c:	2b00      	cmp	r3, #0
 801ba1e:	bfb5      	itete	lt
 801ba20:	eba8 0603 	sublt.w	r6, r8, r3
 801ba24:	9b07      	ldrge	r3, [sp, #28]
 801ba26:	2300      	movlt	r3, #0
 801ba28:	4646      	movge	r6, r8
 801ba2a:	e730      	b.n	801b88e <_dtoa_r+0x71e>
 801ba2c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801ba2e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801ba30:	4646      	mov	r6, r8
 801ba32:	e735      	b.n	801b8a0 <_dtoa_r+0x730>
 801ba34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ba36:	e75c      	b.n	801b8f2 <_dtoa_r+0x782>
 801ba38:	2300      	movs	r3, #0
 801ba3a:	e788      	b.n	801b94e <_dtoa_r+0x7de>
 801ba3c:	3fe00000 	.word	0x3fe00000
 801ba40:	40240000 	.word	0x40240000
 801ba44:	40140000 	.word	0x40140000
 801ba48:	9b02      	ldr	r3, [sp, #8]
 801ba4a:	e780      	b.n	801b94e <_dtoa_r+0x7de>
 801ba4c:	2300      	movs	r3, #0
 801ba4e:	930a      	str	r3, [sp, #40]	@ 0x28
 801ba50:	e782      	b.n	801b958 <_dtoa_r+0x7e8>
 801ba52:	d099      	beq.n	801b988 <_dtoa_r+0x818>
 801ba54:	9a08      	ldr	r2, [sp, #32]
 801ba56:	331c      	adds	r3, #28
 801ba58:	441a      	add	r2, r3
 801ba5a:	4498      	add	r8, r3
 801ba5c:	441e      	add	r6, r3
 801ba5e:	9208      	str	r2, [sp, #32]
 801ba60:	e792      	b.n	801b988 <_dtoa_r+0x818>
 801ba62:	4603      	mov	r3, r0
 801ba64:	e7f6      	b.n	801ba54 <_dtoa_r+0x8e4>
 801ba66:	9b07      	ldr	r3, [sp, #28]
 801ba68:	9704      	str	r7, [sp, #16]
 801ba6a:	2b00      	cmp	r3, #0
 801ba6c:	dc20      	bgt.n	801bab0 <_dtoa_r+0x940>
 801ba6e:	9300      	str	r3, [sp, #0]
 801ba70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ba72:	2b02      	cmp	r3, #2
 801ba74:	dd1e      	ble.n	801bab4 <_dtoa_r+0x944>
 801ba76:	9b00      	ldr	r3, [sp, #0]
 801ba78:	2b00      	cmp	r3, #0
 801ba7a:	f47f aec0 	bne.w	801b7fe <_dtoa_r+0x68e>
 801ba7e:	4621      	mov	r1, r4
 801ba80:	2205      	movs	r2, #5
 801ba82:	4658      	mov	r0, fp
 801ba84:	f000 f9f0 	bl	801be68 <__multadd>
 801ba88:	4601      	mov	r1, r0
 801ba8a:	4604      	mov	r4, r0
 801ba8c:	4648      	mov	r0, r9
 801ba8e:	f000 fc4d 	bl	801c32c <__mcmp>
 801ba92:	2800      	cmp	r0, #0
 801ba94:	f77f aeb3 	ble.w	801b7fe <_dtoa_r+0x68e>
 801ba98:	4656      	mov	r6, sl
 801ba9a:	2331      	movs	r3, #49	@ 0x31
 801ba9c:	f806 3b01 	strb.w	r3, [r6], #1
 801baa0:	9b04      	ldr	r3, [sp, #16]
 801baa2:	3301      	adds	r3, #1
 801baa4:	9304      	str	r3, [sp, #16]
 801baa6:	e6ae      	b.n	801b806 <_dtoa_r+0x696>
 801baa8:	9c07      	ldr	r4, [sp, #28]
 801baaa:	9704      	str	r7, [sp, #16]
 801baac:	4625      	mov	r5, r4
 801baae:	e7f3      	b.n	801ba98 <_dtoa_r+0x928>
 801bab0:	9b07      	ldr	r3, [sp, #28]
 801bab2:	9300      	str	r3, [sp, #0]
 801bab4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bab6:	2b00      	cmp	r3, #0
 801bab8:	f000 8104 	beq.w	801bcc4 <_dtoa_r+0xb54>
 801babc:	2e00      	cmp	r6, #0
 801babe:	dd05      	ble.n	801bacc <_dtoa_r+0x95c>
 801bac0:	4629      	mov	r1, r5
 801bac2:	4632      	mov	r2, r6
 801bac4:	4658      	mov	r0, fp
 801bac6:	f000 fbc5 	bl	801c254 <__lshift>
 801baca:	4605      	mov	r5, r0
 801bacc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bace:	2b00      	cmp	r3, #0
 801bad0:	d05a      	beq.n	801bb88 <_dtoa_r+0xa18>
 801bad2:	6869      	ldr	r1, [r5, #4]
 801bad4:	4658      	mov	r0, fp
 801bad6:	f000 f965 	bl	801bda4 <_Balloc>
 801bada:	4606      	mov	r6, r0
 801badc:	b928      	cbnz	r0, 801baea <_dtoa_r+0x97a>
 801bade:	4b84      	ldr	r3, [pc, #528]	@ (801bcf0 <_dtoa_r+0xb80>)
 801bae0:	4602      	mov	r2, r0
 801bae2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801bae6:	f7ff bb5a 	b.w	801b19e <_dtoa_r+0x2e>
 801baea:	692a      	ldr	r2, [r5, #16]
 801baec:	3202      	adds	r2, #2
 801baee:	0092      	lsls	r2, r2, #2
 801baf0:	f105 010c 	add.w	r1, r5, #12
 801baf4:	300c      	adds	r0, #12
 801baf6:	f7ff fa7e 	bl	801aff6 <memcpy>
 801bafa:	2201      	movs	r2, #1
 801bafc:	4631      	mov	r1, r6
 801bafe:	4658      	mov	r0, fp
 801bb00:	f000 fba8 	bl	801c254 <__lshift>
 801bb04:	f10a 0301 	add.w	r3, sl, #1
 801bb08:	9307      	str	r3, [sp, #28]
 801bb0a:	9b00      	ldr	r3, [sp, #0]
 801bb0c:	4453      	add	r3, sl
 801bb0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bb10:	9b02      	ldr	r3, [sp, #8]
 801bb12:	f003 0301 	and.w	r3, r3, #1
 801bb16:	462f      	mov	r7, r5
 801bb18:	930a      	str	r3, [sp, #40]	@ 0x28
 801bb1a:	4605      	mov	r5, r0
 801bb1c:	9b07      	ldr	r3, [sp, #28]
 801bb1e:	4621      	mov	r1, r4
 801bb20:	3b01      	subs	r3, #1
 801bb22:	4648      	mov	r0, r9
 801bb24:	9300      	str	r3, [sp, #0]
 801bb26:	f7ff fa99 	bl	801b05c <quorem>
 801bb2a:	4639      	mov	r1, r7
 801bb2c:	9002      	str	r0, [sp, #8]
 801bb2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801bb32:	4648      	mov	r0, r9
 801bb34:	f000 fbfa 	bl	801c32c <__mcmp>
 801bb38:	462a      	mov	r2, r5
 801bb3a:	9008      	str	r0, [sp, #32]
 801bb3c:	4621      	mov	r1, r4
 801bb3e:	4658      	mov	r0, fp
 801bb40:	f000 fc10 	bl	801c364 <__mdiff>
 801bb44:	68c2      	ldr	r2, [r0, #12]
 801bb46:	4606      	mov	r6, r0
 801bb48:	bb02      	cbnz	r2, 801bb8c <_dtoa_r+0xa1c>
 801bb4a:	4601      	mov	r1, r0
 801bb4c:	4648      	mov	r0, r9
 801bb4e:	f000 fbed 	bl	801c32c <__mcmp>
 801bb52:	4602      	mov	r2, r0
 801bb54:	4631      	mov	r1, r6
 801bb56:	4658      	mov	r0, fp
 801bb58:	920e      	str	r2, [sp, #56]	@ 0x38
 801bb5a:	f000 f963 	bl	801be24 <_Bfree>
 801bb5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bb60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801bb62:	9e07      	ldr	r6, [sp, #28]
 801bb64:	ea43 0102 	orr.w	r1, r3, r2
 801bb68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bb6a:	4319      	orrs	r1, r3
 801bb6c:	d110      	bne.n	801bb90 <_dtoa_r+0xa20>
 801bb6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801bb72:	d029      	beq.n	801bbc8 <_dtoa_r+0xa58>
 801bb74:	9b08      	ldr	r3, [sp, #32]
 801bb76:	2b00      	cmp	r3, #0
 801bb78:	dd02      	ble.n	801bb80 <_dtoa_r+0xa10>
 801bb7a:	9b02      	ldr	r3, [sp, #8]
 801bb7c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801bb80:	9b00      	ldr	r3, [sp, #0]
 801bb82:	f883 8000 	strb.w	r8, [r3]
 801bb86:	e63f      	b.n	801b808 <_dtoa_r+0x698>
 801bb88:	4628      	mov	r0, r5
 801bb8a:	e7bb      	b.n	801bb04 <_dtoa_r+0x994>
 801bb8c:	2201      	movs	r2, #1
 801bb8e:	e7e1      	b.n	801bb54 <_dtoa_r+0x9e4>
 801bb90:	9b08      	ldr	r3, [sp, #32]
 801bb92:	2b00      	cmp	r3, #0
 801bb94:	db04      	blt.n	801bba0 <_dtoa_r+0xa30>
 801bb96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801bb98:	430b      	orrs	r3, r1
 801bb9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bb9c:	430b      	orrs	r3, r1
 801bb9e:	d120      	bne.n	801bbe2 <_dtoa_r+0xa72>
 801bba0:	2a00      	cmp	r2, #0
 801bba2:	dded      	ble.n	801bb80 <_dtoa_r+0xa10>
 801bba4:	4649      	mov	r1, r9
 801bba6:	2201      	movs	r2, #1
 801bba8:	4658      	mov	r0, fp
 801bbaa:	f000 fb53 	bl	801c254 <__lshift>
 801bbae:	4621      	mov	r1, r4
 801bbb0:	4681      	mov	r9, r0
 801bbb2:	f000 fbbb 	bl	801c32c <__mcmp>
 801bbb6:	2800      	cmp	r0, #0
 801bbb8:	dc03      	bgt.n	801bbc2 <_dtoa_r+0xa52>
 801bbba:	d1e1      	bne.n	801bb80 <_dtoa_r+0xa10>
 801bbbc:	f018 0f01 	tst.w	r8, #1
 801bbc0:	d0de      	beq.n	801bb80 <_dtoa_r+0xa10>
 801bbc2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801bbc6:	d1d8      	bne.n	801bb7a <_dtoa_r+0xa0a>
 801bbc8:	9a00      	ldr	r2, [sp, #0]
 801bbca:	2339      	movs	r3, #57	@ 0x39
 801bbcc:	7013      	strb	r3, [r2, #0]
 801bbce:	4633      	mov	r3, r6
 801bbd0:	461e      	mov	r6, r3
 801bbd2:	3b01      	subs	r3, #1
 801bbd4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801bbd8:	2a39      	cmp	r2, #57	@ 0x39
 801bbda:	d052      	beq.n	801bc82 <_dtoa_r+0xb12>
 801bbdc:	3201      	adds	r2, #1
 801bbde:	701a      	strb	r2, [r3, #0]
 801bbe0:	e612      	b.n	801b808 <_dtoa_r+0x698>
 801bbe2:	2a00      	cmp	r2, #0
 801bbe4:	dd07      	ble.n	801bbf6 <_dtoa_r+0xa86>
 801bbe6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801bbea:	d0ed      	beq.n	801bbc8 <_dtoa_r+0xa58>
 801bbec:	9a00      	ldr	r2, [sp, #0]
 801bbee:	f108 0301 	add.w	r3, r8, #1
 801bbf2:	7013      	strb	r3, [r2, #0]
 801bbf4:	e608      	b.n	801b808 <_dtoa_r+0x698>
 801bbf6:	9b07      	ldr	r3, [sp, #28]
 801bbf8:	9a07      	ldr	r2, [sp, #28]
 801bbfa:	f803 8c01 	strb.w	r8, [r3, #-1]
 801bbfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bc00:	4293      	cmp	r3, r2
 801bc02:	d028      	beq.n	801bc56 <_dtoa_r+0xae6>
 801bc04:	4649      	mov	r1, r9
 801bc06:	2300      	movs	r3, #0
 801bc08:	220a      	movs	r2, #10
 801bc0a:	4658      	mov	r0, fp
 801bc0c:	f000 f92c 	bl	801be68 <__multadd>
 801bc10:	42af      	cmp	r7, r5
 801bc12:	4681      	mov	r9, r0
 801bc14:	f04f 0300 	mov.w	r3, #0
 801bc18:	f04f 020a 	mov.w	r2, #10
 801bc1c:	4639      	mov	r1, r7
 801bc1e:	4658      	mov	r0, fp
 801bc20:	d107      	bne.n	801bc32 <_dtoa_r+0xac2>
 801bc22:	f000 f921 	bl	801be68 <__multadd>
 801bc26:	4607      	mov	r7, r0
 801bc28:	4605      	mov	r5, r0
 801bc2a:	9b07      	ldr	r3, [sp, #28]
 801bc2c:	3301      	adds	r3, #1
 801bc2e:	9307      	str	r3, [sp, #28]
 801bc30:	e774      	b.n	801bb1c <_dtoa_r+0x9ac>
 801bc32:	f000 f919 	bl	801be68 <__multadd>
 801bc36:	4629      	mov	r1, r5
 801bc38:	4607      	mov	r7, r0
 801bc3a:	2300      	movs	r3, #0
 801bc3c:	220a      	movs	r2, #10
 801bc3e:	4658      	mov	r0, fp
 801bc40:	f000 f912 	bl	801be68 <__multadd>
 801bc44:	4605      	mov	r5, r0
 801bc46:	e7f0      	b.n	801bc2a <_dtoa_r+0xaba>
 801bc48:	9b00      	ldr	r3, [sp, #0]
 801bc4a:	2b00      	cmp	r3, #0
 801bc4c:	bfcc      	ite	gt
 801bc4e:	461e      	movgt	r6, r3
 801bc50:	2601      	movle	r6, #1
 801bc52:	4456      	add	r6, sl
 801bc54:	2700      	movs	r7, #0
 801bc56:	4649      	mov	r1, r9
 801bc58:	2201      	movs	r2, #1
 801bc5a:	4658      	mov	r0, fp
 801bc5c:	f000 fafa 	bl	801c254 <__lshift>
 801bc60:	4621      	mov	r1, r4
 801bc62:	4681      	mov	r9, r0
 801bc64:	f000 fb62 	bl	801c32c <__mcmp>
 801bc68:	2800      	cmp	r0, #0
 801bc6a:	dcb0      	bgt.n	801bbce <_dtoa_r+0xa5e>
 801bc6c:	d102      	bne.n	801bc74 <_dtoa_r+0xb04>
 801bc6e:	f018 0f01 	tst.w	r8, #1
 801bc72:	d1ac      	bne.n	801bbce <_dtoa_r+0xa5e>
 801bc74:	4633      	mov	r3, r6
 801bc76:	461e      	mov	r6, r3
 801bc78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bc7c:	2a30      	cmp	r2, #48	@ 0x30
 801bc7e:	d0fa      	beq.n	801bc76 <_dtoa_r+0xb06>
 801bc80:	e5c2      	b.n	801b808 <_dtoa_r+0x698>
 801bc82:	459a      	cmp	sl, r3
 801bc84:	d1a4      	bne.n	801bbd0 <_dtoa_r+0xa60>
 801bc86:	9b04      	ldr	r3, [sp, #16]
 801bc88:	3301      	adds	r3, #1
 801bc8a:	9304      	str	r3, [sp, #16]
 801bc8c:	2331      	movs	r3, #49	@ 0x31
 801bc8e:	f88a 3000 	strb.w	r3, [sl]
 801bc92:	e5b9      	b.n	801b808 <_dtoa_r+0x698>
 801bc94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801bc96:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801bcf4 <_dtoa_r+0xb84>
 801bc9a:	b11b      	cbz	r3, 801bca4 <_dtoa_r+0xb34>
 801bc9c:	f10a 0308 	add.w	r3, sl, #8
 801bca0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801bca2:	6013      	str	r3, [r2, #0]
 801bca4:	4650      	mov	r0, sl
 801bca6:	b019      	add	sp, #100	@ 0x64
 801bca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bcac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bcae:	2b01      	cmp	r3, #1
 801bcb0:	f77f ae37 	ble.w	801b922 <_dtoa_r+0x7b2>
 801bcb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bcb6:	930a      	str	r3, [sp, #40]	@ 0x28
 801bcb8:	2001      	movs	r0, #1
 801bcba:	e655      	b.n	801b968 <_dtoa_r+0x7f8>
 801bcbc:	9b00      	ldr	r3, [sp, #0]
 801bcbe:	2b00      	cmp	r3, #0
 801bcc0:	f77f aed6 	ble.w	801ba70 <_dtoa_r+0x900>
 801bcc4:	4656      	mov	r6, sl
 801bcc6:	4621      	mov	r1, r4
 801bcc8:	4648      	mov	r0, r9
 801bcca:	f7ff f9c7 	bl	801b05c <quorem>
 801bcce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801bcd2:	f806 8b01 	strb.w	r8, [r6], #1
 801bcd6:	9b00      	ldr	r3, [sp, #0]
 801bcd8:	eba6 020a 	sub.w	r2, r6, sl
 801bcdc:	4293      	cmp	r3, r2
 801bcde:	ddb3      	ble.n	801bc48 <_dtoa_r+0xad8>
 801bce0:	4649      	mov	r1, r9
 801bce2:	2300      	movs	r3, #0
 801bce4:	220a      	movs	r2, #10
 801bce6:	4658      	mov	r0, fp
 801bce8:	f000 f8be 	bl	801be68 <__multadd>
 801bcec:	4681      	mov	r9, r0
 801bcee:	e7ea      	b.n	801bcc6 <_dtoa_r+0xb56>
 801bcf0:	08020c00 	.word	0x08020c00
 801bcf4:	08020b9b 	.word	0x08020b9b

0801bcf8 <__env_lock>:
 801bcf8:	4801      	ldr	r0, [pc, #4]	@ (801bd00 <__env_lock+0x8>)
 801bcfa:	f7ff b972 	b.w	801afe2 <__retarget_lock_acquire_recursive>
 801bcfe:	bf00      	nop
 801bd00:	20011dc8 	.word	0x20011dc8

0801bd04 <__env_unlock>:
 801bd04:	4801      	ldr	r0, [pc, #4]	@ (801bd0c <__env_unlock+0x8>)
 801bd06:	f7ff b96d 	b.w	801afe4 <__retarget_lock_release_recursive>
 801bd0a:	bf00      	nop
 801bd0c:	20011dc8 	.word	0x20011dc8

0801bd10 <_free_r>:
 801bd10:	b538      	push	{r3, r4, r5, lr}
 801bd12:	4605      	mov	r5, r0
 801bd14:	2900      	cmp	r1, #0
 801bd16:	d041      	beq.n	801bd9c <_free_r+0x8c>
 801bd18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bd1c:	1f0c      	subs	r4, r1, #4
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	bfb8      	it	lt
 801bd22:	18e4      	addlt	r4, r4, r3
 801bd24:	f7fd fdc8 	bl	80198b8 <__malloc_lock>
 801bd28:	4a1d      	ldr	r2, [pc, #116]	@ (801bda0 <_free_r+0x90>)
 801bd2a:	6813      	ldr	r3, [r2, #0]
 801bd2c:	b933      	cbnz	r3, 801bd3c <_free_r+0x2c>
 801bd2e:	6063      	str	r3, [r4, #4]
 801bd30:	6014      	str	r4, [r2, #0]
 801bd32:	4628      	mov	r0, r5
 801bd34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bd38:	f7fd bdc4 	b.w	80198c4 <__malloc_unlock>
 801bd3c:	42a3      	cmp	r3, r4
 801bd3e:	d908      	bls.n	801bd52 <_free_r+0x42>
 801bd40:	6820      	ldr	r0, [r4, #0]
 801bd42:	1821      	adds	r1, r4, r0
 801bd44:	428b      	cmp	r3, r1
 801bd46:	bf01      	itttt	eq
 801bd48:	6819      	ldreq	r1, [r3, #0]
 801bd4a:	685b      	ldreq	r3, [r3, #4]
 801bd4c:	1809      	addeq	r1, r1, r0
 801bd4e:	6021      	streq	r1, [r4, #0]
 801bd50:	e7ed      	b.n	801bd2e <_free_r+0x1e>
 801bd52:	461a      	mov	r2, r3
 801bd54:	685b      	ldr	r3, [r3, #4]
 801bd56:	b10b      	cbz	r3, 801bd5c <_free_r+0x4c>
 801bd58:	42a3      	cmp	r3, r4
 801bd5a:	d9fa      	bls.n	801bd52 <_free_r+0x42>
 801bd5c:	6811      	ldr	r1, [r2, #0]
 801bd5e:	1850      	adds	r0, r2, r1
 801bd60:	42a0      	cmp	r0, r4
 801bd62:	d10b      	bne.n	801bd7c <_free_r+0x6c>
 801bd64:	6820      	ldr	r0, [r4, #0]
 801bd66:	4401      	add	r1, r0
 801bd68:	1850      	adds	r0, r2, r1
 801bd6a:	4283      	cmp	r3, r0
 801bd6c:	6011      	str	r1, [r2, #0]
 801bd6e:	d1e0      	bne.n	801bd32 <_free_r+0x22>
 801bd70:	6818      	ldr	r0, [r3, #0]
 801bd72:	685b      	ldr	r3, [r3, #4]
 801bd74:	6053      	str	r3, [r2, #4]
 801bd76:	4408      	add	r0, r1
 801bd78:	6010      	str	r0, [r2, #0]
 801bd7a:	e7da      	b.n	801bd32 <_free_r+0x22>
 801bd7c:	d902      	bls.n	801bd84 <_free_r+0x74>
 801bd7e:	230c      	movs	r3, #12
 801bd80:	602b      	str	r3, [r5, #0]
 801bd82:	e7d6      	b.n	801bd32 <_free_r+0x22>
 801bd84:	6820      	ldr	r0, [r4, #0]
 801bd86:	1821      	adds	r1, r4, r0
 801bd88:	428b      	cmp	r3, r1
 801bd8a:	bf04      	itt	eq
 801bd8c:	6819      	ldreq	r1, [r3, #0]
 801bd8e:	685b      	ldreq	r3, [r3, #4]
 801bd90:	6063      	str	r3, [r4, #4]
 801bd92:	bf04      	itt	eq
 801bd94:	1809      	addeq	r1, r1, r0
 801bd96:	6021      	streq	r1, [r4, #0]
 801bd98:	6054      	str	r4, [r2, #4]
 801bd9a:	e7ca      	b.n	801bd32 <_free_r+0x22>
 801bd9c:	bd38      	pop	{r3, r4, r5, pc}
 801bd9e:	bf00      	nop
 801bda0:	20011c84 	.word	0x20011c84

0801bda4 <_Balloc>:
 801bda4:	b570      	push	{r4, r5, r6, lr}
 801bda6:	69c6      	ldr	r6, [r0, #28]
 801bda8:	4604      	mov	r4, r0
 801bdaa:	460d      	mov	r5, r1
 801bdac:	b976      	cbnz	r6, 801bdcc <_Balloc+0x28>
 801bdae:	2010      	movs	r0, #16
 801bdb0:	f7fd fcd0 	bl	8019754 <malloc>
 801bdb4:	4602      	mov	r2, r0
 801bdb6:	61e0      	str	r0, [r4, #28]
 801bdb8:	b920      	cbnz	r0, 801bdc4 <_Balloc+0x20>
 801bdba:	4b18      	ldr	r3, [pc, #96]	@ (801be1c <_Balloc+0x78>)
 801bdbc:	4818      	ldr	r0, [pc, #96]	@ (801be20 <_Balloc+0x7c>)
 801bdbe:	216b      	movs	r1, #107	@ 0x6b
 801bdc0:	f7ff f92e 	bl	801b020 <__assert_func>
 801bdc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801bdc8:	6006      	str	r6, [r0, #0]
 801bdca:	60c6      	str	r6, [r0, #12]
 801bdcc:	69e6      	ldr	r6, [r4, #28]
 801bdce:	68f3      	ldr	r3, [r6, #12]
 801bdd0:	b183      	cbz	r3, 801bdf4 <_Balloc+0x50>
 801bdd2:	69e3      	ldr	r3, [r4, #28]
 801bdd4:	68db      	ldr	r3, [r3, #12]
 801bdd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801bdda:	b9b8      	cbnz	r0, 801be0c <_Balloc+0x68>
 801bddc:	2101      	movs	r1, #1
 801bdde:	fa01 f605 	lsl.w	r6, r1, r5
 801bde2:	1d72      	adds	r2, r6, #5
 801bde4:	0092      	lsls	r2, r2, #2
 801bde6:	4620      	mov	r0, r4
 801bde8:	f7fd fc46 	bl	8019678 <_calloc_r>
 801bdec:	b160      	cbz	r0, 801be08 <_Balloc+0x64>
 801bdee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801bdf2:	e00e      	b.n	801be12 <_Balloc+0x6e>
 801bdf4:	2221      	movs	r2, #33	@ 0x21
 801bdf6:	2104      	movs	r1, #4
 801bdf8:	4620      	mov	r0, r4
 801bdfa:	f7fd fc3d 	bl	8019678 <_calloc_r>
 801bdfe:	69e3      	ldr	r3, [r4, #28]
 801be00:	60f0      	str	r0, [r6, #12]
 801be02:	68db      	ldr	r3, [r3, #12]
 801be04:	2b00      	cmp	r3, #0
 801be06:	d1e4      	bne.n	801bdd2 <_Balloc+0x2e>
 801be08:	2000      	movs	r0, #0
 801be0a:	bd70      	pop	{r4, r5, r6, pc}
 801be0c:	6802      	ldr	r2, [r0, #0]
 801be0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801be12:	2300      	movs	r3, #0
 801be14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801be18:	e7f7      	b.n	801be0a <_Balloc+0x66>
 801be1a:	bf00      	nop
 801be1c:	080209b8 	.word	0x080209b8
 801be20:	08020c11 	.word	0x08020c11

0801be24 <_Bfree>:
 801be24:	b570      	push	{r4, r5, r6, lr}
 801be26:	69c6      	ldr	r6, [r0, #28]
 801be28:	4605      	mov	r5, r0
 801be2a:	460c      	mov	r4, r1
 801be2c:	b976      	cbnz	r6, 801be4c <_Bfree+0x28>
 801be2e:	2010      	movs	r0, #16
 801be30:	f7fd fc90 	bl	8019754 <malloc>
 801be34:	4602      	mov	r2, r0
 801be36:	61e8      	str	r0, [r5, #28]
 801be38:	b920      	cbnz	r0, 801be44 <_Bfree+0x20>
 801be3a:	4b09      	ldr	r3, [pc, #36]	@ (801be60 <_Bfree+0x3c>)
 801be3c:	4809      	ldr	r0, [pc, #36]	@ (801be64 <_Bfree+0x40>)
 801be3e:	218f      	movs	r1, #143	@ 0x8f
 801be40:	f7ff f8ee 	bl	801b020 <__assert_func>
 801be44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801be48:	6006      	str	r6, [r0, #0]
 801be4a:	60c6      	str	r6, [r0, #12]
 801be4c:	b13c      	cbz	r4, 801be5e <_Bfree+0x3a>
 801be4e:	69eb      	ldr	r3, [r5, #28]
 801be50:	6862      	ldr	r2, [r4, #4]
 801be52:	68db      	ldr	r3, [r3, #12]
 801be54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801be58:	6021      	str	r1, [r4, #0]
 801be5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801be5e:	bd70      	pop	{r4, r5, r6, pc}
 801be60:	080209b8 	.word	0x080209b8
 801be64:	08020c11 	.word	0x08020c11

0801be68 <__multadd>:
 801be68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be6c:	690d      	ldr	r5, [r1, #16]
 801be6e:	4607      	mov	r7, r0
 801be70:	460c      	mov	r4, r1
 801be72:	461e      	mov	r6, r3
 801be74:	f101 0c14 	add.w	ip, r1, #20
 801be78:	2000      	movs	r0, #0
 801be7a:	f8dc 3000 	ldr.w	r3, [ip]
 801be7e:	b299      	uxth	r1, r3
 801be80:	fb02 6101 	mla	r1, r2, r1, r6
 801be84:	0c1e      	lsrs	r6, r3, #16
 801be86:	0c0b      	lsrs	r3, r1, #16
 801be88:	fb02 3306 	mla	r3, r2, r6, r3
 801be8c:	b289      	uxth	r1, r1
 801be8e:	3001      	adds	r0, #1
 801be90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801be94:	4285      	cmp	r5, r0
 801be96:	f84c 1b04 	str.w	r1, [ip], #4
 801be9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801be9e:	dcec      	bgt.n	801be7a <__multadd+0x12>
 801bea0:	b30e      	cbz	r6, 801bee6 <__multadd+0x7e>
 801bea2:	68a3      	ldr	r3, [r4, #8]
 801bea4:	42ab      	cmp	r3, r5
 801bea6:	dc19      	bgt.n	801bedc <__multadd+0x74>
 801bea8:	6861      	ldr	r1, [r4, #4]
 801beaa:	4638      	mov	r0, r7
 801beac:	3101      	adds	r1, #1
 801beae:	f7ff ff79 	bl	801bda4 <_Balloc>
 801beb2:	4680      	mov	r8, r0
 801beb4:	b928      	cbnz	r0, 801bec2 <__multadd+0x5a>
 801beb6:	4602      	mov	r2, r0
 801beb8:	4b0c      	ldr	r3, [pc, #48]	@ (801beec <__multadd+0x84>)
 801beba:	480d      	ldr	r0, [pc, #52]	@ (801bef0 <__multadd+0x88>)
 801bebc:	21ba      	movs	r1, #186	@ 0xba
 801bebe:	f7ff f8af 	bl	801b020 <__assert_func>
 801bec2:	6922      	ldr	r2, [r4, #16]
 801bec4:	3202      	adds	r2, #2
 801bec6:	f104 010c 	add.w	r1, r4, #12
 801beca:	0092      	lsls	r2, r2, #2
 801becc:	300c      	adds	r0, #12
 801bece:	f7ff f892 	bl	801aff6 <memcpy>
 801bed2:	4621      	mov	r1, r4
 801bed4:	4638      	mov	r0, r7
 801bed6:	f7ff ffa5 	bl	801be24 <_Bfree>
 801beda:	4644      	mov	r4, r8
 801bedc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801bee0:	3501      	adds	r5, #1
 801bee2:	615e      	str	r6, [r3, #20]
 801bee4:	6125      	str	r5, [r4, #16]
 801bee6:	4620      	mov	r0, r4
 801bee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801beec:	08020c00 	.word	0x08020c00
 801bef0:	08020c11 	.word	0x08020c11

0801bef4 <__s2b>:
 801bef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bef8:	460c      	mov	r4, r1
 801befa:	4615      	mov	r5, r2
 801befc:	461f      	mov	r7, r3
 801befe:	2209      	movs	r2, #9
 801bf00:	3308      	adds	r3, #8
 801bf02:	4606      	mov	r6, r0
 801bf04:	fb93 f3f2 	sdiv	r3, r3, r2
 801bf08:	2100      	movs	r1, #0
 801bf0a:	2201      	movs	r2, #1
 801bf0c:	429a      	cmp	r2, r3
 801bf0e:	db09      	blt.n	801bf24 <__s2b+0x30>
 801bf10:	4630      	mov	r0, r6
 801bf12:	f7ff ff47 	bl	801bda4 <_Balloc>
 801bf16:	b940      	cbnz	r0, 801bf2a <__s2b+0x36>
 801bf18:	4602      	mov	r2, r0
 801bf1a:	4b19      	ldr	r3, [pc, #100]	@ (801bf80 <__s2b+0x8c>)
 801bf1c:	4819      	ldr	r0, [pc, #100]	@ (801bf84 <__s2b+0x90>)
 801bf1e:	21d3      	movs	r1, #211	@ 0xd3
 801bf20:	f7ff f87e 	bl	801b020 <__assert_func>
 801bf24:	0052      	lsls	r2, r2, #1
 801bf26:	3101      	adds	r1, #1
 801bf28:	e7f0      	b.n	801bf0c <__s2b+0x18>
 801bf2a:	9b08      	ldr	r3, [sp, #32]
 801bf2c:	6143      	str	r3, [r0, #20]
 801bf2e:	2d09      	cmp	r5, #9
 801bf30:	f04f 0301 	mov.w	r3, #1
 801bf34:	6103      	str	r3, [r0, #16]
 801bf36:	dd16      	ble.n	801bf66 <__s2b+0x72>
 801bf38:	f104 0909 	add.w	r9, r4, #9
 801bf3c:	46c8      	mov	r8, r9
 801bf3e:	442c      	add	r4, r5
 801bf40:	f818 3b01 	ldrb.w	r3, [r8], #1
 801bf44:	4601      	mov	r1, r0
 801bf46:	3b30      	subs	r3, #48	@ 0x30
 801bf48:	220a      	movs	r2, #10
 801bf4a:	4630      	mov	r0, r6
 801bf4c:	f7ff ff8c 	bl	801be68 <__multadd>
 801bf50:	45a0      	cmp	r8, r4
 801bf52:	d1f5      	bne.n	801bf40 <__s2b+0x4c>
 801bf54:	f1a5 0408 	sub.w	r4, r5, #8
 801bf58:	444c      	add	r4, r9
 801bf5a:	1b2d      	subs	r5, r5, r4
 801bf5c:	1963      	adds	r3, r4, r5
 801bf5e:	42bb      	cmp	r3, r7
 801bf60:	db04      	blt.n	801bf6c <__s2b+0x78>
 801bf62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bf66:	340a      	adds	r4, #10
 801bf68:	2509      	movs	r5, #9
 801bf6a:	e7f6      	b.n	801bf5a <__s2b+0x66>
 801bf6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801bf70:	4601      	mov	r1, r0
 801bf72:	3b30      	subs	r3, #48	@ 0x30
 801bf74:	220a      	movs	r2, #10
 801bf76:	4630      	mov	r0, r6
 801bf78:	f7ff ff76 	bl	801be68 <__multadd>
 801bf7c:	e7ee      	b.n	801bf5c <__s2b+0x68>
 801bf7e:	bf00      	nop
 801bf80:	08020c00 	.word	0x08020c00
 801bf84:	08020c11 	.word	0x08020c11

0801bf88 <__hi0bits>:
 801bf88:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801bf8c:	4603      	mov	r3, r0
 801bf8e:	bf36      	itet	cc
 801bf90:	0403      	lslcc	r3, r0, #16
 801bf92:	2000      	movcs	r0, #0
 801bf94:	2010      	movcc	r0, #16
 801bf96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801bf9a:	bf3c      	itt	cc
 801bf9c:	021b      	lslcc	r3, r3, #8
 801bf9e:	3008      	addcc	r0, #8
 801bfa0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801bfa4:	bf3c      	itt	cc
 801bfa6:	011b      	lslcc	r3, r3, #4
 801bfa8:	3004      	addcc	r0, #4
 801bfaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801bfae:	bf3c      	itt	cc
 801bfb0:	009b      	lslcc	r3, r3, #2
 801bfb2:	3002      	addcc	r0, #2
 801bfb4:	2b00      	cmp	r3, #0
 801bfb6:	db05      	blt.n	801bfc4 <__hi0bits+0x3c>
 801bfb8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801bfbc:	f100 0001 	add.w	r0, r0, #1
 801bfc0:	bf08      	it	eq
 801bfc2:	2020      	moveq	r0, #32
 801bfc4:	4770      	bx	lr

0801bfc6 <__lo0bits>:
 801bfc6:	6803      	ldr	r3, [r0, #0]
 801bfc8:	4602      	mov	r2, r0
 801bfca:	f013 0007 	ands.w	r0, r3, #7
 801bfce:	d00b      	beq.n	801bfe8 <__lo0bits+0x22>
 801bfd0:	07d9      	lsls	r1, r3, #31
 801bfd2:	d421      	bmi.n	801c018 <__lo0bits+0x52>
 801bfd4:	0798      	lsls	r0, r3, #30
 801bfd6:	bf49      	itett	mi
 801bfd8:	085b      	lsrmi	r3, r3, #1
 801bfda:	089b      	lsrpl	r3, r3, #2
 801bfdc:	2001      	movmi	r0, #1
 801bfde:	6013      	strmi	r3, [r2, #0]
 801bfe0:	bf5c      	itt	pl
 801bfe2:	6013      	strpl	r3, [r2, #0]
 801bfe4:	2002      	movpl	r0, #2
 801bfe6:	4770      	bx	lr
 801bfe8:	b299      	uxth	r1, r3
 801bfea:	b909      	cbnz	r1, 801bff0 <__lo0bits+0x2a>
 801bfec:	0c1b      	lsrs	r3, r3, #16
 801bfee:	2010      	movs	r0, #16
 801bff0:	b2d9      	uxtb	r1, r3
 801bff2:	b909      	cbnz	r1, 801bff8 <__lo0bits+0x32>
 801bff4:	3008      	adds	r0, #8
 801bff6:	0a1b      	lsrs	r3, r3, #8
 801bff8:	0719      	lsls	r1, r3, #28
 801bffa:	bf04      	itt	eq
 801bffc:	091b      	lsreq	r3, r3, #4
 801bffe:	3004      	addeq	r0, #4
 801c000:	0799      	lsls	r1, r3, #30
 801c002:	bf04      	itt	eq
 801c004:	089b      	lsreq	r3, r3, #2
 801c006:	3002      	addeq	r0, #2
 801c008:	07d9      	lsls	r1, r3, #31
 801c00a:	d403      	bmi.n	801c014 <__lo0bits+0x4e>
 801c00c:	085b      	lsrs	r3, r3, #1
 801c00e:	f100 0001 	add.w	r0, r0, #1
 801c012:	d003      	beq.n	801c01c <__lo0bits+0x56>
 801c014:	6013      	str	r3, [r2, #0]
 801c016:	4770      	bx	lr
 801c018:	2000      	movs	r0, #0
 801c01a:	4770      	bx	lr
 801c01c:	2020      	movs	r0, #32
 801c01e:	4770      	bx	lr

0801c020 <__i2b>:
 801c020:	b510      	push	{r4, lr}
 801c022:	460c      	mov	r4, r1
 801c024:	2101      	movs	r1, #1
 801c026:	f7ff febd 	bl	801bda4 <_Balloc>
 801c02a:	4602      	mov	r2, r0
 801c02c:	b928      	cbnz	r0, 801c03a <__i2b+0x1a>
 801c02e:	4b05      	ldr	r3, [pc, #20]	@ (801c044 <__i2b+0x24>)
 801c030:	4805      	ldr	r0, [pc, #20]	@ (801c048 <__i2b+0x28>)
 801c032:	f240 1145 	movw	r1, #325	@ 0x145
 801c036:	f7fe fff3 	bl	801b020 <__assert_func>
 801c03a:	2301      	movs	r3, #1
 801c03c:	6144      	str	r4, [r0, #20]
 801c03e:	6103      	str	r3, [r0, #16]
 801c040:	bd10      	pop	{r4, pc}
 801c042:	bf00      	nop
 801c044:	08020c00 	.word	0x08020c00
 801c048:	08020c11 	.word	0x08020c11

0801c04c <__multiply>:
 801c04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c050:	4614      	mov	r4, r2
 801c052:	690a      	ldr	r2, [r1, #16]
 801c054:	6923      	ldr	r3, [r4, #16]
 801c056:	429a      	cmp	r2, r3
 801c058:	bfa8      	it	ge
 801c05a:	4623      	movge	r3, r4
 801c05c:	460f      	mov	r7, r1
 801c05e:	bfa4      	itt	ge
 801c060:	460c      	movge	r4, r1
 801c062:	461f      	movge	r7, r3
 801c064:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801c068:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801c06c:	68a3      	ldr	r3, [r4, #8]
 801c06e:	6861      	ldr	r1, [r4, #4]
 801c070:	eb0a 0609 	add.w	r6, sl, r9
 801c074:	42b3      	cmp	r3, r6
 801c076:	b085      	sub	sp, #20
 801c078:	bfb8      	it	lt
 801c07a:	3101      	addlt	r1, #1
 801c07c:	f7ff fe92 	bl	801bda4 <_Balloc>
 801c080:	b930      	cbnz	r0, 801c090 <__multiply+0x44>
 801c082:	4602      	mov	r2, r0
 801c084:	4b44      	ldr	r3, [pc, #272]	@ (801c198 <__multiply+0x14c>)
 801c086:	4845      	ldr	r0, [pc, #276]	@ (801c19c <__multiply+0x150>)
 801c088:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801c08c:	f7fe ffc8 	bl	801b020 <__assert_func>
 801c090:	f100 0514 	add.w	r5, r0, #20
 801c094:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801c098:	462b      	mov	r3, r5
 801c09a:	2200      	movs	r2, #0
 801c09c:	4543      	cmp	r3, r8
 801c09e:	d321      	bcc.n	801c0e4 <__multiply+0x98>
 801c0a0:	f107 0114 	add.w	r1, r7, #20
 801c0a4:	f104 0214 	add.w	r2, r4, #20
 801c0a8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801c0ac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801c0b0:	9302      	str	r3, [sp, #8]
 801c0b2:	1b13      	subs	r3, r2, r4
 801c0b4:	3b15      	subs	r3, #21
 801c0b6:	f023 0303 	bic.w	r3, r3, #3
 801c0ba:	3304      	adds	r3, #4
 801c0bc:	f104 0715 	add.w	r7, r4, #21
 801c0c0:	42ba      	cmp	r2, r7
 801c0c2:	bf38      	it	cc
 801c0c4:	2304      	movcc	r3, #4
 801c0c6:	9301      	str	r3, [sp, #4]
 801c0c8:	9b02      	ldr	r3, [sp, #8]
 801c0ca:	9103      	str	r1, [sp, #12]
 801c0cc:	428b      	cmp	r3, r1
 801c0ce:	d80c      	bhi.n	801c0ea <__multiply+0x9e>
 801c0d0:	2e00      	cmp	r6, #0
 801c0d2:	dd03      	ble.n	801c0dc <__multiply+0x90>
 801c0d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801c0d8:	2b00      	cmp	r3, #0
 801c0da:	d05b      	beq.n	801c194 <__multiply+0x148>
 801c0dc:	6106      	str	r6, [r0, #16]
 801c0de:	b005      	add	sp, #20
 801c0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0e4:	f843 2b04 	str.w	r2, [r3], #4
 801c0e8:	e7d8      	b.n	801c09c <__multiply+0x50>
 801c0ea:	f8b1 a000 	ldrh.w	sl, [r1]
 801c0ee:	f1ba 0f00 	cmp.w	sl, #0
 801c0f2:	d024      	beq.n	801c13e <__multiply+0xf2>
 801c0f4:	f104 0e14 	add.w	lr, r4, #20
 801c0f8:	46a9      	mov	r9, r5
 801c0fa:	f04f 0c00 	mov.w	ip, #0
 801c0fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c102:	f8d9 3000 	ldr.w	r3, [r9]
 801c106:	fa1f fb87 	uxth.w	fp, r7
 801c10a:	b29b      	uxth	r3, r3
 801c10c:	fb0a 330b 	mla	r3, sl, fp, r3
 801c110:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801c114:	f8d9 7000 	ldr.w	r7, [r9]
 801c118:	4463      	add	r3, ip
 801c11a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801c11e:	fb0a c70b 	mla	r7, sl, fp, ip
 801c122:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801c126:	b29b      	uxth	r3, r3
 801c128:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801c12c:	4572      	cmp	r2, lr
 801c12e:	f849 3b04 	str.w	r3, [r9], #4
 801c132:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801c136:	d8e2      	bhi.n	801c0fe <__multiply+0xb2>
 801c138:	9b01      	ldr	r3, [sp, #4]
 801c13a:	f845 c003 	str.w	ip, [r5, r3]
 801c13e:	9b03      	ldr	r3, [sp, #12]
 801c140:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801c144:	3104      	adds	r1, #4
 801c146:	f1b9 0f00 	cmp.w	r9, #0
 801c14a:	d021      	beq.n	801c190 <__multiply+0x144>
 801c14c:	682b      	ldr	r3, [r5, #0]
 801c14e:	f104 0c14 	add.w	ip, r4, #20
 801c152:	46ae      	mov	lr, r5
 801c154:	f04f 0a00 	mov.w	sl, #0
 801c158:	f8bc b000 	ldrh.w	fp, [ip]
 801c15c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801c160:	fb09 770b 	mla	r7, r9, fp, r7
 801c164:	4457      	add	r7, sl
 801c166:	b29b      	uxth	r3, r3
 801c168:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801c16c:	f84e 3b04 	str.w	r3, [lr], #4
 801c170:	f85c 3b04 	ldr.w	r3, [ip], #4
 801c174:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c178:	f8be 3000 	ldrh.w	r3, [lr]
 801c17c:	fb09 330a 	mla	r3, r9, sl, r3
 801c180:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801c184:	4562      	cmp	r2, ip
 801c186:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c18a:	d8e5      	bhi.n	801c158 <__multiply+0x10c>
 801c18c:	9f01      	ldr	r7, [sp, #4]
 801c18e:	51eb      	str	r3, [r5, r7]
 801c190:	3504      	adds	r5, #4
 801c192:	e799      	b.n	801c0c8 <__multiply+0x7c>
 801c194:	3e01      	subs	r6, #1
 801c196:	e79b      	b.n	801c0d0 <__multiply+0x84>
 801c198:	08020c00 	.word	0x08020c00
 801c19c:	08020c11 	.word	0x08020c11

0801c1a0 <__pow5mult>:
 801c1a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c1a4:	4615      	mov	r5, r2
 801c1a6:	f012 0203 	ands.w	r2, r2, #3
 801c1aa:	4607      	mov	r7, r0
 801c1ac:	460e      	mov	r6, r1
 801c1ae:	d007      	beq.n	801c1c0 <__pow5mult+0x20>
 801c1b0:	4c25      	ldr	r4, [pc, #148]	@ (801c248 <__pow5mult+0xa8>)
 801c1b2:	3a01      	subs	r2, #1
 801c1b4:	2300      	movs	r3, #0
 801c1b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c1ba:	f7ff fe55 	bl	801be68 <__multadd>
 801c1be:	4606      	mov	r6, r0
 801c1c0:	10ad      	asrs	r5, r5, #2
 801c1c2:	d03d      	beq.n	801c240 <__pow5mult+0xa0>
 801c1c4:	69fc      	ldr	r4, [r7, #28]
 801c1c6:	b97c      	cbnz	r4, 801c1e8 <__pow5mult+0x48>
 801c1c8:	2010      	movs	r0, #16
 801c1ca:	f7fd fac3 	bl	8019754 <malloc>
 801c1ce:	4602      	mov	r2, r0
 801c1d0:	61f8      	str	r0, [r7, #28]
 801c1d2:	b928      	cbnz	r0, 801c1e0 <__pow5mult+0x40>
 801c1d4:	4b1d      	ldr	r3, [pc, #116]	@ (801c24c <__pow5mult+0xac>)
 801c1d6:	481e      	ldr	r0, [pc, #120]	@ (801c250 <__pow5mult+0xb0>)
 801c1d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801c1dc:	f7fe ff20 	bl	801b020 <__assert_func>
 801c1e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c1e4:	6004      	str	r4, [r0, #0]
 801c1e6:	60c4      	str	r4, [r0, #12]
 801c1e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801c1ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c1f0:	b94c      	cbnz	r4, 801c206 <__pow5mult+0x66>
 801c1f2:	f240 2171 	movw	r1, #625	@ 0x271
 801c1f6:	4638      	mov	r0, r7
 801c1f8:	f7ff ff12 	bl	801c020 <__i2b>
 801c1fc:	2300      	movs	r3, #0
 801c1fe:	f8c8 0008 	str.w	r0, [r8, #8]
 801c202:	4604      	mov	r4, r0
 801c204:	6003      	str	r3, [r0, #0]
 801c206:	f04f 0900 	mov.w	r9, #0
 801c20a:	07eb      	lsls	r3, r5, #31
 801c20c:	d50a      	bpl.n	801c224 <__pow5mult+0x84>
 801c20e:	4631      	mov	r1, r6
 801c210:	4622      	mov	r2, r4
 801c212:	4638      	mov	r0, r7
 801c214:	f7ff ff1a 	bl	801c04c <__multiply>
 801c218:	4631      	mov	r1, r6
 801c21a:	4680      	mov	r8, r0
 801c21c:	4638      	mov	r0, r7
 801c21e:	f7ff fe01 	bl	801be24 <_Bfree>
 801c222:	4646      	mov	r6, r8
 801c224:	106d      	asrs	r5, r5, #1
 801c226:	d00b      	beq.n	801c240 <__pow5mult+0xa0>
 801c228:	6820      	ldr	r0, [r4, #0]
 801c22a:	b938      	cbnz	r0, 801c23c <__pow5mult+0x9c>
 801c22c:	4622      	mov	r2, r4
 801c22e:	4621      	mov	r1, r4
 801c230:	4638      	mov	r0, r7
 801c232:	f7ff ff0b 	bl	801c04c <__multiply>
 801c236:	6020      	str	r0, [r4, #0]
 801c238:	f8c0 9000 	str.w	r9, [r0]
 801c23c:	4604      	mov	r4, r0
 801c23e:	e7e4      	b.n	801c20a <__pow5mult+0x6a>
 801c240:	4630      	mov	r0, r6
 801c242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c246:	bf00      	nop
 801c248:	08020c6c 	.word	0x08020c6c
 801c24c:	080209b8 	.word	0x080209b8
 801c250:	08020c11 	.word	0x08020c11

0801c254 <__lshift>:
 801c254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c258:	460c      	mov	r4, r1
 801c25a:	6849      	ldr	r1, [r1, #4]
 801c25c:	6923      	ldr	r3, [r4, #16]
 801c25e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801c262:	68a3      	ldr	r3, [r4, #8]
 801c264:	4607      	mov	r7, r0
 801c266:	4691      	mov	r9, r2
 801c268:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801c26c:	f108 0601 	add.w	r6, r8, #1
 801c270:	42b3      	cmp	r3, r6
 801c272:	db0b      	blt.n	801c28c <__lshift+0x38>
 801c274:	4638      	mov	r0, r7
 801c276:	f7ff fd95 	bl	801bda4 <_Balloc>
 801c27a:	4605      	mov	r5, r0
 801c27c:	b948      	cbnz	r0, 801c292 <__lshift+0x3e>
 801c27e:	4602      	mov	r2, r0
 801c280:	4b28      	ldr	r3, [pc, #160]	@ (801c324 <__lshift+0xd0>)
 801c282:	4829      	ldr	r0, [pc, #164]	@ (801c328 <__lshift+0xd4>)
 801c284:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801c288:	f7fe feca 	bl	801b020 <__assert_func>
 801c28c:	3101      	adds	r1, #1
 801c28e:	005b      	lsls	r3, r3, #1
 801c290:	e7ee      	b.n	801c270 <__lshift+0x1c>
 801c292:	2300      	movs	r3, #0
 801c294:	f100 0114 	add.w	r1, r0, #20
 801c298:	f100 0210 	add.w	r2, r0, #16
 801c29c:	4618      	mov	r0, r3
 801c29e:	4553      	cmp	r3, sl
 801c2a0:	db33      	blt.n	801c30a <__lshift+0xb6>
 801c2a2:	6920      	ldr	r0, [r4, #16]
 801c2a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c2a8:	f104 0314 	add.w	r3, r4, #20
 801c2ac:	f019 091f 	ands.w	r9, r9, #31
 801c2b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c2b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801c2b8:	d02b      	beq.n	801c312 <__lshift+0xbe>
 801c2ba:	f1c9 0e20 	rsb	lr, r9, #32
 801c2be:	468a      	mov	sl, r1
 801c2c0:	2200      	movs	r2, #0
 801c2c2:	6818      	ldr	r0, [r3, #0]
 801c2c4:	fa00 f009 	lsl.w	r0, r0, r9
 801c2c8:	4310      	orrs	r0, r2
 801c2ca:	f84a 0b04 	str.w	r0, [sl], #4
 801c2ce:	f853 2b04 	ldr.w	r2, [r3], #4
 801c2d2:	459c      	cmp	ip, r3
 801c2d4:	fa22 f20e 	lsr.w	r2, r2, lr
 801c2d8:	d8f3      	bhi.n	801c2c2 <__lshift+0x6e>
 801c2da:	ebac 0304 	sub.w	r3, ip, r4
 801c2de:	3b15      	subs	r3, #21
 801c2e0:	f023 0303 	bic.w	r3, r3, #3
 801c2e4:	3304      	adds	r3, #4
 801c2e6:	f104 0015 	add.w	r0, r4, #21
 801c2ea:	4584      	cmp	ip, r0
 801c2ec:	bf38      	it	cc
 801c2ee:	2304      	movcc	r3, #4
 801c2f0:	50ca      	str	r2, [r1, r3]
 801c2f2:	b10a      	cbz	r2, 801c2f8 <__lshift+0xa4>
 801c2f4:	f108 0602 	add.w	r6, r8, #2
 801c2f8:	3e01      	subs	r6, #1
 801c2fa:	4638      	mov	r0, r7
 801c2fc:	612e      	str	r6, [r5, #16]
 801c2fe:	4621      	mov	r1, r4
 801c300:	f7ff fd90 	bl	801be24 <_Bfree>
 801c304:	4628      	mov	r0, r5
 801c306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c30a:	f842 0f04 	str.w	r0, [r2, #4]!
 801c30e:	3301      	adds	r3, #1
 801c310:	e7c5      	b.n	801c29e <__lshift+0x4a>
 801c312:	3904      	subs	r1, #4
 801c314:	f853 2b04 	ldr.w	r2, [r3], #4
 801c318:	f841 2f04 	str.w	r2, [r1, #4]!
 801c31c:	459c      	cmp	ip, r3
 801c31e:	d8f9      	bhi.n	801c314 <__lshift+0xc0>
 801c320:	e7ea      	b.n	801c2f8 <__lshift+0xa4>
 801c322:	bf00      	nop
 801c324:	08020c00 	.word	0x08020c00
 801c328:	08020c11 	.word	0x08020c11

0801c32c <__mcmp>:
 801c32c:	690a      	ldr	r2, [r1, #16]
 801c32e:	4603      	mov	r3, r0
 801c330:	6900      	ldr	r0, [r0, #16]
 801c332:	1a80      	subs	r0, r0, r2
 801c334:	b530      	push	{r4, r5, lr}
 801c336:	d10e      	bne.n	801c356 <__mcmp+0x2a>
 801c338:	3314      	adds	r3, #20
 801c33a:	3114      	adds	r1, #20
 801c33c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801c340:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801c344:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801c348:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801c34c:	4295      	cmp	r5, r2
 801c34e:	d003      	beq.n	801c358 <__mcmp+0x2c>
 801c350:	d205      	bcs.n	801c35e <__mcmp+0x32>
 801c352:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c356:	bd30      	pop	{r4, r5, pc}
 801c358:	42a3      	cmp	r3, r4
 801c35a:	d3f3      	bcc.n	801c344 <__mcmp+0x18>
 801c35c:	e7fb      	b.n	801c356 <__mcmp+0x2a>
 801c35e:	2001      	movs	r0, #1
 801c360:	e7f9      	b.n	801c356 <__mcmp+0x2a>
	...

0801c364 <__mdiff>:
 801c364:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c368:	4689      	mov	r9, r1
 801c36a:	4606      	mov	r6, r0
 801c36c:	4611      	mov	r1, r2
 801c36e:	4648      	mov	r0, r9
 801c370:	4614      	mov	r4, r2
 801c372:	f7ff ffdb 	bl	801c32c <__mcmp>
 801c376:	1e05      	subs	r5, r0, #0
 801c378:	d112      	bne.n	801c3a0 <__mdiff+0x3c>
 801c37a:	4629      	mov	r1, r5
 801c37c:	4630      	mov	r0, r6
 801c37e:	f7ff fd11 	bl	801bda4 <_Balloc>
 801c382:	4602      	mov	r2, r0
 801c384:	b928      	cbnz	r0, 801c392 <__mdiff+0x2e>
 801c386:	4b3f      	ldr	r3, [pc, #252]	@ (801c484 <__mdiff+0x120>)
 801c388:	f240 2137 	movw	r1, #567	@ 0x237
 801c38c:	483e      	ldr	r0, [pc, #248]	@ (801c488 <__mdiff+0x124>)
 801c38e:	f7fe fe47 	bl	801b020 <__assert_func>
 801c392:	2301      	movs	r3, #1
 801c394:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801c398:	4610      	mov	r0, r2
 801c39a:	b003      	add	sp, #12
 801c39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3a0:	bfbc      	itt	lt
 801c3a2:	464b      	movlt	r3, r9
 801c3a4:	46a1      	movlt	r9, r4
 801c3a6:	4630      	mov	r0, r6
 801c3a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801c3ac:	bfba      	itte	lt
 801c3ae:	461c      	movlt	r4, r3
 801c3b0:	2501      	movlt	r5, #1
 801c3b2:	2500      	movge	r5, #0
 801c3b4:	f7ff fcf6 	bl	801bda4 <_Balloc>
 801c3b8:	4602      	mov	r2, r0
 801c3ba:	b918      	cbnz	r0, 801c3c4 <__mdiff+0x60>
 801c3bc:	4b31      	ldr	r3, [pc, #196]	@ (801c484 <__mdiff+0x120>)
 801c3be:	f240 2145 	movw	r1, #581	@ 0x245
 801c3c2:	e7e3      	b.n	801c38c <__mdiff+0x28>
 801c3c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801c3c8:	6926      	ldr	r6, [r4, #16]
 801c3ca:	60c5      	str	r5, [r0, #12]
 801c3cc:	f109 0310 	add.w	r3, r9, #16
 801c3d0:	f109 0514 	add.w	r5, r9, #20
 801c3d4:	f104 0e14 	add.w	lr, r4, #20
 801c3d8:	f100 0b14 	add.w	fp, r0, #20
 801c3dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801c3e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801c3e4:	9301      	str	r3, [sp, #4]
 801c3e6:	46d9      	mov	r9, fp
 801c3e8:	f04f 0c00 	mov.w	ip, #0
 801c3ec:	9b01      	ldr	r3, [sp, #4]
 801c3ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 801c3f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 801c3f6:	9301      	str	r3, [sp, #4]
 801c3f8:	fa1f f38a 	uxth.w	r3, sl
 801c3fc:	4619      	mov	r1, r3
 801c3fe:	b283      	uxth	r3, r0
 801c400:	1acb      	subs	r3, r1, r3
 801c402:	0c00      	lsrs	r0, r0, #16
 801c404:	4463      	add	r3, ip
 801c406:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801c40a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801c40e:	b29b      	uxth	r3, r3
 801c410:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801c414:	4576      	cmp	r6, lr
 801c416:	f849 3b04 	str.w	r3, [r9], #4
 801c41a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801c41e:	d8e5      	bhi.n	801c3ec <__mdiff+0x88>
 801c420:	1b33      	subs	r3, r6, r4
 801c422:	3b15      	subs	r3, #21
 801c424:	f023 0303 	bic.w	r3, r3, #3
 801c428:	3415      	adds	r4, #21
 801c42a:	3304      	adds	r3, #4
 801c42c:	42a6      	cmp	r6, r4
 801c42e:	bf38      	it	cc
 801c430:	2304      	movcc	r3, #4
 801c432:	441d      	add	r5, r3
 801c434:	445b      	add	r3, fp
 801c436:	461e      	mov	r6, r3
 801c438:	462c      	mov	r4, r5
 801c43a:	4544      	cmp	r4, r8
 801c43c:	d30e      	bcc.n	801c45c <__mdiff+0xf8>
 801c43e:	f108 0103 	add.w	r1, r8, #3
 801c442:	1b49      	subs	r1, r1, r5
 801c444:	f021 0103 	bic.w	r1, r1, #3
 801c448:	3d03      	subs	r5, #3
 801c44a:	45a8      	cmp	r8, r5
 801c44c:	bf38      	it	cc
 801c44e:	2100      	movcc	r1, #0
 801c450:	440b      	add	r3, r1
 801c452:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c456:	b191      	cbz	r1, 801c47e <__mdiff+0x11a>
 801c458:	6117      	str	r7, [r2, #16]
 801c45a:	e79d      	b.n	801c398 <__mdiff+0x34>
 801c45c:	f854 1b04 	ldr.w	r1, [r4], #4
 801c460:	46e6      	mov	lr, ip
 801c462:	0c08      	lsrs	r0, r1, #16
 801c464:	fa1c fc81 	uxtah	ip, ip, r1
 801c468:	4471      	add	r1, lr
 801c46a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801c46e:	b289      	uxth	r1, r1
 801c470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801c474:	f846 1b04 	str.w	r1, [r6], #4
 801c478:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801c47c:	e7dd      	b.n	801c43a <__mdiff+0xd6>
 801c47e:	3f01      	subs	r7, #1
 801c480:	e7e7      	b.n	801c452 <__mdiff+0xee>
 801c482:	bf00      	nop
 801c484:	08020c00 	.word	0x08020c00
 801c488:	08020c11 	.word	0x08020c11

0801c48c <__ulp>:
 801c48c:	b082      	sub	sp, #8
 801c48e:	ed8d 0b00 	vstr	d0, [sp]
 801c492:	9a01      	ldr	r2, [sp, #4]
 801c494:	4b0f      	ldr	r3, [pc, #60]	@ (801c4d4 <__ulp+0x48>)
 801c496:	4013      	ands	r3, r2
 801c498:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801c49c:	2b00      	cmp	r3, #0
 801c49e:	dc08      	bgt.n	801c4b2 <__ulp+0x26>
 801c4a0:	425b      	negs	r3, r3
 801c4a2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801c4a6:	ea4f 5223 	mov.w	r2, r3, asr #20
 801c4aa:	da04      	bge.n	801c4b6 <__ulp+0x2a>
 801c4ac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801c4b0:	4113      	asrs	r3, r2
 801c4b2:	2200      	movs	r2, #0
 801c4b4:	e008      	b.n	801c4c8 <__ulp+0x3c>
 801c4b6:	f1a2 0314 	sub.w	r3, r2, #20
 801c4ba:	2b1e      	cmp	r3, #30
 801c4bc:	bfda      	itte	le
 801c4be:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801c4c2:	40da      	lsrle	r2, r3
 801c4c4:	2201      	movgt	r2, #1
 801c4c6:	2300      	movs	r3, #0
 801c4c8:	4619      	mov	r1, r3
 801c4ca:	4610      	mov	r0, r2
 801c4cc:	ec41 0b10 	vmov	d0, r0, r1
 801c4d0:	b002      	add	sp, #8
 801c4d2:	4770      	bx	lr
 801c4d4:	7ff00000 	.word	0x7ff00000

0801c4d8 <__b2d>:
 801c4d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c4dc:	6906      	ldr	r6, [r0, #16]
 801c4de:	f100 0814 	add.w	r8, r0, #20
 801c4e2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801c4e6:	1f37      	subs	r7, r6, #4
 801c4e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801c4ec:	4610      	mov	r0, r2
 801c4ee:	f7ff fd4b 	bl	801bf88 <__hi0bits>
 801c4f2:	f1c0 0320 	rsb	r3, r0, #32
 801c4f6:	280a      	cmp	r0, #10
 801c4f8:	600b      	str	r3, [r1, #0]
 801c4fa:	491b      	ldr	r1, [pc, #108]	@ (801c568 <__b2d+0x90>)
 801c4fc:	dc15      	bgt.n	801c52a <__b2d+0x52>
 801c4fe:	f1c0 0c0b 	rsb	ip, r0, #11
 801c502:	fa22 f30c 	lsr.w	r3, r2, ip
 801c506:	45b8      	cmp	r8, r7
 801c508:	ea43 0501 	orr.w	r5, r3, r1
 801c50c:	bf34      	ite	cc
 801c50e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801c512:	2300      	movcs	r3, #0
 801c514:	3015      	adds	r0, #21
 801c516:	fa02 f000 	lsl.w	r0, r2, r0
 801c51a:	fa23 f30c 	lsr.w	r3, r3, ip
 801c51e:	4303      	orrs	r3, r0
 801c520:	461c      	mov	r4, r3
 801c522:	ec45 4b10 	vmov	d0, r4, r5
 801c526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c52a:	45b8      	cmp	r8, r7
 801c52c:	bf3a      	itte	cc
 801c52e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801c532:	f1a6 0708 	subcc.w	r7, r6, #8
 801c536:	2300      	movcs	r3, #0
 801c538:	380b      	subs	r0, #11
 801c53a:	d012      	beq.n	801c562 <__b2d+0x8a>
 801c53c:	f1c0 0120 	rsb	r1, r0, #32
 801c540:	fa23 f401 	lsr.w	r4, r3, r1
 801c544:	4082      	lsls	r2, r0
 801c546:	4322      	orrs	r2, r4
 801c548:	4547      	cmp	r7, r8
 801c54a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801c54e:	bf8c      	ite	hi
 801c550:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801c554:	2200      	movls	r2, #0
 801c556:	4083      	lsls	r3, r0
 801c558:	40ca      	lsrs	r2, r1
 801c55a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801c55e:	4313      	orrs	r3, r2
 801c560:	e7de      	b.n	801c520 <__b2d+0x48>
 801c562:	ea42 0501 	orr.w	r5, r2, r1
 801c566:	e7db      	b.n	801c520 <__b2d+0x48>
 801c568:	3ff00000 	.word	0x3ff00000

0801c56c <__d2b>:
 801c56c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c570:	460f      	mov	r7, r1
 801c572:	2101      	movs	r1, #1
 801c574:	ec59 8b10 	vmov	r8, r9, d0
 801c578:	4616      	mov	r6, r2
 801c57a:	f7ff fc13 	bl	801bda4 <_Balloc>
 801c57e:	4604      	mov	r4, r0
 801c580:	b930      	cbnz	r0, 801c590 <__d2b+0x24>
 801c582:	4602      	mov	r2, r0
 801c584:	4b23      	ldr	r3, [pc, #140]	@ (801c614 <__d2b+0xa8>)
 801c586:	4824      	ldr	r0, [pc, #144]	@ (801c618 <__d2b+0xac>)
 801c588:	f240 310f 	movw	r1, #783	@ 0x30f
 801c58c:	f7fe fd48 	bl	801b020 <__assert_func>
 801c590:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801c594:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c598:	b10d      	cbz	r5, 801c59e <__d2b+0x32>
 801c59a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801c59e:	9301      	str	r3, [sp, #4]
 801c5a0:	f1b8 0300 	subs.w	r3, r8, #0
 801c5a4:	d023      	beq.n	801c5ee <__d2b+0x82>
 801c5a6:	4668      	mov	r0, sp
 801c5a8:	9300      	str	r3, [sp, #0]
 801c5aa:	f7ff fd0c 	bl	801bfc6 <__lo0bits>
 801c5ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 801c5b2:	b1d0      	cbz	r0, 801c5ea <__d2b+0x7e>
 801c5b4:	f1c0 0320 	rsb	r3, r0, #32
 801c5b8:	fa02 f303 	lsl.w	r3, r2, r3
 801c5bc:	430b      	orrs	r3, r1
 801c5be:	40c2      	lsrs	r2, r0
 801c5c0:	6163      	str	r3, [r4, #20]
 801c5c2:	9201      	str	r2, [sp, #4]
 801c5c4:	9b01      	ldr	r3, [sp, #4]
 801c5c6:	61a3      	str	r3, [r4, #24]
 801c5c8:	2b00      	cmp	r3, #0
 801c5ca:	bf0c      	ite	eq
 801c5cc:	2201      	moveq	r2, #1
 801c5ce:	2202      	movne	r2, #2
 801c5d0:	6122      	str	r2, [r4, #16]
 801c5d2:	b1a5      	cbz	r5, 801c5fe <__d2b+0x92>
 801c5d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801c5d8:	4405      	add	r5, r0
 801c5da:	603d      	str	r5, [r7, #0]
 801c5dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801c5e0:	6030      	str	r0, [r6, #0]
 801c5e2:	4620      	mov	r0, r4
 801c5e4:	b003      	add	sp, #12
 801c5e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c5ea:	6161      	str	r1, [r4, #20]
 801c5ec:	e7ea      	b.n	801c5c4 <__d2b+0x58>
 801c5ee:	a801      	add	r0, sp, #4
 801c5f0:	f7ff fce9 	bl	801bfc6 <__lo0bits>
 801c5f4:	9b01      	ldr	r3, [sp, #4]
 801c5f6:	6163      	str	r3, [r4, #20]
 801c5f8:	3020      	adds	r0, #32
 801c5fa:	2201      	movs	r2, #1
 801c5fc:	e7e8      	b.n	801c5d0 <__d2b+0x64>
 801c5fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801c602:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801c606:	6038      	str	r0, [r7, #0]
 801c608:	6918      	ldr	r0, [r3, #16]
 801c60a:	f7ff fcbd 	bl	801bf88 <__hi0bits>
 801c60e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801c612:	e7e5      	b.n	801c5e0 <__d2b+0x74>
 801c614:	08020c00 	.word	0x08020c00
 801c618:	08020c11 	.word	0x08020c11

0801c61c <__ratio>:
 801c61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c620:	b085      	sub	sp, #20
 801c622:	e9cd 1000 	strd	r1, r0, [sp]
 801c626:	a902      	add	r1, sp, #8
 801c628:	f7ff ff56 	bl	801c4d8 <__b2d>
 801c62c:	9800      	ldr	r0, [sp, #0]
 801c62e:	a903      	add	r1, sp, #12
 801c630:	ec55 4b10 	vmov	r4, r5, d0
 801c634:	f7ff ff50 	bl	801c4d8 <__b2d>
 801c638:	9b01      	ldr	r3, [sp, #4]
 801c63a:	6919      	ldr	r1, [r3, #16]
 801c63c:	9b00      	ldr	r3, [sp, #0]
 801c63e:	691b      	ldr	r3, [r3, #16]
 801c640:	1ac9      	subs	r1, r1, r3
 801c642:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801c646:	1a9b      	subs	r3, r3, r2
 801c648:	ec5b ab10 	vmov	sl, fp, d0
 801c64c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801c650:	2b00      	cmp	r3, #0
 801c652:	bfce      	itee	gt
 801c654:	462a      	movgt	r2, r5
 801c656:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801c65a:	465a      	movle	r2, fp
 801c65c:	462f      	mov	r7, r5
 801c65e:	46d9      	mov	r9, fp
 801c660:	bfcc      	ite	gt
 801c662:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801c666:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801c66a:	464b      	mov	r3, r9
 801c66c:	4652      	mov	r2, sl
 801c66e:	4620      	mov	r0, r4
 801c670:	4639      	mov	r1, r7
 801c672:	f7e4 f903 	bl	800087c <__aeabi_ddiv>
 801c676:	ec41 0b10 	vmov	d0, r0, r1
 801c67a:	b005      	add	sp, #20
 801c67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c680 <__copybits>:
 801c680:	3901      	subs	r1, #1
 801c682:	b570      	push	{r4, r5, r6, lr}
 801c684:	1149      	asrs	r1, r1, #5
 801c686:	6914      	ldr	r4, [r2, #16]
 801c688:	3101      	adds	r1, #1
 801c68a:	f102 0314 	add.w	r3, r2, #20
 801c68e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801c692:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801c696:	1f05      	subs	r5, r0, #4
 801c698:	42a3      	cmp	r3, r4
 801c69a:	d30c      	bcc.n	801c6b6 <__copybits+0x36>
 801c69c:	1aa3      	subs	r3, r4, r2
 801c69e:	3b11      	subs	r3, #17
 801c6a0:	f023 0303 	bic.w	r3, r3, #3
 801c6a4:	3211      	adds	r2, #17
 801c6a6:	42a2      	cmp	r2, r4
 801c6a8:	bf88      	it	hi
 801c6aa:	2300      	movhi	r3, #0
 801c6ac:	4418      	add	r0, r3
 801c6ae:	2300      	movs	r3, #0
 801c6b0:	4288      	cmp	r0, r1
 801c6b2:	d305      	bcc.n	801c6c0 <__copybits+0x40>
 801c6b4:	bd70      	pop	{r4, r5, r6, pc}
 801c6b6:	f853 6b04 	ldr.w	r6, [r3], #4
 801c6ba:	f845 6f04 	str.w	r6, [r5, #4]!
 801c6be:	e7eb      	b.n	801c698 <__copybits+0x18>
 801c6c0:	f840 3b04 	str.w	r3, [r0], #4
 801c6c4:	e7f4      	b.n	801c6b0 <__copybits+0x30>

0801c6c6 <__any_on>:
 801c6c6:	f100 0214 	add.w	r2, r0, #20
 801c6ca:	6900      	ldr	r0, [r0, #16]
 801c6cc:	114b      	asrs	r3, r1, #5
 801c6ce:	4298      	cmp	r0, r3
 801c6d0:	b510      	push	{r4, lr}
 801c6d2:	db11      	blt.n	801c6f8 <__any_on+0x32>
 801c6d4:	dd0a      	ble.n	801c6ec <__any_on+0x26>
 801c6d6:	f011 011f 	ands.w	r1, r1, #31
 801c6da:	d007      	beq.n	801c6ec <__any_on+0x26>
 801c6dc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801c6e0:	fa24 f001 	lsr.w	r0, r4, r1
 801c6e4:	fa00 f101 	lsl.w	r1, r0, r1
 801c6e8:	428c      	cmp	r4, r1
 801c6ea:	d10b      	bne.n	801c704 <__any_on+0x3e>
 801c6ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c6f0:	4293      	cmp	r3, r2
 801c6f2:	d803      	bhi.n	801c6fc <__any_on+0x36>
 801c6f4:	2000      	movs	r0, #0
 801c6f6:	bd10      	pop	{r4, pc}
 801c6f8:	4603      	mov	r3, r0
 801c6fa:	e7f7      	b.n	801c6ec <__any_on+0x26>
 801c6fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c700:	2900      	cmp	r1, #0
 801c702:	d0f5      	beq.n	801c6f0 <__any_on+0x2a>
 801c704:	2001      	movs	r0, #1
 801c706:	e7f6      	b.n	801c6f6 <__any_on+0x30>

0801c708 <_malloc_usable_size_r>:
 801c708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c70c:	1f18      	subs	r0, r3, #4
 801c70e:	2b00      	cmp	r3, #0
 801c710:	bfbc      	itt	lt
 801c712:	580b      	ldrlt	r3, [r1, r0]
 801c714:	18c0      	addlt	r0, r0, r3
 801c716:	4770      	bx	lr

0801c718 <sulp>:
 801c718:	b570      	push	{r4, r5, r6, lr}
 801c71a:	4604      	mov	r4, r0
 801c71c:	460d      	mov	r5, r1
 801c71e:	ec45 4b10 	vmov	d0, r4, r5
 801c722:	4616      	mov	r6, r2
 801c724:	f7ff feb2 	bl	801c48c <__ulp>
 801c728:	ec51 0b10 	vmov	r0, r1, d0
 801c72c:	b17e      	cbz	r6, 801c74e <sulp+0x36>
 801c72e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801c732:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801c736:	2b00      	cmp	r3, #0
 801c738:	dd09      	ble.n	801c74e <sulp+0x36>
 801c73a:	051b      	lsls	r3, r3, #20
 801c73c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801c740:	2400      	movs	r4, #0
 801c742:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801c746:	4622      	mov	r2, r4
 801c748:	462b      	mov	r3, r5
 801c74a:	f7e3 ff6d 	bl	8000628 <__aeabi_dmul>
 801c74e:	ec41 0b10 	vmov	d0, r0, r1
 801c752:	bd70      	pop	{r4, r5, r6, pc}
 801c754:	0000      	movs	r0, r0
	...

0801c758 <_strtod_l>:
 801c758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c75c:	b09f      	sub	sp, #124	@ 0x7c
 801c75e:	460c      	mov	r4, r1
 801c760:	9217      	str	r2, [sp, #92]	@ 0x5c
 801c762:	2200      	movs	r2, #0
 801c764:	921a      	str	r2, [sp, #104]	@ 0x68
 801c766:	9005      	str	r0, [sp, #20]
 801c768:	f04f 0a00 	mov.w	sl, #0
 801c76c:	f04f 0b00 	mov.w	fp, #0
 801c770:	460a      	mov	r2, r1
 801c772:	9219      	str	r2, [sp, #100]	@ 0x64
 801c774:	7811      	ldrb	r1, [r2, #0]
 801c776:	292b      	cmp	r1, #43	@ 0x2b
 801c778:	d04a      	beq.n	801c810 <_strtod_l+0xb8>
 801c77a:	d838      	bhi.n	801c7ee <_strtod_l+0x96>
 801c77c:	290d      	cmp	r1, #13
 801c77e:	d832      	bhi.n	801c7e6 <_strtod_l+0x8e>
 801c780:	2908      	cmp	r1, #8
 801c782:	d832      	bhi.n	801c7ea <_strtod_l+0x92>
 801c784:	2900      	cmp	r1, #0
 801c786:	d03b      	beq.n	801c800 <_strtod_l+0xa8>
 801c788:	2200      	movs	r2, #0
 801c78a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801c78c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801c78e:	782a      	ldrb	r2, [r5, #0]
 801c790:	2a30      	cmp	r2, #48	@ 0x30
 801c792:	f040 80b3 	bne.w	801c8fc <_strtod_l+0x1a4>
 801c796:	786a      	ldrb	r2, [r5, #1]
 801c798:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801c79c:	2a58      	cmp	r2, #88	@ 0x58
 801c79e:	d16e      	bne.n	801c87e <_strtod_l+0x126>
 801c7a0:	9302      	str	r3, [sp, #8]
 801c7a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c7a4:	9301      	str	r3, [sp, #4]
 801c7a6:	ab1a      	add	r3, sp, #104	@ 0x68
 801c7a8:	9300      	str	r3, [sp, #0]
 801c7aa:	4a8e      	ldr	r2, [pc, #568]	@ (801c9e4 <_strtod_l+0x28c>)
 801c7ac:	9805      	ldr	r0, [sp, #20]
 801c7ae:	ab1b      	add	r3, sp, #108	@ 0x6c
 801c7b0:	a919      	add	r1, sp, #100	@ 0x64
 801c7b2:	f001 fe17 	bl	801e3e4 <__gethex>
 801c7b6:	f010 060f 	ands.w	r6, r0, #15
 801c7ba:	4604      	mov	r4, r0
 801c7bc:	d005      	beq.n	801c7ca <_strtod_l+0x72>
 801c7be:	2e06      	cmp	r6, #6
 801c7c0:	d128      	bne.n	801c814 <_strtod_l+0xbc>
 801c7c2:	3501      	adds	r5, #1
 801c7c4:	2300      	movs	r3, #0
 801c7c6:	9519      	str	r5, [sp, #100]	@ 0x64
 801c7c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c7ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801c7cc:	2b00      	cmp	r3, #0
 801c7ce:	f040 858e 	bne.w	801d2ee <_strtod_l+0xb96>
 801c7d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c7d4:	b1cb      	cbz	r3, 801c80a <_strtod_l+0xb2>
 801c7d6:	4652      	mov	r2, sl
 801c7d8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801c7dc:	ec43 2b10 	vmov	d0, r2, r3
 801c7e0:	b01f      	add	sp, #124	@ 0x7c
 801c7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c7e6:	2920      	cmp	r1, #32
 801c7e8:	d1ce      	bne.n	801c788 <_strtod_l+0x30>
 801c7ea:	3201      	adds	r2, #1
 801c7ec:	e7c1      	b.n	801c772 <_strtod_l+0x1a>
 801c7ee:	292d      	cmp	r1, #45	@ 0x2d
 801c7f0:	d1ca      	bne.n	801c788 <_strtod_l+0x30>
 801c7f2:	2101      	movs	r1, #1
 801c7f4:	910b      	str	r1, [sp, #44]	@ 0x2c
 801c7f6:	1c51      	adds	r1, r2, #1
 801c7f8:	9119      	str	r1, [sp, #100]	@ 0x64
 801c7fa:	7852      	ldrb	r2, [r2, #1]
 801c7fc:	2a00      	cmp	r2, #0
 801c7fe:	d1c5      	bne.n	801c78c <_strtod_l+0x34>
 801c800:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801c802:	9419      	str	r4, [sp, #100]	@ 0x64
 801c804:	2b00      	cmp	r3, #0
 801c806:	f040 8570 	bne.w	801d2ea <_strtod_l+0xb92>
 801c80a:	4652      	mov	r2, sl
 801c80c:	465b      	mov	r3, fp
 801c80e:	e7e5      	b.n	801c7dc <_strtod_l+0x84>
 801c810:	2100      	movs	r1, #0
 801c812:	e7ef      	b.n	801c7f4 <_strtod_l+0x9c>
 801c814:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801c816:	b13a      	cbz	r2, 801c828 <_strtod_l+0xd0>
 801c818:	2135      	movs	r1, #53	@ 0x35
 801c81a:	a81c      	add	r0, sp, #112	@ 0x70
 801c81c:	f7ff ff30 	bl	801c680 <__copybits>
 801c820:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c822:	9805      	ldr	r0, [sp, #20]
 801c824:	f7ff fafe 	bl	801be24 <_Bfree>
 801c828:	3e01      	subs	r6, #1
 801c82a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801c82c:	2e04      	cmp	r6, #4
 801c82e:	d806      	bhi.n	801c83e <_strtod_l+0xe6>
 801c830:	e8df f006 	tbb	[pc, r6]
 801c834:	201d0314 	.word	0x201d0314
 801c838:	14          	.byte	0x14
 801c839:	00          	.byte	0x00
 801c83a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801c83e:	05e1      	lsls	r1, r4, #23
 801c840:	bf48      	it	mi
 801c842:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801c846:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801c84a:	0d1b      	lsrs	r3, r3, #20
 801c84c:	051b      	lsls	r3, r3, #20
 801c84e:	2b00      	cmp	r3, #0
 801c850:	d1bb      	bne.n	801c7ca <_strtod_l+0x72>
 801c852:	f7fe fb9b 	bl	801af8c <__errno>
 801c856:	2322      	movs	r3, #34	@ 0x22
 801c858:	6003      	str	r3, [r0, #0]
 801c85a:	e7b6      	b.n	801c7ca <_strtod_l+0x72>
 801c85c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 801c860:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801c864:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801c868:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801c86c:	e7e7      	b.n	801c83e <_strtod_l+0xe6>
 801c86e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 801c9ec <_strtod_l+0x294>
 801c872:	e7e4      	b.n	801c83e <_strtod_l+0xe6>
 801c874:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 801c878:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801c87c:	e7df      	b.n	801c83e <_strtod_l+0xe6>
 801c87e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c880:	1c5a      	adds	r2, r3, #1
 801c882:	9219      	str	r2, [sp, #100]	@ 0x64
 801c884:	785b      	ldrb	r3, [r3, #1]
 801c886:	2b30      	cmp	r3, #48	@ 0x30
 801c888:	d0f9      	beq.n	801c87e <_strtod_l+0x126>
 801c88a:	2b00      	cmp	r3, #0
 801c88c:	d09d      	beq.n	801c7ca <_strtod_l+0x72>
 801c88e:	2301      	movs	r3, #1
 801c890:	9309      	str	r3, [sp, #36]	@ 0x24
 801c892:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c894:	930c      	str	r3, [sp, #48]	@ 0x30
 801c896:	2300      	movs	r3, #0
 801c898:	9308      	str	r3, [sp, #32]
 801c89a:	930a      	str	r3, [sp, #40]	@ 0x28
 801c89c:	461f      	mov	r7, r3
 801c89e:	220a      	movs	r2, #10
 801c8a0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801c8a2:	7805      	ldrb	r5, [r0, #0]
 801c8a4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801c8a8:	b2d9      	uxtb	r1, r3
 801c8aa:	2909      	cmp	r1, #9
 801c8ac:	d928      	bls.n	801c900 <_strtod_l+0x1a8>
 801c8ae:	494e      	ldr	r1, [pc, #312]	@ (801c9e8 <_strtod_l+0x290>)
 801c8b0:	2201      	movs	r2, #1
 801c8b2:	f7fe fa92 	bl	801adda <strncmp>
 801c8b6:	2800      	cmp	r0, #0
 801c8b8:	d032      	beq.n	801c920 <_strtod_l+0x1c8>
 801c8ba:	2000      	movs	r0, #0
 801c8bc:	462a      	mov	r2, r5
 801c8be:	4681      	mov	r9, r0
 801c8c0:	463d      	mov	r5, r7
 801c8c2:	4603      	mov	r3, r0
 801c8c4:	2a65      	cmp	r2, #101	@ 0x65
 801c8c6:	d001      	beq.n	801c8cc <_strtod_l+0x174>
 801c8c8:	2a45      	cmp	r2, #69	@ 0x45
 801c8ca:	d114      	bne.n	801c8f6 <_strtod_l+0x19e>
 801c8cc:	b91d      	cbnz	r5, 801c8d6 <_strtod_l+0x17e>
 801c8ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c8d0:	4302      	orrs	r2, r0
 801c8d2:	d095      	beq.n	801c800 <_strtod_l+0xa8>
 801c8d4:	2500      	movs	r5, #0
 801c8d6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801c8d8:	1c62      	adds	r2, r4, #1
 801c8da:	9219      	str	r2, [sp, #100]	@ 0x64
 801c8dc:	7862      	ldrb	r2, [r4, #1]
 801c8de:	2a2b      	cmp	r2, #43	@ 0x2b
 801c8e0:	d077      	beq.n	801c9d2 <_strtod_l+0x27a>
 801c8e2:	2a2d      	cmp	r2, #45	@ 0x2d
 801c8e4:	d07b      	beq.n	801c9de <_strtod_l+0x286>
 801c8e6:	f04f 0c00 	mov.w	ip, #0
 801c8ea:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801c8ee:	2909      	cmp	r1, #9
 801c8f0:	f240 8082 	bls.w	801c9f8 <_strtod_l+0x2a0>
 801c8f4:	9419      	str	r4, [sp, #100]	@ 0x64
 801c8f6:	f04f 0800 	mov.w	r8, #0
 801c8fa:	e0a2      	b.n	801ca42 <_strtod_l+0x2ea>
 801c8fc:	2300      	movs	r3, #0
 801c8fe:	e7c7      	b.n	801c890 <_strtod_l+0x138>
 801c900:	2f08      	cmp	r7, #8
 801c902:	bfd5      	itete	le
 801c904:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801c906:	9908      	ldrgt	r1, [sp, #32]
 801c908:	fb02 3301 	mlale	r3, r2, r1, r3
 801c90c:	fb02 3301 	mlagt	r3, r2, r1, r3
 801c910:	f100 0001 	add.w	r0, r0, #1
 801c914:	bfd4      	ite	le
 801c916:	930a      	strle	r3, [sp, #40]	@ 0x28
 801c918:	9308      	strgt	r3, [sp, #32]
 801c91a:	3701      	adds	r7, #1
 801c91c:	9019      	str	r0, [sp, #100]	@ 0x64
 801c91e:	e7bf      	b.n	801c8a0 <_strtod_l+0x148>
 801c920:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c922:	1c5a      	adds	r2, r3, #1
 801c924:	9219      	str	r2, [sp, #100]	@ 0x64
 801c926:	785a      	ldrb	r2, [r3, #1]
 801c928:	b37f      	cbz	r7, 801c98a <_strtod_l+0x232>
 801c92a:	4681      	mov	r9, r0
 801c92c:	463d      	mov	r5, r7
 801c92e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801c932:	2b09      	cmp	r3, #9
 801c934:	d912      	bls.n	801c95c <_strtod_l+0x204>
 801c936:	2301      	movs	r3, #1
 801c938:	e7c4      	b.n	801c8c4 <_strtod_l+0x16c>
 801c93a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c93c:	1c5a      	adds	r2, r3, #1
 801c93e:	9219      	str	r2, [sp, #100]	@ 0x64
 801c940:	785a      	ldrb	r2, [r3, #1]
 801c942:	3001      	adds	r0, #1
 801c944:	2a30      	cmp	r2, #48	@ 0x30
 801c946:	d0f8      	beq.n	801c93a <_strtod_l+0x1e2>
 801c948:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801c94c:	2b08      	cmp	r3, #8
 801c94e:	f200 84d3 	bhi.w	801d2f8 <_strtod_l+0xba0>
 801c952:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c954:	930c      	str	r3, [sp, #48]	@ 0x30
 801c956:	4681      	mov	r9, r0
 801c958:	2000      	movs	r0, #0
 801c95a:	4605      	mov	r5, r0
 801c95c:	3a30      	subs	r2, #48	@ 0x30
 801c95e:	f100 0301 	add.w	r3, r0, #1
 801c962:	d02a      	beq.n	801c9ba <_strtod_l+0x262>
 801c964:	4499      	add	r9, r3
 801c966:	eb00 0c05 	add.w	ip, r0, r5
 801c96a:	462b      	mov	r3, r5
 801c96c:	210a      	movs	r1, #10
 801c96e:	4563      	cmp	r3, ip
 801c970:	d10d      	bne.n	801c98e <_strtod_l+0x236>
 801c972:	1c69      	adds	r1, r5, #1
 801c974:	4401      	add	r1, r0
 801c976:	4428      	add	r0, r5
 801c978:	2808      	cmp	r0, #8
 801c97a:	dc16      	bgt.n	801c9aa <_strtod_l+0x252>
 801c97c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801c97e:	230a      	movs	r3, #10
 801c980:	fb03 2300 	mla	r3, r3, r0, r2
 801c984:	930a      	str	r3, [sp, #40]	@ 0x28
 801c986:	2300      	movs	r3, #0
 801c988:	e018      	b.n	801c9bc <_strtod_l+0x264>
 801c98a:	4638      	mov	r0, r7
 801c98c:	e7da      	b.n	801c944 <_strtod_l+0x1ec>
 801c98e:	2b08      	cmp	r3, #8
 801c990:	f103 0301 	add.w	r3, r3, #1
 801c994:	dc03      	bgt.n	801c99e <_strtod_l+0x246>
 801c996:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801c998:	434e      	muls	r6, r1
 801c99a:	960a      	str	r6, [sp, #40]	@ 0x28
 801c99c:	e7e7      	b.n	801c96e <_strtod_l+0x216>
 801c99e:	2b10      	cmp	r3, #16
 801c9a0:	bfde      	ittt	le
 801c9a2:	9e08      	ldrle	r6, [sp, #32]
 801c9a4:	434e      	mulle	r6, r1
 801c9a6:	9608      	strle	r6, [sp, #32]
 801c9a8:	e7e1      	b.n	801c96e <_strtod_l+0x216>
 801c9aa:	280f      	cmp	r0, #15
 801c9ac:	dceb      	bgt.n	801c986 <_strtod_l+0x22e>
 801c9ae:	9808      	ldr	r0, [sp, #32]
 801c9b0:	230a      	movs	r3, #10
 801c9b2:	fb03 2300 	mla	r3, r3, r0, r2
 801c9b6:	9308      	str	r3, [sp, #32]
 801c9b8:	e7e5      	b.n	801c986 <_strtod_l+0x22e>
 801c9ba:	4629      	mov	r1, r5
 801c9bc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c9be:	1c50      	adds	r0, r2, #1
 801c9c0:	9019      	str	r0, [sp, #100]	@ 0x64
 801c9c2:	7852      	ldrb	r2, [r2, #1]
 801c9c4:	4618      	mov	r0, r3
 801c9c6:	460d      	mov	r5, r1
 801c9c8:	e7b1      	b.n	801c92e <_strtod_l+0x1d6>
 801c9ca:	f04f 0900 	mov.w	r9, #0
 801c9ce:	2301      	movs	r3, #1
 801c9d0:	e77d      	b.n	801c8ce <_strtod_l+0x176>
 801c9d2:	f04f 0c00 	mov.w	ip, #0
 801c9d6:	1ca2      	adds	r2, r4, #2
 801c9d8:	9219      	str	r2, [sp, #100]	@ 0x64
 801c9da:	78a2      	ldrb	r2, [r4, #2]
 801c9dc:	e785      	b.n	801c8ea <_strtod_l+0x192>
 801c9de:	f04f 0c01 	mov.w	ip, #1
 801c9e2:	e7f8      	b.n	801c9d6 <_strtod_l+0x27e>
 801c9e4:	08020d80 	.word	0x08020d80
 801c9e8:	08020d68 	.word	0x08020d68
 801c9ec:	7ff00000 	.word	0x7ff00000
 801c9f0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c9f2:	1c51      	adds	r1, r2, #1
 801c9f4:	9119      	str	r1, [sp, #100]	@ 0x64
 801c9f6:	7852      	ldrb	r2, [r2, #1]
 801c9f8:	2a30      	cmp	r2, #48	@ 0x30
 801c9fa:	d0f9      	beq.n	801c9f0 <_strtod_l+0x298>
 801c9fc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801ca00:	2908      	cmp	r1, #8
 801ca02:	f63f af78 	bhi.w	801c8f6 <_strtod_l+0x19e>
 801ca06:	3a30      	subs	r2, #48	@ 0x30
 801ca08:	920e      	str	r2, [sp, #56]	@ 0x38
 801ca0a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801ca0c:	920f      	str	r2, [sp, #60]	@ 0x3c
 801ca0e:	f04f 080a 	mov.w	r8, #10
 801ca12:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801ca14:	1c56      	adds	r6, r2, #1
 801ca16:	9619      	str	r6, [sp, #100]	@ 0x64
 801ca18:	7852      	ldrb	r2, [r2, #1]
 801ca1a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801ca1e:	f1be 0f09 	cmp.w	lr, #9
 801ca22:	d939      	bls.n	801ca98 <_strtod_l+0x340>
 801ca24:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801ca26:	1a76      	subs	r6, r6, r1
 801ca28:	2e08      	cmp	r6, #8
 801ca2a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801ca2e:	dc03      	bgt.n	801ca38 <_strtod_l+0x2e0>
 801ca30:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801ca32:	4588      	cmp	r8, r1
 801ca34:	bfa8      	it	ge
 801ca36:	4688      	movge	r8, r1
 801ca38:	f1bc 0f00 	cmp.w	ip, #0
 801ca3c:	d001      	beq.n	801ca42 <_strtod_l+0x2ea>
 801ca3e:	f1c8 0800 	rsb	r8, r8, #0
 801ca42:	2d00      	cmp	r5, #0
 801ca44:	d14e      	bne.n	801cae4 <_strtod_l+0x38c>
 801ca46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ca48:	4308      	orrs	r0, r1
 801ca4a:	f47f aebe 	bne.w	801c7ca <_strtod_l+0x72>
 801ca4e:	2b00      	cmp	r3, #0
 801ca50:	f47f aed6 	bne.w	801c800 <_strtod_l+0xa8>
 801ca54:	2a69      	cmp	r2, #105	@ 0x69
 801ca56:	d028      	beq.n	801caaa <_strtod_l+0x352>
 801ca58:	dc25      	bgt.n	801caa6 <_strtod_l+0x34e>
 801ca5a:	2a49      	cmp	r2, #73	@ 0x49
 801ca5c:	d025      	beq.n	801caaa <_strtod_l+0x352>
 801ca5e:	2a4e      	cmp	r2, #78	@ 0x4e
 801ca60:	f47f aece 	bne.w	801c800 <_strtod_l+0xa8>
 801ca64:	499b      	ldr	r1, [pc, #620]	@ (801ccd4 <_strtod_l+0x57c>)
 801ca66:	a819      	add	r0, sp, #100	@ 0x64
 801ca68:	f001 fede 	bl	801e828 <__match>
 801ca6c:	2800      	cmp	r0, #0
 801ca6e:	f43f aec7 	beq.w	801c800 <_strtod_l+0xa8>
 801ca72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ca74:	781b      	ldrb	r3, [r3, #0]
 801ca76:	2b28      	cmp	r3, #40	@ 0x28
 801ca78:	d12e      	bne.n	801cad8 <_strtod_l+0x380>
 801ca7a:	4997      	ldr	r1, [pc, #604]	@ (801ccd8 <_strtod_l+0x580>)
 801ca7c:	aa1c      	add	r2, sp, #112	@ 0x70
 801ca7e:	a819      	add	r0, sp, #100	@ 0x64
 801ca80:	f001 fee6 	bl	801e850 <__hexnan>
 801ca84:	2805      	cmp	r0, #5
 801ca86:	d127      	bne.n	801cad8 <_strtod_l+0x380>
 801ca88:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ca8a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801ca8e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801ca92:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801ca96:	e698      	b.n	801c7ca <_strtod_l+0x72>
 801ca98:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801ca9a:	fb08 2101 	mla	r1, r8, r1, r2
 801ca9e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801caa2:	920e      	str	r2, [sp, #56]	@ 0x38
 801caa4:	e7b5      	b.n	801ca12 <_strtod_l+0x2ba>
 801caa6:	2a6e      	cmp	r2, #110	@ 0x6e
 801caa8:	e7da      	b.n	801ca60 <_strtod_l+0x308>
 801caaa:	498c      	ldr	r1, [pc, #560]	@ (801ccdc <_strtod_l+0x584>)
 801caac:	a819      	add	r0, sp, #100	@ 0x64
 801caae:	f001 febb 	bl	801e828 <__match>
 801cab2:	2800      	cmp	r0, #0
 801cab4:	f43f aea4 	beq.w	801c800 <_strtod_l+0xa8>
 801cab8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801caba:	4989      	ldr	r1, [pc, #548]	@ (801cce0 <_strtod_l+0x588>)
 801cabc:	3b01      	subs	r3, #1
 801cabe:	a819      	add	r0, sp, #100	@ 0x64
 801cac0:	9319      	str	r3, [sp, #100]	@ 0x64
 801cac2:	f001 feb1 	bl	801e828 <__match>
 801cac6:	b910      	cbnz	r0, 801cace <_strtod_l+0x376>
 801cac8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801caca:	3301      	adds	r3, #1
 801cacc:	9319      	str	r3, [sp, #100]	@ 0x64
 801cace:	f8df b220 	ldr.w	fp, [pc, #544]	@ 801ccf0 <_strtod_l+0x598>
 801cad2:	f04f 0a00 	mov.w	sl, #0
 801cad6:	e678      	b.n	801c7ca <_strtod_l+0x72>
 801cad8:	4882      	ldr	r0, [pc, #520]	@ (801cce4 <_strtod_l+0x58c>)
 801cada:	f001 fc0d 	bl	801e2f8 <nan>
 801cade:	ec5b ab10 	vmov	sl, fp, d0
 801cae2:	e672      	b.n	801c7ca <_strtod_l+0x72>
 801cae4:	eba8 0309 	sub.w	r3, r8, r9
 801cae8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801caea:	9309      	str	r3, [sp, #36]	@ 0x24
 801caec:	2f00      	cmp	r7, #0
 801caee:	bf08      	it	eq
 801caf0:	462f      	moveq	r7, r5
 801caf2:	2d10      	cmp	r5, #16
 801caf4:	462c      	mov	r4, r5
 801caf6:	bfa8      	it	ge
 801caf8:	2410      	movge	r4, #16
 801cafa:	f7e3 fd1b 	bl	8000534 <__aeabi_ui2d>
 801cafe:	2d09      	cmp	r5, #9
 801cb00:	4682      	mov	sl, r0
 801cb02:	468b      	mov	fp, r1
 801cb04:	dc13      	bgt.n	801cb2e <_strtod_l+0x3d6>
 801cb06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cb08:	2b00      	cmp	r3, #0
 801cb0a:	f43f ae5e 	beq.w	801c7ca <_strtod_l+0x72>
 801cb0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cb10:	dd78      	ble.n	801cc04 <_strtod_l+0x4ac>
 801cb12:	2b16      	cmp	r3, #22
 801cb14:	dc5f      	bgt.n	801cbd6 <_strtod_l+0x47e>
 801cb16:	4974      	ldr	r1, [pc, #464]	@ (801cce8 <_strtod_l+0x590>)
 801cb18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801cb1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cb20:	4652      	mov	r2, sl
 801cb22:	465b      	mov	r3, fp
 801cb24:	f7e3 fd80 	bl	8000628 <__aeabi_dmul>
 801cb28:	4682      	mov	sl, r0
 801cb2a:	468b      	mov	fp, r1
 801cb2c:	e64d      	b.n	801c7ca <_strtod_l+0x72>
 801cb2e:	4b6e      	ldr	r3, [pc, #440]	@ (801cce8 <_strtod_l+0x590>)
 801cb30:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801cb34:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 801cb38:	f7e3 fd76 	bl	8000628 <__aeabi_dmul>
 801cb3c:	4682      	mov	sl, r0
 801cb3e:	9808      	ldr	r0, [sp, #32]
 801cb40:	468b      	mov	fp, r1
 801cb42:	f7e3 fcf7 	bl	8000534 <__aeabi_ui2d>
 801cb46:	4602      	mov	r2, r0
 801cb48:	460b      	mov	r3, r1
 801cb4a:	4650      	mov	r0, sl
 801cb4c:	4659      	mov	r1, fp
 801cb4e:	f7e3 fbb5 	bl	80002bc <__adddf3>
 801cb52:	2d0f      	cmp	r5, #15
 801cb54:	4682      	mov	sl, r0
 801cb56:	468b      	mov	fp, r1
 801cb58:	ddd5      	ble.n	801cb06 <_strtod_l+0x3ae>
 801cb5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cb5c:	1b2c      	subs	r4, r5, r4
 801cb5e:	441c      	add	r4, r3
 801cb60:	2c00      	cmp	r4, #0
 801cb62:	f340 8096 	ble.w	801cc92 <_strtod_l+0x53a>
 801cb66:	f014 030f 	ands.w	r3, r4, #15
 801cb6a:	d00a      	beq.n	801cb82 <_strtod_l+0x42a>
 801cb6c:	495e      	ldr	r1, [pc, #376]	@ (801cce8 <_strtod_l+0x590>)
 801cb6e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801cb72:	4652      	mov	r2, sl
 801cb74:	465b      	mov	r3, fp
 801cb76:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cb7a:	f7e3 fd55 	bl	8000628 <__aeabi_dmul>
 801cb7e:	4682      	mov	sl, r0
 801cb80:	468b      	mov	fp, r1
 801cb82:	f034 040f 	bics.w	r4, r4, #15
 801cb86:	d073      	beq.n	801cc70 <_strtod_l+0x518>
 801cb88:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801cb8c:	dd48      	ble.n	801cc20 <_strtod_l+0x4c8>
 801cb8e:	2400      	movs	r4, #0
 801cb90:	46a0      	mov	r8, r4
 801cb92:	940a      	str	r4, [sp, #40]	@ 0x28
 801cb94:	46a1      	mov	r9, r4
 801cb96:	9a05      	ldr	r2, [sp, #20]
 801cb98:	f8df b154 	ldr.w	fp, [pc, #340]	@ 801ccf0 <_strtod_l+0x598>
 801cb9c:	2322      	movs	r3, #34	@ 0x22
 801cb9e:	6013      	str	r3, [r2, #0]
 801cba0:	f04f 0a00 	mov.w	sl, #0
 801cba4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cba6:	2b00      	cmp	r3, #0
 801cba8:	f43f ae0f 	beq.w	801c7ca <_strtod_l+0x72>
 801cbac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801cbae:	9805      	ldr	r0, [sp, #20]
 801cbb0:	f7ff f938 	bl	801be24 <_Bfree>
 801cbb4:	9805      	ldr	r0, [sp, #20]
 801cbb6:	4649      	mov	r1, r9
 801cbb8:	f7ff f934 	bl	801be24 <_Bfree>
 801cbbc:	9805      	ldr	r0, [sp, #20]
 801cbbe:	4641      	mov	r1, r8
 801cbc0:	f7ff f930 	bl	801be24 <_Bfree>
 801cbc4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801cbc6:	9805      	ldr	r0, [sp, #20]
 801cbc8:	f7ff f92c 	bl	801be24 <_Bfree>
 801cbcc:	9805      	ldr	r0, [sp, #20]
 801cbce:	4621      	mov	r1, r4
 801cbd0:	f7ff f928 	bl	801be24 <_Bfree>
 801cbd4:	e5f9      	b.n	801c7ca <_strtod_l+0x72>
 801cbd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cbd8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801cbdc:	4293      	cmp	r3, r2
 801cbde:	dbbc      	blt.n	801cb5a <_strtod_l+0x402>
 801cbe0:	4c41      	ldr	r4, [pc, #260]	@ (801cce8 <_strtod_l+0x590>)
 801cbe2:	f1c5 050f 	rsb	r5, r5, #15
 801cbe6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801cbea:	4652      	mov	r2, sl
 801cbec:	465b      	mov	r3, fp
 801cbee:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cbf2:	f7e3 fd19 	bl	8000628 <__aeabi_dmul>
 801cbf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cbf8:	1b5d      	subs	r5, r3, r5
 801cbfa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801cbfe:	e9d4 2300 	ldrd	r2, r3, [r4]
 801cc02:	e78f      	b.n	801cb24 <_strtod_l+0x3cc>
 801cc04:	3316      	adds	r3, #22
 801cc06:	dba8      	blt.n	801cb5a <_strtod_l+0x402>
 801cc08:	4b37      	ldr	r3, [pc, #220]	@ (801cce8 <_strtod_l+0x590>)
 801cc0a:	eba9 0808 	sub.w	r8, r9, r8
 801cc0e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801cc12:	e9d8 2300 	ldrd	r2, r3, [r8]
 801cc16:	4650      	mov	r0, sl
 801cc18:	4659      	mov	r1, fp
 801cc1a:	f7e3 fe2f 	bl	800087c <__aeabi_ddiv>
 801cc1e:	e783      	b.n	801cb28 <_strtod_l+0x3d0>
 801cc20:	4b32      	ldr	r3, [pc, #200]	@ (801ccec <_strtod_l+0x594>)
 801cc22:	9308      	str	r3, [sp, #32]
 801cc24:	2300      	movs	r3, #0
 801cc26:	1124      	asrs	r4, r4, #4
 801cc28:	4650      	mov	r0, sl
 801cc2a:	4659      	mov	r1, fp
 801cc2c:	461e      	mov	r6, r3
 801cc2e:	2c01      	cmp	r4, #1
 801cc30:	dc21      	bgt.n	801cc76 <_strtod_l+0x51e>
 801cc32:	b10b      	cbz	r3, 801cc38 <_strtod_l+0x4e0>
 801cc34:	4682      	mov	sl, r0
 801cc36:	468b      	mov	fp, r1
 801cc38:	492c      	ldr	r1, [pc, #176]	@ (801ccec <_strtod_l+0x594>)
 801cc3a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801cc3e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801cc42:	4652      	mov	r2, sl
 801cc44:	465b      	mov	r3, fp
 801cc46:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cc4a:	f7e3 fced 	bl	8000628 <__aeabi_dmul>
 801cc4e:	4b28      	ldr	r3, [pc, #160]	@ (801ccf0 <_strtod_l+0x598>)
 801cc50:	460a      	mov	r2, r1
 801cc52:	400b      	ands	r3, r1
 801cc54:	4927      	ldr	r1, [pc, #156]	@ (801ccf4 <_strtod_l+0x59c>)
 801cc56:	428b      	cmp	r3, r1
 801cc58:	4682      	mov	sl, r0
 801cc5a:	d898      	bhi.n	801cb8e <_strtod_l+0x436>
 801cc5c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 801cc60:	428b      	cmp	r3, r1
 801cc62:	bf86      	itte	hi
 801cc64:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 801ccf8 <_strtod_l+0x5a0>
 801cc68:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 801cc6c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 801cc70:	2300      	movs	r3, #0
 801cc72:	9308      	str	r3, [sp, #32]
 801cc74:	e07a      	b.n	801cd6c <_strtod_l+0x614>
 801cc76:	07e2      	lsls	r2, r4, #31
 801cc78:	d505      	bpl.n	801cc86 <_strtod_l+0x52e>
 801cc7a:	9b08      	ldr	r3, [sp, #32]
 801cc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc80:	f7e3 fcd2 	bl	8000628 <__aeabi_dmul>
 801cc84:	2301      	movs	r3, #1
 801cc86:	9a08      	ldr	r2, [sp, #32]
 801cc88:	3208      	adds	r2, #8
 801cc8a:	3601      	adds	r6, #1
 801cc8c:	1064      	asrs	r4, r4, #1
 801cc8e:	9208      	str	r2, [sp, #32]
 801cc90:	e7cd      	b.n	801cc2e <_strtod_l+0x4d6>
 801cc92:	d0ed      	beq.n	801cc70 <_strtod_l+0x518>
 801cc94:	4264      	negs	r4, r4
 801cc96:	f014 020f 	ands.w	r2, r4, #15
 801cc9a:	d00a      	beq.n	801ccb2 <_strtod_l+0x55a>
 801cc9c:	4b12      	ldr	r3, [pc, #72]	@ (801cce8 <_strtod_l+0x590>)
 801cc9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801cca2:	4650      	mov	r0, sl
 801cca4:	4659      	mov	r1, fp
 801cca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccaa:	f7e3 fde7 	bl	800087c <__aeabi_ddiv>
 801ccae:	4682      	mov	sl, r0
 801ccb0:	468b      	mov	fp, r1
 801ccb2:	1124      	asrs	r4, r4, #4
 801ccb4:	d0dc      	beq.n	801cc70 <_strtod_l+0x518>
 801ccb6:	2c1f      	cmp	r4, #31
 801ccb8:	dd20      	ble.n	801ccfc <_strtod_l+0x5a4>
 801ccba:	2400      	movs	r4, #0
 801ccbc:	46a0      	mov	r8, r4
 801ccbe:	940a      	str	r4, [sp, #40]	@ 0x28
 801ccc0:	46a1      	mov	r9, r4
 801ccc2:	9a05      	ldr	r2, [sp, #20]
 801ccc4:	2322      	movs	r3, #34	@ 0x22
 801ccc6:	f04f 0a00 	mov.w	sl, #0
 801ccca:	f04f 0b00 	mov.w	fp, #0
 801ccce:	6013      	str	r3, [r2, #0]
 801ccd0:	e768      	b.n	801cba4 <_strtod_l+0x44c>
 801ccd2:	bf00      	nop
 801ccd4:	08020b35 	.word	0x08020b35
 801ccd8:	08020d6c 	.word	0x08020d6c
 801ccdc:	08020b2d 	.word	0x08020b2d
 801cce0:	08020b9e 	.word	0x08020b9e
 801cce4:	08020b9a 	.word	0x08020b9a
 801cce8:	08020ca0 	.word	0x08020ca0
 801ccec:	08020c78 	.word	0x08020c78
 801ccf0:	7ff00000 	.word	0x7ff00000
 801ccf4:	7ca00000 	.word	0x7ca00000
 801ccf8:	7fefffff 	.word	0x7fefffff
 801ccfc:	f014 0310 	ands.w	r3, r4, #16
 801cd00:	bf18      	it	ne
 801cd02:	236a      	movne	r3, #106	@ 0x6a
 801cd04:	4ea9      	ldr	r6, [pc, #676]	@ (801cfac <_strtod_l+0x854>)
 801cd06:	9308      	str	r3, [sp, #32]
 801cd08:	4650      	mov	r0, sl
 801cd0a:	4659      	mov	r1, fp
 801cd0c:	2300      	movs	r3, #0
 801cd0e:	07e2      	lsls	r2, r4, #31
 801cd10:	d504      	bpl.n	801cd1c <_strtod_l+0x5c4>
 801cd12:	e9d6 2300 	ldrd	r2, r3, [r6]
 801cd16:	f7e3 fc87 	bl	8000628 <__aeabi_dmul>
 801cd1a:	2301      	movs	r3, #1
 801cd1c:	1064      	asrs	r4, r4, #1
 801cd1e:	f106 0608 	add.w	r6, r6, #8
 801cd22:	d1f4      	bne.n	801cd0e <_strtod_l+0x5b6>
 801cd24:	b10b      	cbz	r3, 801cd2a <_strtod_l+0x5d2>
 801cd26:	4682      	mov	sl, r0
 801cd28:	468b      	mov	fp, r1
 801cd2a:	9b08      	ldr	r3, [sp, #32]
 801cd2c:	b1b3      	cbz	r3, 801cd5c <_strtod_l+0x604>
 801cd2e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801cd32:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	4659      	mov	r1, fp
 801cd3a:	dd0f      	ble.n	801cd5c <_strtod_l+0x604>
 801cd3c:	2b1f      	cmp	r3, #31
 801cd3e:	dd55      	ble.n	801cdec <_strtod_l+0x694>
 801cd40:	2b34      	cmp	r3, #52	@ 0x34
 801cd42:	bfde      	ittt	le
 801cd44:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 801cd48:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801cd4c:	4093      	lslle	r3, r2
 801cd4e:	f04f 0a00 	mov.w	sl, #0
 801cd52:	bfcc      	ite	gt
 801cd54:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801cd58:	ea03 0b01 	andle.w	fp, r3, r1
 801cd5c:	2200      	movs	r2, #0
 801cd5e:	2300      	movs	r3, #0
 801cd60:	4650      	mov	r0, sl
 801cd62:	4659      	mov	r1, fp
 801cd64:	f7e3 fec8 	bl	8000af8 <__aeabi_dcmpeq>
 801cd68:	2800      	cmp	r0, #0
 801cd6a:	d1a6      	bne.n	801ccba <_strtod_l+0x562>
 801cd6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cd6e:	9300      	str	r3, [sp, #0]
 801cd70:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801cd72:	9805      	ldr	r0, [sp, #20]
 801cd74:	462b      	mov	r3, r5
 801cd76:	463a      	mov	r2, r7
 801cd78:	f7ff f8bc 	bl	801bef4 <__s2b>
 801cd7c:	900a      	str	r0, [sp, #40]	@ 0x28
 801cd7e:	2800      	cmp	r0, #0
 801cd80:	f43f af05 	beq.w	801cb8e <_strtod_l+0x436>
 801cd84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cd86:	2a00      	cmp	r2, #0
 801cd88:	eba9 0308 	sub.w	r3, r9, r8
 801cd8c:	bfa8      	it	ge
 801cd8e:	2300      	movge	r3, #0
 801cd90:	9312      	str	r3, [sp, #72]	@ 0x48
 801cd92:	2400      	movs	r4, #0
 801cd94:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801cd98:	9316      	str	r3, [sp, #88]	@ 0x58
 801cd9a:	46a0      	mov	r8, r4
 801cd9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cd9e:	9805      	ldr	r0, [sp, #20]
 801cda0:	6859      	ldr	r1, [r3, #4]
 801cda2:	f7fe ffff 	bl	801bda4 <_Balloc>
 801cda6:	4681      	mov	r9, r0
 801cda8:	2800      	cmp	r0, #0
 801cdaa:	f43f aef4 	beq.w	801cb96 <_strtod_l+0x43e>
 801cdae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cdb0:	691a      	ldr	r2, [r3, #16]
 801cdb2:	3202      	adds	r2, #2
 801cdb4:	f103 010c 	add.w	r1, r3, #12
 801cdb8:	0092      	lsls	r2, r2, #2
 801cdba:	300c      	adds	r0, #12
 801cdbc:	f7fe f91b 	bl	801aff6 <memcpy>
 801cdc0:	ec4b ab10 	vmov	d0, sl, fp
 801cdc4:	9805      	ldr	r0, [sp, #20]
 801cdc6:	aa1c      	add	r2, sp, #112	@ 0x70
 801cdc8:	a91b      	add	r1, sp, #108	@ 0x6c
 801cdca:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801cdce:	f7ff fbcd 	bl	801c56c <__d2b>
 801cdd2:	901a      	str	r0, [sp, #104]	@ 0x68
 801cdd4:	2800      	cmp	r0, #0
 801cdd6:	f43f aede 	beq.w	801cb96 <_strtod_l+0x43e>
 801cdda:	9805      	ldr	r0, [sp, #20]
 801cddc:	2101      	movs	r1, #1
 801cdde:	f7ff f91f 	bl	801c020 <__i2b>
 801cde2:	4680      	mov	r8, r0
 801cde4:	b948      	cbnz	r0, 801cdfa <_strtod_l+0x6a2>
 801cde6:	f04f 0800 	mov.w	r8, #0
 801cdea:	e6d4      	b.n	801cb96 <_strtod_l+0x43e>
 801cdec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801cdf0:	fa02 f303 	lsl.w	r3, r2, r3
 801cdf4:	ea03 0a0a 	and.w	sl, r3, sl
 801cdf8:	e7b0      	b.n	801cd5c <_strtod_l+0x604>
 801cdfa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801cdfc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801cdfe:	2d00      	cmp	r5, #0
 801ce00:	bfab      	itete	ge
 801ce02:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801ce04:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801ce06:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801ce08:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801ce0a:	bfac      	ite	ge
 801ce0c:	18ef      	addge	r7, r5, r3
 801ce0e:	1b5e      	sublt	r6, r3, r5
 801ce10:	9b08      	ldr	r3, [sp, #32]
 801ce12:	1aed      	subs	r5, r5, r3
 801ce14:	4415      	add	r5, r2
 801ce16:	4b66      	ldr	r3, [pc, #408]	@ (801cfb0 <_strtod_l+0x858>)
 801ce18:	3d01      	subs	r5, #1
 801ce1a:	429d      	cmp	r5, r3
 801ce1c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801ce20:	da50      	bge.n	801cec4 <_strtod_l+0x76c>
 801ce22:	1b5b      	subs	r3, r3, r5
 801ce24:	2b1f      	cmp	r3, #31
 801ce26:	eba2 0203 	sub.w	r2, r2, r3
 801ce2a:	f04f 0101 	mov.w	r1, #1
 801ce2e:	dc3d      	bgt.n	801ceac <_strtod_l+0x754>
 801ce30:	fa01 f303 	lsl.w	r3, r1, r3
 801ce34:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ce36:	2300      	movs	r3, #0
 801ce38:	9310      	str	r3, [sp, #64]	@ 0x40
 801ce3a:	18bd      	adds	r5, r7, r2
 801ce3c:	9b08      	ldr	r3, [sp, #32]
 801ce3e:	42af      	cmp	r7, r5
 801ce40:	4416      	add	r6, r2
 801ce42:	441e      	add	r6, r3
 801ce44:	463b      	mov	r3, r7
 801ce46:	bfa8      	it	ge
 801ce48:	462b      	movge	r3, r5
 801ce4a:	42b3      	cmp	r3, r6
 801ce4c:	bfa8      	it	ge
 801ce4e:	4633      	movge	r3, r6
 801ce50:	2b00      	cmp	r3, #0
 801ce52:	bfc2      	ittt	gt
 801ce54:	1aed      	subgt	r5, r5, r3
 801ce56:	1af6      	subgt	r6, r6, r3
 801ce58:	1aff      	subgt	r7, r7, r3
 801ce5a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ce5c:	2b00      	cmp	r3, #0
 801ce5e:	dd16      	ble.n	801ce8e <_strtod_l+0x736>
 801ce60:	4641      	mov	r1, r8
 801ce62:	9805      	ldr	r0, [sp, #20]
 801ce64:	461a      	mov	r2, r3
 801ce66:	f7ff f99b 	bl	801c1a0 <__pow5mult>
 801ce6a:	4680      	mov	r8, r0
 801ce6c:	2800      	cmp	r0, #0
 801ce6e:	d0ba      	beq.n	801cde6 <_strtod_l+0x68e>
 801ce70:	4601      	mov	r1, r0
 801ce72:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801ce74:	9805      	ldr	r0, [sp, #20]
 801ce76:	f7ff f8e9 	bl	801c04c <__multiply>
 801ce7a:	900e      	str	r0, [sp, #56]	@ 0x38
 801ce7c:	2800      	cmp	r0, #0
 801ce7e:	f43f ae8a 	beq.w	801cb96 <_strtod_l+0x43e>
 801ce82:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801ce84:	9805      	ldr	r0, [sp, #20]
 801ce86:	f7fe ffcd 	bl	801be24 <_Bfree>
 801ce8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ce8c:	931a      	str	r3, [sp, #104]	@ 0x68
 801ce8e:	2d00      	cmp	r5, #0
 801ce90:	dc1d      	bgt.n	801cece <_strtod_l+0x776>
 801ce92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ce94:	2b00      	cmp	r3, #0
 801ce96:	dd23      	ble.n	801cee0 <_strtod_l+0x788>
 801ce98:	4649      	mov	r1, r9
 801ce9a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801ce9c:	9805      	ldr	r0, [sp, #20]
 801ce9e:	f7ff f97f 	bl	801c1a0 <__pow5mult>
 801cea2:	4681      	mov	r9, r0
 801cea4:	b9e0      	cbnz	r0, 801cee0 <_strtod_l+0x788>
 801cea6:	f04f 0900 	mov.w	r9, #0
 801ceaa:	e674      	b.n	801cb96 <_strtod_l+0x43e>
 801ceac:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801ceb0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801ceb4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801ceb8:	35e2      	adds	r5, #226	@ 0xe2
 801ceba:	fa01 f305 	lsl.w	r3, r1, r5
 801cebe:	9310      	str	r3, [sp, #64]	@ 0x40
 801cec0:	9113      	str	r1, [sp, #76]	@ 0x4c
 801cec2:	e7ba      	b.n	801ce3a <_strtod_l+0x6e2>
 801cec4:	2300      	movs	r3, #0
 801cec6:	9310      	str	r3, [sp, #64]	@ 0x40
 801cec8:	2301      	movs	r3, #1
 801ceca:	9313      	str	r3, [sp, #76]	@ 0x4c
 801cecc:	e7b5      	b.n	801ce3a <_strtod_l+0x6e2>
 801cece:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801ced0:	9805      	ldr	r0, [sp, #20]
 801ced2:	462a      	mov	r2, r5
 801ced4:	f7ff f9be 	bl	801c254 <__lshift>
 801ced8:	901a      	str	r0, [sp, #104]	@ 0x68
 801ceda:	2800      	cmp	r0, #0
 801cedc:	d1d9      	bne.n	801ce92 <_strtod_l+0x73a>
 801cede:	e65a      	b.n	801cb96 <_strtod_l+0x43e>
 801cee0:	2e00      	cmp	r6, #0
 801cee2:	dd07      	ble.n	801cef4 <_strtod_l+0x79c>
 801cee4:	4649      	mov	r1, r9
 801cee6:	9805      	ldr	r0, [sp, #20]
 801cee8:	4632      	mov	r2, r6
 801ceea:	f7ff f9b3 	bl	801c254 <__lshift>
 801ceee:	4681      	mov	r9, r0
 801cef0:	2800      	cmp	r0, #0
 801cef2:	d0d8      	beq.n	801cea6 <_strtod_l+0x74e>
 801cef4:	2f00      	cmp	r7, #0
 801cef6:	dd08      	ble.n	801cf0a <_strtod_l+0x7b2>
 801cef8:	4641      	mov	r1, r8
 801cefa:	9805      	ldr	r0, [sp, #20]
 801cefc:	463a      	mov	r2, r7
 801cefe:	f7ff f9a9 	bl	801c254 <__lshift>
 801cf02:	4680      	mov	r8, r0
 801cf04:	2800      	cmp	r0, #0
 801cf06:	f43f ae46 	beq.w	801cb96 <_strtod_l+0x43e>
 801cf0a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801cf0c:	9805      	ldr	r0, [sp, #20]
 801cf0e:	464a      	mov	r2, r9
 801cf10:	f7ff fa28 	bl	801c364 <__mdiff>
 801cf14:	4604      	mov	r4, r0
 801cf16:	2800      	cmp	r0, #0
 801cf18:	f43f ae3d 	beq.w	801cb96 <_strtod_l+0x43e>
 801cf1c:	68c3      	ldr	r3, [r0, #12]
 801cf1e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cf20:	2300      	movs	r3, #0
 801cf22:	60c3      	str	r3, [r0, #12]
 801cf24:	4641      	mov	r1, r8
 801cf26:	f7ff fa01 	bl	801c32c <__mcmp>
 801cf2a:	2800      	cmp	r0, #0
 801cf2c:	da46      	bge.n	801cfbc <_strtod_l+0x864>
 801cf2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cf30:	ea53 030a 	orrs.w	r3, r3, sl
 801cf34:	d16c      	bne.n	801d010 <_strtod_l+0x8b8>
 801cf36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801cf3a:	2b00      	cmp	r3, #0
 801cf3c:	d168      	bne.n	801d010 <_strtod_l+0x8b8>
 801cf3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801cf42:	0d1b      	lsrs	r3, r3, #20
 801cf44:	051b      	lsls	r3, r3, #20
 801cf46:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801cf4a:	d961      	bls.n	801d010 <_strtod_l+0x8b8>
 801cf4c:	6963      	ldr	r3, [r4, #20]
 801cf4e:	b913      	cbnz	r3, 801cf56 <_strtod_l+0x7fe>
 801cf50:	6923      	ldr	r3, [r4, #16]
 801cf52:	2b01      	cmp	r3, #1
 801cf54:	dd5c      	ble.n	801d010 <_strtod_l+0x8b8>
 801cf56:	4621      	mov	r1, r4
 801cf58:	2201      	movs	r2, #1
 801cf5a:	9805      	ldr	r0, [sp, #20]
 801cf5c:	f7ff f97a 	bl	801c254 <__lshift>
 801cf60:	4641      	mov	r1, r8
 801cf62:	4604      	mov	r4, r0
 801cf64:	f7ff f9e2 	bl	801c32c <__mcmp>
 801cf68:	2800      	cmp	r0, #0
 801cf6a:	dd51      	ble.n	801d010 <_strtod_l+0x8b8>
 801cf6c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801cf70:	9a08      	ldr	r2, [sp, #32]
 801cf72:	0d1b      	lsrs	r3, r3, #20
 801cf74:	051b      	lsls	r3, r3, #20
 801cf76:	2a00      	cmp	r2, #0
 801cf78:	d06b      	beq.n	801d052 <_strtod_l+0x8fa>
 801cf7a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801cf7e:	d868      	bhi.n	801d052 <_strtod_l+0x8fa>
 801cf80:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801cf84:	f67f ae9d 	bls.w	801ccc2 <_strtod_l+0x56a>
 801cf88:	4b0a      	ldr	r3, [pc, #40]	@ (801cfb4 <_strtod_l+0x85c>)
 801cf8a:	4650      	mov	r0, sl
 801cf8c:	4659      	mov	r1, fp
 801cf8e:	2200      	movs	r2, #0
 801cf90:	f7e3 fb4a 	bl	8000628 <__aeabi_dmul>
 801cf94:	4b08      	ldr	r3, [pc, #32]	@ (801cfb8 <_strtod_l+0x860>)
 801cf96:	400b      	ands	r3, r1
 801cf98:	4682      	mov	sl, r0
 801cf9a:	468b      	mov	fp, r1
 801cf9c:	2b00      	cmp	r3, #0
 801cf9e:	f47f ae05 	bne.w	801cbac <_strtod_l+0x454>
 801cfa2:	9a05      	ldr	r2, [sp, #20]
 801cfa4:	2322      	movs	r3, #34	@ 0x22
 801cfa6:	6013      	str	r3, [r2, #0]
 801cfa8:	e600      	b.n	801cbac <_strtod_l+0x454>
 801cfaa:	bf00      	nop
 801cfac:	08020d98 	.word	0x08020d98
 801cfb0:	fffffc02 	.word	0xfffffc02
 801cfb4:	39500000 	.word	0x39500000
 801cfb8:	7ff00000 	.word	0x7ff00000
 801cfbc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801cfc0:	d165      	bne.n	801d08e <_strtod_l+0x936>
 801cfc2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801cfc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801cfc8:	b35a      	cbz	r2, 801d022 <_strtod_l+0x8ca>
 801cfca:	4a9f      	ldr	r2, [pc, #636]	@ (801d248 <_strtod_l+0xaf0>)
 801cfcc:	4293      	cmp	r3, r2
 801cfce:	d12b      	bne.n	801d028 <_strtod_l+0x8d0>
 801cfd0:	9b08      	ldr	r3, [sp, #32]
 801cfd2:	4651      	mov	r1, sl
 801cfd4:	b303      	cbz	r3, 801d018 <_strtod_l+0x8c0>
 801cfd6:	4b9d      	ldr	r3, [pc, #628]	@ (801d24c <_strtod_l+0xaf4>)
 801cfd8:	465a      	mov	r2, fp
 801cfda:	4013      	ands	r3, r2
 801cfdc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 801cfe0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801cfe4:	d81b      	bhi.n	801d01e <_strtod_l+0x8c6>
 801cfe6:	0d1b      	lsrs	r3, r3, #20
 801cfe8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801cfec:	fa02 f303 	lsl.w	r3, r2, r3
 801cff0:	4299      	cmp	r1, r3
 801cff2:	d119      	bne.n	801d028 <_strtod_l+0x8d0>
 801cff4:	4b96      	ldr	r3, [pc, #600]	@ (801d250 <_strtod_l+0xaf8>)
 801cff6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801cff8:	429a      	cmp	r2, r3
 801cffa:	d102      	bne.n	801d002 <_strtod_l+0x8aa>
 801cffc:	3101      	adds	r1, #1
 801cffe:	f43f adca 	beq.w	801cb96 <_strtod_l+0x43e>
 801d002:	4b92      	ldr	r3, [pc, #584]	@ (801d24c <_strtod_l+0xaf4>)
 801d004:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d006:	401a      	ands	r2, r3
 801d008:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801d00c:	f04f 0a00 	mov.w	sl, #0
 801d010:	9b08      	ldr	r3, [sp, #32]
 801d012:	2b00      	cmp	r3, #0
 801d014:	d1b8      	bne.n	801cf88 <_strtod_l+0x830>
 801d016:	e5c9      	b.n	801cbac <_strtod_l+0x454>
 801d018:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d01c:	e7e8      	b.n	801cff0 <_strtod_l+0x898>
 801d01e:	4613      	mov	r3, r2
 801d020:	e7e6      	b.n	801cff0 <_strtod_l+0x898>
 801d022:	ea53 030a 	orrs.w	r3, r3, sl
 801d026:	d0a1      	beq.n	801cf6c <_strtod_l+0x814>
 801d028:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d02a:	b1db      	cbz	r3, 801d064 <_strtod_l+0x90c>
 801d02c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d02e:	4213      	tst	r3, r2
 801d030:	d0ee      	beq.n	801d010 <_strtod_l+0x8b8>
 801d032:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d034:	9a08      	ldr	r2, [sp, #32]
 801d036:	4650      	mov	r0, sl
 801d038:	4659      	mov	r1, fp
 801d03a:	b1bb      	cbz	r3, 801d06c <_strtod_l+0x914>
 801d03c:	f7ff fb6c 	bl	801c718 <sulp>
 801d040:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d044:	ec53 2b10 	vmov	r2, r3, d0
 801d048:	f7e3 f938 	bl	80002bc <__adddf3>
 801d04c:	4682      	mov	sl, r0
 801d04e:	468b      	mov	fp, r1
 801d050:	e7de      	b.n	801d010 <_strtod_l+0x8b8>
 801d052:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801d056:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801d05a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801d05e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801d062:	e7d5      	b.n	801d010 <_strtod_l+0x8b8>
 801d064:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d066:	ea13 0f0a 	tst.w	r3, sl
 801d06a:	e7e1      	b.n	801d030 <_strtod_l+0x8d8>
 801d06c:	f7ff fb54 	bl	801c718 <sulp>
 801d070:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d074:	ec53 2b10 	vmov	r2, r3, d0
 801d078:	f7e3 f91e 	bl	80002b8 <__aeabi_dsub>
 801d07c:	2200      	movs	r2, #0
 801d07e:	2300      	movs	r3, #0
 801d080:	4682      	mov	sl, r0
 801d082:	468b      	mov	fp, r1
 801d084:	f7e3 fd38 	bl	8000af8 <__aeabi_dcmpeq>
 801d088:	2800      	cmp	r0, #0
 801d08a:	d0c1      	beq.n	801d010 <_strtod_l+0x8b8>
 801d08c:	e619      	b.n	801ccc2 <_strtod_l+0x56a>
 801d08e:	4641      	mov	r1, r8
 801d090:	4620      	mov	r0, r4
 801d092:	f7ff fac3 	bl	801c61c <__ratio>
 801d096:	ec57 6b10 	vmov	r6, r7, d0
 801d09a:	2200      	movs	r2, #0
 801d09c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801d0a0:	4630      	mov	r0, r6
 801d0a2:	4639      	mov	r1, r7
 801d0a4:	f7e3 fd3c 	bl	8000b20 <__aeabi_dcmple>
 801d0a8:	2800      	cmp	r0, #0
 801d0aa:	d06f      	beq.n	801d18c <_strtod_l+0xa34>
 801d0ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d0ae:	2b00      	cmp	r3, #0
 801d0b0:	d17a      	bne.n	801d1a8 <_strtod_l+0xa50>
 801d0b2:	f1ba 0f00 	cmp.w	sl, #0
 801d0b6:	d158      	bne.n	801d16a <_strtod_l+0xa12>
 801d0b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d0ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d0be:	2b00      	cmp	r3, #0
 801d0c0:	d15a      	bne.n	801d178 <_strtod_l+0xa20>
 801d0c2:	4b64      	ldr	r3, [pc, #400]	@ (801d254 <_strtod_l+0xafc>)
 801d0c4:	2200      	movs	r2, #0
 801d0c6:	4630      	mov	r0, r6
 801d0c8:	4639      	mov	r1, r7
 801d0ca:	f7e3 fd1f 	bl	8000b0c <__aeabi_dcmplt>
 801d0ce:	2800      	cmp	r0, #0
 801d0d0:	d159      	bne.n	801d186 <_strtod_l+0xa2e>
 801d0d2:	4630      	mov	r0, r6
 801d0d4:	4639      	mov	r1, r7
 801d0d6:	4b60      	ldr	r3, [pc, #384]	@ (801d258 <_strtod_l+0xb00>)
 801d0d8:	2200      	movs	r2, #0
 801d0da:	f7e3 faa5 	bl	8000628 <__aeabi_dmul>
 801d0de:	4606      	mov	r6, r0
 801d0e0:	460f      	mov	r7, r1
 801d0e2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801d0e6:	9606      	str	r6, [sp, #24]
 801d0e8:	9307      	str	r3, [sp, #28]
 801d0ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d0ee:	4d57      	ldr	r5, [pc, #348]	@ (801d24c <_strtod_l+0xaf4>)
 801d0f0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801d0f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d0f6:	401d      	ands	r5, r3
 801d0f8:	4b58      	ldr	r3, [pc, #352]	@ (801d25c <_strtod_l+0xb04>)
 801d0fa:	429d      	cmp	r5, r3
 801d0fc:	f040 80b2 	bne.w	801d264 <_strtod_l+0xb0c>
 801d100:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d102:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801d106:	ec4b ab10 	vmov	d0, sl, fp
 801d10a:	f7ff f9bf 	bl	801c48c <__ulp>
 801d10e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d112:	ec51 0b10 	vmov	r0, r1, d0
 801d116:	f7e3 fa87 	bl	8000628 <__aeabi_dmul>
 801d11a:	4652      	mov	r2, sl
 801d11c:	465b      	mov	r3, fp
 801d11e:	f7e3 f8cd 	bl	80002bc <__adddf3>
 801d122:	460b      	mov	r3, r1
 801d124:	4949      	ldr	r1, [pc, #292]	@ (801d24c <_strtod_l+0xaf4>)
 801d126:	4a4e      	ldr	r2, [pc, #312]	@ (801d260 <_strtod_l+0xb08>)
 801d128:	4019      	ands	r1, r3
 801d12a:	4291      	cmp	r1, r2
 801d12c:	4682      	mov	sl, r0
 801d12e:	d942      	bls.n	801d1b6 <_strtod_l+0xa5e>
 801d130:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d132:	4b47      	ldr	r3, [pc, #284]	@ (801d250 <_strtod_l+0xaf8>)
 801d134:	429a      	cmp	r2, r3
 801d136:	d103      	bne.n	801d140 <_strtod_l+0x9e8>
 801d138:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d13a:	3301      	adds	r3, #1
 801d13c:	f43f ad2b 	beq.w	801cb96 <_strtod_l+0x43e>
 801d140:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 801d250 <_strtod_l+0xaf8>
 801d144:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801d148:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801d14a:	9805      	ldr	r0, [sp, #20]
 801d14c:	f7fe fe6a 	bl	801be24 <_Bfree>
 801d150:	9805      	ldr	r0, [sp, #20]
 801d152:	4649      	mov	r1, r9
 801d154:	f7fe fe66 	bl	801be24 <_Bfree>
 801d158:	9805      	ldr	r0, [sp, #20]
 801d15a:	4641      	mov	r1, r8
 801d15c:	f7fe fe62 	bl	801be24 <_Bfree>
 801d160:	9805      	ldr	r0, [sp, #20]
 801d162:	4621      	mov	r1, r4
 801d164:	f7fe fe5e 	bl	801be24 <_Bfree>
 801d168:	e618      	b.n	801cd9c <_strtod_l+0x644>
 801d16a:	f1ba 0f01 	cmp.w	sl, #1
 801d16e:	d103      	bne.n	801d178 <_strtod_l+0xa20>
 801d170:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d172:	2b00      	cmp	r3, #0
 801d174:	f43f ada5 	beq.w	801ccc2 <_strtod_l+0x56a>
 801d178:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 801d228 <_strtod_l+0xad0>
 801d17c:	4f35      	ldr	r7, [pc, #212]	@ (801d254 <_strtod_l+0xafc>)
 801d17e:	ed8d 7b06 	vstr	d7, [sp, #24]
 801d182:	2600      	movs	r6, #0
 801d184:	e7b1      	b.n	801d0ea <_strtod_l+0x992>
 801d186:	4f34      	ldr	r7, [pc, #208]	@ (801d258 <_strtod_l+0xb00>)
 801d188:	2600      	movs	r6, #0
 801d18a:	e7aa      	b.n	801d0e2 <_strtod_l+0x98a>
 801d18c:	4b32      	ldr	r3, [pc, #200]	@ (801d258 <_strtod_l+0xb00>)
 801d18e:	4630      	mov	r0, r6
 801d190:	4639      	mov	r1, r7
 801d192:	2200      	movs	r2, #0
 801d194:	f7e3 fa48 	bl	8000628 <__aeabi_dmul>
 801d198:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d19a:	4606      	mov	r6, r0
 801d19c:	460f      	mov	r7, r1
 801d19e:	2b00      	cmp	r3, #0
 801d1a0:	d09f      	beq.n	801d0e2 <_strtod_l+0x98a>
 801d1a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801d1a6:	e7a0      	b.n	801d0ea <_strtod_l+0x992>
 801d1a8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801d230 <_strtod_l+0xad8>
 801d1ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 801d1b0:	ec57 6b17 	vmov	r6, r7, d7
 801d1b4:	e799      	b.n	801d0ea <_strtod_l+0x992>
 801d1b6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801d1ba:	9b08      	ldr	r3, [sp, #32]
 801d1bc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801d1c0:	2b00      	cmp	r3, #0
 801d1c2:	d1c1      	bne.n	801d148 <_strtod_l+0x9f0>
 801d1c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801d1c8:	0d1b      	lsrs	r3, r3, #20
 801d1ca:	051b      	lsls	r3, r3, #20
 801d1cc:	429d      	cmp	r5, r3
 801d1ce:	d1bb      	bne.n	801d148 <_strtod_l+0x9f0>
 801d1d0:	4630      	mov	r0, r6
 801d1d2:	4639      	mov	r1, r7
 801d1d4:	f7e3 fdd8 	bl	8000d88 <__aeabi_d2lz>
 801d1d8:	f7e3 f9f8 	bl	80005cc <__aeabi_l2d>
 801d1dc:	4602      	mov	r2, r0
 801d1de:	460b      	mov	r3, r1
 801d1e0:	4630      	mov	r0, r6
 801d1e2:	4639      	mov	r1, r7
 801d1e4:	f7e3 f868 	bl	80002b8 <__aeabi_dsub>
 801d1e8:	460b      	mov	r3, r1
 801d1ea:	4602      	mov	r2, r0
 801d1ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801d1f0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801d1f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d1f6:	ea46 060a 	orr.w	r6, r6, sl
 801d1fa:	431e      	orrs	r6, r3
 801d1fc:	d06f      	beq.n	801d2de <_strtod_l+0xb86>
 801d1fe:	a30e      	add	r3, pc, #56	@ (adr r3, 801d238 <_strtod_l+0xae0>)
 801d200:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d204:	f7e3 fc82 	bl	8000b0c <__aeabi_dcmplt>
 801d208:	2800      	cmp	r0, #0
 801d20a:	f47f accf 	bne.w	801cbac <_strtod_l+0x454>
 801d20e:	a30c      	add	r3, pc, #48	@ (adr r3, 801d240 <_strtod_l+0xae8>)
 801d210:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d214:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d218:	f7e3 fc96 	bl	8000b48 <__aeabi_dcmpgt>
 801d21c:	2800      	cmp	r0, #0
 801d21e:	d093      	beq.n	801d148 <_strtod_l+0x9f0>
 801d220:	e4c4      	b.n	801cbac <_strtod_l+0x454>
 801d222:	bf00      	nop
 801d224:	f3af 8000 	nop.w
 801d228:	00000000 	.word	0x00000000
 801d22c:	bff00000 	.word	0xbff00000
 801d230:	00000000 	.word	0x00000000
 801d234:	3ff00000 	.word	0x3ff00000
 801d238:	94a03595 	.word	0x94a03595
 801d23c:	3fdfffff 	.word	0x3fdfffff
 801d240:	35afe535 	.word	0x35afe535
 801d244:	3fe00000 	.word	0x3fe00000
 801d248:	000fffff 	.word	0x000fffff
 801d24c:	7ff00000 	.word	0x7ff00000
 801d250:	7fefffff 	.word	0x7fefffff
 801d254:	3ff00000 	.word	0x3ff00000
 801d258:	3fe00000 	.word	0x3fe00000
 801d25c:	7fe00000 	.word	0x7fe00000
 801d260:	7c9fffff 	.word	0x7c9fffff
 801d264:	9b08      	ldr	r3, [sp, #32]
 801d266:	b323      	cbz	r3, 801d2b2 <_strtod_l+0xb5a>
 801d268:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801d26c:	d821      	bhi.n	801d2b2 <_strtod_l+0xb5a>
 801d26e:	a328      	add	r3, pc, #160	@ (adr r3, 801d310 <_strtod_l+0xbb8>)
 801d270:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d274:	4630      	mov	r0, r6
 801d276:	4639      	mov	r1, r7
 801d278:	f7e3 fc52 	bl	8000b20 <__aeabi_dcmple>
 801d27c:	b1a0      	cbz	r0, 801d2a8 <_strtod_l+0xb50>
 801d27e:	4639      	mov	r1, r7
 801d280:	4630      	mov	r0, r6
 801d282:	f7e3 fca9 	bl	8000bd8 <__aeabi_d2uiz>
 801d286:	2801      	cmp	r0, #1
 801d288:	bf38      	it	cc
 801d28a:	2001      	movcc	r0, #1
 801d28c:	f7e3 f952 	bl	8000534 <__aeabi_ui2d>
 801d290:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d292:	4606      	mov	r6, r0
 801d294:	460f      	mov	r7, r1
 801d296:	b9fb      	cbnz	r3, 801d2d8 <_strtod_l+0xb80>
 801d298:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801d29c:	9014      	str	r0, [sp, #80]	@ 0x50
 801d29e:	9315      	str	r3, [sp, #84]	@ 0x54
 801d2a0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801d2a4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801d2a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d2aa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801d2ae:	1b5b      	subs	r3, r3, r5
 801d2b0:	9311      	str	r3, [sp, #68]	@ 0x44
 801d2b2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801d2b6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801d2ba:	f7ff f8e7 	bl	801c48c <__ulp>
 801d2be:	4650      	mov	r0, sl
 801d2c0:	ec53 2b10 	vmov	r2, r3, d0
 801d2c4:	4659      	mov	r1, fp
 801d2c6:	f7e3 f9af 	bl	8000628 <__aeabi_dmul>
 801d2ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801d2ce:	f7e2 fff5 	bl	80002bc <__adddf3>
 801d2d2:	4682      	mov	sl, r0
 801d2d4:	468b      	mov	fp, r1
 801d2d6:	e770      	b.n	801d1ba <_strtod_l+0xa62>
 801d2d8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801d2dc:	e7e0      	b.n	801d2a0 <_strtod_l+0xb48>
 801d2de:	a30e      	add	r3, pc, #56	@ (adr r3, 801d318 <_strtod_l+0xbc0>)
 801d2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2e4:	f7e3 fc12 	bl	8000b0c <__aeabi_dcmplt>
 801d2e8:	e798      	b.n	801d21c <_strtod_l+0xac4>
 801d2ea:	2300      	movs	r3, #0
 801d2ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d2ee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801d2f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d2f2:	6013      	str	r3, [r2, #0]
 801d2f4:	f7ff ba6d 	b.w	801c7d2 <_strtod_l+0x7a>
 801d2f8:	2a65      	cmp	r2, #101	@ 0x65
 801d2fa:	f43f ab66 	beq.w	801c9ca <_strtod_l+0x272>
 801d2fe:	2a45      	cmp	r2, #69	@ 0x45
 801d300:	f43f ab63 	beq.w	801c9ca <_strtod_l+0x272>
 801d304:	2301      	movs	r3, #1
 801d306:	f7ff bb9e 	b.w	801ca46 <_strtod_l+0x2ee>
 801d30a:	bf00      	nop
 801d30c:	f3af 8000 	nop.w
 801d310:	ffc00000 	.word	0xffc00000
 801d314:	41dfffff 	.word	0x41dfffff
 801d318:	94a03595 	.word	0x94a03595
 801d31c:	3fcfffff 	.word	0x3fcfffff

0801d320 <_strtod_r>:
 801d320:	4b01      	ldr	r3, [pc, #4]	@ (801d328 <_strtod_r+0x8>)
 801d322:	f7ff ba19 	b.w	801c758 <_strtod_l>
 801d326:	bf00      	nop
 801d328:	20000118 	.word	0x20000118

0801d32c <_strtol_l.constprop.0>:
 801d32c:	2b24      	cmp	r3, #36	@ 0x24
 801d32e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d332:	4686      	mov	lr, r0
 801d334:	4690      	mov	r8, r2
 801d336:	d801      	bhi.n	801d33c <_strtol_l.constprop.0+0x10>
 801d338:	2b01      	cmp	r3, #1
 801d33a:	d106      	bne.n	801d34a <_strtol_l.constprop.0+0x1e>
 801d33c:	f7fd fe26 	bl	801af8c <__errno>
 801d340:	2316      	movs	r3, #22
 801d342:	6003      	str	r3, [r0, #0]
 801d344:	2000      	movs	r0, #0
 801d346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d34a:	4834      	ldr	r0, [pc, #208]	@ (801d41c <_strtol_l.constprop.0+0xf0>)
 801d34c:	460d      	mov	r5, r1
 801d34e:	462a      	mov	r2, r5
 801d350:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d354:	5d06      	ldrb	r6, [r0, r4]
 801d356:	f016 0608 	ands.w	r6, r6, #8
 801d35a:	d1f8      	bne.n	801d34e <_strtol_l.constprop.0+0x22>
 801d35c:	2c2d      	cmp	r4, #45	@ 0x2d
 801d35e:	d12d      	bne.n	801d3bc <_strtol_l.constprop.0+0x90>
 801d360:	782c      	ldrb	r4, [r5, #0]
 801d362:	2601      	movs	r6, #1
 801d364:	1c95      	adds	r5, r2, #2
 801d366:	f033 0210 	bics.w	r2, r3, #16
 801d36a:	d109      	bne.n	801d380 <_strtol_l.constprop.0+0x54>
 801d36c:	2c30      	cmp	r4, #48	@ 0x30
 801d36e:	d12a      	bne.n	801d3c6 <_strtol_l.constprop.0+0x9a>
 801d370:	782a      	ldrb	r2, [r5, #0]
 801d372:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801d376:	2a58      	cmp	r2, #88	@ 0x58
 801d378:	d125      	bne.n	801d3c6 <_strtol_l.constprop.0+0x9a>
 801d37a:	786c      	ldrb	r4, [r5, #1]
 801d37c:	2310      	movs	r3, #16
 801d37e:	3502      	adds	r5, #2
 801d380:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801d384:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 801d388:	2200      	movs	r2, #0
 801d38a:	fbbc f9f3 	udiv	r9, ip, r3
 801d38e:	4610      	mov	r0, r2
 801d390:	fb03 ca19 	mls	sl, r3, r9, ip
 801d394:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801d398:	2f09      	cmp	r7, #9
 801d39a:	d81b      	bhi.n	801d3d4 <_strtol_l.constprop.0+0xa8>
 801d39c:	463c      	mov	r4, r7
 801d39e:	42a3      	cmp	r3, r4
 801d3a0:	dd27      	ble.n	801d3f2 <_strtol_l.constprop.0+0xc6>
 801d3a2:	1c57      	adds	r7, r2, #1
 801d3a4:	d007      	beq.n	801d3b6 <_strtol_l.constprop.0+0x8a>
 801d3a6:	4581      	cmp	r9, r0
 801d3a8:	d320      	bcc.n	801d3ec <_strtol_l.constprop.0+0xc0>
 801d3aa:	d101      	bne.n	801d3b0 <_strtol_l.constprop.0+0x84>
 801d3ac:	45a2      	cmp	sl, r4
 801d3ae:	db1d      	blt.n	801d3ec <_strtol_l.constprop.0+0xc0>
 801d3b0:	fb00 4003 	mla	r0, r0, r3, r4
 801d3b4:	2201      	movs	r2, #1
 801d3b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d3ba:	e7eb      	b.n	801d394 <_strtol_l.constprop.0+0x68>
 801d3bc:	2c2b      	cmp	r4, #43	@ 0x2b
 801d3be:	bf04      	itt	eq
 801d3c0:	782c      	ldrbeq	r4, [r5, #0]
 801d3c2:	1c95      	addeq	r5, r2, #2
 801d3c4:	e7cf      	b.n	801d366 <_strtol_l.constprop.0+0x3a>
 801d3c6:	2b00      	cmp	r3, #0
 801d3c8:	d1da      	bne.n	801d380 <_strtol_l.constprop.0+0x54>
 801d3ca:	2c30      	cmp	r4, #48	@ 0x30
 801d3cc:	bf0c      	ite	eq
 801d3ce:	2308      	moveq	r3, #8
 801d3d0:	230a      	movne	r3, #10
 801d3d2:	e7d5      	b.n	801d380 <_strtol_l.constprop.0+0x54>
 801d3d4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801d3d8:	2f19      	cmp	r7, #25
 801d3da:	d801      	bhi.n	801d3e0 <_strtol_l.constprop.0+0xb4>
 801d3dc:	3c37      	subs	r4, #55	@ 0x37
 801d3de:	e7de      	b.n	801d39e <_strtol_l.constprop.0+0x72>
 801d3e0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801d3e4:	2f19      	cmp	r7, #25
 801d3e6:	d804      	bhi.n	801d3f2 <_strtol_l.constprop.0+0xc6>
 801d3e8:	3c57      	subs	r4, #87	@ 0x57
 801d3ea:	e7d8      	b.n	801d39e <_strtol_l.constprop.0+0x72>
 801d3ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d3f0:	e7e1      	b.n	801d3b6 <_strtol_l.constprop.0+0x8a>
 801d3f2:	1c53      	adds	r3, r2, #1
 801d3f4:	d108      	bne.n	801d408 <_strtol_l.constprop.0+0xdc>
 801d3f6:	2322      	movs	r3, #34	@ 0x22
 801d3f8:	f8ce 3000 	str.w	r3, [lr]
 801d3fc:	4660      	mov	r0, ip
 801d3fe:	f1b8 0f00 	cmp.w	r8, #0
 801d402:	d0a0      	beq.n	801d346 <_strtol_l.constprop.0+0x1a>
 801d404:	1e69      	subs	r1, r5, #1
 801d406:	e006      	b.n	801d416 <_strtol_l.constprop.0+0xea>
 801d408:	b106      	cbz	r6, 801d40c <_strtol_l.constprop.0+0xe0>
 801d40a:	4240      	negs	r0, r0
 801d40c:	f1b8 0f00 	cmp.w	r8, #0
 801d410:	d099      	beq.n	801d346 <_strtol_l.constprop.0+0x1a>
 801d412:	2a00      	cmp	r2, #0
 801d414:	d1f6      	bne.n	801d404 <_strtol_l.constprop.0+0xd8>
 801d416:	f8c8 1000 	str.w	r1, [r8]
 801d41a:	e794      	b.n	801d346 <_strtol_l.constprop.0+0x1a>
 801d41c:	08020a28 	.word	0x08020a28

0801d420 <_strtol_r>:
 801d420:	f7ff bf84 	b.w	801d32c <_strtol_l.constprop.0>

0801d424 <__ssputs_r>:
 801d424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d428:	688e      	ldr	r6, [r1, #8]
 801d42a:	461f      	mov	r7, r3
 801d42c:	42be      	cmp	r6, r7
 801d42e:	680b      	ldr	r3, [r1, #0]
 801d430:	4682      	mov	sl, r0
 801d432:	460c      	mov	r4, r1
 801d434:	4690      	mov	r8, r2
 801d436:	d82d      	bhi.n	801d494 <__ssputs_r+0x70>
 801d438:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d43c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801d440:	d026      	beq.n	801d490 <__ssputs_r+0x6c>
 801d442:	6965      	ldr	r5, [r4, #20]
 801d444:	6909      	ldr	r1, [r1, #16]
 801d446:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d44a:	eba3 0901 	sub.w	r9, r3, r1
 801d44e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d452:	1c7b      	adds	r3, r7, #1
 801d454:	444b      	add	r3, r9
 801d456:	106d      	asrs	r5, r5, #1
 801d458:	429d      	cmp	r5, r3
 801d45a:	bf38      	it	cc
 801d45c:	461d      	movcc	r5, r3
 801d45e:	0553      	lsls	r3, r2, #21
 801d460:	d527      	bpl.n	801d4b2 <__ssputs_r+0x8e>
 801d462:	4629      	mov	r1, r5
 801d464:	f7fc f9a8 	bl	80197b8 <_malloc_r>
 801d468:	4606      	mov	r6, r0
 801d46a:	b360      	cbz	r0, 801d4c6 <__ssputs_r+0xa2>
 801d46c:	6921      	ldr	r1, [r4, #16]
 801d46e:	464a      	mov	r2, r9
 801d470:	f7fd fdc1 	bl	801aff6 <memcpy>
 801d474:	89a3      	ldrh	r3, [r4, #12]
 801d476:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801d47a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d47e:	81a3      	strh	r3, [r4, #12]
 801d480:	6126      	str	r6, [r4, #16]
 801d482:	6165      	str	r5, [r4, #20]
 801d484:	444e      	add	r6, r9
 801d486:	eba5 0509 	sub.w	r5, r5, r9
 801d48a:	6026      	str	r6, [r4, #0]
 801d48c:	60a5      	str	r5, [r4, #8]
 801d48e:	463e      	mov	r6, r7
 801d490:	42be      	cmp	r6, r7
 801d492:	d900      	bls.n	801d496 <__ssputs_r+0x72>
 801d494:	463e      	mov	r6, r7
 801d496:	6820      	ldr	r0, [r4, #0]
 801d498:	4632      	mov	r2, r6
 801d49a:	4641      	mov	r1, r8
 801d49c:	f7fd fc6e 	bl	801ad7c <memmove>
 801d4a0:	68a3      	ldr	r3, [r4, #8]
 801d4a2:	1b9b      	subs	r3, r3, r6
 801d4a4:	60a3      	str	r3, [r4, #8]
 801d4a6:	6823      	ldr	r3, [r4, #0]
 801d4a8:	4433      	add	r3, r6
 801d4aa:	6023      	str	r3, [r4, #0]
 801d4ac:	2000      	movs	r0, #0
 801d4ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d4b2:	462a      	mov	r2, r5
 801d4b4:	f7fc fa80 	bl	80199b8 <_realloc_r>
 801d4b8:	4606      	mov	r6, r0
 801d4ba:	2800      	cmp	r0, #0
 801d4bc:	d1e0      	bne.n	801d480 <__ssputs_r+0x5c>
 801d4be:	6921      	ldr	r1, [r4, #16]
 801d4c0:	4650      	mov	r0, sl
 801d4c2:	f7fe fc25 	bl	801bd10 <_free_r>
 801d4c6:	230c      	movs	r3, #12
 801d4c8:	f8ca 3000 	str.w	r3, [sl]
 801d4cc:	89a3      	ldrh	r3, [r4, #12]
 801d4ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d4d2:	81a3      	strh	r3, [r4, #12]
 801d4d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d4d8:	e7e9      	b.n	801d4ae <__ssputs_r+0x8a>
	...

0801d4dc <_svfiprintf_r>:
 801d4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4e0:	4698      	mov	r8, r3
 801d4e2:	898b      	ldrh	r3, [r1, #12]
 801d4e4:	061b      	lsls	r3, r3, #24
 801d4e6:	b09d      	sub	sp, #116	@ 0x74
 801d4e8:	4607      	mov	r7, r0
 801d4ea:	460d      	mov	r5, r1
 801d4ec:	4614      	mov	r4, r2
 801d4ee:	d510      	bpl.n	801d512 <_svfiprintf_r+0x36>
 801d4f0:	690b      	ldr	r3, [r1, #16]
 801d4f2:	b973      	cbnz	r3, 801d512 <_svfiprintf_r+0x36>
 801d4f4:	2140      	movs	r1, #64	@ 0x40
 801d4f6:	f7fc f95f 	bl	80197b8 <_malloc_r>
 801d4fa:	6028      	str	r0, [r5, #0]
 801d4fc:	6128      	str	r0, [r5, #16]
 801d4fe:	b930      	cbnz	r0, 801d50e <_svfiprintf_r+0x32>
 801d500:	230c      	movs	r3, #12
 801d502:	603b      	str	r3, [r7, #0]
 801d504:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d508:	b01d      	add	sp, #116	@ 0x74
 801d50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d50e:	2340      	movs	r3, #64	@ 0x40
 801d510:	616b      	str	r3, [r5, #20]
 801d512:	2300      	movs	r3, #0
 801d514:	9309      	str	r3, [sp, #36]	@ 0x24
 801d516:	2320      	movs	r3, #32
 801d518:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d51c:	f8cd 800c 	str.w	r8, [sp, #12]
 801d520:	2330      	movs	r3, #48	@ 0x30
 801d522:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801d6c0 <_svfiprintf_r+0x1e4>
 801d526:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d52a:	f04f 0901 	mov.w	r9, #1
 801d52e:	4623      	mov	r3, r4
 801d530:	469a      	mov	sl, r3
 801d532:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d536:	b10a      	cbz	r2, 801d53c <_svfiprintf_r+0x60>
 801d538:	2a25      	cmp	r2, #37	@ 0x25
 801d53a:	d1f9      	bne.n	801d530 <_svfiprintf_r+0x54>
 801d53c:	ebba 0b04 	subs.w	fp, sl, r4
 801d540:	d00b      	beq.n	801d55a <_svfiprintf_r+0x7e>
 801d542:	465b      	mov	r3, fp
 801d544:	4622      	mov	r2, r4
 801d546:	4629      	mov	r1, r5
 801d548:	4638      	mov	r0, r7
 801d54a:	f7ff ff6b 	bl	801d424 <__ssputs_r>
 801d54e:	3001      	adds	r0, #1
 801d550:	f000 80a7 	beq.w	801d6a2 <_svfiprintf_r+0x1c6>
 801d554:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d556:	445a      	add	r2, fp
 801d558:	9209      	str	r2, [sp, #36]	@ 0x24
 801d55a:	f89a 3000 	ldrb.w	r3, [sl]
 801d55e:	2b00      	cmp	r3, #0
 801d560:	f000 809f 	beq.w	801d6a2 <_svfiprintf_r+0x1c6>
 801d564:	2300      	movs	r3, #0
 801d566:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d56a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d56e:	f10a 0a01 	add.w	sl, sl, #1
 801d572:	9304      	str	r3, [sp, #16]
 801d574:	9307      	str	r3, [sp, #28]
 801d576:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d57a:	931a      	str	r3, [sp, #104]	@ 0x68
 801d57c:	4654      	mov	r4, sl
 801d57e:	2205      	movs	r2, #5
 801d580:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d584:	484e      	ldr	r0, [pc, #312]	@ (801d6c0 <_svfiprintf_r+0x1e4>)
 801d586:	f7e2 fe3b 	bl	8000200 <memchr>
 801d58a:	9a04      	ldr	r2, [sp, #16]
 801d58c:	b9d8      	cbnz	r0, 801d5c6 <_svfiprintf_r+0xea>
 801d58e:	06d0      	lsls	r0, r2, #27
 801d590:	bf44      	itt	mi
 801d592:	2320      	movmi	r3, #32
 801d594:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d598:	0711      	lsls	r1, r2, #28
 801d59a:	bf44      	itt	mi
 801d59c:	232b      	movmi	r3, #43	@ 0x2b
 801d59e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d5a2:	f89a 3000 	ldrb.w	r3, [sl]
 801d5a6:	2b2a      	cmp	r3, #42	@ 0x2a
 801d5a8:	d015      	beq.n	801d5d6 <_svfiprintf_r+0xfa>
 801d5aa:	9a07      	ldr	r2, [sp, #28]
 801d5ac:	4654      	mov	r4, sl
 801d5ae:	2000      	movs	r0, #0
 801d5b0:	f04f 0c0a 	mov.w	ip, #10
 801d5b4:	4621      	mov	r1, r4
 801d5b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d5ba:	3b30      	subs	r3, #48	@ 0x30
 801d5bc:	2b09      	cmp	r3, #9
 801d5be:	d94b      	bls.n	801d658 <_svfiprintf_r+0x17c>
 801d5c0:	b1b0      	cbz	r0, 801d5f0 <_svfiprintf_r+0x114>
 801d5c2:	9207      	str	r2, [sp, #28]
 801d5c4:	e014      	b.n	801d5f0 <_svfiprintf_r+0x114>
 801d5c6:	eba0 0308 	sub.w	r3, r0, r8
 801d5ca:	fa09 f303 	lsl.w	r3, r9, r3
 801d5ce:	4313      	orrs	r3, r2
 801d5d0:	9304      	str	r3, [sp, #16]
 801d5d2:	46a2      	mov	sl, r4
 801d5d4:	e7d2      	b.n	801d57c <_svfiprintf_r+0xa0>
 801d5d6:	9b03      	ldr	r3, [sp, #12]
 801d5d8:	1d19      	adds	r1, r3, #4
 801d5da:	681b      	ldr	r3, [r3, #0]
 801d5dc:	9103      	str	r1, [sp, #12]
 801d5de:	2b00      	cmp	r3, #0
 801d5e0:	bfbb      	ittet	lt
 801d5e2:	425b      	neglt	r3, r3
 801d5e4:	f042 0202 	orrlt.w	r2, r2, #2
 801d5e8:	9307      	strge	r3, [sp, #28]
 801d5ea:	9307      	strlt	r3, [sp, #28]
 801d5ec:	bfb8      	it	lt
 801d5ee:	9204      	strlt	r2, [sp, #16]
 801d5f0:	7823      	ldrb	r3, [r4, #0]
 801d5f2:	2b2e      	cmp	r3, #46	@ 0x2e
 801d5f4:	d10a      	bne.n	801d60c <_svfiprintf_r+0x130>
 801d5f6:	7863      	ldrb	r3, [r4, #1]
 801d5f8:	2b2a      	cmp	r3, #42	@ 0x2a
 801d5fa:	d132      	bne.n	801d662 <_svfiprintf_r+0x186>
 801d5fc:	9b03      	ldr	r3, [sp, #12]
 801d5fe:	1d1a      	adds	r2, r3, #4
 801d600:	681b      	ldr	r3, [r3, #0]
 801d602:	9203      	str	r2, [sp, #12]
 801d604:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d608:	3402      	adds	r4, #2
 801d60a:	9305      	str	r3, [sp, #20]
 801d60c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801d6d0 <_svfiprintf_r+0x1f4>
 801d610:	7821      	ldrb	r1, [r4, #0]
 801d612:	2203      	movs	r2, #3
 801d614:	4650      	mov	r0, sl
 801d616:	f7e2 fdf3 	bl	8000200 <memchr>
 801d61a:	b138      	cbz	r0, 801d62c <_svfiprintf_r+0x150>
 801d61c:	9b04      	ldr	r3, [sp, #16]
 801d61e:	eba0 000a 	sub.w	r0, r0, sl
 801d622:	2240      	movs	r2, #64	@ 0x40
 801d624:	4082      	lsls	r2, r0
 801d626:	4313      	orrs	r3, r2
 801d628:	3401      	adds	r4, #1
 801d62a:	9304      	str	r3, [sp, #16]
 801d62c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d630:	4824      	ldr	r0, [pc, #144]	@ (801d6c4 <_svfiprintf_r+0x1e8>)
 801d632:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d636:	2206      	movs	r2, #6
 801d638:	f7e2 fde2 	bl	8000200 <memchr>
 801d63c:	2800      	cmp	r0, #0
 801d63e:	d036      	beq.n	801d6ae <_svfiprintf_r+0x1d2>
 801d640:	4b21      	ldr	r3, [pc, #132]	@ (801d6c8 <_svfiprintf_r+0x1ec>)
 801d642:	bb1b      	cbnz	r3, 801d68c <_svfiprintf_r+0x1b0>
 801d644:	9b03      	ldr	r3, [sp, #12]
 801d646:	3307      	adds	r3, #7
 801d648:	f023 0307 	bic.w	r3, r3, #7
 801d64c:	3308      	adds	r3, #8
 801d64e:	9303      	str	r3, [sp, #12]
 801d650:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d652:	4433      	add	r3, r6
 801d654:	9309      	str	r3, [sp, #36]	@ 0x24
 801d656:	e76a      	b.n	801d52e <_svfiprintf_r+0x52>
 801d658:	fb0c 3202 	mla	r2, ip, r2, r3
 801d65c:	460c      	mov	r4, r1
 801d65e:	2001      	movs	r0, #1
 801d660:	e7a8      	b.n	801d5b4 <_svfiprintf_r+0xd8>
 801d662:	2300      	movs	r3, #0
 801d664:	3401      	adds	r4, #1
 801d666:	9305      	str	r3, [sp, #20]
 801d668:	4619      	mov	r1, r3
 801d66a:	f04f 0c0a 	mov.w	ip, #10
 801d66e:	4620      	mov	r0, r4
 801d670:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d674:	3a30      	subs	r2, #48	@ 0x30
 801d676:	2a09      	cmp	r2, #9
 801d678:	d903      	bls.n	801d682 <_svfiprintf_r+0x1a6>
 801d67a:	2b00      	cmp	r3, #0
 801d67c:	d0c6      	beq.n	801d60c <_svfiprintf_r+0x130>
 801d67e:	9105      	str	r1, [sp, #20]
 801d680:	e7c4      	b.n	801d60c <_svfiprintf_r+0x130>
 801d682:	fb0c 2101 	mla	r1, ip, r1, r2
 801d686:	4604      	mov	r4, r0
 801d688:	2301      	movs	r3, #1
 801d68a:	e7f0      	b.n	801d66e <_svfiprintf_r+0x192>
 801d68c:	ab03      	add	r3, sp, #12
 801d68e:	9300      	str	r3, [sp, #0]
 801d690:	462a      	mov	r2, r5
 801d692:	4b0e      	ldr	r3, [pc, #56]	@ (801d6cc <_svfiprintf_r+0x1f0>)
 801d694:	a904      	add	r1, sp, #16
 801d696:	4638      	mov	r0, r7
 801d698:	f7fc fad6 	bl	8019c48 <_printf_float>
 801d69c:	1c42      	adds	r2, r0, #1
 801d69e:	4606      	mov	r6, r0
 801d6a0:	d1d6      	bne.n	801d650 <_svfiprintf_r+0x174>
 801d6a2:	89ab      	ldrh	r3, [r5, #12]
 801d6a4:	065b      	lsls	r3, r3, #25
 801d6a6:	f53f af2d 	bmi.w	801d504 <_svfiprintf_r+0x28>
 801d6aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d6ac:	e72c      	b.n	801d508 <_svfiprintf_r+0x2c>
 801d6ae:	ab03      	add	r3, sp, #12
 801d6b0:	9300      	str	r3, [sp, #0]
 801d6b2:	462a      	mov	r2, r5
 801d6b4:	4b05      	ldr	r3, [pc, #20]	@ (801d6cc <_svfiprintf_r+0x1f0>)
 801d6b6:	a904      	add	r1, sp, #16
 801d6b8:	4638      	mov	r0, r7
 801d6ba:	f7fc fd5d 	bl	801a178 <_printf_i>
 801d6be:	e7ed      	b.n	801d69c <_svfiprintf_r+0x1c0>
 801d6c0:	08020dc0 	.word	0x08020dc0
 801d6c4:	08020dca 	.word	0x08020dca
 801d6c8:	08019c49 	.word	0x08019c49
 801d6cc:	0801d425 	.word	0x0801d425
 801d6d0:	08020dc6 	.word	0x08020dc6

0801d6d4 <_sungetc_r>:
 801d6d4:	b538      	push	{r3, r4, r5, lr}
 801d6d6:	1c4b      	adds	r3, r1, #1
 801d6d8:	4614      	mov	r4, r2
 801d6da:	d103      	bne.n	801d6e4 <_sungetc_r+0x10>
 801d6dc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801d6e0:	4628      	mov	r0, r5
 801d6e2:	bd38      	pop	{r3, r4, r5, pc}
 801d6e4:	8993      	ldrh	r3, [r2, #12]
 801d6e6:	f023 0320 	bic.w	r3, r3, #32
 801d6ea:	8193      	strh	r3, [r2, #12]
 801d6ec:	6853      	ldr	r3, [r2, #4]
 801d6ee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801d6f0:	b2cd      	uxtb	r5, r1
 801d6f2:	b18a      	cbz	r2, 801d718 <_sungetc_r+0x44>
 801d6f4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801d6f6:	429a      	cmp	r2, r3
 801d6f8:	dd08      	ble.n	801d70c <_sungetc_r+0x38>
 801d6fa:	6823      	ldr	r3, [r4, #0]
 801d6fc:	1e5a      	subs	r2, r3, #1
 801d6fe:	6022      	str	r2, [r4, #0]
 801d700:	f803 5c01 	strb.w	r5, [r3, #-1]
 801d704:	6863      	ldr	r3, [r4, #4]
 801d706:	3301      	adds	r3, #1
 801d708:	6063      	str	r3, [r4, #4]
 801d70a:	e7e9      	b.n	801d6e0 <_sungetc_r+0xc>
 801d70c:	4621      	mov	r1, r4
 801d70e:	f000 fd96 	bl	801e23e <__submore>
 801d712:	2800      	cmp	r0, #0
 801d714:	d0f1      	beq.n	801d6fa <_sungetc_r+0x26>
 801d716:	e7e1      	b.n	801d6dc <_sungetc_r+0x8>
 801d718:	6921      	ldr	r1, [r4, #16]
 801d71a:	6822      	ldr	r2, [r4, #0]
 801d71c:	b141      	cbz	r1, 801d730 <_sungetc_r+0x5c>
 801d71e:	4291      	cmp	r1, r2
 801d720:	d206      	bcs.n	801d730 <_sungetc_r+0x5c>
 801d722:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801d726:	42a9      	cmp	r1, r5
 801d728:	d102      	bne.n	801d730 <_sungetc_r+0x5c>
 801d72a:	3a01      	subs	r2, #1
 801d72c:	6022      	str	r2, [r4, #0]
 801d72e:	e7ea      	b.n	801d706 <_sungetc_r+0x32>
 801d730:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 801d734:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d738:	6363      	str	r3, [r4, #52]	@ 0x34
 801d73a:	2303      	movs	r3, #3
 801d73c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801d73e:	4623      	mov	r3, r4
 801d740:	f803 5f46 	strb.w	r5, [r3, #70]!
 801d744:	6023      	str	r3, [r4, #0]
 801d746:	2301      	movs	r3, #1
 801d748:	e7de      	b.n	801d708 <_sungetc_r+0x34>

0801d74a <__ssrefill_r>:
 801d74a:	b510      	push	{r4, lr}
 801d74c:	460c      	mov	r4, r1
 801d74e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801d750:	b169      	cbz	r1, 801d76e <__ssrefill_r+0x24>
 801d752:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d756:	4299      	cmp	r1, r3
 801d758:	d001      	beq.n	801d75e <__ssrefill_r+0x14>
 801d75a:	f7fe fad9 	bl	801bd10 <_free_r>
 801d75e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801d760:	6063      	str	r3, [r4, #4]
 801d762:	2000      	movs	r0, #0
 801d764:	6360      	str	r0, [r4, #52]	@ 0x34
 801d766:	b113      	cbz	r3, 801d76e <__ssrefill_r+0x24>
 801d768:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801d76a:	6023      	str	r3, [r4, #0]
 801d76c:	bd10      	pop	{r4, pc}
 801d76e:	6923      	ldr	r3, [r4, #16]
 801d770:	6023      	str	r3, [r4, #0]
 801d772:	2300      	movs	r3, #0
 801d774:	6063      	str	r3, [r4, #4]
 801d776:	89a3      	ldrh	r3, [r4, #12]
 801d778:	f043 0320 	orr.w	r3, r3, #32
 801d77c:	81a3      	strh	r3, [r4, #12]
 801d77e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d782:	e7f3      	b.n	801d76c <__ssrefill_r+0x22>

0801d784 <__ssvfiscanf_r>:
 801d784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d788:	460c      	mov	r4, r1
 801d78a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 801d78e:	2100      	movs	r1, #0
 801d790:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801d794:	49a5      	ldr	r1, [pc, #660]	@ (801da2c <__ssvfiscanf_r+0x2a8>)
 801d796:	91a0      	str	r1, [sp, #640]	@ 0x280
 801d798:	f10d 0804 	add.w	r8, sp, #4
 801d79c:	49a4      	ldr	r1, [pc, #656]	@ (801da30 <__ssvfiscanf_r+0x2ac>)
 801d79e:	4fa5      	ldr	r7, [pc, #660]	@ (801da34 <__ssvfiscanf_r+0x2b0>)
 801d7a0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801d7a4:	4606      	mov	r6, r0
 801d7a6:	91a1      	str	r1, [sp, #644]	@ 0x284
 801d7a8:	9300      	str	r3, [sp, #0]
 801d7aa:	7813      	ldrb	r3, [r2, #0]
 801d7ac:	2b00      	cmp	r3, #0
 801d7ae:	f000 8158 	beq.w	801da62 <__ssvfiscanf_r+0x2de>
 801d7b2:	5cf9      	ldrb	r1, [r7, r3]
 801d7b4:	f011 0108 	ands.w	r1, r1, #8
 801d7b8:	f102 0501 	add.w	r5, r2, #1
 801d7bc:	d019      	beq.n	801d7f2 <__ssvfiscanf_r+0x6e>
 801d7be:	6863      	ldr	r3, [r4, #4]
 801d7c0:	2b00      	cmp	r3, #0
 801d7c2:	dd0f      	ble.n	801d7e4 <__ssvfiscanf_r+0x60>
 801d7c4:	6823      	ldr	r3, [r4, #0]
 801d7c6:	781a      	ldrb	r2, [r3, #0]
 801d7c8:	5cba      	ldrb	r2, [r7, r2]
 801d7ca:	0712      	lsls	r2, r2, #28
 801d7cc:	d401      	bmi.n	801d7d2 <__ssvfiscanf_r+0x4e>
 801d7ce:	462a      	mov	r2, r5
 801d7d0:	e7eb      	b.n	801d7aa <__ssvfiscanf_r+0x26>
 801d7d2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801d7d4:	3201      	adds	r2, #1
 801d7d6:	9245      	str	r2, [sp, #276]	@ 0x114
 801d7d8:	6862      	ldr	r2, [r4, #4]
 801d7da:	3301      	adds	r3, #1
 801d7dc:	3a01      	subs	r2, #1
 801d7de:	6062      	str	r2, [r4, #4]
 801d7e0:	6023      	str	r3, [r4, #0]
 801d7e2:	e7ec      	b.n	801d7be <__ssvfiscanf_r+0x3a>
 801d7e4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801d7e6:	4621      	mov	r1, r4
 801d7e8:	4630      	mov	r0, r6
 801d7ea:	4798      	blx	r3
 801d7ec:	2800      	cmp	r0, #0
 801d7ee:	d0e9      	beq.n	801d7c4 <__ssvfiscanf_r+0x40>
 801d7f0:	e7ed      	b.n	801d7ce <__ssvfiscanf_r+0x4a>
 801d7f2:	2b25      	cmp	r3, #37	@ 0x25
 801d7f4:	d012      	beq.n	801d81c <__ssvfiscanf_r+0x98>
 801d7f6:	4699      	mov	r9, r3
 801d7f8:	6863      	ldr	r3, [r4, #4]
 801d7fa:	2b00      	cmp	r3, #0
 801d7fc:	f340 8093 	ble.w	801d926 <__ssvfiscanf_r+0x1a2>
 801d800:	6822      	ldr	r2, [r4, #0]
 801d802:	7813      	ldrb	r3, [r2, #0]
 801d804:	454b      	cmp	r3, r9
 801d806:	f040 812c 	bne.w	801da62 <__ssvfiscanf_r+0x2de>
 801d80a:	6863      	ldr	r3, [r4, #4]
 801d80c:	3b01      	subs	r3, #1
 801d80e:	6063      	str	r3, [r4, #4]
 801d810:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801d812:	3201      	adds	r2, #1
 801d814:	3301      	adds	r3, #1
 801d816:	6022      	str	r2, [r4, #0]
 801d818:	9345      	str	r3, [sp, #276]	@ 0x114
 801d81a:	e7d8      	b.n	801d7ce <__ssvfiscanf_r+0x4a>
 801d81c:	9141      	str	r1, [sp, #260]	@ 0x104
 801d81e:	9143      	str	r1, [sp, #268]	@ 0x10c
 801d820:	7853      	ldrb	r3, [r2, #1]
 801d822:	2b2a      	cmp	r3, #42	@ 0x2a
 801d824:	bf02      	ittt	eq
 801d826:	2310      	moveq	r3, #16
 801d828:	1c95      	addeq	r5, r2, #2
 801d82a:	9341      	streq	r3, [sp, #260]	@ 0x104
 801d82c:	220a      	movs	r2, #10
 801d82e:	46a9      	mov	r9, r5
 801d830:	f819 1b01 	ldrb.w	r1, [r9], #1
 801d834:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801d838:	2b09      	cmp	r3, #9
 801d83a:	d91e      	bls.n	801d87a <__ssvfiscanf_r+0xf6>
 801d83c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 801da38 <__ssvfiscanf_r+0x2b4>
 801d840:	2203      	movs	r2, #3
 801d842:	4650      	mov	r0, sl
 801d844:	f7e2 fcdc 	bl	8000200 <memchr>
 801d848:	b138      	cbz	r0, 801d85a <__ssvfiscanf_r+0xd6>
 801d84a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801d84c:	eba0 000a 	sub.w	r0, r0, sl
 801d850:	2301      	movs	r3, #1
 801d852:	4083      	lsls	r3, r0
 801d854:	4313      	orrs	r3, r2
 801d856:	9341      	str	r3, [sp, #260]	@ 0x104
 801d858:	464d      	mov	r5, r9
 801d85a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801d85e:	2b78      	cmp	r3, #120	@ 0x78
 801d860:	d806      	bhi.n	801d870 <__ssvfiscanf_r+0xec>
 801d862:	2b57      	cmp	r3, #87	@ 0x57
 801d864:	d810      	bhi.n	801d888 <__ssvfiscanf_r+0x104>
 801d866:	2b25      	cmp	r3, #37	@ 0x25
 801d868:	d0c5      	beq.n	801d7f6 <__ssvfiscanf_r+0x72>
 801d86a:	d857      	bhi.n	801d91c <__ssvfiscanf_r+0x198>
 801d86c:	2b00      	cmp	r3, #0
 801d86e:	d065      	beq.n	801d93c <__ssvfiscanf_r+0x1b8>
 801d870:	2303      	movs	r3, #3
 801d872:	9347      	str	r3, [sp, #284]	@ 0x11c
 801d874:	230a      	movs	r3, #10
 801d876:	9342      	str	r3, [sp, #264]	@ 0x108
 801d878:	e078      	b.n	801d96c <__ssvfiscanf_r+0x1e8>
 801d87a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801d87c:	fb02 1103 	mla	r1, r2, r3, r1
 801d880:	3930      	subs	r1, #48	@ 0x30
 801d882:	9143      	str	r1, [sp, #268]	@ 0x10c
 801d884:	464d      	mov	r5, r9
 801d886:	e7d2      	b.n	801d82e <__ssvfiscanf_r+0xaa>
 801d888:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801d88c:	2a20      	cmp	r2, #32
 801d88e:	d8ef      	bhi.n	801d870 <__ssvfiscanf_r+0xec>
 801d890:	a101      	add	r1, pc, #4	@ (adr r1, 801d898 <__ssvfiscanf_r+0x114>)
 801d892:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801d896:	bf00      	nop
 801d898:	0801d94b 	.word	0x0801d94b
 801d89c:	0801d871 	.word	0x0801d871
 801d8a0:	0801d871 	.word	0x0801d871
 801d8a4:	0801d9a5 	.word	0x0801d9a5
 801d8a8:	0801d871 	.word	0x0801d871
 801d8ac:	0801d871 	.word	0x0801d871
 801d8b0:	0801d871 	.word	0x0801d871
 801d8b4:	0801d871 	.word	0x0801d871
 801d8b8:	0801d871 	.word	0x0801d871
 801d8bc:	0801d871 	.word	0x0801d871
 801d8c0:	0801d871 	.word	0x0801d871
 801d8c4:	0801d9bb 	.word	0x0801d9bb
 801d8c8:	0801d9a1 	.word	0x0801d9a1
 801d8cc:	0801d923 	.word	0x0801d923
 801d8d0:	0801d923 	.word	0x0801d923
 801d8d4:	0801d923 	.word	0x0801d923
 801d8d8:	0801d871 	.word	0x0801d871
 801d8dc:	0801d95d 	.word	0x0801d95d
 801d8e0:	0801d871 	.word	0x0801d871
 801d8e4:	0801d871 	.word	0x0801d871
 801d8e8:	0801d871 	.word	0x0801d871
 801d8ec:	0801d871 	.word	0x0801d871
 801d8f0:	0801d9cb 	.word	0x0801d9cb
 801d8f4:	0801d965 	.word	0x0801d965
 801d8f8:	0801d943 	.word	0x0801d943
 801d8fc:	0801d871 	.word	0x0801d871
 801d900:	0801d871 	.word	0x0801d871
 801d904:	0801d9c7 	.word	0x0801d9c7
 801d908:	0801d871 	.word	0x0801d871
 801d90c:	0801d9a1 	.word	0x0801d9a1
 801d910:	0801d871 	.word	0x0801d871
 801d914:	0801d871 	.word	0x0801d871
 801d918:	0801d94b 	.word	0x0801d94b
 801d91c:	3b45      	subs	r3, #69	@ 0x45
 801d91e:	2b02      	cmp	r3, #2
 801d920:	d8a6      	bhi.n	801d870 <__ssvfiscanf_r+0xec>
 801d922:	2305      	movs	r3, #5
 801d924:	e021      	b.n	801d96a <__ssvfiscanf_r+0x1e6>
 801d926:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801d928:	4621      	mov	r1, r4
 801d92a:	4630      	mov	r0, r6
 801d92c:	4798      	blx	r3
 801d92e:	2800      	cmp	r0, #0
 801d930:	f43f af66 	beq.w	801d800 <__ssvfiscanf_r+0x7c>
 801d934:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801d936:	2800      	cmp	r0, #0
 801d938:	f040 808b 	bne.w	801da52 <__ssvfiscanf_r+0x2ce>
 801d93c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d940:	e08b      	b.n	801da5a <__ssvfiscanf_r+0x2d6>
 801d942:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801d944:	f042 0220 	orr.w	r2, r2, #32
 801d948:	9241      	str	r2, [sp, #260]	@ 0x104
 801d94a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801d94c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801d950:	9241      	str	r2, [sp, #260]	@ 0x104
 801d952:	2210      	movs	r2, #16
 801d954:	2b6e      	cmp	r3, #110	@ 0x6e
 801d956:	9242      	str	r2, [sp, #264]	@ 0x108
 801d958:	d902      	bls.n	801d960 <__ssvfiscanf_r+0x1dc>
 801d95a:	e005      	b.n	801d968 <__ssvfiscanf_r+0x1e4>
 801d95c:	2300      	movs	r3, #0
 801d95e:	9342      	str	r3, [sp, #264]	@ 0x108
 801d960:	2303      	movs	r3, #3
 801d962:	e002      	b.n	801d96a <__ssvfiscanf_r+0x1e6>
 801d964:	2308      	movs	r3, #8
 801d966:	9342      	str	r3, [sp, #264]	@ 0x108
 801d968:	2304      	movs	r3, #4
 801d96a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801d96c:	6863      	ldr	r3, [r4, #4]
 801d96e:	2b00      	cmp	r3, #0
 801d970:	dd39      	ble.n	801d9e6 <__ssvfiscanf_r+0x262>
 801d972:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801d974:	0659      	lsls	r1, r3, #25
 801d976:	d404      	bmi.n	801d982 <__ssvfiscanf_r+0x1fe>
 801d978:	6823      	ldr	r3, [r4, #0]
 801d97a:	781a      	ldrb	r2, [r3, #0]
 801d97c:	5cba      	ldrb	r2, [r7, r2]
 801d97e:	0712      	lsls	r2, r2, #28
 801d980:	d438      	bmi.n	801d9f4 <__ssvfiscanf_r+0x270>
 801d982:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801d984:	2b02      	cmp	r3, #2
 801d986:	dc47      	bgt.n	801da18 <__ssvfiscanf_r+0x294>
 801d988:	466b      	mov	r3, sp
 801d98a:	4622      	mov	r2, r4
 801d98c:	a941      	add	r1, sp, #260	@ 0x104
 801d98e:	4630      	mov	r0, r6
 801d990:	f000 f9ae 	bl	801dcf0 <_scanf_chars>
 801d994:	2801      	cmp	r0, #1
 801d996:	d064      	beq.n	801da62 <__ssvfiscanf_r+0x2de>
 801d998:	2802      	cmp	r0, #2
 801d99a:	f47f af18 	bne.w	801d7ce <__ssvfiscanf_r+0x4a>
 801d99e:	e7c9      	b.n	801d934 <__ssvfiscanf_r+0x1b0>
 801d9a0:	220a      	movs	r2, #10
 801d9a2:	e7d7      	b.n	801d954 <__ssvfiscanf_r+0x1d0>
 801d9a4:	4629      	mov	r1, r5
 801d9a6:	4640      	mov	r0, r8
 801d9a8:	f000 fc10 	bl	801e1cc <__sccl>
 801d9ac:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801d9ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d9b2:	9341      	str	r3, [sp, #260]	@ 0x104
 801d9b4:	4605      	mov	r5, r0
 801d9b6:	2301      	movs	r3, #1
 801d9b8:	e7d7      	b.n	801d96a <__ssvfiscanf_r+0x1e6>
 801d9ba:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801d9bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d9c0:	9341      	str	r3, [sp, #260]	@ 0x104
 801d9c2:	2300      	movs	r3, #0
 801d9c4:	e7d1      	b.n	801d96a <__ssvfiscanf_r+0x1e6>
 801d9c6:	2302      	movs	r3, #2
 801d9c8:	e7cf      	b.n	801d96a <__ssvfiscanf_r+0x1e6>
 801d9ca:	9841      	ldr	r0, [sp, #260]	@ 0x104
 801d9cc:	06c3      	lsls	r3, r0, #27
 801d9ce:	f53f aefe 	bmi.w	801d7ce <__ssvfiscanf_r+0x4a>
 801d9d2:	9b00      	ldr	r3, [sp, #0]
 801d9d4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801d9d6:	1d19      	adds	r1, r3, #4
 801d9d8:	9100      	str	r1, [sp, #0]
 801d9da:	681b      	ldr	r3, [r3, #0]
 801d9dc:	07c0      	lsls	r0, r0, #31
 801d9de:	bf4c      	ite	mi
 801d9e0:	801a      	strhmi	r2, [r3, #0]
 801d9e2:	601a      	strpl	r2, [r3, #0]
 801d9e4:	e6f3      	b.n	801d7ce <__ssvfiscanf_r+0x4a>
 801d9e6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801d9e8:	4621      	mov	r1, r4
 801d9ea:	4630      	mov	r0, r6
 801d9ec:	4798      	blx	r3
 801d9ee:	2800      	cmp	r0, #0
 801d9f0:	d0bf      	beq.n	801d972 <__ssvfiscanf_r+0x1ee>
 801d9f2:	e79f      	b.n	801d934 <__ssvfiscanf_r+0x1b0>
 801d9f4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801d9f6:	3201      	adds	r2, #1
 801d9f8:	9245      	str	r2, [sp, #276]	@ 0x114
 801d9fa:	6862      	ldr	r2, [r4, #4]
 801d9fc:	3a01      	subs	r2, #1
 801d9fe:	2a00      	cmp	r2, #0
 801da00:	6062      	str	r2, [r4, #4]
 801da02:	dd02      	ble.n	801da0a <__ssvfiscanf_r+0x286>
 801da04:	3301      	adds	r3, #1
 801da06:	6023      	str	r3, [r4, #0]
 801da08:	e7b6      	b.n	801d978 <__ssvfiscanf_r+0x1f4>
 801da0a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801da0c:	4621      	mov	r1, r4
 801da0e:	4630      	mov	r0, r6
 801da10:	4798      	blx	r3
 801da12:	2800      	cmp	r0, #0
 801da14:	d0b0      	beq.n	801d978 <__ssvfiscanf_r+0x1f4>
 801da16:	e78d      	b.n	801d934 <__ssvfiscanf_r+0x1b0>
 801da18:	2b04      	cmp	r3, #4
 801da1a:	dc0f      	bgt.n	801da3c <__ssvfiscanf_r+0x2b8>
 801da1c:	466b      	mov	r3, sp
 801da1e:	4622      	mov	r2, r4
 801da20:	a941      	add	r1, sp, #260	@ 0x104
 801da22:	4630      	mov	r0, r6
 801da24:	f000 f9be 	bl	801dda4 <_scanf_i>
 801da28:	e7b4      	b.n	801d994 <__ssvfiscanf_r+0x210>
 801da2a:	bf00      	nop
 801da2c:	0801d6d5 	.word	0x0801d6d5
 801da30:	0801d74b 	.word	0x0801d74b
 801da34:	08020a28 	.word	0x08020a28
 801da38:	08020dc6 	.word	0x08020dc6
 801da3c:	4b0a      	ldr	r3, [pc, #40]	@ (801da68 <__ssvfiscanf_r+0x2e4>)
 801da3e:	2b00      	cmp	r3, #0
 801da40:	f43f aec5 	beq.w	801d7ce <__ssvfiscanf_r+0x4a>
 801da44:	466b      	mov	r3, sp
 801da46:	4622      	mov	r2, r4
 801da48:	a941      	add	r1, sp, #260	@ 0x104
 801da4a:	4630      	mov	r0, r6
 801da4c:	f7fc fcb4 	bl	801a3b8 <_scanf_float>
 801da50:	e7a0      	b.n	801d994 <__ssvfiscanf_r+0x210>
 801da52:	89a3      	ldrh	r3, [r4, #12]
 801da54:	065b      	lsls	r3, r3, #25
 801da56:	f53f af71 	bmi.w	801d93c <__ssvfiscanf_r+0x1b8>
 801da5a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801da5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801da62:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801da64:	e7f9      	b.n	801da5a <__ssvfiscanf_r+0x2d6>
 801da66:	bf00      	nop
 801da68:	0801a3b9 	.word	0x0801a3b9

0801da6c <__sfputc_r>:
 801da6c:	6893      	ldr	r3, [r2, #8]
 801da6e:	3b01      	subs	r3, #1
 801da70:	2b00      	cmp	r3, #0
 801da72:	b410      	push	{r4}
 801da74:	6093      	str	r3, [r2, #8]
 801da76:	da08      	bge.n	801da8a <__sfputc_r+0x1e>
 801da78:	6994      	ldr	r4, [r2, #24]
 801da7a:	42a3      	cmp	r3, r4
 801da7c:	db01      	blt.n	801da82 <__sfputc_r+0x16>
 801da7e:	290a      	cmp	r1, #10
 801da80:	d103      	bne.n	801da8a <__sfputc_r+0x1e>
 801da82:	f85d 4b04 	ldr.w	r4, [sp], #4
 801da86:	f7fd b8d5 	b.w	801ac34 <__swbuf_r>
 801da8a:	6813      	ldr	r3, [r2, #0]
 801da8c:	1c58      	adds	r0, r3, #1
 801da8e:	6010      	str	r0, [r2, #0]
 801da90:	7019      	strb	r1, [r3, #0]
 801da92:	4608      	mov	r0, r1
 801da94:	f85d 4b04 	ldr.w	r4, [sp], #4
 801da98:	4770      	bx	lr

0801da9a <__sfputs_r>:
 801da9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da9c:	4606      	mov	r6, r0
 801da9e:	460f      	mov	r7, r1
 801daa0:	4614      	mov	r4, r2
 801daa2:	18d5      	adds	r5, r2, r3
 801daa4:	42ac      	cmp	r4, r5
 801daa6:	d101      	bne.n	801daac <__sfputs_r+0x12>
 801daa8:	2000      	movs	r0, #0
 801daaa:	e007      	b.n	801dabc <__sfputs_r+0x22>
 801daac:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dab0:	463a      	mov	r2, r7
 801dab2:	4630      	mov	r0, r6
 801dab4:	f7ff ffda 	bl	801da6c <__sfputc_r>
 801dab8:	1c43      	adds	r3, r0, #1
 801daba:	d1f3      	bne.n	801daa4 <__sfputs_r+0xa>
 801dabc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801dac0 <_vfiprintf_r>:
 801dac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dac4:	460d      	mov	r5, r1
 801dac6:	b09d      	sub	sp, #116	@ 0x74
 801dac8:	4614      	mov	r4, r2
 801daca:	4698      	mov	r8, r3
 801dacc:	4606      	mov	r6, r0
 801dace:	b118      	cbz	r0, 801dad8 <_vfiprintf_r+0x18>
 801dad0:	6a03      	ldr	r3, [r0, #32]
 801dad2:	b90b      	cbnz	r3, 801dad8 <_vfiprintf_r+0x18>
 801dad4:	f7fc ff10 	bl	801a8f8 <__sinit>
 801dad8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801dada:	07d9      	lsls	r1, r3, #31
 801dadc:	d405      	bmi.n	801daea <_vfiprintf_r+0x2a>
 801dade:	89ab      	ldrh	r3, [r5, #12]
 801dae0:	059a      	lsls	r2, r3, #22
 801dae2:	d402      	bmi.n	801daea <_vfiprintf_r+0x2a>
 801dae4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801dae6:	f7fd fa7c 	bl	801afe2 <__retarget_lock_acquire_recursive>
 801daea:	89ab      	ldrh	r3, [r5, #12]
 801daec:	071b      	lsls	r3, r3, #28
 801daee:	d501      	bpl.n	801daf4 <_vfiprintf_r+0x34>
 801daf0:	692b      	ldr	r3, [r5, #16]
 801daf2:	b99b      	cbnz	r3, 801db1c <_vfiprintf_r+0x5c>
 801daf4:	4629      	mov	r1, r5
 801daf6:	4630      	mov	r0, r6
 801daf8:	f7fd f8da 	bl	801acb0 <__swsetup_r>
 801dafc:	b170      	cbz	r0, 801db1c <_vfiprintf_r+0x5c>
 801dafe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801db00:	07dc      	lsls	r4, r3, #31
 801db02:	d504      	bpl.n	801db0e <_vfiprintf_r+0x4e>
 801db04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801db08:	b01d      	add	sp, #116	@ 0x74
 801db0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db0e:	89ab      	ldrh	r3, [r5, #12]
 801db10:	0598      	lsls	r0, r3, #22
 801db12:	d4f7      	bmi.n	801db04 <_vfiprintf_r+0x44>
 801db14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801db16:	f7fd fa65 	bl	801afe4 <__retarget_lock_release_recursive>
 801db1a:	e7f3      	b.n	801db04 <_vfiprintf_r+0x44>
 801db1c:	2300      	movs	r3, #0
 801db1e:	9309      	str	r3, [sp, #36]	@ 0x24
 801db20:	2320      	movs	r3, #32
 801db22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801db26:	f8cd 800c 	str.w	r8, [sp, #12]
 801db2a:	2330      	movs	r3, #48	@ 0x30
 801db2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801dcdc <_vfiprintf_r+0x21c>
 801db30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801db34:	f04f 0901 	mov.w	r9, #1
 801db38:	4623      	mov	r3, r4
 801db3a:	469a      	mov	sl, r3
 801db3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801db40:	b10a      	cbz	r2, 801db46 <_vfiprintf_r+0x86>
 801db42:	2a25      	cmp	r2, #37	@ 0x25
 801db44:	d1f9      	bne.n	801db3a <_vfiprintf_r+0x7a>
 801db46:	ebba 0b04 	subs.w	fp, sl, r4
 801db4a:	d00b      	beq.n	801db64 <_vfiprintf_r+0xa4>
 801db4c:	465b      	mov	r3, fp
 801db4e:	4622      	mov	r2, r4
 801db50:	4629      	mov	r1, r5
 801db52:	4630      	mov	r0, r6
 801db54:	f7ff ffa1 	bl	801da9a <__sfputs_r>
 801db58:	3001      	adds	r0, #1
 801db5a:	f000 80a7 	beq.w	801dcac <_vfiprintf_r+0x1ec>
 801db5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801db60:	445a      	add	r2, fp
 801db62:	9209      	str	r2, [sp, #36]	@ 0x24
 801db64:	f89a 3000 	ldrb.w	r3, [sl]
 801db68:	2b00      	cmp	r3, #0
 801db6a:	f000 809f 	beq.w	801dcac <_vfiprintf_r+0x1ec>
 801db6e:	2300      	movs	r3, #0
 801db70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801db74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801db78:	f10a 0a01 	add.w	sl, sl, #1
 801db7c:	9304      	str	r3, [sp, #16]
 801db7e:	9307      	str	r3, [sp, #28]
 801db80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801db84:	931a      	str	r3, [sp, #104]	@ 0x68
 801db86:	4654      	mov	r4, sl
 801db88:	2205      	movs	r2, #5
 801db8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801db8e:	4853      	ldr	r0, [pc, #332]	@ (801dcdc <_vfiprintf_r+0x21c>)
 801db90:	f7e2 fb36 	bl	8000200 <memchr>
 801db94:	9a04      	ldr	r2, [sp, #16]
 801db96:	b9d8      	cbnz	r0, 801dbd0 <_vfiprintf_r+0x110>
 801db98:	06d1      	lsls	r1, r2, #27
 801db9a:	bf44      	itt	mi
 801db9c:	2320      	movmi	r3, #32
 801db9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801dba2:	0713      	lsls	r3, r2, #28
 801dba4:	bf44      	itt	mi
 801dba6:	232b      	movmi	r3, #43	@ 0x2b
 801dba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801dbac:	f89a 3000 	ldrb.w	r3, [sl]
 801dbb0:	2b2a      	cmp	r3, #42	@ 0x2a
 801dbb2:	d015      	beq.n	801dbe0 <_vfiprintf_r+0x120>
 801dbb4:	9a07      	ldr	r2, [sp, #28]
 801dbb6:	4654      	mov	r4, sl
 801dbb8:	2000      	movs	r0, #0
 801dbba:	f04f 0c0a 	mov.w	ip, #10
 801dbbe:	4621      	mov	r1, r4
 801dbc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dbc4:	3b30      	subs	r3, #48	@ 0x30
 801dbc6:	2b09      	cmp	r3, #9
 801dbc8:	d94b      	bls.n	801dc62 <_vfiprintf_r+0x1a2>
 801dbca:	b1b0      	cbz	r0, 801dbfa <_vfiprintf_r+0x13a>
 801dbcc:	9207      	str	r2, [sp, #28]
 801dbce:	e014      	b.n	801dbfa <_vfiprintf_r+0x13a>
 801dbd0:	eba0 0308 	sub.w	r3, r0, r8
 801dbd4:	fa09 f303 	lsl.w	r3, r9, r3
 801dbd8:	4313      	orrs	r3, r2
 801dbda:	9304      	str	r3, [sp, #16]
 801dbdc:	46a2      	mov	sl, r4
 801dbde:	e7d2      	b.n	801db86 <_vfiprintf_r+0xc6>
 801dbe0:	9b03      	ldr	r3, [sp, #12]
 801dbe2:	1d19      	adds	r1, r3, #4
 801dbe4:	681b      	ldr	r3, [r3, #0]
 801dbe6:	9103      	str	r1, [sp, #12]
 801dbe8:	2b00      	cmp	r3, #0
 801dbea:	bfbb      	ittet	lt
 801dbec:	425b      	neglt	r3, r3
 801dbee:	f042 0202 	orrlt.w	r2, r2, #2
 801dbf2:	9307      	strge	r3, [sp, #28]
 801dbf4:	9307      	strlt	r3, [sp, #28]
 801dbf6:	bfb8      	it	lt
 801dbf8:	9204      	strlt	r2, [sp, #16]
 801dbfa:	7823      	ldrb	r3, [r4, #0]
 801dbfc:	2b2e      	cmp	r3, #46	@ 0x2e
 801dbfe:	d10a      	bne.n	801dc16 <_vfiprintf_r+0x156>
 801dc00:	7863      	ldrb	r3, [r4, #1]
 801dc02:	2b2a      	cmp	r3, #42	@ 0x2a
 801dc04:	d132      	bne.n	801dc6c <_vfiprintf_r+0x1ac>
 801dc06:	9b03      	ldr	r3, [sp, #12]
 801dc08:	1d1a      	adds	r2, r3, #4
 801dc0a:	681b      	ldr	r3, [r3, #0]
 801dc0c:	9203      	str	r2, [sp, #12]
 801dc0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801dc12:	3402      	adds	r4, #2
 801dc14:	9305      	str	r3, [sp, #20]
 801dc16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801dcec <_vfiprintf_r+0x22c>
 801dc1a:	7821      	ldrb	r1, [r4, #0]
 801dc1c:	2203      	movs	r2, #3
 801dc1e:	4650      	mov	r0, sl
 801dc20:	f7e2 faee 	bl	8000200 <memchr>
 801dc24:	b138      	cbz	r0, 801dc36 <_vfiprintf_r+0x176>
 801dc26:	9b04      	ldr	r3, [sp, #16]
 801dc28:	eba0 000a 	sub.w	r0, r0, sl
 801dc2c:	2240      	movs	r2, #64	@ 0x40
 801dc2e:	4082      	lsls	r2, r0
 801dc30:	4313      	orrs	r3, r2
 801dc32:	3401      	adds	r4, #1
 801dc34:	9304      	str	r3, [sp, #16]
 801dc36:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dc3a:	4829      	ldr	r0, [pc, #164]	@ (801dce0 <_vfiprintf_r+0x220>)
 801dc3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801dc40:	2206      	movs	r2, #6
 801dc42:	f7e2 fadd 	bl	8000200 <memchr>
 801dc46:	2800      	cmp	r0, #0
 801dc48:	d03f      	beq.n	801dcca <_vfiprintf_r+0x20a>
 801dc4a:	4b26      	ldr	r3, [pc, #152]	@ (801dce4 <_vfiprintf_r+0x224>)
 801dc4c:	bb1b      	cbnz	r3, 801dc96 <_vfiprintf_r+0x1d6>
 801dc4e:	9b03      	ldr	r3, [sp, #12]
 801dc50:	3307      	adds	r3, #7
 801dc52:	f023 0307 	bic.w	r3, r3, #7
 801dc56:	3308      	adds	r3, #8
 801dc58:	9303      	str	r3, [sp, #12]
 801dc5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dc5c:	443b      	add	r3, r7
 801dc5e:	9309      	str	r3, [sp, #36]	@ 0x24
 801dc60:	e76a      	b.n	801db38 <_vfiprintf_r+0x78>
 801dc62:	fb0c 3202 	mla	r2, ip, r2, r3
 801dc66:	460c      	mov	r4, r1
 801dc68:	2001      	movs	r0, #1
 801dc6a:	e7a8      	b.n	801dbbe <_vfiprintf_r+0xfe>
 801dc6c:	2300      	movs	r3, #0
 801dc6e:	3401      	adds	r4, #1
 801dc70:	9305      	str	r3, [sp, #20]
 801dc72:	4619      	mov	r1, r3
 801dc74:	f04f 0c0a 	mov.w	ip, #10
 801dc78:	4620      	mov	r0, r4
 801dc7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dc7e:	3a30      	subs	r2, #48	@ 0x30
 801dc80:	2a09      	cmp	r2, #9
 801dc82:	d903      	bls.n	801dc8c <_vfiprintf_r+0x1cc>
 801dc84:	2b00      	cmp	r3, #0
 801dc86:	d0c6      	beq.n	801dc16 <_vfiprintf_r+0x156>
 801dc88:	9105      	str	r1, [sp, #20]
 801dc8a:	e7c4      	b.n	801dc16 <_vfiprintf_r+0x156>
 801dc8c:	fb0c 2101 	mla	r1, ip, r1, r2
 801dc90:	4604      	mov	r4, r0
 801dc92:	2301      	movs	r3, #1
 801dc94:	e7f0      	b.n	801dc78 <_vfiprintf_r+0x1b8>
 801dc96:	ab03      	add	r3, sp, #12
 801dc98:	9300      	str	r3, [sp, #0]
 801dc9a:	462a      	mov	r2, r5
 801dc9c:	4b12      	ldr	r3, [pc, #72]	@ (801dce8 <_vfiprintf_r+0x228>)
 801dc9e:	a904      	add	r1, sp, #16
 801dca0:	4630      	mov	r0, r6
 801dca2:	f7fb ffd1 	bl	8019c48 <_printf_float>
 801dca6:	4607      	mov	r7, r0
 801dca8:	1c78      	adds	r0, r7, #1
 801dcaa:	d1d6      	bne.n	801dc5a <_vfiprintf_r+0x19a>
 801dcac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801dcae:	07d9      	lsls	r1, r3, #31
 801dcb0:	d405      	bmi.n	801dcbe <_vfiprintf_r+0x1fe>
 801dcb2:	89ab      	ldrh	r3, [r5, #12]
 801dcb4:	059a      	lsls	r2, r3, #22
 801dcb6:	d402      	bmi.n	801dcbe <_vfiprintf_r+0x1fe>
 801dcb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801dcba:	f7fd f993 	bl	801afe4 <__retarget_lock_release_recursive>
 801dcbe:	89ab      	ldrh	r3, [r5, #12]
 801dcc0:	065b      	lsls	r3, r3, #25
 801dcc2:	f53f af1f 	bmi.w	801db04 <_vfiprintf_r+0x44>
 801dcc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dcc8:	e71e      	b.n	801db08 <_vfiprintf_r+0x48>
 801dcca:	ab03      	add	r3, sp, #12
 801dccc:	9300      	str	r3, [sp, #0]
 801dcce:	462a      	mov	r2, r5
 801dcd0:	4b05      	ldr	r3, [pc, #20]	@ (801dce8 <_vfiprintf_r+0x228>)
 801dcd2:	a904      	add	r1, sp, #16
 801dcd4:	4630      	mov	r0, r6
 801dcd6:	f7fc fa4f 	bl	801a178 <_printf_i>
 801dcda:	e7e4      	b.n	801dca6 <_vfiprintf_r+0x1e6>
 801dcdc:	08020dc0 	.word	0x08020dc0
 801dce0:	08020dca 	.word	0x08020dca
 801dce4:	08019c49 	.word	0x08019c49
 801dce8:	0801da9b 	.word	0x0801da9b
 801dcec:	08020dc6 	.word	0x08020dc6

0801dcf0 <_scanf_chars>:
 801dcf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dcf4:	4615      	mov	r5, r2
 801dcf6:	688a      	ldr	r2, [r1, #8]
 801dcf8:	4680      	mov	r8, r0
 801dcfa:	460c      	mov	r4, r1
 801dcfc:	b932      	cbnz	r2, 801dd0c <_scanf_chars+0x1c>
 801dcfe:	698a      	ldr	r2, [r1, #24]
 801dd00:	2a00      	cmp	r2, #0
 801dd02:	bf14      	ite	ne
 801dd04:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 801dd08:	2201      	moveq	r2, #1
 801dd0a:	608a      	str	r2, [r1, #8]
 801dd0c:	6822      	ldr	r2, [r4, #0]
 801dd0e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801dda0 <_scanf_chars+0xb0>
 801dd12:	06d1      	lsls	r1, r2, #27
 801dd14:	bf5f      	itttt	pl
 801dd16:	681a      	ldrpl	r2, [r3, #0]
 801dd18:	1d11      	addpl	r1, r2, #4
 801dd1a:	6019      	strpl	r1, [r3, #0]
 801dd1c:	6816      	ldrpl	r6, [r2, #0]
 801dd1e:	2700      	movs	r7, #0
 801dd20:	69a0      	ldr	r0, [r4, #24]
 801dd22:	b188      	cbz	r0, 801dd48 <_scanf_chars+0x58>
 801dd24:	2801      	cmp	r0, #1
 801dd26:	d107      	bne.n	801dd38 <_scanf_chars+0x48>
 801dd28:	682b      	ldr	r3, [r5, #0]
 801dd2a:	781a      	ldrb	r2, [r3, #0]
 801dd2c:	6963      	ldr	r3, [r4, #20]
 801dd2e:	5c9b      	ldrb	r3, [r3, r2]
 801dd30:	b953      	cbnz	r3, 801dd48 <_scanf_chars+0x58>
 801dd32:	2f00      	cmp	r7, #0
 801dd34:	d031      	beq.n	801dd9a <_scanf_chars+0xaa>
 801dd36:	e022      	b.n	801dd7e <_scanf_chars+0x8e>
 801dd38:	2802      	cmp	r0, #2
 801dd3a:	d120      	bne.n	801dd7e <_scanf_chars+0x8e>
 801dd3c:	682b      	ldr	r3, [r5, #0]
 801dd3e:	781b      	ldrb	r3, [r3, #0]
 801dd40:	f819 3003 	ldrb.w	r3, [r9, r3]
 801dd44:	071b      	lsls	r3, r3, #28
 801dd46:	d41a      	bmi.n	801dd7e <_scanf_chars+0x8e>
 801dd48:	6823      	ldr	r3, [r4, #0]
 801dd4a:	06da      	lsls	r2, r3, #27
 801dd4c:	bf5e      	ittt	pl
 801dd4e:	682b      	ldrpl	r3, [r5, #0]
 801dd50:	781b      	ldrbpl	r3, [r3, #0]
 801dd52:	f806 3b01 	strbpl.w	r3, [r6], #1
 801dd56:	682a      	ldr	r2, [r5, #0]
 801dd58:	686b      	ldr	r3, [r5, #4]
 801dd5a:	3201      	adds	r2, #1
 801dd5c:	602a      	str	r2, [r5, #0]
 801dd5e:	68a2      	ldr	r2, [r4, #8]
 801dd60:	3b01      	subs	r3, #1
 801dd62:	3a01      	subs	r2, #1
 801dd64:	606b      	str	r3, [r5, #4]
 801dd66:	3701      	adds	r7, #1
 801dd68:	60a2      	str	r2, [r4, #8]
 801dd6a:	b142      	cbz	r2, 801dd7e <_scanf_chars+0x8e>
 801dd6c:	2b00      	cmp	r3, #0
 801dd6e:	dcd7      	bgt.n	801dd20 <_scanf_chars+0x30>
 801dd70:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801dd74:	4629      	mov	r1, r5
 801dd76:	4640      	mov	r0, r8
 801dd78:	4798      	blx	r3
 801dd7a:	2800      	cmp	r0, #0
 801dd7c:	d0d0      	beq.n	801dd20 <_scanf_chars+0x30>
 801dd7e:	6823      	ldr	r3, [r4, #0]
 801dd80:	f013 0310 	ands.w	r3, r3, #16
 801dd84:	d105      	bne.n	801dd92 <_scanf_chars+0xa2>
 801dd86:	68e2      	ldr	r2, [r4, #12]
 801dd88:	3201      	adds	r2, #1
 801dd8a:	60e2      	str	r2, [r4, #12]
 801dd8c:	69a2      	ldr	r2, [r4, #24]
 801dd8e:	b102      	cbz	r2, 801dd92 <_scanf_chars+0xa2>
 801dd90:	7033      	strb	r3, [r6, #0]
 801dd92:	6923      	ldr	r3, [r4, #16]
 801dd94:	443b      	add	r3, r7
 801dd96:	6123      	str	r3, [r4, #16]
 801dd98:	2000      	movs	r0, #0
 801dd9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dd9e:	bf00      	nop
 801dda0:	08020a28 	.word	0x08020a28

0801dda4 <_scanf_i>:
 801dda4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dda8:	4698      	mov	r8, r3
 801ddaa:	4b74      	ldr	r3, [pc, #464]	@ (801df7c <_scanf_i+0x1d8>)
 801ddac:	460c      	mov	r4, r1
 801ddae:	4682      	mov	sl, r0
 801ddb0:	4616      	mov	r6, r2
 801ddb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ddb6:	b087      	sub	sp, #28
 801ddb8:	ab03      	add	r3, sp, #12
 801ddba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801ddbe:	4b70      	ldr	r3, [pc, #448]	@ (801df80 <_scanf_i+0x1dc>)
 801ddc0:	69a1      	ldr	r1, [r4, #24]
 801ddc2:	4a70      	ldr	r2, [pc, #448]	@ (801df84 <_scanf_i+0x1e0>)
 801ddc4:	2903      	cmp	r1, #3
 801ddc6:	bf08      	it	eq
 801ddc8:	461a      	moveq	r2, r3
 801ddca:	68a3      	ldr	r3, [r4, #8]
 801ddcc:	9201      	str	r2, [sp, #4]
 801ddce:	1e5a      	subs	r2, r3, #1
 801ddd0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801ddd4:	bf88      	it	hi
 801ddd6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801ddda:	4627      	mov	r7, r4
 801dddc:	bf82      	ittt	hi
 801ddde:	eb03 0905 	addhi.w	r9, r3, r5
 801dde2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801dde6:	60a3      	strhi	r3, [r4, #8]
 801dde8:	f857 3b1c 	ldr.w	r3, [r7], #28
 801ddec:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801ddf0:	bf98      	it	ls
 801ddf2:	f04f 0900 	movls.w	r9, #0
 801ddf6:	6023      	str	r3, [r4, #0]
 801ddf8:	463d      	mov	r5, r7
 801ddfa:	f04f 0b00 	mov.w	fp, #0
 801ddfe:	6831      	ldr	r1, [r6, #0]
 801de00:	ab03      	add	r3, sp, #12
 801de02:	7809      	ldrb	r1, [r1, #0]
 801de04:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801de08:	2202      	movs	r2, #2
 801de0a:	f7e2 f9f9 	bl	8000200 <memchr>
 801de0e:	b328      	cbz	r0, 801de5c <_scanf_i+0xb8>
 801de10:	f1bb 0f01 	cmp.w	fp, #1
 801de14:	d159      	bne.n	801deca <_scanf_i+0x126>
 801de16:	6862      	ldr	r2, [r4, #4]
 801de18:	b92a      	cbnz	r2, 801de26 <_scanf_i+0x82>
 801de1a:	6822      	ldr	r2, [r4, #0]
 801de1c:	2108      	movs	r1, #8
 801de1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801de22:	6061      	str	r1, [r4, #4]
 801de24:	6022      	str	r2, [r4, #0]
 801de26:	6822      	ldr	r2, [r4, #0]
 801de28:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 801de2c:	6022      	str	r2, [r4, #0]
 801de2e:	68a2      	ldr	r2, [r4, #8]
 801de30:	1e51      	subs	r1, r2, #1
 801de32:	60a1      	str	r1, [r4, #8]
 801de34:	b192      	cbz	r2, 801de5c <_scanf_i+0xb8>
 801de36:	6832      	ldr	r2, [r6, #0]
 801de38:	1c51      	adds	r1, r2, #1
 801de3a:	6031      	str	r1, [r6, #0]
 801de3c:	7812      	ldrb	r2, [r2, #0]
 801de3e:	f805 2b01 	strb.w	r2, [r5], #1
 801de42:	6872      	ldr	r2, [r6, #4]
 801de44:	3a01      	subs	r2, #1
 801de46:	2a00      	cmp	r2, #0
 801de48:	6072      	str	r2, [r6, #4]
 801de4a:	dc07      	bgt.n	801de5c <_scanf_i+0xb8>
 801de4c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801de50:	4631      	mov	r1, r6
 801de52:	4650      	mov	r0, sl
 801de54:	4790      	blx	r2
 801de56:	2800      	cmp	r0, #0
 801de58:	f040 8085 	bne.w	801df66 <_scanf_i+0x1c2>
 801de5c:	f10b 0b01 	add.w	fp, fp, #1
 801de60:	f1bb 0f03 	cmp.w	fp, #3
 801de64:	d1cb      	bne.n	801ddfe <_scanf_i+0x5a>
 801de66:	6863      	ldr	r3, [r4, #4]
 801de68:	b90b      	cbnz	r3, 801de6e <_scanf_i+0xca>
 801de6a:	230a      	movs	r3, #10
 801de6c:	6063      	str	r3, [r4, #4]
 801de6e:	6863      	ldr	r3, [r4, #4]
 801de70:	4945      	ldr	r1, [pc, #276]	@ (801df88 <_scanf_i+0x1e4>)
 801de72:	6960      	ldr	r0, [r4, #20]
 801de74:	1ac9      	subs	r1, r1, r3
 801de76:	f000 f9a9 	bl	801e1cc <__sccl>
 801de7a:	f04f 0b00 	mov.w	fp, #0
 801de7e:	68a3      	ldr	r3, [r4, #8]
 801de80:	6822      	ldr	r2, [r4, #0]
 801de82:	2b00      	cmp	r3, #0
 801de84:	d03d      	beq.n	801df02 <_scanf_i+0x15e>
 801de86:	6831      	ldr	r1, [r6, #0]
 801de88:	6960      	ldr	r0, [r4, #20]
 801de8a:	f891 c000 	ldrb.w	ip, [r1]
 801de8e:	f810 000c 	ldrb.w	r0, [r0, ip]
 801de92:	2800      	cmp	r0, #0
 801de94:	d035      	beq.n	801df02 <_scanf_i+0x15e>
 801de96:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801de9a:	d124      	bne.n	801dee6 <_scanf_i+0x142>
 801de9c:	0510      	lsls	r0, r2, #20
 801de9e:	d522      	bpl.n	801dee6 <_scanf_i+0x142>
 801dea0:	f10b 0b01 	add.w	fp, fp, #1
 801dea4:	f1b9 0f00 	cmp.w	r9, #0
 801dea8:	d003      	beq.n	801deb2 <_scanf_i+0x10e>
 801deaa:	3301      	adds	r3, #1
 801deac:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 801deb0:	60a3      	str	r3, [r4, #8]
 801deb2:	6873      	ldr	r3, [r6, #4]
 801deb4:	3b01      	subs	r3, #1
 801deb6:	2b00      	cmp	r3, #0
 801deb8:	6073      	str	r3, [r6, #4]
 801deba:	dd1b      	ble.n	801def4 <_scanf_i+0x150>
 801debc:	6833      	ldr	r3, [r6, #0]
 801debe:	3301      	adds	r3, #1
 801dec0:	6033      	str	r3, [r6, #0]
 801dec2:	68a3      	ldr	r3, [r4, #8]
 801dec4:	3b01      	subs	r3, #1
 801dec6:	60a3      	str	r3, [r4, #8]
 801dec8:	e7d9      	b.n	801de7e <_scanf_i+0xda>
 801deca:	f1bb 0f02 	cmp.w	fp, #2
 801dece:	d1ae      	bne.n	801de2e <_scanf_i+0x8a>
 801ded0:	6822      	ldr	r2, [r4, #0]
 801ded2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801ded6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801deda:	d1bf      	bne.n	801de5c <_scanf_i+0xb8>
 801dedc:	2110      	movs	r1, #16
 801dede:	6061      	str	r1, [r4, #4]
 801dee0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801dee4:	e7a2      	b.n	801de2c <_scanf_i+0x88>
 801dee6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801deea:	6022      	str	r2, [r4, #0]
 801deec:	780b      	ldrb	r3, [r1, #0]
 801deee:	f805 3b01 	strb.w	r3, [r5], #1
 801def2:	e7de      	b.n	801deb2 <_scanf_i+0x10e>
 801def4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801def8:	4631      	mov	r1, r6
 801defa:	4650      	mov	r0, sl
 801defc:	4798      	blx	r3
 801defe:	2800      	cmp	r0, #0
 801df00:	d0df      	beq.n	801dec2 <_scanf_i+0x11e>
 801df02:	6823      	ldr	r3, [r4, #0]
 801df04:	05d9      	lsls	r1, r3, #23
 801df06:	d50d      	bpl.n	801df24 <_scanf_i+0x180>
 801df08:	42bd      	cmp	r5, r7
 801df0a:	d909      	bls.n	801df20 <_scanf_i+0x17c>
 801df0c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801df10:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801df14:	4632      	mov	r2, r6
 801df16:	4650      	mov	r0, sl
 801df18:	4798      	blx	r3
 801df1a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 801df1e:	464d      	mov	r5, r9
 801df20:	42bd      	cmp	r5, r7
 801df22:	d028      	beq.n	801df76 <_scanf_i+0x1d2>
 801df24:	6822      	ldr	r2, [r4, #0]
 801df26:	f012 0210 	ands.w	r2, r2, #16
 801df2a:	d113      	bne.n	801df54 <_scanf_i+0x1b0>
 801df2c:	702a      	strb	r2, [r5, #0]
 801df2e:	6863      	ldr	r3, [r4, #4]
 801df30:	9e01      	ldr	r6, [sp, #4]
 801df32:	4639      	mov	r1, r7
 801df34:	4650      	mov	r0, sl
 801df36:	47b0      	blx	r6
 801df38:	f8d8 3000 	ldr.w	r3, [r8]
 801df3c:	6821      	ldr	r1, [r4, #0]
 801df3e:	1d1a      	adds	r2, r3, #4
 801df40:	f8c8 2000 	str.w	r2, [r8]
 801df44:	f011 0f20 	tst.w	r1, #32
 801df48:	681b      	ldr	r3, [r3, #0]
 801df4a:	d00f      	beq.n	801df6c <_scanf_i+0x1c8>
 801df4c:	6018      	str	r0, [r3, #0]
 801df4e:	68e3      	ldr	r3, [r4, #12]
 801df50:	3301      	adds	r3, #1
 801df52:	60e3      	str	r3, [r4, #12]
 801df54:	6923      	ldr	r3, [r4, #16]
 801df56:	1bed      	subs	r5, r5, r7
 801df58:	445d      	add	r5, fp
 801df5a:	442b      	add	r3, r5
 801df5c:	6123      	str	r3, [r4, #16]
 801df5e:	2000      	movs	r0, #0
 801df60:	b007      	add	sp, #28
 801df62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df66:	f04f 0b00 	mov.w	fp, #0
 801df6a:	e7ca      	b.n	801df02 <_scanf_i+0x15e>
 801df6c:	07ca      	lsls	r2, r1, #31
 801df6e:	bf4c      	ite	mi
 801df70:	8018      	strhmi	r0, [r3, #0]
 801df72:	6018      	strpl	r0, [r3, #0]
 801df74:	e7eb      	b.n	801df4e <_scanf_i+0x1aa>
 801df76:	2001      	movs	r0, #1
 801df78:	e7f2      	b.n	801df60 <_scanf_i+0x1bc>
 801df7a:	bf00      	nop
 801df7c:	0801fd30 	.word	0x0801fd30
 801df80:	0801d421 	.word	0x0801d421
 801df84:	08019af1 	.word	0x08019af1
 801df88:	08020de1 	.word	0x08020de1

0801df8c <__sflush_r>:
 801df8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801df90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df94:	0716      	lsls	r6, r2, #28
 801df96:	4605      	mov	r5, r0
 801df98:	460c      	mov	r4, r1
 801df9a:	d454      	bmi.n	801e046 <__sflush_r+0xba>
 801df9c:	684b      	ldr	r3, [r1, #4]
 801df9e:	2b00      	cmp	r3, #0
 801dfa0:	dc02      	bgt.n	801dfa8 <__sflush_r+0x1c>
 801dfa2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801dfa4:	2b00      	cmp	r3, #0
 801dfa6:	dd48      	ble.n	801e03a <__sflush_r+0xae>
 801dfa8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801dfaa:	2e00      	cmp	r6, #0
 801dfac:	d045      	beq.n	801e03a <__sflush_r+0xae>
 801dfae:	2300      	movs	r3, #0
 801dfb0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801dfb4:	682f      	ldr	r7, [r5, #0]
 801dfb6:	6a21      	ldr	r1, [r4, #32]
 801dfb8:	602b      	str	r3, [r5, #0]
 801dfba:	d030      	beq.n	801e01e <__sflush_r+0x92>
 801dfbc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801dfbe:	89a3      	ldrh	r3, [r4, #12]
 801dfc0:	0759      	lsls	r1, r3, #29
 801dfc2:	d505      	bpl.n	801dfd0 <__sflush_r+0x44>
 801dfc4:	6863      	ldr	r3, [r4, #4]
 801dfc6:	1ad2      	subs	r2, r2, r3
 801dfc8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801dfca:	b10b      	cbz	r3, 801dfd0 <__sflush_r+0x44>
 801dfcc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801dfce:	1ad2      	subs	r2, r2, r3
 801dfd0:	2300      	movs	r3, #0
 801dfd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801dfd4:	6a21      	ldr	r1, [r4, #32]
 801dfd6:	4628      	mov	r0, r5
 801dfd8:	47b0      	blx	r6
 801dfda:	1c43      	adds	r3, r0, #1
 801dfdc:	89a3      	ldrh	r3, [r4, #12]
 801dfde:	d106      	bne.n	801dfee <__sflush_r+0x62>
 801dfe0:	6829      	ldr	r1, [r5, #0]
 801dfe2:	291d      	cmp	r1, #29
 801dfe4:	d82b      	bhi.n	801e03e <__sflush_r+0xb2>
 801dfe6:	4a2a      	ldr	r2, [pc, #168]	@ (801e090 <__sflush_r+0x104>)
 801dfe8:	410a      	asrs	r2, r1
 801dfea:	07d6      	lsls	r6, r2, #31
 801dfec:	d427      	bmi.n	801e03e <__sflush_r+0xb2>
 801dfee:	2200      	movs	r2, #0
 801dff0:	6062      	str	r2, [r4, #4]
 801dff2:	04d9      	lsls	r1, r3, #19
 801dff4:	6922      	ldr	r2, [r4, #16]
 801dff6:	6022      	str	r2, [r4, #0]
 801dff8:	d504      	bpl.n	801e004 <__sflush_r+0x78>
 801dffa:	1c42      	adds	r2, r0, #1
 801dffc:	d101      	bne.n	801e002 <__sflush_r+0x76>
 801dffe:	682b      	ldr	r3, [r5, #0]
 801e000:	b903      	cbnz	r3, 801e004 <__sflush_r+0x78>
 801e002:	6560      	str	r0, [r4, #84]	@ 0x54
 801e004:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e006:	602f      	str	r7, [r5, #0]
 801e008:	b1b9      	cbz	r1, 801e03a <__sflush_r+0xae>
 801e00a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e00e:	4299      	cmp	r1, r3
 801e010:	d002      	beq.n	801e018 <__sflush_r+0x8c>
 801e012:	4628      	mov	r0, r5
 801e014:	f7fd fe7c 	bl	801bd10 <_free_r>
 801e018:	2300      	movs	r3, #0
 801e01a:	6363      	str	r3, [r4, #52]	@ 0x34
 801e01c:	e00d      	b.n	801e03a <__sflush_r+0xae>
 801e01e:	2301      	movs	r3, #1
 801e020:	4628      	mov	r0, r5
 801e022:	47b0      	blx	r6
 801e024:	4602      	mov	r2, r0
 801e026:	1c50      	adds	r0, r2, #1
 801e028:	d1c9      	bne.n	801dfbe <__sflush_r+0x32>
 801e02a:	682b      	ldr	r3, [r5, #0]
 801e02c:	2b00      	cmp	r3, #0
 801e02e:	d0c6      	beq.n	801dfbe <__sflush_r+0x32>
 801e030:	2b1d      	cmp	r3, #29
 801e032:	d001      	beq.n	801e038 <__sflush_r+0xac>
 801e034:	2b16      	cmp	r3, #22
 801e036:	d11e      	bne.n	801e076 <__sflush_r+0xea>
 801e038:	602f      	str	r7, [r5, #0]
 801e03a:	2000      	movs	r0, #0
 801e03c:	e022      	b.n	801e084 <__sflush_r+0xf8>
 801e03e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e042:	b21b      	sxth	r3, r3
 801e044:	e01b      	b.n	801e07e <__sflush_r+0xf2>
 801e046:	690f      	ldr	r7, [r1, #16]
 801e048:	2f00      	cmp	r7, #0
 801e04a:	d0f6      	beq.n	801e03a <__sflush_r+0xae>
 801e04c:	0793      	lsls	r3, r2, #30
 801e04e:	680e      	ldr	r6, [r1, #0]
 801e050:	bf08      	it	eq
 801e052:	694b      	ldreq	r3, [r1, #20]
 801e054:	600f      	str	r7, [r1, #0]
 801e056:	bf18      	it	ne
 801e058:	2300      	movne	r3, #0
 801e05a:	eba6 0807 	sub.w	r8, r6, r7
 801e05e:	608b      	str	r3, [r1, #8]
 801e060:	f1b8 0f00 	cmp.w	r8, #0
 801e064:	dde9      	ble.n	801e03a <__sflush_r+0xae>
 801e066:	6a21      	ldr	r1, [r4, #32]
 801e068:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801e06a:	4643      	mov	r3, r8
 801e06c:	463a      	mov	r2, r7
 801e06e:	4628      	mov	r0, r5
 801e070:	47b0      	blx	r6
 801e072:	2800      	cmp	r0, #0
 801e074:	dc08      	bgt.n	801e088 <__sflush_r+0xfc>
 801e076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e07a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e07e:	81a3      	strh	r3, [r4, #12]
 801e080:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e088:	4407      	add	r7, r0
 801e08a:	eba8 0800 	sub.w	r8, r8, r0
 801e08e:	e7e7      	b.n	801e060 <__sflush_r+0xd4>
 801e090:	dfbffffe 	.word	0xdfbffffe

0801e094 <_fflush_r>:
 801e094:	b538      	push	{r3, r4, r5, lr}
 801e096:	690b      	ldr	r3, [r1, #16]
 801e098:	4605      	mov	r5, r0
 801e09a:	460c      	mov	r4, r1
 801e09c:	b913      	cbnz	r3, 801e0a4 <_fflush_r+0x10>
 801e09e:	2500      	movs	r5, #0
 801e0a0:	4628      	mov	r0, r5
 801e0a2:	bd38      	pop	{r3, r4, r5, pc}
 801e0a4:	b118      	cbz	r0, 801e0ae <_fflush_r+0x1a>
 801e0a6:	6a03      	ldr	r3, [r0, #32]
 801e0a8:	b90b      	cbnz	r3, 801e0ae <_fflush_r+0x1a>
 801e0aa:	f7fc fc25 	bl	801a8f8 <__sinit>
 801e0ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e0b2:	2b00      	cmp	r3, #0
 801e0b4:	d0f3      	beq.n	801e09e <_fflush_r+0xa>
 801e0b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801e0b8:	07d0      	lsls	r0, r2, #31
 801e0ba:	d404      	bmi.n	801e0c6 <_fflush_r+0x32>
 801e0bc:	0599      	lsls	r1, r3, #22
 801e0be:	d402      	bmi.n	801e0c6 <_fflush_r+0x32>
 801e0c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e0c2:	f7fc ff8e 	bl	801afe2 <__retarget_lock_acquire_recursive>
 801e0c6:	4628      	mov	r0, r5
 801e0c8:	4621      	mov	r1, r4
 801e0ca:	f7ff ff5f 	bl	801df8c <__sflush_r>
 801e0ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e0d0:	07da      	lsls	r2, r3, #31
 801e0d2:	4605      	mov	r5, r0
 801e0d4:	d4e4      	bmi.n	801e0a0 <_fflush_r+0xc>
 801e0d6:	89a3      	ldrh	r3, [r4, #12]
 801e0d8:	059b      	lsls	r3, r3, #22
 801e0da:	d4e1      	bmi.n	801e0a0 <_fflush_r+0xc>
 801e0dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e0de:	f7fc ff81 	bl	801afe4 <__retarget_lock_release_recursive>
 801e0e2:	e7dd      	b.n	801e0a0 <_fflush_r+0xc>

0801e0e4 <fiprintf>:
 801e0e4:	b40e      	push	{r1, r2, r3}
 801e0e6:	b503      	push	{r0, r1, lr}
 801e0e8:	4601      	mov	r1, r0
 801e0ea:	ab03      	add	r3, sp, #12
 801e0ec:	4805      	ldr	r0, [pc, #20]	@ (801e104 <fiprintf+0x20>)
 801e0ee:	f853 2b04 	ldr.w	r2, [r3], #4
 801e0f2:	6800      	ldr	r0, [r0, #0]
 801e0f4:	9301      	str	r3, [sp, #4]
 801e0f6:	f7ff fce3 	bl	801dac0 <_vfiprintf_r>
 801e0fa:	b002      	add	sp, #8
 801e0fc:	f85d eb04 	ldr.w	lr, [sp], #4
 801e100:	b003      	add	sp, #12
 801e102:	4770      	bx	lr
 801e104:	200000c8 	.word	0x200000c8

0801e108 <__swhatbuf_r>:
 801e108:	b570      	push	{r4, r5, r6, lr}
 801e10a:	460c      	mov	r4, r1
 801e10c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e110:	2900      	cmp	r1, #0
 801e112:	b096      	sub	sp, #88	@ 0x58
 801e114:	4615      	mov	r5, r2
 801e116:	461e      	mov	r6, r3
 801e118:	da0d      	bge.n	801e136 <__swhatbuf_r+0x2e>
 801e11a:	89a3      	ldrh	r3, [r4, #12]
 801e11c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801e120:	f04f 0100 	mov.w	r1, #0
 801e124:	bf14      	ite	ne
 801e126:	2340      	movne	r3, #64	@ 0x40
 801e128:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801e12c:	2000      	movs	r0, #0
 801e12e:	6031      	str	r1, [r6, #0]
 801e130:	602b      	str	r3, [r5, #0]
 801e132:	b016      	add	sp, #88	@ 0x58
 801e134:	bd70      	pop	{r4, r5, r6, pc}
 801e136:	466a      	mov	r2, sp
 801e138:	f000 f8bc 	bl	801e2b4 <_fstat_r>
 801e13c:	2800      	cmp	r0, #0
 801e13e:	dbec      	blt.n	801e11a <__swhatbuf_r+0x12>
 801e140:	9901      	ldr	r1, [sp, #4]
 801e142:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801e146:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801e14a:	4259      	negs	r1, r3
 801e14c:	4159      	adcs	r1, r3
 801e14e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801e152:	e7eb      	b.n	801e12c <__swhatbuf_r+0x24>

0801e154 <__smakebuf_r>:
 801e154:	898b      	ldrh	r3, [r1, #12]
 801e156:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e158:	079d      	lsls	r5, r3, #30
 801e15a:	4606      	mov	r6, r0
 801e15c:	460c      	mov	r4, r1
 801e15e:	d507      	bpl.n	801e170 <__smakebuf_r+0x1c>
 801e160:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801e164:	6023      	str	r3, [r4, #0]
 801e166:	6123      	str	r3, [r4, #16]
 801e168:	2301      	movs	r3, #1
 801e16a:	6163      	str	r3, [r4, #20]
 801e16c:	b003      	add	sp, #12
 801e16e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e170:	ab01      	add	r3, sp, #4
 801e172:	466a      	mov	r2, sp
 801e174:	f7ff ffc8 	bl	801e108 <__swhatbuf_r>
 801e178:	9f00      	ldr	r7, [sp, #0]
 801e17a:	4605      	mov	r5, r0
 801e17c:	4639      	mov	r1, r7
 801e17e:	4630      	mov	r0, r6
 801e180:	f7fb fb1a 	bl	80197b8 <_malloc_r>
 801e184:	b948      	cbnz	r0, 801e19a <__smakebuf_r+0x46>
 801e186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e18a:	059a      	lsls	r2, r3, #22
 801e18c:	d4ee      	bmi.n	801e16c <__smakebuf_r+0x18>
 801e18e:	f023 0303 	bic.w	r3, r3, #3
 801e192:	f043 0302 	orr.w	r3, r3, #2
 801e196:	81a3      	strh	r3, [r4, #12]
 801e198:	e7e2      	b.n	801e160 <__smakebuf_r+0xc>
 801e19a:	89a3      	ldrh	r3, [r4, #12]
 801e19c:	6020      	str	r0, [r4, #0]
 801e19e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e1a2:	81a3      	strh	r3, [r4, #12]
 801e1a4:	9b01      	ldr	r3, [sp, #4]
 801e1a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801e1aa:	b15b      	cbz	r3, 801e1c4 <__smakebuf_r+0x70>
 801e1ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e1b0:	4630      	mov	r0, r6
 801e1b2:	f000 f891 	bl	801e2d8 <_isatty_r>
 801e1b6:	b128      	cbz	r0, 801e1c4 <__smakebuf_r+0x70>
 801e1b8:	89a3      	ldrh	r3, [r4, #12]
 801e1ba:	f023 0303 	bic.w	r3, r3, #3
 801e1be:	f043 0301 	orr.w	r3, r3, #1
 801e1c2:	81a3      	strh	r3, [r4, #12]
 801e1c4:	89a3      	ldrh	r3, [r4, #12]
 801e1c6:	431d      	orrs	r5, r3
 801e1c8:	81a5      	strh	r5, [r4, #12]
 801e1ca:	e7cf      	b.n	801e16c <__smakebuf_r+0x18>

0801e1cc <__sccl>:
 801e1cc:	b570      	push	{r4, r5, r6, lr}
 801e1ce:	780b      	ldrb	r3, [r1, #0]
 801e1d0:	4604      	mov	r4, r0
 801e1d2:	2b5e      	cmp	r3, #94	@ 0x5e
 801e1d4:	bf0b      	itete	eq
 801e1d6:	784b      	ldrbeq	r3, [r1, #1]
 801e1d8:	1c4a      	addne	r2, r1, #1
 801e1da:	1c8a      	addeq	r2, r1, #2
 801e1dc:	2100      	movne	r1, #0
 801e1de:	bf08      	it	eq
 801e1e0:	2101      	moveq	r1, #1
 801e1e2:	3801      	subs	r0, #1
 801e1e4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 801e1e8:	f800 1f01 	strb.w	r1, [r0, #1]!
 801e1ec:	42a8      	cmp	r0, r5
 801e1ee:	d1fb      	bne.n	801e1e8 <__sccl+0x1c>
 801e1f0:	b90b      	cbnz	r3, 801e1f6 <__sccl+0x2a>
 801e1f2:	1e50      	subs	r0, r2, #1
 801e1f4:	bd70      	pop	{r4, r5, r6, pc}
 801e1f6:	f081 0101 	eor.w	r1, r1, #1
 801e1fa:	54e1      	strb	r1, [r4, r3]
 801e1fc:	4610      	mov	r0, r2
 801e1fe:	4602      	mov	r2, r0
 801e200:	f812 5b01 	ldrb.w	r5, [r2], #1
 801e204:	2d2d      	cmp	r5, #45	@ 0x2d
 801e206:	d005      	beq.n	801e214 <__sccl+0x48>
 801e208:	2d5d      	cmp	r5, #93	@ 0x5d
 801e20a:	d016      	beq.n	801e23a <__sccl+0x6e>
 801e20c:	2d00      	cmp	r5, #0
 801e20e:	d0f1      	beq.n	801e1f4 <__sccl+0x28>
 801e210:	462b      	mov	r3, r5
 801e212:	e7f2      	b.n	801e1fa <__sccl+0x2e>
 801e214:	7846      	ldrb	r6, [r0, #1]
 801e216:	2e5d      	cmp	r6, #93	@ 0x5d
 801e218:	d0fa      	beq.n	801e210 <__sccl+0x44>
 801e21a:	42b3      	cmp	r3, r6
 801e21c:	dcf8      	bgt.n	801e210 <__sccl+0x44>
 801e21e:	3002      	adds	r0, #2
 801e220:	461a      	mov	r2, r3
 801e222:	3201      	adds	r2, #1
 801e224:	4296      	cmp	r6, r2
 801e226:	54a1      	strb	r1, [r4, r2]
 801e228:	dcfb      	bgt.n	801e222 <__sccl+0x56>
 801e22a:	1af2      	subs	r2, r6, r3
 801e22c:	3a01      	subs	r2, #1
 801e22e:	1c5d      	adds	r5, r3, #1
 801e230:	42b3      	cmp	r3, r6
 801e232:	bfa8      	it	ge
 801e234:	2200      	movge	r2, #0
 801e236:	18ab      	adds	r3, r5, r2
 801e238:	e7e1      	b.n	801e1fe <__sccl+0x32>
 801e23a:	4610      	mov	r0, r2
 801e23c:	e7da      	b.n	801e1f4 <__sccl+0x28>

0801e23e <__submore>:
 801e23e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e242:	460c      	mov	r4, r1
 801e244:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801e246:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e24a:	4299      	cmp	r1, r3
 801e24c:	d11d      	bne.n	801e28a <__submore+0x4c>
 801e24e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801e252:	f7fb fab1 	bl	80197b8 <_malloc_r>
 801e256:	b918      	cbnz	r0, 801e260 <__submore+0x22>
 801e258:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e25c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e260:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801e264:	63a3      	str	r3, [r4, #56]	@ 0x38
 801e266:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801e26a:	6360      	str	r0, [r4, #52]	@ 0x34
 801e26c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801e270:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801e274:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 801e278:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801e27c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801e280:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801e284:	6020      	str	r0, [r4, #0]
 801e286:	2000      	movs	r0, #0
 801e288:	e7e8      	b.n	801e25c <__submore+0x1e>
 801e28a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801e28c:	0077      	lsls	r7, r6, #1
 801e28e:	463a      	mov	r2, r7
 801e290:	f7fb fb92 	bl	80199b8 <_realloc_r>
 801e294:	4605      	mov	r5, r0
 801e296:	2800      	cmp	r0, #0
 801e298:	d0de      	beq.n	801e258 <__submore+0x1a>
 801e29a:	eb00 0806 	add.w	r8, r0, r6
 801e29e:	4601      	mov	r1, r0
 801e2a0:	4632      	mov	r2, r6
 801e2a2:	4640      	mov	r0, r8
 801e2a4:	f7fc fea7 	bl	801aff6 <memcpy>
 801e2a8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 801e2ac:	f8c4 8000 	str.w	r8, [r4]
 801e2b0:	e7e9      	b.n	801e286 <__submore+0x48>
	...

0801e2b4 <_fstat_r>:
 801e2b4:	b538      	push	{r3, r4, r5, lr}
 801e2b6:	4d07      	ldr	r5, [pc, #28]	@ (801e2d4 <_fstat_r+0x20>)
 801e2b8:	2300      	movs	r3, #0
 801e2ba:	4604      	mov	r4, r0
 801e2bc:	4608      	mov	r0, r1
 801e2be:	4611      	mov	r1, r2
 801e2c0:	602b      	str	r3, [r5, #0]
 801e2c2:	f7e7 fac9 	bl	8005858 <_fstat>
 801e2c6:	1c43      	adds	r3, r0, #1
 801e2c8:	d102      	bne.n	801e2d0 <_fstat_r+0x1c>
 801e2ca:	682b      	ldr	r3, [r5, #0]
 801e2cc:	b103      	cbz	r3, 801e2d0 <_fstat_r+0x1c>
 801e2ce:	6023      	str	r3, [r4, #0]
 801e2d0:	bd38      	pop	{r3, r4, r5, pc}
 801e2d2:	bf00      	nop
 801e2d4:	20011dc4 	.word	0x20011dc4

0801e2d8 <_isatty_r>:
 801e2d8:	b538      	push	{r3, r4, r5, lr}
 801e2da:	4d06      	ldr	r5, [pc, #24]	@ (801e2f4 <_isatty_r+0x1c>)
 801e2dc:	2300      	movs	r3, #0
 801e2de:	4604      	mov	r4, r0
 801e2e0:	4608      	mov	r0, r1
 801e2e2:	602b      	str	r3, [r5, #0]
 801e2e4:	f7e7 fac8 	bl	8005878 <_isatty>
 801e2e8:	1c43      	adds	r3, r0, #1
 801e2ea:	d102      	bne.n	801e2f2 <_isatty_r+0x1a>
 801e2ec:	682b      	ldr	r3, [r5, #0]
 801e2ee:	b103      	cbz	r3, 801e2f2 <_isatty_r+0x1a>
 801e2f0:	6023      	str	r3, [r4, #0]
 801e2f2:	bd38      	pop	{r3, r4, r5, pc}
 801e2f4:	20011dc4 	.word	0x20011dc4

0801e2f8 <nan>:
 801e2f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801e300 <nan+0x8>
 801e2fc:	4770      	bx	lr
 801e2fe:	bf00      	nop
 801e300:	00000000 	.word	0x00000000
 801e304:	7ff80000 	.word	0x7ff80000

0801e308 <abort>:
 801e308:	b508      	push	{r3, lr}
 801e30a:	2006      	movs	r0, #6
 801e30c:	f000 fb82 	bl	801ea14 <raise>
 801e310:	2001      	movs	r0, #1
 801e312:	f7e7 fa51 	bl	80057b8 <_exit>

0801e316 <rshift>:
 801e316:	6903      	ldr	r3, [r0, #16]
 801e318:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801e31c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e320:	ea4f 1261 	mov.w	r2, r1, asr #5
 801e324:	f100 0414 	add.w	r4, r0, #20
 801e328:	dd45      	ble.n	801e3b6 <rshift+0xa0>
 801e32a:	f011 011f 	ands.w	r1, r1, #31
 801e32e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801e332:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801e336:	d10c      	bne.n	801e352 <rshift+0x3c>
 801e338:	f100 0710 	add.w	r7, r0, #16
 801e33c:	4629      	mov	r1, r5
 801e33e:	42b1      	cmp	r1, r6
 801e340:	d334      	bcc.n	801e3ac <rshift+0x96>
 801e342:	1a9b      	subs	r3, r3, r2
 801e344:	009b      	lsls	r3, r3, #2
 801e346:	1eea      	subs	r2, r5, #3
 801e348:	4296      	cmp	r6, r2
 801e34a:	bf38      	it	cc
 801e34c:	2300      	movcc	r3, #0
 801e34e:	4423      	add	r3, r4
 801e350:	e015      	b.n	801e37e <rshift+0x68>
 801e352:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801e356:	f1c1 0820 	rsb	r8, r1, #32
 801e35a:	40cf      	lsrs	r7, r1
 801e35c:	f105 0e04 	add.w	lr, r5, #4
 801e360:	46a1      	mov	r9, r4
 801e362:	4576      	cmp	r6, lr
 801e364:	46f4      	mov	ip, lr
 801e366:	d815      	bhi.n	801e394 <rshift+0x7e>
 801e368:	1a9a      	subs	r2, r3, r2
 801e36a:	0092      	lsls	r2, r2, #2
 801e36c:	3a04      	subs	r2, #4
 801e36e:	3501      	adds	r5, #1
 801e370:	42ae      	cmp	r6, r5
 801e372:	bf38      	it	cc
 801e374:	2200      	movcc	r2, #0
 801e376:	18a3      	adds	r3, r4, r2
 801e378:	50a7      	str	r7, [r4, r2]
 801e37a:	b107      	cbz	r7, 801e37e <rshift+0x68>
 801e37c:	3304      	adds	r3, #4
 801e37e:	1b1a      	subs	r2, r3, r4
 801e380:	42a3      	cmp	r3, r4
 801e382:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801e386:	bf08      	it	eq
 801e388:	2300      	moveq	r3, #0
 801e38a:	6102      	str	r2, [r0, #16]
 801e38c:	bf08      	it	eq
 801e38e:	6143      	streq	r3, [r0, #20]
 801e390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e394:	f8dc c000 	ldr.w	ip, [ip]
 801e398:	fa0c fc08 	lsl.w	ip, ip, r8
 801e39c:	ea4c 0707 	orr.w	r7, ip, r7
 801e3a0:	f849 7b04 	str.w	r7, [r9], #4
 801e3a4:	f85e 7b04 	ldr.w	r7, [lr], #4
 801e3a8:	40cf      	lsrs	r7, r1
 801e3aa:	e7da      	b.n	801e362 <rshift+0x4c>
 801e3ac:	f851 cb04 	ldr.w	ip, [r1], #4
 801e3b0:	f847 cf04 	str.w	ip, [r7, #4]!
 801e3b4:	e7c3      	b.n	801e33e <rshift+0x28>
 801e3b6:	4623      	mov	r3, r4
 801e3b8:	e7e1      	b.n	801e37e <rshift+0x68>

0801e3ba <__hexdig_fun>:
 801e3ba:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801e3be:	2b09      	cmp	r3, #9
 801e3c0:	d802      	bhi.n	801e3c8 <__hexdig_fun+0xe>
 801e3c2:	3820      	subs	r0, #32
 801e3c4:	b2c0      	uxtb	r0, r0
 801e3c6:	4770      	bx	lr
 801e3c8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801e3cc:	2b05      	cmp	r3, #5
 801e3ce:	d801      	bhi.n	801e3d4 <__hexdig_fun+0x1a>
 801e3d0:	3847      	subs	r0, #71	@ 0x47
 801e3d2:	e7f7      	b.n	801e3c4 <__hexdig_fun+0xa>
 801e3d4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801e3d8:	2b05      	cmp	r3, #5
 801e3da:	d801      	bhi.n	801e3e0 <__hexdig_fun+0x26>
 801e3dc:	3827      	subs	r0, #39	@ 0x27
 801e3de:	e7f1      	b.n	801e3c4 <__hexdig_fun+0xa>
 801e3e0:	2000      	movs	r0, #0
 801e3e2:	4770      	bx	lr

0801e3e4 <__gethex>:
 801e3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3e8:	b085      	sub	sp, #20
 801e3ea:	468a      	mov	sl, r1
 801e3ec:	9302      	str	r3, [sp, #8]
 801e3ee:	680b      	ldr	r3, [r1, #0]
 801e3f0:	9001      	str	r0, [sp, #4]
 801e3f2:	4690      	mov	r8, r2
 801e3f4:	1c9c      	adds	r4, r3, #2
 801e3f6:	46a1      	mov	r9, r4
 801e3f8:	f814 0b01 	ldrb.w	r0, [r4], #1
 801e3fc:	2830      	cmp	r0, #48	@ 0x30
 801e3fe:	d0fa      	beq.n	801e3f6 <__gethex+0x12>
 801e400:	eba9 0303 	sub.w	r3, r9, r3
 801e404:	f1a3 0b02 	sub.w	fp, r3, #2
 801e408:	f7ff ffd7 	bl	801e3ba <__hexdig_fun>
 801e40c:	4605      	mov	r5, r0
 801e40e:	2800      	cmp	r0, #0
 801e410:	d168      	bne.n	801e4e4 <__gethex+0x100>
 801e412:	49a0      	ldr	r1, [pc, #640]	@ (801e694 <__gethex+0x2b0>)
 801e414:	2201      	movs	r2, #1
 801e416:	4648      	mov	r0, r9
 801e418:	f7fc fcdf 	bl	801adda <strncmp>
 801e41c:	4607      	mov	r7, r0
 801e41e:	2800      	cmp	r0, #0
 801e420:	d167      	bne.n	801e4f2 <__gethex+0x10e>
 801e422:	f899 0001 	ldrb.w	r0, [r9, #1]
 801e426:	4626      	mov	r6, r4
 801e428:	f7ff ffc7 	bl	801e3ba <__hexdig_fun>
 801e42c:	2800      	cmp	r0, #0
 801e42e:	d062      	beq.n	801e4f6 <__gethex+0x112>
 801e430:	4623      	mov	r3, r4
 801e432:	7818      	ldrb	r0, [r3, #0]
 801e434:	2830      	cmp	r0, #48	@ 0x30
 801e436:	4699      	mov	r9, r3
 801e438:	f103 0301 	add.w	r3, r3, #1
 801e43c:	d0f9      	beq.n	801e432 <__gethex+0x4e>
 801e43e:	f7ff ffbc 	bl	801e3ba <__hexdig_fun>
 801e442:	fab0 f580 	clz	r5, r0
 801e446:	096d      	lsrs	r5, r5, #5
 801e448:	f04f 0b01 	mov.w	fp, #1
 801e44c:	464a      	mov	r2, r9
 801e44e:	4616      	mov	r6, r2
 801e450:	3201      	adds	r2, #1
 801e452:	7830      	ldrb	r0, [r6, #0]
 801e454:	f7ff ffb1 	bl	801e3ba <__hexdig_fun>
 801e458:	2800      	cmp	r0, #0
 801e45a:	d1f8      	bne.n	801e44e <__gethex+0x6a>
 801e45c:	498d      	ldr	r1, [pc, #564]	@ (801e694 <__gethex+0x2b0>)
 801e45e:	2201      	movs	r2, #1
 801e460:	4630      	mov	r0, r6
 801e462:	f7fc fcba 	bl	801adda <strncmp>
 801e466:	2800      	cmp	r0, #0
 801e468:	d13f      	bne.n	801e4ea <__gethex+0x106>
 801e46a:	b944      	cbnz	r4, 801e47e <__gethex+0x9a>
 801e46c:	1c74      	adds	r4, r6, #1
 801e46e:	4622      	mov	r2, r4
 801e470:	4616      	mov	r6, r2
 801e472:	3201      	adds	r2, #1
 801e474:	7830      	ldrb	r0, [r6, #0]
 801e476:	f7ff ffa0 	bl	801e3ba <__hexdig_fun>
 801e47a:	2800      	cmp	r0, #0
 801e47c:	d1f8      	bne.n	801e470 <__gethex+0x8c>
 801e47e:	1ba4      	subs	r4, r4, r6
 801e480:	00a7      	lsls	r7, r4, #2
 801e482:	7833      	ldrb	r3, [r6, #0]
 801e484:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801e488:	2b50      	cmp	r3, #80	@ 0x50
 801e48a:	d13e      	bne.n	801e50a <__gethex+0x126>
 801e48c:	7873      	ldrb	r3, [r6, #1]
 801e48e:	2b2b      	cmp	r3, #43	@ 0x2b
 801e490:	d033      	beq.n	801e4fa <__gethex+0x116>
 801e492:	2b2d      	cmp	r3, #45	@ 0x2d
 801e494:	d034      	beq.n	801e500 <__gethex+0x11c>
 801e496:	1c71      	adds	r1, r6, #1
 801e498:	2400      	movs	r4, #0
 801e49a:	7808      	ldrb	r0, [r1, #0]
 801e49c:	f7ff ff8d 	bl	801e3ba <__hexdig_fun>
 801e4a0:	1e43      	subs	r3, r0, #1
 801e4a2:	b2db      	uxtb	r3, r3
 801e4a4:	2b18      	cmp	r3, #24
 801e4a6:	d830      	bhi.n	801e50a <__gethex+0x126>
 801e4a8:	f1a0 0210 	sub.w	r2, r0, #16
 801e4ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801e4b0:	f7ff ff83 	bl	801e3ba <__hexdig_fun>
 801e4b4:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 801e4b8:	fa5f fc8c 	uxtb.w	ip, ip
 801e4bc:	f1bc 0f18 	cmp.w	ip, #24
 801e4c0:	f04f 030a 	mov.w	r3, #10
 801e4c4:	d91e      	bls.n	801e504 <__gethex+0x120>
 801e4c6:	b104      	cbz	r4, 801e4ca <__gethex+0xe6>
 801e4c8:	4252      	negs	r2, r2
 801e4ca:	4417      	add	r7, r2
 801e4cc:	f8ca 1000 	str.w	r1, [sl]
 801e4d0:	b1ed      	cbz	r5, 801e50e <__gethex+0x12a>
 801e4d2:	f1bb 0f00 	cmp.w	fp, #0
 801e4d6:	bf0c      	ite	eq
 801e4d8:	2506      	moveq	r5, #6
 801e4da:	2500      	movne	r5, #0
 801e4dc:	4628      	mov	r0, r5
 801e4de:	b005      	add	sp, #20
 801e4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4e4:	2500      	movs	r5, #0
 801e4e6:	462c      	mov	r4, r5
 801e4e8:	e7b0      	b.n	801e44c <__gethex+0x68>
 801e4ea:	2c00      	cmp	r4, #0
 801e4ec:	d1c7      	bne.n	801e47e <__gethex+0x9a>
 801e4ee:	4627      	mov	r7, r4
 801e4f0:	e7c7      	b.n	801e482 <__gethex+0x9e>
 801e4f2:	464e      	mov	r6, r9
 801e4f4:	462f      	mov	r7, r5
 801e4f6:	2501      	movs	r5, #1
 801e4f8:	e7c3      	b.n	801e482 <__gethex+0x9e>
 801e4fa:	2400      	movs	r4, #0
 801e4fc:	1cb1      	adds	r1, r6, #2
 801e4fe:	e7cc      	b.n	801e49a <__gethex+0xb6>
 801e500:	2401      	movs	r4, #1
 801e502:	e7fb      	b.n	801e4fc <__gethex+0x118>
 801e504:	fb03 0002 	mla	r0, r3, r2, r0
 801e508:	e7ce      	b.n	801e4a8 <__gethex+0xc4>
 801e50a:	4631      	mov	r1, r6
 801e50c:	e7de      	b.n	801e4cc <__gethex+0xe8>
 801e50e:	eba6 0309 	sub.w	r3, r6, r9
 801e512:	3b01      	subs	r3, #1
 801e514:	4629      	mov	r1, r5
 801e516:	2b07      	cmp	r3, #7
 801e518:	dc0a      	bgt.n	801e530 <__gethex+0x14c>
 801e51a:	9801      	ldr	r0, [sp, #4]
 801e51c:	f7fd fc42 	bl	801bda4 <_Balloc>
 801e520:	4604      	mov	r4, r0
 801e522:	b940      	cbnz	r0, 801e536 <__gethex+0x152>
 801e524:	4b5c      	ldr	r3, [pc, #368]	@ (801e698 <__gethex+0x2b4>)
 801e526:	4602      	mov	r2, r0
 801e528:	21e4      	movs	r1, #228	@ 0xe4
 801e52a:	485c      	ldr	r0, [pc, #368]	@ (801e69c <__gethex+0x2b8>)
 801e52c:	f7fc fd78 	bl	801b020 <__assert_func>
 801e530:	3101      	adds	r1, #1
 801e532:	105b      	asrs	r3, r3, #1
 801e534:	e7ef      	b.n	801e516 <__gethex+0x132>
 801e536:	f100 0a14 	add.w	sl, r0, #20
 801e53a:	2300      	movs	r3, #0
 801e53c:	4655      	mov	r5, sl
 801e53e:	469b      	mov	fp, r3
 801e540:	45b1      	cmp	r9, r6
 801e542:	d337      	bcc.n	801e5b4 <__gethex+0x1d0>
 801e544:	f845 bb04 	str.w	fp, [r5], #4
 801e548:	eba5 050a 	sub.w	r5, r5, sl
 801e54c:	10ad      	asrs	r5, r5, #2
 801e54e:	6125      	str	r5, [r4, #16]
 801e550:	4658      	mov	r0, fp
 801e552:	f7fd fd19 	bl	801bf88 <__hi0bits>
 801e556:	016d      	lsls	r5, r5, #5
 801e558:	f8d8 6000 	ldr.w	r6, [r8]
 801e55c:	1a2d      	subs	r5, r5, r0
 801e55e:	42b5      	cmp	r5, r6
 801e560:	dd54      	ble.n	801e60c <__gethex+0x228>
 801e562:	1bad      	subs	r5, r5, r6
 801e564:	4629      	mov	r1, r5
 801e566:	4620      	mov	r0, r4
 801e568:	f7fe f8ad 	bl	801c6c6 <__any_on>
 801e56c:	4681      	mov	r9, r0
 801e56e:	b178      	cbz	r0, 801e590 <__gethex+0x1ac>
 801e570:	1e6b      	subs	r3, r5, #1
 801e572:	1159      	asrs	r1, r3, #5
 801e574:	f003 021f 	and.w	r2, r3, #31
 801e578:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801e57c:	f04f 0901 	mov.w	r9, #1
 801e580:	fa09 f202 	lsl.w	r2, r9, r2
 801e584:	420a      	tst	r2, r1
 801e586:	d003      	beq.n	801e590 <__gethex+0x1ac>
 801e588:	454b      	cmp	r3, r9
 801e58a:	dc36      	bgt.n	801e5fa <__gethex+0x216>
 801e58c:	f04f 0902 	mov.w	r9, #2
 801e590:	4629      	mov	r1, r5
 801e592:	4620      	mov	r0, r4
 801e594:	f7ff febf 	bl	801e316 <rshift>
 801e598:	442f      	add	r7, r5
 801e59a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e59e:	42bb      	cmp	r3, r7
 801e5a0:	da42      	bge.n	801e628 <__gethex+0x244>
 801e5a2:	9801      	ldr	r0, [sp, #4]
 801e5a4:	4621      	mov	r1, r4
 801e5a6:	f7fd fc3d 	bl	801be24 <_Bfree>
 801e5aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e5ac:	2300      	movs	r3, #0
 801e5ae:	6013      	str	r3, [r2, #0]
 801e5b0:	25a3      	movs	r5, #163	@ 0xa3
 801e5b2:	e793      	b.n	801e4dc <__gethex+0xf8>
 801e5b4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801e5b8:	2a2e      	cmp	r2, #46	@ 0x2e
 801e5ba:	d012      	beq.n	801e5e2 <__gethex+0x1fe>
 801e5bc:	2b20      	cmp	r3, #32
 801e5be:	d104      	bne.n	801e5ca <__gethex+0x1e6>
 801e5c0:	f845 bb04 	str.w	fp, [r5], #4
 801e5c4:	f04f 0b00 	mov.w	fp, #0
 801e5c8:	465b      	mov	r3, fp
 801e5ca:	7830      	ldrb	r0, [r6, #0]
 801e5cc:	9303      	str	r3, [sp, #12]
 801e5ce:	f7ff fef4 	bl	801e3ba <__hexdig_fun>
 801e5d2:	9b03      	ldr	r3, [sp, #12]
 801e5d4:	f000 000f 	and.w	r0, r0, #15
 801e5d8:	4098      	lsls	r0, r3
 801e5da:	ea4b 0b00 	orr.w	fp, fp, r0
 801e5de:	3304      	adds	r3, #4
 801e5e0:	e7ae      	b.n	801e540 <__gethex+0x15c>
 801e5e2:	45b1      	cmp	r9, r6
 801e5e4:	d8ea      	bhi.n	801e5bc <__gethex+0x1d8>
 801e5e6:	492b      	ldr	r1, [pc, #172]	@ (801e694 <__gethex+0x2b0>)
 801e5e8:	9303      	str	r3, [sp, #12]
 801e5ea:	2201      	movs	r2, #1
 801e5ec:	4630      	mov	r0, r6
 801e5ee:	f7fc fbf4 	bl	801adda <strncmp>
 801e5f2:	9b03      	ldr	r3, [sp, #12]
 801e5f4:	2800      	cmp	r0, #0
 801e5f6:	d1e1      	bne.n	801e5bc <__gethex+0x1d8>
 801e5f8:	e7a2      	b.n	801e540 <__gethex+0x15c>
 801e5fa:	1ea9      	subs	r1, r5, #2
 801e5fc:	4620      	mov	r0, r4
 801e5fe:	f7fe f862 	bl	801c6c6 <__any_on>
 801e602:	2800      	cmp	r0, #0
 801e604:	d0c2      	beq.n	801e58c <__gethex+0x1a8>
 801e606:	f04f 0903 	mov.w	r9, #3
 801e60a:	e7c1      	b.n	801e590 <__gethex+0x1ac>
 801e60c:	da09      	bge.n	801e622 <__gethex+0x23e>
 801e60e:	1b75      	subs	r5, r6, r5
 801e610:	4621      	mov	r1, r4
 801e612:	9801      	ldr	r0, [sp, #4]
 801e614:	462a      	mov	r2, r5
 801e616:	f7fd fe1d 	bl	801c254 <__lshift>
 801e61a:	1b7f      	subs	r7, r7, r5
 801e61c:	4604      	mov	r4, r0
 801e61e:	f100 0a14 	add.w	sl, r0, #20
 801e622:	f04f 0900 	mov.w	r9, #0
 801e626:	e7b8      	b.n	801e59a <__gethex+0x1b6>
 801e628:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801e62c:	42bd      	cmp	r5, r7
 801e62e:	dd6f      	ble.n	801e710 <__gethex+0x32c>
 801e630:	1bed      	subs	r5, r5, r7
 801e632:	42ae      	cmp	r6, r5
 801e634:	dc34      	bgt.n	801e6a0 <__gethex+0x2bc>
 801e636:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e63a:	2b02      	cmp	r3, #2
 801e63c:	d022      	beq.n	801e684 <__gethex+0x2a0>
 801e63e:	2b03      	cmp	r3, #3
 801e640:	d024      	beq.n	801e68c <__gethex+0x2a8>
 801e642:	2b01      	cmp	r3, #1
 801e644:	d115      	bne.n	801e672 <__gethex+0x28e>
 801e646:	42ae      	cmp	r6, r5
 801e648:	d113      	bne.n	801e672 <__gethex+0x28e>
 801e64a:	2e01      	cmp	r6, #1
 801e64c:	d10b      	bne.n	801e666 <__gethex+0x282>
 801e64e:	9a02      	ldr	r2, [sp, #8]
 801e650:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801e654:	6013      	str	r3, [r2, #0]
 801e656:	2301      	movs	r3, #1
 801e658:	6123      	str	r3, [r4, #16]
 801e65a:	f8ca 3000 	str.w	r3, [sl]
 801e65e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e660:	2562      	movs	r5, #98	@ 0x62
 801e662:	601c      	str	r4, [r3, #0]
 801e664:	e73a      	b.n	801e4dc <__gethex+0xf8>
 801e666:	1e71      	subs	r1, r6, #1
 801e668:	4620      	mov	r0, r4
 801e66a:	f7fe f82c 	bl	801c6c6 <__any_on>
 801e66e:	2800      	cmp	r0, #0
 801e670:	d1ed      	bne.n	801e64e <__gethex+0x26a>
 801e672:	9801      	ldr	r0, [sp, #4]
 801e674:	4621      	mov	r1, r4
 801e676:	f7fd fbd5 	bl	801be24 <_Bfree>
 801e67a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e67c:	2300      	movs	r3, #0
 801e67e:	6013      	str	r3, [r2, #0]
 801e680:	2550      	movs	r5, #80	@ 0x50
 801e682:	e72b      	b.n	801e4dc <__gethex+0xf8>
 801e684:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e686:	2b00      	cmp	r3, #0
 801e688:	d1f3      	bne.n	801e672 <__gethex+0x28e>
 801e68a:	e7e0      	b.n	801e64e <__gethex+0x26a>
 801e68c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e68e:	2b00      	cmp	r3, #0
 801e690:	d1dd      	bne.n	801e64e <__gethex+0x26a>
 801e692:	e7ee      	b.n	801e672 <__gethex+0x28e>
 801e694:	08020d68 	.word	0x08020d68
 801e698:	08020c00 	.word	0x08020c00
 801e69c:	08020df4 	.word	0x08020df4
 801e6a0:	1e6f      	subs	r7, r5, #1
 801e6a2:	f1b9 0f00 	cmp.w	r9, #0
 801e6a6:	d130      	bne.n	801e70a <__gethex+0x326>
 801e6a8:	b127      	cbz	r7, 801e6b4 <__gethex+0x2d0>
 801e6aa:	4639      	mov	r1, r7
 801e6ac:	4620      	mov	r0, r4
 801e6ae:	f7fe f80a 	bl	801c6c6 <__any_on>
 801e6b2:	4681      	mov	r9, r0
 801e6b4:	117a      	asrs	r2, r7, #5
 801e6b6:	2301      	movs	r3, #1
 801e6b8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801e6bc:	f007 071f 	and.w	r7, r7, #31
 801e6c0:	40bb      	lsls	r3, r7
 801e6c2:	4213      	tst	r3, r2
 801e6c4:	4629      	mov	r1, r5
 801e6c6:	4620      	mov	r0, r4
 801e6c8:	bf18      	it	ne
 801e6ca:	f049 0902 	orrne.w	r9, r9, #2
 801e6ce:	f7ff fe22 	bl	801e316 <rshift>
 801e6d2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801e6d6:	1b76      	subs	r6, r6, r5
 801e6d8:	2502      	movs	r5, #2
 801e6da:	f1b9 0f00 	cmp.w	r9, #0
 801e6de:	d047      	beq.n	801e770 <__gethex+0x38c>
 801e6e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e6e4:	2b02      	cmp	r3, #2
 801e6e6:	d015      	beq.n	801e714 <__gethex+0x330>
 801e6e8:	2b03      	cmp	r3, #3
 801e6ea:	d017      	beq.n	801e71c <__gethex+0x338>
 801e6ec:	2b01      	cmp	r3, #1
 801e6ee:	d109      	bne.n	801e704 <__gethex+0x320>
 801e6f0:	f019 0f02 	tst.w	r9, #2
 801e6f4:	d006      	beq.n	801e704 <__gethex+0x320>
 801e6f6:	f8da 3000 	ldr.w	r3, [sl]
 801e6fa:	ea49 0903 	orr.w	r9, r9, r3
 801e6fe:	f019 0f01 	tst.w	r9, #1
 801e702:	d10e      	bne.n	801e722 <__gethex+0x33e>
 801e704:	f045 0510 	orr.w	r5, r5, #16
 801e708:	e032      	b.n	801e770 <__gethex+0x38c>
 801e70a:	f04f 0901 	mov.w	r9, #1
 801e70e:	e7d1      	b.n	801e6b4 <__gethex+0x2d0>
 801e710:	2501      	movs	r5, #1
 801e712:	e7e2      	b.n	801e6da <__gethex+0x2f6>
 801e714:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e716:	f1c3 0301 	rsb	r3, r3, #1
 801e71a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e71c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e71e:	2b00      	cmp	r3, #0
 801e720:	d0f0      	beq.n	801e704 <__gethex+0x320>
 801e722:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801e726:	f104 0314 	add.w	r3, r4, #20
 801e72a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801e72e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801e732:	f04f 0c00 	mov.w	ip, #0
 801e736:	4618      	mov	r0, r3
 801e738:	f853 2b04 	ldr.w	r2, [r3], #4
 801e73c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801e740:	d01b      	beq.n	801e77a <__gethex+0x396>
 801e742:	3201      	adds	r2, #1
 801e744:	6002      	str	r2, [r0, #0]
 801e746:	2d02      	cmp	r5, #2
 801e748:	f104 0314 	add.w	r3, r4, #20
 801e74c:	d13c      	bne.n	801e7c8 <__gethex+0x3e4>
 801e74e:	f8d8 2000 	ldr.w	r2, [r8]
 801e752:	3a01      	subs	r2, #1
 801e754:	42b2      	cmp	r2, r6
 801e756:	d109      	bne.n	801e76c <__gethex+0x388>
 801e758:	1171      	asrs	r1, r6, #5
 801e75a:	2201      	movs	r2, #1
 801e75c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801e760:	f006 061f 	and.w	r6, r6, #31
 801e764:	fa02 f606 	lsl.w	r6, r2, r6
 801e768:	421e      	tst	r6, r3
 801e76a:	d13a      	bne.n	801e7e2 <__gethex+0x3fe>
 801e76c:	f045 0520 	orr.w	r5, r5, #32
 801e770:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e772:	601c      	str	r4, [r3, #0]
 801e774:	9b02      	ldr	r3, [sp, #8]
 801e776:	601f      	str	r7, [r3, #0]
 801e778:	e6b0      	b.n	801e4dc <__gethex+0xf8>
 801e77a:	4299      	cmp	r1, r3
 801e77c:	f843 cc04 	str.w	ip, [r3, #-4]
 801e780:	d8d9      	bhi.n	801e736 <__gethex+0x352>
 801e782:	68a3      	ldr	r3, [r4, #8]
 801e784:	459b      	cmp	fp, r3
 801e786:	db17      	blt.n	801e7b8 <__gethex+0x3d4>
 801e788:	6861      	ldr	r1, [r4, #4]
 801e78a:	9801      	ldr	r0, [sp, #4]
 801e78c:	3101      	adds	r1, #1
 801e78e:	f7fd fb09 	bl	801bda4 <_Balloc>
 801e792:	4681      	mov	r9, r0
 801e794:	b918      	cbnz	r0, 801e79e <__gethex+0x3ba>
 801e796:	4b1a      	ldr	r3, [pc, #104]	@ (801e800 <__gethex+0x41c>)
 801e798:	4602      	mov	r2, r0
 801e79a:	2184      	movs	r1, #132	@ 0x84
 801e79c:	e6c5      	b.n	801e52a <__gethex+0x146>
 801e79e:	6922      	ldr	r2, [r4, #16]
 801e7a0:	3202      	adds	r2, #2
 801e7a2:	f104 010c 	add.w	r1, r4, #12
 801e7a6:	0092      	lsls	r2, r2, #2
 801e7a8:	300c      	adds	r0, #12
 801e7aa:	f7fc fc24 	bl	801aff6 <memcpy>
 801e7ae:	4621      	mov	r1, r4
 801e7b0:	9801      	ldr	r0, [sp, #4]
 801e7b2:	f7fd fb37 	bl	801be24 <_Bfree>
 801e7b6:	464c      	mov	r4, r9
 801e7b8:	6923      	ldr	r3, [r4, #16]
 801e7ba:	1c5a      	adds	r2, r3, #1
 801e7bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801e7c0:	6122      	str	r2, [r4, #16]
 801e7c2:	2201      	movs	r2, #1
 801e7c4:	615a      	str	r2, [r3, #20]
 801e7c6:	e7be      	b.n	801e746 <__gethex+0x362>
 801e7c8:	6922      	ldr	r2, [r4, #16]
 801e7ca:	455a      	cmp	r2, fp
 801e7cc:	dd0b      	ble.n	801e7e6 <__gethex+0x402>
 801e7ce:	2101      	movs	r1, #1
 801e7d0:	4620      	mov	r0, r4
 801e7d2:	f7ff fda0 	bl	801e316 <rshift>
 801e7d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e7da:	3701      	adds	r7, #1
 801e7dc:	42bb      	cmp	r3, r7
 801e7de:	f6ff aee0 	blt.w	801e5a2 <__gethex+0x1be>
 801e7e2:	2501      	movs	r5, #1
 801e7e4:	e7c2      	b.n	801e76c <__gethex+0x388>
 801e7e6:	f016 061f 	ands.w	r6, r6, #31
 801e7ea:	d0fa      	beq.n	801e7e2 <__gethex+0x3fe>
 801e7ec:	4453      	add	r3, sl
 801e7ee:	f1c6 0620 	rsb	r6, r6, #32
 801e7f2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801e7f6:	f7fd fbc7 	bl	801bf88 <__hi0bits>
 801e7fa:	42b0      	cmp	r0, r6
 801e7fc:	dbe7      	blt.n	801e7ce <__gethex+0x3ea>
 801e7fe:	e7f0      	b.n	801e7e2 <__gethex+0x3fe>
 801e800:	08020c00 	.word	0x08020c00

0801e804 <L_shift>:
 801e804:	f1c2 0208 	rsb	r2, r2, #8
 801e808:	0092      	lsls	r2, r2, #2
 801e80a:	b570      	push	{r4, r5, r6, lr}
 801e80c:	f1c2 0620 	rsb	r6, r2, #32
 801e810:	6843      	ldr	r3, [r0, #4]
 801e812:	6804      	ldr	r4, [r0, #0]
 801e814:	fa03 f506 	lsl.w	r5, r3, r6
 801e818:	432c      	orrs	r4, r5
 801e81a:	40d3      	lsrs	r3, r2
 801e81c:	6004      	str	r4, [r0, #0]
 801e81e:	f840 3f04 	str.w	r3, [r0, #4]!
 801e822:	4288      	cmp	r0, r1
 801e824:	d3f4      	bcc.n	801e810 <L_shift+0xc>
 801e826:	bd70      	pop	{r4, r5, r6, pc}

0801e828 <__match>:
 801e828:	b530      	push	{r4, r5, lr}
 801e82a:	6803      	ldr	r3, [r0, #0]
 801e82c:	3301      	adds	r3, #1
 801e82e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e832:	b914      	cbnz	r4, 801e83a <__match+0x12>
 801e834:	6003      	str	r3, [r0, #0]
 801e836:	2001      	movs	r0, #1
 801e838:	bd30      	pop	{r4, r5, pc}
 801e83a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e83e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801e842:	2d19      	cmp	r5, #25
 801e844:	bf98      	it	ls
 801e846:	3220      	addls	r2, #32
 801e848:	42a2      	cmp	r2, r4
 801e84a:	d0f0      	beq.n	801e82e <__match+0x6>
 801e84c:	2000      	movs	r0, #0
 801e84e:	e7f3      	b.n	801e838 <__match+0x10>

0801e850 <__hexnan>:
 801e850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e854:	680b      	ldr	r3, [r1, #0]
 801e856:	6801      	ldr	r1, [r0, #0]
 801e858:	115e      	asrs	r6, r3, #5
 801e85a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801e85e:	f013 031f 	ands.w	r3, r3, #31
 801e862:	b087      	sub	sp, #28
 801e864:	bf18      	it	ne
 801e866:	3604      	addne	r6, #4
 801e868:	2500      	movs	r5, #0
 801e86a:	1f37      	subs	r7, r6, #4
 801e86c:	4682      	mov	sl, r0
 801e86e:	4690      	mov	r8, r2
 801e870:	9301      	str	r3, [sp, #4]
 801e872:	f846 5c04 	str.w	r5, [r6, #-4]
 801e876:	46b9      	mov	r9, r7
 801e878:	463c      	mov	r4, r7
 801e87a:	9502      	str	r5, [sp, #8]
 801e87c:	46ab      	mov	fp, r5
 801e87e:	784a      	ldrb	r2, [r1, #1]
 801e880:	1c4b      	adds	r3, r1, #1
 801e882:	9303      	str	r3, [sp, #12]
 801e884:	b342      	cbz	r2, 801e8d8 <__hexnan+0x88>
 801e886:	4610      	mov	r0, r2
 801e888:	9105      	str	r1, [sp, #20]
 801e88a:	9204      	str	r2, [sp, #16]
 801e88c:	f7ff fd95 	bl	801e3ba <__hexdig_fun>
 801e890:	2800      	cmp	r0, #0
 801e892:	d151      	bne.n	801e938 <__hexnan+0xe8>
 801e894:	9a04      	ldr	r2, [sp, #16]
 801e896:	9905      	ldr	r1, [sp, #20]
 801e898:	2a20      	cmp	r2, #32
 801e89a:	d818      	bhi.n	801e8ce <__hexnan+0x7e>
 801e89c:	9b02      	ldr	r3, [sp, #8]
 801e89e:	459b      	cmp	fp, r3
 801e8a0:	dd13      	ble.n	801e8ca <__hexnan+0x7a>
 801e8a2:	454c      	cmp	r4, r9
 801e8a4:	d206      	bcs.n	801e8b4 <__hexnan+0x64>
 801e8a6:	2d07      	cmp	r5, #7
 801e8a8:	dc04      	bgt.n	801e8b4 <__hexnan+0x64>
 801e8aa:	462a      	mov	r2, r5
 801e8ac:	4649      	mov	r1, r9
 801e8ae:	4620      	mov	r0, r4
 801e8b0:	f7ff ffa8 	bl	801e804 <L_shift>
 801e8b4:	4544      	cmp	r4, r8
 801e8b6:	d952      	bls.n	801e95e <__hexnan+0x10e>
 801e8b8:	2300      	movs	r3, #0
 801e8ba:	f1a4 0904 	sub.w	r9, r4, #4
 801e8be:	f844 3c04 	str.w	r3, [r4, #-4]
 801e8c2:	f8cd b008 	str.w	fp, [sp, #8]
 801e8c6:	464c      	mov	r4, r9
 801e8c8:	461d      	mov	r5, r3
 801e8ca:	9903      	ldr	r1, [sp, #12]
 801e8cc:	e7d7      	b.n	801e87e <__hexnan+0x2e>
 801e8ce:	2a29      	cmp	r2, #41	@ 0x29
 801e8d0:	d157      	bne.n	801e982 <__hexnan+0x132>
 801e8d2:	3102      	adds	r1, #2
 801e8d4:	f8ca 1000 	str.w	r1, [sl]
 801e8d8:	f1bb 0f00 	cmp.w	fp, #0
 801e8dc:	d051      	beq.n	801e982 <__hexnan+0x132>
 801e8de:	454c      	cmp	r4, r9
 801e8e0:	d206      	bcs.n	801e8f0 <__hexnan+0xa0>
 801e8e2:	2d07      	cmp	r5, #7
 801e8e4:	dc04      	bgt.n	801e8f0 <__hexnan+0xa0>
 801e8e6:	462a      	mov	r2, r5
 801e8e8:	4649      	mov	r1, r9
 801e8ea:	4620      	mov	r0, r4
 801e8ec:	f7ff ff8a 	bl	801e804 <L_shift>
 801e8f0:	4544      	cmp	r4, r8
 801e8f2:	d936      	bls.n	801e962 <__hexnan+0x112>
 801e8f4:	f1a8 0204 	sub.w	r2, r8, #4
 801e8f8:	4623      	mov	r3, r4
 801e8fa:	f853 1b04 	ldr.w	r1, [r3], #4
 801e8fe:	f842 1f04 	str.w	r1, [r2, #4]!
 801e902:	429f      	cmp	r7, r3
 801e904:	d2f9      	bcs.n	801e8fa <__hexnan+0xaa>
 801e906:	1b3b      	subs	r3, r7, r4
 801e908:	f023 0303 	bic.w	r3, r3, #3
 801e90c:	3304      	adds	r3, #4
 801e90e:	3401      	adds	r4, #1
 801e910:	3e03      	subs	r6, #3
 801e912:	42b4      	cmp	r4, r6
 801e914:	bf88      	it	hi
 801e916:	2304      	movhi	r3, #4
 801e918:	4443      	add	r3, r8
 801e91a:	2200      	movs	r2, #0
 801e91c:	f843 2b04 	str.w	r2, [r3], #4
 801e920:	429f      	cmp	r7, r3
 801e922:	d2fb      	bcs.n	801e91c <__hexnan+0xcc>
 801e924:	683b      	ldr	r3, [r7, #0]
 801e926:	b91b      	cbnz	r3, 801e930 <__hexnan+0xe0>
 801e928:	4547      	cmp	r7, r8
 801e92a:	d128      	bne.n	801e97e <__hexnan+0x12e>
 801e92c:	2301      	movs	r3, #1
 801e92e:	603b      	str	r3, [r7, #0]
 801e930:	2005      	movs	r0, #5
 801e932:	b007      	add	sp, #28
 801e934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e938:	3501      	adds	r5, #1
 801e93a:	2d08      	cmp	r5, #8
 801e93c:	f10b 0b01 	add.w	fp, fp, #1
 801e940:	dd06      	ble.n	801e950 <__hexnan+0x100>
 801e942:	4544      	cmp	r4, r8
 801e944:	d9c1      	bls.n	801e8ca <__hexnan+0x7a>
 801e946:	2300      	movs	r3, #0
 801e948:	f844 3c04 	str.w	r3, [r4, #-4]
 801e94c:	2501      	movs	r5, #1
 801e94e:	3c04      	subs	r4, #4
 801e950:	6822      	ldr	r2, [r4, #0]
 801e952:	f000 000f 	and.w	r0, r0, #15
 801e956:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801e95a:	6020      	str	r0, [r4, #0]
 801e95c:	e7b5      	b.n	801e8ca <__hexnan+0x7a>
 801e95e:	2508      	movs	r5, #8
 801e960:	e7b3      	b.n	801e8ca <__hexnan+0x7a>
 801e962:	9b01      	ldr	r3, [sp, #4]
 801e964:	2b00      	cmp	r3, #0
 801e966:	d0dd      	beq.n	801e924 <__hexnan+0xd4>
 801e968:	f1c3 0320 	rsb	r3, r3, #32
 801e96c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e970:	40da      	lsrs	r2, r3
 801e972:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801e976:	4013      	ands	r3, r2
 801e978:	f846 3c04 	str.w	r3, [r6, #-4]
 801e97c:	e7d2      	b.n	801e924 <__hexnan+0xd4>
 801e97e:	3f04      	subs	r7, #4
 801e980:	e7d0      	b.n	801e924 <__hexnan+0xd4>
 801e982:	2004      	movs	r0, #4
 801e984:	e7d5      	b.n	801e932 <__hexnan+0xe2>

0801e986 <__ascii_mbtowc>:
 801e986:	b082      	sub	sp, #8
 801e988:	b901      	cbnz	r1, 801e98c <__ascii_mbtowc+0x6>
 801e98a:	a901      	add	r1, sp, #4
 801e98c:	b142      	cbz	r2, 801e9a0 <__ascii_mbtowc+0x1a>
 801e98e:	b14b      	cbz	r3, 801e9a4 <__ascii_mbtowc+0x1e>
 801e990:	7813      	ldrb	r3, [r2, #0]
 801e992:	600b      	str	r3, [r1, #0]
 801e994:	7812      	ldrb	r2, [r2, #0]
 801e996:	1e10      	subs	r0, r2, #0
 801e998:	bf18      	it	ne
 801e99a:	2001      	movne	r0, #1
 801e99c:	b002      	add	sp, #8
 801e99e:	4770      	bx	lr
 801e9a0:	4610      	mov	r0, r2
 801e9a2:	e7fb      	b.n	801e99c <__ascii_mbtowc+0x16>
 801e9a4:	f06f 0001 	mvn.w	r0, #1
 801e9a8:	e7f8      	b.n	801e99c <__ascii_mbtowc+0x16>

0801e9aa <__ascii_wctomb>:
 801e9aa:	4603      	mov	r3, r0
 801e9ac:	4608      	mov	r0, r1
 801e9ae:	b141      	cbz	r1, 801e9c2 <__ascii_wctomb+0x18>
 801e9b0:	2aff      	cmp	r2, #255	@ 0xff
 801e9b2:	d904      	bls.n	801e9be <__ascii_wctomb+0x14>
 801e9b4:	228a      	movs	r2, #138	@ 0x8a
 801e9b6:	601a      	str	r2, [r3, #0]
 801e9b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e9bc:	4770      	bx	lr
 801e9be:	700a      	strb	r2, [r1, #0]
 801e9c0:	2001      	movs	r0, #1
 801e9c2:	4770      	bx	lr

0801e9c4 <_raise_r>:
 801e9c4:	291f      	cmp	r1, #31
 801e9c6:	b538      	push	{r3, r4, r5, lr}
 801e9c8:	4605      	mov	r5, r0
 801e9ca:	460c      	mov	r4, r1
 801e9cc:	d904      	bls.n	801e9d8 <_raise_r+0x14>
 801e9ce:	2316      	movs	r3, #22
 801e9d0:	6003      	str	r3, [r0, #0]
 801e9d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e9d6:	bd38      	pop	{r3, r4, r5, pc}
 801e9d8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e9da:	b112      	cbz	r2, 801e9e2 <_raise_r+0x1e>
 801e9dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e9e0:	b94b      	cbnz	r3, 801e9f6 <_raise_r+0x32>
 801e9e2:	4628      	mov	r0, r5
 801e9e4:	f000 f830 	bl	801ea48 <_getpid_r>
 801e9e8:	4622      	mov	r2, r4
 801e9ea:	4601      	mov	r1, r0
 801e9ec:	4628      	mov	r0, r5
 801e9ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e9f2:	f000 b817 	b.w	801ea24 <_kill_r>
 801e9f6:	2b01      	cmp	r3, #1
 801e9f8:	d00a      	beq.n	801ea10 <_raise_r+0x4c>
 801e9fa:	1c59      	adds	r1, r3, #1
 801e9fc:	d103      	bne.n	801ea06 <_raise_r+0x42>
 801e9fe:	2316      	movs	r3, #22
 801ea00:	6003      	str	r3, [r0, #0]
 801ea02:	2001      	movs	r0, #1
 801ea04:	e7e7      	b.n	801e9d6 <_raise_r+0x12>
 801ea06:	2100      	movs	r1, #0
 801ea08:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801ea0c:	4620      	mov	r0, r4
 801ea0e:	4798      	blx	r3
 801ea10:	2000      	movs	r0, #0
 801ea12:	e7e0      	b.n	801e9d6 <_raise_r+0x12>

0801ea14 <raise>:
 801ea14:	4b02      	ldr	r3, [pc, #8]	@ (801ea20 <raise+0xc>)
 801ea16:	4601      	mov	r1, r0
 801ea18:	6818      	ldr	r0, [r3, #0]
 801ea1a:	f7ff bfd3 	b.w	801e9c4 <_raise_r>
 801ea1e:	bf00      	nop
 801ea20:	200000c8 	.word	0x200000c8

0801ea24 <_kill_r>:
 801ea24:	b538      	push	{r3, r4, r5, lr}
 801ea26:	4d07      	ldr	r5, [pc, #28]	@ (801ea44 <_kill_r+0x20>)
 801ea28:	2300      	movs	r3, #0
 801ea2a:	4604      	mov	r4, r0
 801ea2c:	4608      	mov	r0, r1
 801ea2e:	4611      	mov	r1, r2
 801ea30:	602b      	str	r3, [r5, #0]
 801ea32:	f7e6 feb1 	bl	8005798 <_kill>
 801ea36:	1c43      	adds	r3, r0, #1
 801ea38:	d102      	bne.n	801ea40 <_kill_r+0x1c>
 801ea3a:	682b      	ldr	r3, [r5, #0]
 801ea3c:	b103      	cbz	r3, 801ea40 <_kill_r+0x1c>
 801ea3e:	6023      	str	r3, [r4, #0]
 801ea40:	bd38      	pop	{r3, r4, r5, pc}
 801ea42:	bf00      	nop
 801ea44:	20011dc4 	.word	0x20011dc4

0801ea48 <_getpid_r>:
 801ea48:	f7e6 be9e 	b.w	8005788 <_getpid>

0801ea4c <pow>:
 801ea4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ea4e:	ed2d 8b02 	vpush	{d8}
 801ea52:	eeb0 8a40 	vmov.f32	s16, s0
 801ea56:	eef0 8a60 	vmov.f32	s17, s1
 801ea5a:	ec55 4b11 	vmov	r4, r5, d1
 801ea5e:	f000 f8c7 	bl	801ebf0 <__ieee754_pow>
 801ea62:	4622      	mov	r2, r4
 801ea64:	462b      	mov	r3, r5
 801ea66:	4620      	mov	r0, r4
 801ea68:	4629      	mov	r1, r5
 801ea6a:	ec57 6b10 	vmov	r6, r7, d0
 801ea6e:	f7e2 f875 	bl	8000b5c <__aeabi_dcmpun>
 801ea72:	2800      	cmp	r0, #0
 801ea74:	d13b      	bne.n	801eaee <pow+0xa2>
 801ea76:	ec51 0b18 	vmov	r0, r1, d8
 801ea7a:	2200      	movs	r2, #0
 801ea7c:	2300      	movs	r3, #0
 801ea7e:	f7e2 f83b 	bl	8000af8 <__aeabi_dcmpeq>
 801ea82:	b1b8      	cbz	r0, 801eab4 <pow+0x68>
 801ea84:	2200      	movs	r2, #0
 801ea86:	2300      	movs	r3, #0
 801ea88:	4620      	mov	r0, r4
 801ea8a:	4629      	mov	r1, r5
 801ea8c:	f7e2 f834 	bl	8000af8 <__aeabi_dcmpeq>
 801ea90:	2800      	cmp	r0, #0
 801ea92:	d146      	bne.n	801eb22 <pow+0xd6>
 801ea94:	ec45 4b10 	vmov	d0, r4, r5
 801ea98:	f000 f848 	bl	801eb2c <finite>
 801ea9c:	b338      	cbz	r0, 801eaee <pow+0xa2>
 801ea9e:	2200      	movs	r2, #0
 801eaa0:	2300      	movs	r3, #0
 801eaa2:	4620      	mov	r0, r4
 801eaa4:	4629      	mov	r1, r5
 801eaa6:	f7e2 f831 	bl	8000b0c <__aeabi_dcmplt>
 801eaaa:	b300      	cbz	r0, 801eaee <pow+0xa2>
 801eaac:	f7fc fa6e 	bl	801af8c <__errno>
 801eab0:	2322      	movs	r3, #34	@ 0x22
 801eab2:	e01b      	b.n	801eaec <pow+0xa0>
 801eab4:	ec47 6b10 	vmov	d0, r6, r7
 801eab8:	f000 f838 	bl	801eb2c <finite>
 801eabc:	b9e0      	cbnz	r0, 801eaf8 <pow+0xac>
 801eabe:	eeb0 0a48 	vmov.f32	s0, s16
 801eac2:	eef0 0a68 	vmov.f32	s1, s17
 801eac6:	f000 f831 	bl	801eb2c <finite>
 801eaca:	b1a8      	cbz	r0, 801eaf8 <pow+0xac>
 801eacc:	ec45 4b10 	vmov	d0, r4, r5
 801ead0:	f000 f82c 	bl	801eb2c <finite>
 801ead4:	b180      	cbz	r0, 801eaf8 <pow+0xac>
 801ead6:	4632      	mov	r2, r6
 801ead8:	463b      	mov	r3, r7
 801eada:	4630      	mov	r0, r6
 801eadc:	4639      	mov	r1, r7
 801eade:	f7e2 f83d 	bl	8000b5c <__aeabi_dcmpun>
 801eae2:	2800      	cmp	r0, #0
 801eae4:	d0e2      	beq.n	801eaac <pow+0x60>
 801eae6:	f7fc fa51 	bl	801af8c <__errno>
 801eaea:	2321      	movs	r3, #33	@ 0x21
 801eaec:	6003      	str	r3, [r0, #0]
 801eaee:	ecbd 8b02 	vpop	{d8}
 801eaf2:	ec47 6b10 	vmov	d0, r6, r7
 801eaf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eaf8:	2200      	movs	r2, #0
 801eafa:	2300      	movs	r3, #0
 801eafc:	4630      	mov	r0, r6
 801eafe:	4639      	mov	r1, r7
 801eb00:	f7e1 fffa 	bl	8000af8 <__aeabi_dcmpeq>
 801eb04:	2800      	cmp	r0, #0
 801eb06:	d0f2      	beq.n	801eaee <pow+0xa2>
 801eb08:	eeb0 0a48 	vmov.f32	s0, s16
 801eb0c:	eef0 0a68 	vmov.f32	s1, s17
 801eb10:	f000 f80c 	bl	801eb2c <finite>
 801eb14:	2800      	cmp	r0, #0
 801eb16:	d0ea      	beq.n	801eaee <pow+0xa2>
 801eb18:	ec45 4b10 	vmov	d0, r4, r5
 801eb1c:	f000 f806 	bl	801eb2c <finite>
 801eb20:	e7c3      	b.n	801eaaa <pow+0x5e>
 801eb22:	4f01      	ldr	r7, [pc, #4]	@ (801eb28 <pow+0xdc>)
 801eb24:	2600      	movs	r6, #0
 801eb26:	e7e2      	b.n	801eaee <pow+0xa2>
 801eb28:	3ff00000 	.word	0x3ff00000

0801eb2c <finite>:
 801eb2c:	b082      	sub	sp, #8
 801eb2e:	ed8d 0b00 	vstr	d0, [sp]
 801eb32:	9801      	ldr	r0, [sp, #4]
 801eb34:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 801eb38:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801eb3c:	0fc0      	lsrs	r0, r0, #31
 801eb3e:	b002      	add	sp, #8
 801eb40:	4770      	bx	lr

0801eb42 <fmax>:
 801eb42:	b508      	push	{r3, lr}
 801eb44:	ed2d 8b04 	vpush	{d8-d9}
 801eb48:	eeb0 8a40 	vmov.f32	s16, s0
 801eb4c:	eef0 8a60 	vmov.f32	s17, s1
 801eb50:	eeb0 9a41 	vmov.f32	s18, s2
 801eb54:	eef0 9a61 	vmov.f32	s19, s3
 801eb58:	f000 f81e 	bl	801eb98 <__fpclassifyd>
 801eb5c:	b950      	cbnz	r0, 801eb74 <fmax+0x32>
 801eb5e:	eeb0 8a49 	vmov.f32	s16, s18
 801eb62:	eef0 8a69 	vmov.f32	s17, s19
 801eb66:	eeb0 0a48 	vmov.f32	s0, s16
 801eb6a:	eef0 0a68 	vmov.f32	s1, s17
 801eb6e:	ecbd 8b04 	vpop	{d8-d9}
 801eb72:	bd08      	pop	{r3, pc}
 801eb74:	eeb0 0a49 	vmov.f32	s0, s18
 801eb78:	eef0 0a69 	vmov.f32	s1, s19
 801eb7c:	f000 f80c 	bl	801eb98 <__fpclassifyd>
 801eb80:	2800      	cmp	r0, #0
 801eb82:	d0f0      	beq.n	801eb66 <fmax+0x24>
 801eb84:	ec53 2b19 	vmov	r2, r3, d9
 801eb88:	ec51 0b18 	vmov	r0, r1, d8
 801eb8c:	f7e1 ffdc 	bl	8000b48 <__aeabi_dcmpgt>
 801eb90:	2800      	cmp	r0, #0
 801eb92:	d0e4      	beq.n	801eb5e <fmax+0x1c>
 801eb94:	e7e7      	b.n	801eb66 <fmax+0x24>
	...

0801eb98 <__fpclassifyd>:
 801eb98:	ec51 0b10 	vmov	r0, r1, d0
 801eb9c:	b510      	push	{r4, lr}
 801eb9e:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 801eba2:	460b      	mov	r3, r1
 801eba4:	d019      	beq.n	801ebda <__fpclassifyd+0x42>
 801eba6:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 801ebaa:	490e      	ldr	r1, [pc, #56]	@ (801ebe4 <__fpclassifyd+0x4c>)
 801ebac:	428a      	cmp	r2, r1
 801ebae:	d90e      	bls.n	801ebce <__fpclassifyd+0x36>
 801ebb0:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 801ebb4:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 801ebb8:	428a      	cmp	r2, r1
 801ebba:	d908      	bls.n	801ebce <__fpclassifyd+0x36>
 801ebbc:	4a0a      	ldr	r2, [pc, #40]	@ (801ebe8 <__fpclassifyd+0x50>)
 801ebbe:	4213      	tst	r3, r2
 801ebc0:	d007      	beq.n	801ebd2 <__fpclassifyd+0x3a>
 801ebc2:	4294      	cmp	r4, r2
 801ebc4:	d107      	bne.n	801ebd6 <__fpclassifyd+0x3e>
 801ebc6:	fab0 f080 	clz	r0, r0
 801ebca:	0940      	lsrs	r0, r0, #5
 801ebcc:	bd10      	pop	{r4, pc}
 801ebce:	2004      	movs	r0, #4
 801ebd0:	e7fc      	b.n	801ebcc <__fpclassifyd+0x34>
 801ebd2:	2003      	movs	r0, #3
 801ebd4:	e7fa      	b.n	801ebcc <__fpclassifyd+0x34>
 801ebd6:	2000      	movs	r0, #0
 801ebd8:	e7f8      	b.n	801ebcc <__fpclassifyd+0x34>
 801ebda:	2800      	cmp	r0, #0
 801ebdc:	d1ee      	bne.n	801ebbc <__fpclassifyd+0x24>
 801ebde:	2002      	movs	r0, #2
 801ebe0:	e7f4      	b.n	801ebcc <__fpclassifyd+0x34>
 801ebe2:	bf00      	nop
 801ebe4:	7fdfffff 	.word	0x7fdfffff
 801ebe8:	7ff00000 	.word	0x7ff00000
 801ebec:	00000000 	.word	0x00000000

0801ebf0 <__ieee754_pow>:
 801ebf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ebf4:	b091      	sub	sp, #68	@ 0x44
 801ebf6:	ed8d 1b00 	vstr	d1, [sp]
 801ebfa:	e9dd 1900 	ldrd	r1, r9, [sp]
 801ebfe:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 801ec02:	ea5a 0001 	orrs.w	r0, sl, r1
 801ec06:	ec57 6b10 	vmov	r6, r7, d0
 801ec0a:	d113      	bne.n	801ec34 <__ieee754_pow+0x44>
 801ec0c:	19b3      	adds	r3, r6, r6
 801ec0e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 801ec12:	4152      	adcs	r2, r2
 801ec14:	4298      	cmp	r0, r3
 801ec16:	4b98      	ldr	r3, [pc, #608]	@ (801ee78 <__ieee754_pow+0x288>)
 801ec18:	4193      	sbcs	r3, r2
 801ec1a:	f080 84ea 	bcs.w	801f5f2 <__ieee754_pow+0xa02>
 801ec1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ec22:	4630      	mov	r0, r6
 801ec24:	4639      	mov	r1, r7
 801ec26:	f7e1 fb49 	bl	80002bc <__adddf3>
 801ec2a:	ec41 0b10 	vmov	d0, r0, r1
 801ec2e:	b011      	add	sp, #68	@ 0x44
 801ec30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec34:	4a91      	ldr	r2, [pc, #580]	@ (801ee7c <__ieee754_pow+0x28c>)
 801ec36:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801ec3a:	4590      	cmp	r8, r2
 801ec3c:	463d      	mov	r5, r7
 801ec3e:	4633      	mov	r3, r6
 801ec40:	d806      	bhi.n	801ec50 <__ieee754_pow+0x60>
 801ec42:	d101      	bne.n	801ec48 <__ieee754_pow+0x58>
 801ec44:	2e00      	cmp	r6, #0
 801ec46:	d1ea      	bne.n	801ec1e <__ieee754_pow+0x2e>
 801ec48:	4592      	cmp	sl, r2
 801ec4a:	d801      	bhi.n	801ec50 <__ieee754_pow+0x60>
 801ec4c:	d10e      	bne.n	801ec6c <__ieee754_pow+0x7c>
 801ec4e:	b169      	cbz	r1, 801ec6c <__ieee754_pow+0x7c>
 801ec50:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 801ec54:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 801ec58:	431d      	orrs	r5, r3
 801ec5a:	d1e0      	bne.n	801ec1e <__ieee754_pow+0x2e>
 801ec5c:	e9dd 3200 	ldrd	r3, r2, [sp]
 801ec60:	18db      	adds	r3, r3, r3
 801ec62:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 801ec66:	4152      	adcs	r2, r2
 801ec68:	429d      	cmp	r5, r3
 801ec6a:	e7d4      	b.n	801ec16 <__ieee754_pow+0x26>
 801ec6c:	2d00      	cmp	r5, #0
 801ec6e:	46c3      	mov	fp, r8
 801ec70:	da3a      	bge.n	801ece8 <__ieee754_pow+0xf8>
 801ec72:	4a83      	ldr	r2, [pc, #524]	@ (801ee80 <__ieee754_pow+0x290>)
 801ec74:	4592      	cmp	sl, r2
 801ec76:	d84d      	bhi.n	801ed14 <__ieee754_pow+0x124>
 801ec78:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 801ec7c:	4592      	cmp	sl, r2
 801ec7e:	f240 84c7 	bls.w	801f610 <__ieee754_pow+0xa20>
 801ec82:	ea4f 522a 	mov.w	r2, sl, asr #20
 801ec86:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801ec8a:	2a14      	cmp	r2, #20
 801ec8c:	dd0f      	ble.n	801ecae <__ieee754_pow+0xbe>
 801ec8e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801ec92:	fa21 f402 	lsr.w	r4, r1, r2
 801ec96:	fa04 f202 	lsl.w	r2, r4, r2
 801ec9a:	428a      	cmp	r2, r1
 801ec9c:	f040 84b8 	bne.w	801f610 <__ieee754_pow+0xa20>
 801eca0:	f004 0401 	and.w	r4, r4, #1
 801eca4:	f1c4 0402 	rsb	r4, r4, #2
 801eca8:	2900      	cmp	r1, #0
 801ecaa:	d158      	bne.n	801ed5e <__ieee754_pow+0x16e>
 801ecac:	e00e      	b.n	801eccc <__ieee754_pow+0xdc>
 801ecae:	2900      	cmp	r1, #0
 801ecb0:	d154      	bne.n	801ed5c <__ieee754_pow+0x16c>
 801ecb2:	f1c2 0214 	rsb	r2, r2, #20
 801ecb6:	fa4a f402 	asr.w	r4, sl, r2
 801ecba:	fa04 f202 	lsl.w	r2, r4, r2
 801ecbe:	4552      	cmp	r2, sl
 801ecc0:	f040 84a3 	bne.w	801f60a <__ieee754_pow+0xa1a>
 801ecc4:	f004 0401 	and.w	r4, r4, #1
 801ecc8:	f1c4 0402 	rsb	r4, r4, #2
 801eccc:	4a6d      	ldr	r2, [pc, #436]	@ (801ee84 <__ieee754_pow+0x294>)
 801ecce:	4592      	cmp	sl, r2
 801ecd0:	d12e      	bne.n	801ed30 <__ieee754_pow+0x140>
 801ecd2:	f1b9 0f00 	cmp.w	r9, #0
 801ecd6:	f280 8494 	bge.w	801f602 <__ieee754_pow+0xa12>
 801ecda:	496a      	ldr	r1, [pc, #424]	@ (801ee84 <__ieee754_pow+0x294>)
 801ecdc:	4632      	mov	r2, r6
 801ecde:	463b      	mov	r3, r7
 801ece0:	2000      	movs	r0, #0
 801ece2:	f7e1 fdcb 	bl	800087c <__aeabi_ddiv>
 801ece6:	e7a0      	b.n	801ec2a <__ieee754_pow+0x3a>
 801ece8:	2400      	movs	r4, #0
 801ecea:	bbc1      	cbnz	r1, 801ed5e <__ieee754_pow+0x16e>
 801ecec:	4a63      	ldr	r2, [pc, #396]	@ (801ee7c <__ieee754_pow+0x28c>)
 801ecee:	4592      	cmp	sl, r2
 801ecf0:	d1ec      	bne.n	801eccc <__ieee754_pow+0xdc>
 801ecf2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 801ecf6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 801ecfa:	431a      	orrs	r2, r3
 801ecfc:	f000 8479 	beq.w	801f5f2 <__ieee754_pow+0xa02>
 801ed00:	4b61      	ldr	r3, [pc, #388]	@ (801ee88 <__ieee754_pow+0x298>)
 801ed02:	4598      	cmp	r8, r3
 801ed04:	d908      	bls.n	801ed18 <__ieee754_pow+0x128>
 801ed06:	f1b9 0f00 	cmp.w	r9, #0
 801ed0a:	f2c0 8476 	blt.w	801f5fa <__ieee754_pow+0xa0a>
 801ed0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ed12:	e78a      	b.n	801ec2a <__ieee754_pow+0x3a>
 801ed14:	2402      	movs	r4, #2
 801ed16:	e7e8      	b.n	801ecea <__ieee754_pow+0xfa>
 801ed18:	f1b9 0f00 	cmp.w	r9, #0
 801ed1c:	f04f 0000 	mov.w	r0, #0
 801ed20:	f04f 0100 	mov.w	r1, #0
 801ed24:	da81      	bge.n	801ec2a <__ieee754_pow+0x3a>
 801ed26:	e9dd 0300 	ldrd	r0, r3, [sp]
 801ed2a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801ed2e:	e77c      	b.n	801ec2a <__ieee754_pow+0x3a>
 801ed30:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 801ed34:	d106      	bne.n	801ed44 <__ieee754_pow+0x154>
 801ed36:	4632      	mov	r2, r6
 801ed38:	463b      	mov	r3, r7
 801ed3a:	4630      	mov	r0, r6
 801ed3c:	4639      	mov	r1, r7
 801ed3e:	f7e1 fc73 	bl	8000628 <__aeabi_dmul>
 801ed42:	e772      	b.n	801ec2a <__ieee754_pow+0x3a>
 801ed44:	4a51      	ldr	r2, [pc, #324]	@ (801ee8c <__ieee754_pow+0x29c>)
 801ed46:	4591      	cmp	r9, r2
 801ed48:	d109      	bne.n	801ed5e <__ieee754_pow+0x16e>
 801ed4a:	2d00      	cmp	r5, #0
 801ed4c:	db07      	blt.n	801ed5e <__ieee754_pow+0x16e>
 801ed4e:	ec47 6b10 	vmov	d0, r6, r7
 801ed52:	b011      	add	sp, #68	@ 0x44
 801ed54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed58:	f000 bd52 	b.w	801f800 <__ieee754_sqrt>
 801ed5c:	2400      	movs	r4, #0
 801ed5e:	ec47 6b10 	vmov	d0, r6, r7
 801ed62:	9302      	str	r3, [sp, #8]
 801ed64:	f000 fc88 	bl	801f678 <fabs>
 801ed68:	9b02      	ldr	r3, [sp, #8]
 801ed6a:	ec51 0b10 	vmov	r0, r1, d0
 801ed6e:	bb53      	cbnz	r3, 801edc6 <__ieee754_pow+0x1d6>
 801ed70:	4b44      	ldr	r3, [pc, #272]	@ (801ee84 <__ieee754_pow+0x294>)
 801ed72:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 801ed76:	429a      	cmp	r2, r3
 801ed78:	d002      	beq.n	801ed80 <__ieee754_pow+0x190>
 801ed7a:	f1b8 0f00 	cmp.w	r8, #0
 801ed7e:	d122      	bne.n	801edc6 <__ieee754_pow+0x1d6>
 801ed80:	f1b9 0f00 	cmp.w	r9, #0
 801ed84:	da05      	bge.n	801ed92 <__ieee754_pow+0x1a2>
 801ed86:	4602      	mov	r2, r0
 801ed88:	460b      	mov	r3, r1
 801ed8a:	2000      	movs	r0, #0
 801ed8c:	493d      	ldr	r1, [pc, #244]	@ (801ee84 <__ieee754_pow+0x294>)
 801ed8e:	f7e1 fd75 	bl	800087c <__aeabi_ddiv>
 801ed92:	2d00      	cmp	r5, #0
 801ed94:	f6bf af49 	bge.w	801ec2a <__ieee754_pow+0x3a>
 801ed98:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 801ed9c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 801eda0:	ea58 0804 	orrs.w	r8, r8, r4
 801eda4:	d108      	bne.n	801edb8 <__ieee754_pow+0x1c8>
 801eda6:	4602      	mov	r2, r0
 801eda8:	460b      	mov	r3, r1
 801edaa:	4610      	mov	r0, r2
 801edac:	4619      	mov	r1, r3
 801edae:	f7e1 fa83 	bl	80002b8 <__aeabi_dsub>
 801edb2:	4602      	mov	r2, r0
 801edb4:	460b      	mov	r3, r1
 801edb6:	e794      	b.n	801ece2 <__ieee754_pow+0xf2>
 801edb8:	2c01      	cmp	r4, #1
 801edba:	f47f af36 	bne.w	801ec2a <__ieee754_pow+0x3a>
 801edbe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801edc2:	4619      	mov	r1, r3
 801edc4:	e731      	b.n	801ec2a <__ieee754_pow+0x3a>
 801edc6:	0feb      	lsrs	r3, r5, #31
 801edc8:	3b01      	subs	r3, #1
 801edca:	ea53 0204 	orrs.w	r2, r3, r4
 801edce:	d102      	bne.n	801edd6 <__ieee754_pow+0x1e6>
 801edd0:	4632      	mov	r2, r6
 801edd2:	463b      	mov	r3, r7
 801edd4:	e7e9      	b.n	801edaa <__ieee754_pow+0x1ba>
 801edd6:	3c01      	subs	r4, #1
 801edd8:	431c      	orrs	r4, r3
 801edda:	d016      	beq.n	801ee0a <__ieee754_pow+0x21a>
 801eddc:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 801ee68 <__ieee754_pow+0x278>
 801ede0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 801ede4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ede8:	f240 8112 	bls.w	801f010 <__ieee754_pow+0x420>
 801edec:	4b28      	ldr	r3, [pc, #160]	@ (801ee90 <__ieee754_pow+0x2a0>)
 801edee:	459a      	cmp	sl, r3
 801edf0:	4b25      	ldr	r3, [pc, #148]	@ (801ee88 <__ieee754_pow+0x298>)
 801edf2:	d916      	bls.n	801ee22 <__ieee754_pow+0x232>
 801edf4:	4598      	cmp	r8, r3
 801edf6:	d80b      	bhi.n	801ee10 <__ieee754_pow+0x220>
 801edf8:	f1b9 0f00 	cmp.w	r9, #0
 801edfc:	da0b      	bge.n	801ee16 <__ieee754_pow+0x226>
 801edfe:	2000      	movs	r0, #0
 801ee00:	b011      	add	sp, #68	@ 0x44
 801ee02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee06:	f000 bcf3 	b.w	801f7f0 <__math_oflow>
 801ee0a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 801ee70 <__ieee754_pow+0x280>
 801ee0e:	e7e7      	b.n	801ede0 <__ieee754_pow+0x1f0>
 801ee10:	f1b9 0f00 	cmp.w	r9, #0
 801ee14:	dcf3      	bgt.n	801edfe <__ieee754_pow+0x20e>
 801ee16:	2000      	movs	r0, #0
 801ee18:	b011      	add	sp, #68	@ 0x44
 801ee1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee1e:	f000 bcdf 	b.w	801f7e0 <__math_uflow>
 801ee22:	4598      	cmp	r8, r3
 801ee24:	d20c      	bcs.n	801ee40 <__ieee754_pow+0x250>
 801ee26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ee2a:	2200      	movs	r2, #0
 801ee2c:	2300      	movs	r3, #0
 801ee2e:	f7e1 fe6d 	bl	8000b0c <__aeabi_dcmplt>
 801ee32:	3800      	subs	r0, #0
 801ee34:	bf18      	it	ne
 801ee36:	2001      	movne	r0, #1
 801ee38:	f1b9 0f00 	cmp.w	r9, #0
 801ee3c:	daec      	bge.n	801ee18 <__ieee754_pow+0x228>
 801ee3e:	e7df      	b.n	801ee00 <__ieee754_pow+0x210>
 801ee40:	4b10      	ldr	r3, [pc, #64]	@ (801ee84 <__ieee754_pow+0x294>)
 801ee42:	4598      	cmp	r8, r3
 801ee44:	f04f 0200 	mov.w	r2, #0
 801ee48:	d924      	bls.n	801ee94 <__ieee754_pow+0x2a4>
 801ee4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ee4e:	2300      	movs	r3, #0
 801ee50:	f7e1 fe5c 	bl	8000b0c <__aeabi_dcmplt>
 801ee54:	3800      	subs	r0, #0
 801ee56:	bf18      	it	ne
 801ee58:	2001      	movne	r0, #1
 801ee5a:	f1b9 0f00 	cmp.w	r9, #0
 801ee5e:	dccf      	bgt.n	801ee00 <__ieee754_pow+0x210>
 801ee60:	e7da      	b.n	801ee18 <__ieee754_pow+0x228>
 801ee62:	bf00      	nop
 801ee64:	f3af 8000 	nop.w
 801ee68:	00000000 	.word	0x00000000
 801ee6c:	3ff00000 	.word	0x3ff00000
 801ee70:	00000000 	.word	0x00000000
 801ee74:	bff00000 	.word	0xbff00000
 801ee78:	fff00000 	.word	0xfff00000
 801ee7c:	7ff00000 	.word	0x7ff00000
 801ee80:	433fffff 	.word	0x433fffff
 801ee84:	3ff00000 	.word	0x3ff00000
 801ee88:	3fefffff 	.word	0x3fefffff
 801ee8c:	3fe00000 	.word	0x3fe00000
 801ee90:	43f00000 	.word	0x43f00000
 801ee94:	4b5a      	ldr	r3, [pc, #360]	@ (801f000 <__ieee754_pow+0x410>)
 801ee96:	f7e1 fa0f 	bl	80002b8 <__aeabi_dsub>
 801ee9a:	a351      	add	r3, pc, #324	@ (adr r3, 801efe0 <__ieee754_pow+0x3f0>)
 801ee9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eea0:	4604      	mov	r4, r0
 801eea2:	460d      	mov	r5, r1
 801eea4:	f7e1 fbc0 	bl	8000628 <__aeabi_dmul>
 801eea8:	a34f      	add	r3, pc, #316	@ (adr r3, 801efe8 <__ieee754_pow+0x3f8>)
 801eeaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eeae:	4606      	mov	r6, r0
 801eeb0:	460f      	mov	r7, r1
 801eeb2:	4620      	mov	r0, r4
 801eeb4:	4629      	mov	r1, r5
 801eeb6:	f7e1 fbb7 	bl	8000628 <__aeabi_dmul>
 801eeba:	4b52      	ldr	r3, [pc, #328]	@ (801f004 <__ieee754_pow+0x414>)
 801eebc:	4682      	mov	sl, r0
 801eebe:	468b      	mov	fp, r1
 801eec0:	2200      	movs	r2, #0
 801eec2:	4620      	mov	r0, r4
 801eec4:	4629      	mov	r1, r5
 801eec6:	f7e1 fbaf 	bl	8000628 <__aeabi_dmul>
 801eeca:	4602      	mov	r2, r0
 801eecc:	460b      	mov	r3, r1
 801eece:	a148      	add	r1, pc, #288	@ (adr r1, 801eff0 <__ieee754_pow+0x400>)
 801eed0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801eed4:	f7e1 f9f0 	bl	80002b8 <__aeabi_dsub>
 801eed8:	4622      	mov	r2, r4
 801eeda:	462b      	mov	r3, r5
 801eedc:	f7e1 fba4 	bl	8000628 <__aeabi_dmul>
 801eee0:	4602      	mov	r2, r0
 801eee2:	460b      	mov	r3, r1
 801eee4:	2000      	movs	r0, #0
 801eee6:	4948      	ldr	r1, [pc, #288]	@ (801f008 <__ieee754_pow+0x418>)
 801eee8:	f7e1 f9e6 	bl	80002b8 <__aeabi_dsub>
 801eeec:	4622      	mov	r2, r4
 801eeee:	4680      	mov	r8, r0
 801eef0:	4689      	mov	r9, r1
 801eef2:	462b      	mov	r3, r5
 801eef4:	4620      	mov	r0, r4
 801eef6:	4629      	mov	r1, r5
 801eef8:	f7e1 fb96 	bl	8000628 <__aeabi_dmul>
 801eefc:	4602      	mov	r2, r0
 801eefe:	460b      	mov	r3, r1
 801ef00:	4640      	mov	r0, r8
 801ef02:	4649      	mov	r1, r9
 801ef04:	f7e1 fb90 	bl	8000628 <__aeabi_dmul>
 801ef08:	a33b      	add	r3, pc, #236	@ (adr r3, 801eff8 <__ieee754_pow+0x408>)
 801ef0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef0e:	f7e1 fb8b 	bl	8000628 <__aeabi_dmul>
 801ef12:	4602      	mov	r2, r0
 801ef14:	460b      	mov	r3, r1
 801ef16:	4650      	mov	r0, sl
 801ef18:	4659      	mov	r1, fp
 801ef1a:	f7e1 f9cd 	bl	80002b8 <__aeabi_dsub>
 801ef1e:	4602      	mov	r2, r0
 801ef20:	460b      	mov	r3, r1
 801ef22:	4680      	mov	r8, r0
 801ef24:	4689      	mov	r9, r1
 801ef26:	4630      	mov	r0, r6
 801ef28:	4639      	mov	r1, r7
 801ef2a:	f7e1 f9c7 	bl	80002bc <__adddf3>
 801ef2e:	2400      	movs	r4, #0
 801ef30:	4632      	mov	r2, r6
 801ef32:	463b      	mov	r3, r7
 801ef34:	4620      	mov	r0, r4
 801ef36:	460d      	mov	r5, r1
 801ef38:	f7e1 f9be 	bl	80002b8 <__aeabi_dsub>
 801ef3c:	4602      	mov	r2, r0
 801ef3e:	460b      	mov	r3, r1
 801ef40:	4640      	mov	r0, r8
 801ef42:	4649      	mov	r1, r9
 801ef44:	f7e1 f9b8 	bl	80002b8 <__aeabi_dsub>
 801ef48:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ef4c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801ef50:	2300      	movs	r3, #0
 801ef52:	9304      	str	r3, [sp, #16]
 801ef54:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801ef58:	4606      	mov	r6, r0
 801ef5a:	460f      	mov	r7, r1
 801ef5c:	4652      	mov	r2, sl
 801ef5e:	465b      	mov	r3, fp
 801ef60:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ef64:	f7e1 f9a8 	bl	80002b8 <__aeabi_dsub>
 801ef68:	4622      	mov	r2, r4
 801ef6a:	462b      	mov	r3, r5
 801ef6c:	f7e1 fb5c 	bl	8000628 <__aeabi_dmul>
 801ef70:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ef74:	4680      	mov	r8, r0
 801ef76:	4689      	mov	r9, r1
 801ef78:	4630      	mov	r0, r6
 801ef7a:	4639      	mov	r1, r7
 801ef7c:	f7e1 fb54 	bl	8000628 <__aeabi_dmul>
 801ef80:	4602      	mov	r2, r0
 801ef82:	460b      	mov	r3, r1
 801ef84:	4640      	mov	r0, r8
 801ef86:	4649      	mov	r1, r9
 801ef88:	f7e1 f998 	bl	80002bc <__adddf3>
 801ef8c:	4652      	mov	r2, sl
 801ef8e:	465b      	mov	r3, fp
 801ef90:	4606      	mov	r6, r0
 801ef92:	460f      	mov	r7, r1
 801ef94:	4620      	mov	r0, r4
 801ef96:	4629      	mov	r1, r5
 801ef98:	f7e1 fb46 	bl	8000628 <__aeabi_dmul>
 801ef9c:	460b      	mov	r3, r1
 801ef9e:	4602      	mov	r2, r0
 801efa0:	4680      	mov	r8, r0
 801efa2:	4689      	mov	r9, r1
 801efa4:	4630      	mov	r0, r6
 801efa6:	4639      	mov	r1, r7
 801efa8:	f7e1 f988 	bl	80002bc <__adddf3>
 801efac:	4b17      	ldr	r3, [pc, #92]	@ (801f00c <__ieee754_pow+0x41c>)
 801efae:	4299      	cmp	r1, r3
 801efb0:	4604      	mov	r4, r0
 801efb2:	460d      	mov	r5, r1
 801efb4:	468a      	mov	sl, r1
 801efb6:	468b      	mov	fp, r1
 801efb8:	f340 82ef 	ble.w	801f59a <__ieee754_pow+0x9aa>
 801efbc:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 801efc0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801efc4:	4303      	orrs	r3, r0
 801efc6:	f000 81e8 	beq.w	801f39a <__ieee754_pow+0x7aa>
 801efca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801efce:	2200      	movs	r2, #0
 801efd0:	2300      	movs	r3, #0
 801efd2:	f7e1 fd9b 	bl	8000b0c <__aeabi_dcmplt>
 801efd6:	3800      	subs	r0, #0
 801efd8:	bf18      	it	ne
 801efda:	2001      	movne	r0, #1
 801efdc:	e710      	b.n	801ee00 <__ieee754_pow+0x210>
 801efde:	bf00      	nop
 801efe0:	60000000 	.word	0x60000000
 801efe4:	3ff71547 	.word	0x3ff71547
 801efe8:	f85ddf44 	.word	0xf85ddf44
 801efec:	3e54ae0b 	.word	0x3e54ae0b
 801eff0:	55555555 	.word	0x55555555
 801eff4:	3fd55555 	.word	0x3fd55555
 801eff8:	652b82fe 	.word	0x652b82fe
 801effc:	3ff71547 	.word	0x3ff71547
 801f000:	3ff00000 	.word	0x3ff00000
 801f004:	3fd00000 	.word	0x3fd00000
 801f008:	3fe00000 	.word	0x3fe00000
 801f00c:	408fffff 	.word	0x408fffff
 801f010:	4bd5      	ldr	r3, [pc, #852]	@ (801f368 <__ieee754_pow+0x778>)
 801f012:	402b      	ands	r3, r5
 801f014:	2200      	movs	r2, #0
 801f016:	b92b      	cbnz	r3, 801f024 <__ieee754_pow+0x434>
 801f018:	4bd4      	ldr	r3, [pc, #848]	@ (801f36c <__ieee754_pow+0x77c>)
 801f01a:	f7e1 fb05 	bl	8000628 <__aeabi_dmul>
 801f01e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 801f022:	468b      	mov	fp, r1
 801f024:	ea4f 532b 	mov.w	r3, fp, asr #20
 801f028:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801f02c:	4413      	add	r3, r2
 801f02e:	930a      	str	r3, [sp, #40]	@ 0x28
 801f030:	4bcf      	ldr	r3, [pc, #828]	@ (801f370 <__ieee754_pow+0x780>)
 801f032:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 801f036:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801f03a:	459b      	cmp	fp, r3
 801f03c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801f040:	dd08      	ble.n	801f054 <__ieee754_pow+0x464>
 801f042:	4bcc      	ldr	r3, [pc, #816]	@ (801f374 <__ieee754_pow+0x784>)
 801f044:	459b      	cmp	fp, r3
 801f046:	f340 81a5 	ble.w	801f394 <__ieee754_pow+0x7a4>
 801f04a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f04c:	3301      	adds	r3, #1
 801f04e:	930a      	str	r3, [sp, #40]	@ 0x28
 801f050:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801f054:	f04f 0a00 	mov.w	sl, #0
 801f058:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801f05c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f05e:	4bc6      	ldr	r3, [pc, #792]	@ (801f378 <__ieee754_pow+0x788>)
 801f060:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801f064:	ed93 7b00 	vldr	d7, [r3]
 801f068:	4629      	mov	r1, r5
 801f06a:	ec53 2b17 	vmov	r2, r3, d7
 801f06e:	ed8d 7b06 	vstr	d7, [sp, #24]
 801f072:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801f076:	f7e1 f91f 	bl	80002b8 <__aeabi_dsub>
 801f07a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801f07e:	4606      	mov	r6, r0
 801f080:	460f      	mov	r7, r1
 801f082:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f086:	f7e1 f919 	bl	80002bc <__adddf3>
 801f08a:	4602      	mov	r2, r0
 801f08c:	460b      	mov	r3, r1
 801f08e:	2000      	movs	r0, #0
 801f090:	49ba      	ldr	r1, [pc, #744]	@ (801f37c <__ieee754_pow+0x78c>)
 801f092:	f7e1 fbf3 	bl	800087c <__aeabi_ddiv>
 801f096:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801f09a:	4602      	mov	r2, r0
 801f09c:	460b      	mov	r3, r1
 801f09e:	4630      	mov	r0, r6
 801f0a0:	4639      	mov	r1, r7
 801f0a2:	f7e1 fac1 	bl	8000628 <__aeabi_dmul>
 801f0a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f0aa:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 801f0ae:	106d      	asrs	r5, r5, #1
 801f0b0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801f0b4:	f04f 0b00 	mov.w	fp, #0
 801f0b8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801f0bc:	4661      	mov	r1, ip
 801f0be:	2200      	movs	r2, #0
 801f0c0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801f0c4:	4658      	mov	r0, fp
 801f0c6:	46e1      	mov	r9, ip
 801f0c8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801f0cc:	4614      	mov	r4, r2
 801f0ce:	461d      	mov	r5, r3
 801f0d0:	f7e1 faaa 	bl	8000628 <__aeabi_dmul>
 801f0d4:	4602      	mov	r2, r0
 801f0d6:	460b      	mov	r3, r1
 801f0d8:	4630      	mov	r0, r6
 801f0da:	4639      	mov	r1, r7
 801f0dc:	f7e1 f8ec 	bl	80002b8 <__aeabi_dsub>
 801f0e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f0e4:	4606      	mov	r6, r0
 801f0e6:	460f      	mov	r7, r1
 801f0e8:	4620      	mov	r0, r4
 801f0ea:	4629      	mov	r1, r5
 801f0ec:	f7e1 f8e4 	bl	80002b8 <__aeabi_dsub>
 801f0f0:	4602      	mov	r2, r0
 801f0f2:	460b      	mov	r3, r1
 801f0f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801f0f8:	f7e1 f8de 	bl	80002b8 <__aeabi_dsub>
 801f0fc:	465a      	mov	r2, fp
 801f0fe:	464b      	mov	r3, r9
 801f100:	f7e1 fa92 	bl	8000628 <__aeabi_dmul>
 801f104:	4602      	mov	r2, r0
 801f106:	460b      	mov	r3, r1
 801f108:	4630      	mov	r0, r6
 801f10a:	4639      	mov	r1, r7
 801f10c:	f7e1 f8d4 	bl	80002b8 <__aeabi_dsub>
 801f110:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801f114:	f7e1 fa88 	bl	8000628 <__aeabi_dmul>
 801f118:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f11c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801f120:	4610      	mov	r0, r2
 801f122:	4619      	mov	r1, r3
 801f124:	f7e1 fa80 	bl	8000628 <__aeabi_dmul>
 801f128:	a37d      	add	r3, pc, #500	@ (adr r3, 801f320 <__ieee754_pow+0x730>)
 801f12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f12e:	4604      	mov	r4, r0
 801f130:	460d      	mov	r5, r1
 801f132:	f7e1 fa79 	bl	8000628 <__aeabi_dmul>
 801f136:	a37c      	add	r3, pc, #496	@ (adr r3, 801f328 <__ieee754_pow+0x738>)
 801f138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f13c:	f7e1 f8be 	bl	80002bc <__adddf3>
 801f140:	4622      	mov	r2, r4
 801f142:	462b      	mov	r3, r5
 801f144:	f7e1 fa70 	bl	8000628 <__aeabi_dmul>
 801f148:	a379      	add	r3, pc, #484	@ (adr r3, 801f330 <__ieee754_pow+0x740>)
 801f14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f14e:	f7e1 f8b5 	bl	80002bc <__adddf3>
 801f152:	4622      	mov	r2, r4
 801f154:	462b      	mov	r3, r5
 801f156:	f7e1 fa67 	bl	8000628 <__aeabi_dmul>
 801f15a:	a377      	add	r3, pc, #476	@ (adr r3, 801f338 <__ieee754_pow+0x748>)
 801f15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f160:	f7e1 f8ac 	bl	80002bc <__adddf3>
 801f164:	4622      	mov	r2, r4
 801f166:	462b      	mov	r3, r5
 801f168:	f7e1 fa5e 	bl	8000628 <__aeabi_dmul>
 801f16c:	a374      	add	r3, pc, #464	@ (adr r3, 801f340 <__ieee754_pow+0x750>)
 801f16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f172:	f7e1 f8a3 	bl	80002bc <__adddf3>
 801f176:	4622      	mov	r2, r4
 801f178:	462b      	mov	r3, r5
 801f17a:	f7e1 fa55 	bl	8000628 <__aeabi_dmul>
 801f17e:	a372      	add	r3, pc, #456	@ (adr r3, 801f348 <__ieee754_pow+0x758>)
 801f180:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f184:	f7e1 f89a 	bl	80002bc <__adddf3>
 801f188:	4622      	mov	r2, r4
 801f18a:	4606      	mov	r6, r0
 801f18c:	460f      	mov	r7, r1
 801f18e:	462b      	mov	r3, r5
 801f190:	4620      	mov	r0, r4
 801f192:	4629      	mov	r1, r5
 801f194:	f7e1 fa48 	bl	8000628 <__aeabi_dmul>
 801f198:	4602      	mov	r2, r0
 801f19a:	460b      	mov	r3, r1
 801f19c:	4630      	mov	r0, r6
 801f19e:	4639      	mov	r1, r7
 801f1a0:	f7e1 fa42 	bl	8000628 <__aeabi_dmul>
 801f1a4:	465a      	mov	r2, fp
 801f1a6:	4604      	mov	r4, r0
 801f1a8:	460d      	mov	r5, r1
 801f1aa:	464b      	mov	r3, r9
 801f1ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f1b0:	f7e1 f884 	bl	80002bc <__adddf3>
 801f1b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f1b8:	f7e1 fa36 	bl	8000628 <__aeabi_dmul>
 801f1bc:	4622      	mov	r2, r4
 801f1be:	462b      	mov	r3, r5
 801f1c0:	f7e1 f87c 	bl	80002bc <__adddf3>
 801f1c4:	465a      	mov	r2, fp
 801f1c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801f1ca:	464b      	mov	r3, r9
 801f1cc:	4658      	mov	r0, fp
 801f1ce:	4649      	mov	r1, r9
 801f1d0:	f7e1 fa2a 	bl	8000628 <__aeabi_dmul>
 801f1d4:	4b6a      	ldr	r3, [pc, #424]	@ (801f380 <__ieee754_pow+0x790>)
 801f1d6:	2200      	movs	r2, #0
 801f1d8:	4606      	mov	r6, r0
 801f1da:	460f      	mov	r7, r1
 801f1dc:	f7e1 f86e 	bl	80002bc <__adddf3>
 801f1e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801f1e4:	f7e1 f86a 	bl	80002bc <__adddf3>
 801f1e8:	46d8      	mov	r8, fp
 801f1ea:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 801f1ee:	460d      	mov	r5, r1
 801f1f0:	465a      	mov	r2, fp
 801f1f2:	460b      	mov	r3, r1
 801f1f4:	4640      	mov	r0, r8
 801f1f6:	4649      	mov	r1, r9
 801f1f8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801f1fc:	f7e1 fa14 	bl	8000628 <__aeabi_dmul>
 801f200:	465c      	mov	r4, fp
 801f202:	4680      	mov	r8, r0
 801f204:	4689      	mov	r9, r1
 801f206:	4b5e      	ldr	r3, [pc, #376]	@ (801f380 <__ieee754_pow+0x790>)
 801f208:	2200      	movs	r2, #0
 801f20a:	4620      	mov	r0, r4
 801f20c:	4629      	mov	r1, r5
 801f20e:	f7e1 f853 	bl	80002b8 <__aeabi_dsub>
 801f212:	4632      	mov	r2, r6
 801f214:	463b      	mov	r3, r7
 801f216:	f7e1 f84f 	bl	80002b8 <__aeabi_dsub>
 801f21a:	4602      	mov	r2, r0
 801f21c:	460b      	mov	r3, r1
 801f21e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801f222:	f7e1 f849 	bl	80002b8 <__aeabi_dsub>
 801f226:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f22a:	f7e1 f9fd 	bl	8000628 <__aeabi_dmul>
 801f22e:	4622      	mov	r2, r4
 801f230:	4606      	mov	r6, r0
 801f232:	460f      	mov	r7, r1
 801f234:	462b      	mov	r3, r5
 801f236:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f23a:	f7e1 f9f5 	bl	8000628 <__aeabi_dmul>
 801f23e:	4602      	mov	r2, r0
 801f240:	460b      	mov	r3, r1
 801f242:	4630      	mov	r0, r6
 801f244:	4639      	mov	r1, r7
 801f246:	f7e1 f839 	bl	80002bc <__adddf3>
 801f24a:	4606      	mov	r6, r0
 801f24c:	460f      	mov	r7, r1
 801f24e:	4602      	mov	r2, r0
 801f250:	460b      	mov	r3, r1
 801f252:	4640      	mov	r0, r8
 801f254:	4649      	mov	r1, r9
 801f256:	f7e1 f831 	bl	80002bc <__adddf3>
 801f25a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 801f25e:	a33c      	add	r3, pc, #240	@ (adr r3, 801f350 <__ieee754_pow+0x760>)
 801f260:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f264:	4658      	mov	r0, fp
 801f266:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801f26a:	460d      	mov	r5, r1
 801f26c:	f7e1 f9dc 	bl	8000628 <__aeabi_dmul>
 801f270:	465c      	mov	r4, fp
 801f272:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f276:	4642      	mov	r2, r8
 801f278:	464b      	mov	r3, r9
 801f27a:	4620      	mov	r0, r4
 801f27c:	4629      	mov	r1, r5
 801f27e:	f7e1 f81b 	bl	80002b8 <__aeabi_dsub>
 801f282:	4602      	mov	r2, r0
 801f284:	460b      	mov	r3, r1
 801f286:	4630      	mov	r0, r6
 801f288:	4639      	mov	r1, r7
 801f28a:	f7e1 f815 	bl	80002b8 <__aeabi_dsub>
 801f28e:	a332      	add	r3, pc, #200	@ (adr r3, 801f358 <__ieee754_pow+0x768>)
 801f290:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f294:	f7e1 f9c8 	bl	8000628 <__aeabi_dmul>
 801f298:	a331      	add	r3, pc, #196	@ (adr r3, 801f360 <__ieee754_pow+0x770>)
 801f29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f29e:	4606      	mov	r6, r0
 801f2a0:	460f      	mov	r7, r1
 801f2a2:	4620      	mov	r0, r4
 801f2a4:	4629      	mov	r1, r5
 801f2a6:	f7e1 f9bf 	bl	8000628 <__aeabi_dmul>
 801f2aa:	4602      	mov	r2, r0
 801f2ac:	460b      	mov	r3, r1
 801f2ae:	4630      	mov	r0, r6
 801f2b0:	4639      	mov	r1, r7
 801f2b2:	f7e1 f803 	bl	80002bc <__adddf3>
 801f2b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f2b8:	4b32      	ldr	r3, [pc, #200]	@ (801f384 <__ieee754_pow+0x794>)
 801f2ba:	4413      	add	r3, r2
 801f2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2c0:	f7e0 fffc 	bl	80002bc <__adddf3>
 801f2c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801f2c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f2ca:	f7e1 f943 	bl	8000554 <__aeabi_i2d>
 801f2ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f2d0:	4b2d      	ldr	r3, [pc, #180]	@ (801f388 <__ieee754_pow+0x798>)
 801f2d2:	4413      	add	r3, r2
 801f2d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f2d8:	4606      	mov	r6, r0
 801f2da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f2de:	460f      	mov	r7, r1
 801f2e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f2e4:	f7e0 ffea 	bl	80002bc <__adddf3>
 801f2e8:	4642      	mov	r2, r8
 801f2ea:	464b      	mov	r3, r9
 801f2ec:	f7e0 ffe6 	bl	80002bc <__adddf3>
 801f2f0:	4632      	mov	r2, r6
 801f2f2:	463b      	mov	r3, r7
 801f2f4:	f7e0 ffe2 	bl	80002bc <__adddf3>
 801f2f8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801f2fc:	4632      	mov	r2, r6
 801f2fe:	463b      	mov	r3, r7
 801f300:	4658      	mov	r0, fp
 801f302:	460d      	mov	r5, r1
 801f304:	f7e0 ffd8 	bl	80002b8 <__aeabi_dsub>
 801f308:	4642      	mov	r2, r8
 801f30a:	464b      	mov	r3, r9
 801f30c:	f7e0 ffd4 	bl	80002b8 <__aeabi_dsub>
 801f310:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f314:	f7e0 ffd0 	bl	80002b8 <__aeabi_dsub>
 801f318:	465c      	mov	r4, fp
 801f31a:	4602      	mov	r2, r0
 801f31c:	e036      	b.n	801f38c <__ieee754_pow+0x79c>
 801f31e:	bf00      	nop
 801f320:	4a454eef 	.word	0x4a454eef
 801f324:	3fca7e28 	.word	0x3fca7e28
 801f328:	93c9db65 	.word	0x93c9db65
 801f32c:	3fcd864a 	.word	0x3fcd864a
 801f330:	a91d4101 	.word	0xa91d4101
 801f334:	3fd17460 	.word	0x3fd17460
 801f338:	518f264d 	.word	0x518f264d
 801f33c:	3fd55555 	.word	0x3fd55555
 801f340:	db6fabff 	.word	0xdb6fabff
 801f344:	3fdb6db6 	.word	0x3fdb6db6
 801f348:	33333303 	.word	0x33333303
 801f34c:	3fe33333 	.word	0x3fe33333
 801f350:	e0000000 	.word	0xe0000000
 801f354:	3feec709 	.word	0x3feec709
 801f358:	dc3a03fd 	.word	0xdc3a03fd
 801f35c:	3feec709 	.word	0x3feec709
 801f360:	145b01f5 	.word	0x145b01f5
 801f364:	be3e2fe0 	.word	0xbe3e2fe0
 801f368:	7ff00000 	.word	0x7ff00000
 801f36c:	43400000 	.word	0x43400000
 801f370:	0003988e 	.word	0x0003988e
 801f374:	000bb679 	.word	0x000bb679
 801f378:	08020e78 	.word	0x08020e78
 801f37c:	3ff00000 	.word	0x3ff00000
 801f380:	40080000 	.word	0x40080000
 801f384:	08020e58 	.word	0x08020e58
 801f388:	08020e68 	.word	0x08020e68
 801f38c:	460b      	mov	r3, r1
 801f38e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f392:	e5d7      	b.n	801ef44 <__ieee754_pow+0x354>
 801f394:	f04f 0a01 	mov.w	sl, #1
 801f398:	e65e      	b.n	801f058 <__ieee754_pow+0x468>
 801f39a:	a3b4      	add	r3, pc, #720	@ (adr r3, 801f66c <__ieee754_pow+0xa7c>)
 801f39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3a0:	4630      	mov	r0, r6
 801f3a2:	4639      	mov	r1, r7
 801f3a4:	f7e0 ff8a 	bl	80002bc <__adddf3>
 801f3a8:	4642      	mov	r2, r8
 801f3aa:	e9cd 0100 	strd	r0, r1, [sp]
 801f3ae:	464b      	mov	r3, r9
 801f3b0:	4620      	mov	r0, r4
 801f3b2:	4629      	mov	r1, r5
 801f3b4:	f7e0 ff80 	bl	80002b8 <__aeabi_dsub>
 801f3b8:	4602      	mov	r2, r0
 801f3ba:	460b      	mov	r3, r1
 801f3bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f3c0:	f7e1 fbc2 	bl	8000b48 <__aeabi_dcmpgt>
 801f3c4:	2800      	cmp	r0, #0
 801f3c6:	f47f ae00 	bne.w	801efca <__ieee754_pow+0x3da>
 801f3ca:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801f3ce:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801f3d2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 801f3d6:	fa43 fa0a 	asr.w	sl, r3, sl
 801f3da:	44da      	add	sl, fp
 801f3dc:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801f3e0:	489d      	ldr	r0, [pc, #628]	@ (801f658 <__ieee754_pow+0xa68>)
 801f3e2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 801f3e6:	4108      	asrs	r0, r1
 801f3e8:	ea00 030a 	and.w	r3, r0, sl
 801f3ec:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801f3f0:	f1c1 0114 	rsb	r1, r1, #20
 801f3f4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 801f3f8:	fa4a fa01 	asr.w	sl, sl, r1
 801f3fc:	f1bb 0f00 	cmp.w	fp, #0
 801f400:	4640      	mov	r0, r8
 801f402:	4649      	mov	r1, r9
 801f404:	f04f 0200 	mov.w	r2, #0
 801f408:	bfb8      	it	lt
 801f40a:	f1ca 0a00 	rsblt	sl, sl, #0
 801f40e:	f7e0 ff53 	bl	80002b8 <__aeabi_dsub>
 801f412:	4680      	mov	r8, r0
 801f414:	4689      	mov	r9, r1
 801f416:	4632      	mov	r2, r6
 801f418:	463b      	mov	r3, r7
 801f41a:	4640      	mov	r0, r8
 801f41c:	4649      	mov	r1, r9
 801f41e:	f7e0 ff4d 	bl	80002bc <__adddf3>
 801f422:	2400      	movs	r4, #0
 801f424:	a37c      	add	r3, pc, #496	@ (adr r3, 801f618 <__ieee754_pow+0xa28>)
 801f426:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f42a:	4620      	mov	r0, r4
 801f42c:	460d      	mov	r5, r1
 801f42e:	f7e1 f8fb 	bl	8000628 <__aeabi_dmul>
 801f432:	4642      	mov	r2, r8
 801f434:	e9cd 0100 	strd	r0, r1, [sp]
 801f438:	464b      	mov	r3, r9
 801f43a:	4620      	mov	r0, r4
 801f43c:	4629      	mov	r1, r5
 801f43e:	f7e0 ff3b 	bl	80002b8 <__aeabi_dsub>
 801f442:	4602      	mov	r2, r0
 801f444:	460b      	mov	r3, r1
 801f446:	4630      	mov	r0, r6
 801f448:	4639      	mov	r1, r7
 801f44a:	f7e0 ff35 	bl	80002b8 <__aeabi_dsub>
 801f44e:	a374      	add	r3, pc, #464	@ (adr r3, 801f620 <__ieee754_pow+0xa30>)
 801f450:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f454:	f7e1 f8e8 	bl	8000628 <__aeabi_dmul>
 801f458:	a373      	add	r3, pc, #460	@ (adr r3, 801f628 <__ieee754_pow+0xa38>)
 801f45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f45e:	4680      	mov	r8, r0
 801f460:	4689      	mov	r9, r1
 801f462:	4620      	mov	r0, r4
 801f464:	4629      	mov	r1, r5
 801f466:	f7e1 f8df 	bl	8000628 <__aeabi_dmul>
 801f46a:	4602      	mov	r2, r0
 801f46c:	460b      	mov	r3, r1
 801f46e:	4640      	mov	r0, r8
 801f470:	4649      	mov	r1, r9
 801f472:	f7e0 ff23 	bl	80002bc <__adddf3>
 801f476:	4604      	mov	r4, r0
 801f478:	460d      	mov	r5, r1
 801f47a:	4602      	mov	r2, r0
 801f47c:	460b      	mov	r3, r1
 801f47e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f482:	f7e0 ff1b 	bl	80002bc <__adddf3>
 801f486:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f48a:	4680      	mov	r8, r0
 801f48c:	4689      	mov	r9, r1
 801f48e:	f7e0 ff13 	bl	80002b8 <__aeabi_dsub>
 801f492:	4602      	mov	r2, r0
 801f494:	460b      	mov	r3, r1
 801f496:	4620      	mov	r0, r4
 801f498:	4629      	mov	r1, r5
 801f49a:	f7e0 ff0d 	bl	80002b8 <__aeabi_dsub>
 801f49e:	4642      	mov	r2, r8
 801f4a0:	4606      	mov	r6, r0
 801f4a2:	460f      	mov	r7, r1
 801f4a4:	464b      	mov	r3, r9
 801f4a6:	4640      	mov	r0, r8
 801f4a8:	4649      	mov	r1, r9
 801f4aa:	f7e1 f8bd 	bl	8000628 <__aeabi_dmul>
 801f4ae:	a360      	add	r3, pc, #384	@ (adr r3, 801f630 <__ieee754_pow+0xa40>)
 801f4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f4b4:	4604      	mov	r4, r0
 801f4b6:	460d      	mov	r5, r1
 801f4b8:	f7e1 f8b6 	bl	8000628 <__aeabi_dmul>
 801f4bc:	a35e      	add	r3, pc, #376	@ (adr r3, 801f638 <__ieee754_pow+0xa48>)
 801f4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f4c2:	f7e0 fef9 	bl	80002b8 <__aeabi_dsub>
 801f4c6:	4622      	mov	r2, r4
 801f4c8:	462b      	mov	r3, r5
 801f4ca:	f7e1 f8ad 	bl	8000628 <__aeabi_dmul>
 801f4ce:	a35c      	add	r3, pc, #368	@ (adr r3, 801f640 <__ieee754_pow+0xa50>)
 801f4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f4d4:	f7e0 fef2 	bl	80002bc <__adddf3>
 801f4d8:	4622      	mov	r2, r4
 801f4da:	462b      	mov	r3, r5
 801f4dc:	f7e1 f8a4 	bl	8000628 <__aeabi_dmul>
 801f4e0:	a359      	add	r3, pc, #356	@ (adr r3, 801f648 <__ieee754_pow+0xa58>)
 801f4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f4e6:	f7e0 fee7 	bl	80002b8 <__aeabi_dsub>
 801f4ea:	4622      	mov	r2, r4
 801f4ec:	462b      	mov	r3, r5
 801f4ee:	f7e1 f89b 	bl	8000628 <__aeabi_dmul>
 801f4f2:	a357      	add	r3, pc, #348	@ (adr r3, 801f650 <__ieee754_pow+0xa60>)
 801f4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f4f8:	f7e0 fee0 	bl	80002bc <__adddf3>
 801f4fc:	4622      	mov	r2, r4
 801f4fe:	462b      	mov	r3, r5
 801f500:	f7e1 f892 	bl	8000628 <__aeabi_dmul>
 801f504:	4602      	mov	r2, r0
 801f506:	460b      	mov	r3, r1
 801f508:	4640      	mov	r0, r8
 801f50a:	4649      	mov	r1, r9
 801f50c:	f7e0 fed4 	bl	80002b8 <__aeabi_dsub>
 801f510:	4604      	mov	r4, r0
 801f512:	460d      	mov	r5, r1
 801f514:	4602      	mov	r2, r0
 801f516:	460b      	mov	r3, r1
 801f518:	4640      	mov	r0, r8
 801f51a:	4649      	mov	r1, r9
 801f51c:	f7e1 f884 	bl	8000628 <__aeabi_dmul>
 801f520:	2200      	movs	r2, #0
 801f522:	e9cd 0100 	strd	r0, r1, [sp]
 801f526:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801f52a:	4620      	mov	r0, r4
 801f52c:	4629      	mov	r1, r5
 801f52e:	f7e0 fec3 	bl	80002b8 <__aeabi_dsub>
 801f532:	4602      	mov	r2, r0
 801f534:	460b      	mov	r3, r1
 801f536:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f53a:	f7e1 f99f 	bl	800087c <__aeabi_ddiv>
 801f53e:	4632      	mov	r2, r6
 801f540:	4604      	mov	r4, r0
 801f542:	460d      	mov	r5, r1
 801f544:	463b      	mov	r3, r7
 801f546:	4640      	mov	r0, r8
 801f548:	4649      	mov	r1, r9
 801f54a:	f7e1 f86d 	bl	8000628 <__aeabi_dmul>
 801f54e:	4632      	mov	r2, r6
 801f550:	463b      	mov	r3, r7
 801f552:	f7e0 feb3 	bl	80002bc <__adddf3>
 801f556:	4602      	mov	r2, r0
 801f558:	460b      	mov	r3, r1
 801f55a:	4620      	mov	r0, r4
 801f55c:	4629      	mov	r1, r5
 801f55e:	f7e0 feab 	bl	80002b8 <__aeabi_dsub>
 801f562:	4642      	mov	r2, r8
 801f564:	464b      	mov	r3, r9
 801f566:	f7e0 fea7 	bl	80002b8 <__aeabi_dsub>
 801f56a:	460b      	mov	r3, r1
 801f56c:	4602      	mov	r2, r0
 801f56e:	493b      	ldr	r1, [pc, #236]	@ (801f65c <__ieee754_pow+0xa6c>)
 801f570:	2000      	movs	r0, #0
 801f572:	f7e0 fea1 	bl	80002b8 <__aeabi_dsub>
 801f576:	ec41 0b10 	vmov	d0, r0, r1
 801f57a:	ee10 3a90 	vmov	r3, s1
 801f57e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801f582:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801f586:	da30      	bge.n	801f5ea <__ieee754_pow+0x9fa>
 801f588:	4650      	mov	r0, sl
 801f58a:	f000 f87d 	bl	801f688 <scalbn>
 801f58e:	ec51 0b10 	vmov	r0, r1, d0
 801f592:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f596:	f7ff bbd2 	b.w	801ed3e <__ieee754_pow+0x14e>
 801f59a:	4c31      	ldr	r4, [pc, #196]	@ (801f660 <__ieee754_pow+0xa70>)
 801f59c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801f5a0:	42a3      	cmp	r3, r4
 801f5a2:	d91a      	bls.n	801f5da <__ieee754_pow+0x9ea>
 801f5a4:	4b2f      	ldr	r3, [pc, #188]	@ (801f664 <__ieee754_pow+0xa74>)
 801f5a6:	440b      	add	r3, r1
 801f5a8:	4303      	orrs	r3, r0
 801f5aa:	d009      	beq.n	801f5c0 <__ieee754_pow+0x9d0>
 801f5ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f5b0:	2200      	movs	r2, #0
 801f5b2:	2300      	movs	r3, #0
 801f5b4:	f7e1 faaa 	bl	8000b0c <__aeabi_dcmplt>
 801f5b8:	3800      	subs	r0, #0
 801f5ba:	bf18      	it	ne
 801f5bc:	2001      	movne	r0, #1
 801f5be:	e42b      	b.n	801ee18 <__ieee754_pow+0x228>
 801f5c0:	4642      	mov	r2, r8
 801f5c2:	464b      	mov	r3, r9
 801f5c4:	f7e0 fe78 	bl	80002b8 <__aeabi_dsub>
 801f5c8:	4632      	mov	r2, r6
 801f5ca:	463b      	mov	r3, r7
 801f5cc:	f7e1 fab2 	bl	8000b34 <__aeabi_dcmpge>
 801f5d0:	2800      	cmp	r0, #0
 801f5d2:	d1eb      	bne.n	801f5ac <__ieee754_pow+0x9bc>
 801f5d4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 801f674 <__ieee754_pow+0xa84>
 801f5d8:	e6f7      	b.n	801f3ca <__ieee754_pow+0x7da>
 801f5da:	469a      	mov	sl, r3
 801f5dc:	4b22      	ldr	r3, [pc, #136]	@ (801f668 <__ieee754_pow+0xa78>)
 801f5de:	459a      	cmp	sl, r3
 801f5e0:	f63f aef3 	bhi.w	801f3ca <__ieee754_pow+0x7da>
 801f5e4:	f8dd a010 	ldr.w	sl, [sp, #16]
 801f5e8:	e715      	b.n	801f416 <__ieee754_pow+0x826>
 801f5ea:	ec51 0b10 	vmov	r0, r1, d0
 801f5ee:	4619      	mov	r1, r3
 801f5f0:	e7cf      	b.n	801f592 <__ieee754_pow+0x9a2>
 801f5f2:	491a      	ldr	r1, [pc, #104]	@ (801f65c <__ieee754_pow+0xa6c>)
 801f5f4:	2000      	movs	r0, #0
 801f5f6:	f7ff bb18 	b.w	801ec2a <__ieee754_pow+0x3a>
 801f5fa:	2000      	movs	r0, #0
 801f5fc:	2100      	movs	r1, #0
 801f5fe:	f7ff bb14 	b.w	801ec2a <__ieee754_pow+0x3a>
 801f602:	4630      	mov	r0, r6
 801f604:	4639      	mov	r1, r7
 801f606:	f7ff bb10 	b.w	801ec2a <__ieee754_pow+0x3a>
 801f60a:	460c      	mov	r4, r1
 801f60c:	f7ff bb5e 	b.w	801eccc <__ieee754_pow+0xdc>
 801f610:	2400      	movs	r4, #0
 801f612:	f7ff bb49 	b.w	801eca8 <__ieee754_pow+0xb8>
 801f616:	bf00      	nop
 801f618:	00000000 	.word	0x00000000
 801f61c:	3fe62e43 	.word	0x3fe62e43
 801f620:	fefa39ef 	.word	0xfefa39ef
 801f624:	3fe62e42 	.word	0x3fe62e42
 801f628:	0ca86c39 	.word	0x0ca86c39
 801f62c:	be205c61 	.word	0xbe205c61
 801f630:	72bea4d0 	.word	0x72bea4d0
 801f634:	3e663769 	.word	0x3e663769
 801f638:	c5d26bf1 	.word	0xc5d26bf1
 801f63c:	3ebbbd41 	.word	0x3ebbbd41
 801f640:	af25de2c 	.word	0xaf25de2c
 801f644:	3f11566a 	.word	0x3f11566a
 801f648:	16bebd93 	.word	0x16bebd93
 801f64c:	3f66c16c 	.word	0x3f66c16c
 801f650:	5555553e 	.word	0x5555553e
 801f654:	3fc55555 	.word	0x3fc55555
 801f658:	fff00000 	.word	0xfff00000
 801f65c:	3ff00000 	.word	0x3ff00000
 801f660:	4090cbff 	.word	0x4090cbff
 801f664:	3f6f3400 	.word	0x3f6f3400
 801f668:	3fe00000 	.word	0x3fe00000
 801f66c:	652b82fe 	.word	0x652b82fe
 801f670:	3c971547 	.word	0x3c971547
 801f674:	4090cc00 	.word	0x4090cc00

0801f678 <fabs>:
 801f678:	ec51 0b10 	vmov	r0, r1, d0
 801f67c:	4602      	mov	r2, r0
 801f67e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801f682:	ec43 2b10 	vmov	d0, r2, r3
 801f686:	4770      	bx	lr

0801f688 <scalbn>:
 801f688:	b570      	push	{r4, r5, r6, lr}
 801f68a:	ec55 4b10 	vmov	r4, r5, d0
 801f68e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801f692:	4606      	mov	r6, r0
 801f694:	462b      	mov	r3, r5
 801f696:	b991      	cbnz	r1, 801f6be <scalbn+0x36>
 801f698:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801f69c:	4323      	orrs	r3, r4
 801f69e:	d03d      	beq.n	801f71c <scalbn+0x94>
 801f6a0:	4b35      	ldr	r3, [pc, #212]	@ (801f778 <scalbn+0xf0>)
 801f6a2:	4620      	mov	r0, r4
 801f6a4:	4629      	mov	r1, r5
 801f6a6:	2200      	movs	r2, #0
 801f6a8:	f7e0 ffbe 	bl	8000628 <__aeabi_dmul>
 801f6ac:	4b33      	ldr	r3, [pc, #204]	@ (801f77c <scalbn+0xf4>)
 801f6ae:	429e      	cmp	r6, r3
 801f6b0:	4604      	mov	r4, r0
 801f6b2:	460d      	mov	r5, r1
 801f6b4:	da0f      	bge.n	801f6d6 <scalbn+0x4e>
 801f6b6:	a328      	add	r3, pc, #160	@ (adr r3, 801f758 <scalbn+0xd0>)
 801f6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f6bc:	e01e      	b.n	801f6fc <scalbn+0x74>
 801f6be:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801f6c2:	4291      	cmp	r1, r2
 801f6c4:	d10b      	bne.n	801f6de <scalbn+0x56>
 801f6c6:	4622      	mov	r2, r4
 801f6c8:	4620      	mov	r0, r4
 801f6ca:	4629      	mov	r1, r5
 801f6cc:	f7e0 fdf6 	bl	80002bc <__adddf3>
 801f6d0:	4604      	mov	r4, r0
 801f6d2:	460d      	mov	r5, r1
 801f6d4:	e022      	b.n	801f71c <scalbn+0x94>
 801f6d6:	460b      	mov	r3, r1
 801f6d8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801f6dc:	3936      	subs	r1, #54	@ 0x36
 801f6de:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801f6e2:	4296      	cmp	r6, r2
 801f6e4:	dd0d      	ble.n	801f702 <scalbn+0x7a>
 801f6e6:	2d00      	cmp	r5, #0
 801f6e8:	a11d      	add	r1, pc, #116	@ (adr r1, 801f760 <scalbn+0xd8>)
 801f6ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f6ee:	da02      	bge.n	801f6f6 <scalbn+0x6e>
 801f6f0:	a11d      	add	r1, pc, #116	@ (adr r1, 801f768 <scalbn+0xe0>)
 801f6f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f6f6:	a31a      	add	r3, pc, #104	@ (adr r3, 801f760 <scalbn+0xd8>)
 801f6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f6fc:	f7e0 ff94 	bl	8000628 <__aeabi_dmul>
 801f700:	e7e6      	b.n	801f6d0 <scalbn+0x48>
 801f702:	1872      	adds	r2, r6, r1
 801f704:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801f708:	428a      	cmp	r2, r1
 801f70a:	dcec      	bgt.n	801f6e6 <scalbn+0x5e>
 801f70c:	2a00      	cmp	r2, #0
 801f70e:	dd08      	ble.n	801f722 <scalbn+0x9a>
 801f710:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801f714:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801f718:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801f71c:	ec45 4b10 	vmov	d0, r4, r5
 801f720:	bd70      	pop	{r4, r5, r6, pc}
 801f722:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801f726:	da08      	bge.n	801f73a <scalbn+0xb2>
 801f728:	2d00      	cmp	r5, #0
 801f72a:	a10b      	add	r1, pc, #44	@ (adr r1, 801f758 <scalbn+0xd0>)
 801f72c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f730:	dac1      	bge.n	801f6b6 <scalbn+0x2e>
 801f732:	a10f      	add	r1, pc, #60	@ (adr r1, 801f770 <scalbn+0xe8>)
 801f734:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f738:	e7bd      	b.n	801f6b6 <scalbn+0x2e>
 801f73a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801f73e:	3236      	adds	r2, #54	@ 0x36
 801f740:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801f744:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801f748:	4620      	mov	r0, r4
 801f74a:	4b0d      	ldr	r3, [pc, #52]	@ (801f780 <scalbn+0xf8>)
 801f74c:	4629      	mov	r1, r5
 801f74e:	2200      	movs	r2, #0
 801f750:	e7d4      	b.n	801f6fc <scalbn+0x74>
 801f752:	bf00      	nop
 801f754:	f3af 8000 	nop.w
 801f758:	c2f8f359 	.word	0xc2f8f359
 801f75c:	01a56e1f 	.word	0x01a56e1f
 801f760:	8800759c 	.word	0x8800759c
 801f764:	7e37e43c 	.word	0x7e37e43c
 801f768:	8800759c 	.word	0x8800759c
 801f76c:	fe37e43c 	.word	0xfe37e43c
 801f770:	c2f8f359 	.word	0xc2f8f359
 801f774:	81a56e1f 	.word	0x81a56e1f
 801f778:	43500000 	.word	0x43500000
 801f77c:	ffff3cb0 	.word	0xffff3cb0
 801f780:	3c900000 	.word	0x3c900000

0801f784 <with_errno>:
 801f784:	b510      	push	{r4, lr}
 801f786:	ed2d 8b02 	vpush	{d8}
 801f78a:	eeb0 8a40 	vmov.f32	s16, s0
 801f78e:	eef0 8a60 	vmov.f32	s17, s1
 801f792:	4604      	mov	r4, r0
 801f794:	f7fb fbfa 	bl	801af8c <__errno>
 801f798:	eeb0 0a48 	vmov.f32	s0, s16
 801f79c:	eef0 0a68 	vmov.f32	s1, s17
 801f7a0:	ecbd 8b02 	vpop	{d8}
 801f7a4:	6004      	str	r4, [r0, #0]
 801f7a6:	bd10      	pop	{r4, pc}

0801f7a8 <xflow>:
 801f7a8:	4603      	mov	r3, r0
 801f7aa:	b507      	push	{r0, r1, r2, lr}
 801f7ac:	ec51 0b10 	vmov	r0, r1, d0
 801f7b0:	b183      	cbz	r3, 801f7d4 <xflow+0x2c>
 801f7b2:	4602      	mov	r2, r0
 801f7b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f7b8:	e9cd 2300 	strd	r2, r3, [sp]
 801f7bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f7c0:	f7e0 ff32 	bl	8000628 <__aeabi_dmul>
 801f7c4:	ec41 0b10 	vmov	d0, r0, r1
 801f7c8:	2022      	movs	r0, #34	@ 0x22
 801f7ca:	b003      	add	sp, #12
 801f7cc:	f85d eb04 	ldr.w	lr, [sp], #4
 801f7d0:	f7ff bfd8 	b.w	801f784 <with_errno>
 801f7d4:	4602      	mov	r2, r0
 801f7d6:	460b      	mov	r3, r1
 801f7d8:	e7ee      	b.n	801f7b8 <xflow+0x10>
 801f7da:	0000      	movs	r0, r0
 801f7dc:	0000      	movs	r0, r0
	...

0801f7e0 <__math_uflow>:
 801f7e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801f7e8 <__math_uflow+0x8>
 801f7e4:	f7ff bfe0 	b.w	801f7a8 <xflow>
 801f7e8:	00000000 	.word	0x00000000
 801f7ec:	10000000 	.word	0x10000000

0801f7f0 <__math_oflow>:
 801f7f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801f7f8 <__math_oflow+0x8>
 801f7f4:	f7ff bfd8 	b.w	801f7a8 <xflow>
 801f7f8:	00000000 	.word	0x00000000
 801f7fc:	70000000 	.word	0x70000000

0801f800 <__ieee754_sqrt>:
 801f800:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f804:	4a68      	ldr	r2, [pc, #416]	@ (801f9a8 <__ieee754_sqrt+0x1a8>)
 801f806:	ec55 4b10 	vmov	r4, r5, d0
 801f80a:	43aa      	bics	r2, r5
 801f80c:	462b      	mov	r3, r5
 801f80e:	4621      	mov	r1, r4
 801f810:	d110      	bne.n	801f834 <__ieee754_sqrt+0x34>
 801f812:	4622      	mov	r2, r4
 801f814:	4620      	mov	r0, r4
 801f816:	4629      	mov	r1, r5
 801f818:	f7e0 ff06 	bl	8000628 <__aeabi_dmul>
 801f81c:	4602      	mov	r2, r0
 801f81e:	460b      	mov	r3, r1
 801f820:	4620      	mov	r0, r4
 801f822:	4629      	mov	r1, r5
 801f824:	f7e0 fd4a 	bl	80002bc <__adddf3>
 801f828:	4604      	mov	r4, r0
 801f82a:	460d      	mov	r5, r1
 801f82c:	ec45 4b10 	vmov	d0, r4, r5
 801f830:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f834:	2d00      	cmp	r5, #0
 801f836:	dc0e      	bgt.n	801f856 <__ieee754_sqrt+0x56>
 801f838:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801f83c:	4322      	orrs	r2, r4
 801f83e:	d0f5      	beq.n	801f82c <__ieee754_sqrt+0x2c>
 801f840:	b19d      	cbz	r5, 801f86a <__ieee754_sqrt+0x6a>
 801f842:	4622      	mov	r2, r4
 801f844:	4620      	mov	r0, r4
 801f846:	4629      	mov	r1, r5
 801f848:	f7e0 fd36 	bl	80002b8 <__aeabi_dsub>
 801f84c:	4602      	mov	r2, r0
 801f84e:	460b      	mov	r3, r1
 801f850:	f7e1 f814 	bl	800087c <__aeabi_ddiv>
 801f854:	e7e8      	b.n	801f828 <__ieee754_sqrt+0x28>
 801f856:	152a      	asrs	r2, r5, #20
 801f858:	d115      	bne.n	801f886 <__ieee754_sqrt+0x86>
 801f85a:	2000      	movs	r0, #0
 801f85c:	e009      	b.n	801f872 <__ieee754_sqrt+0x72>
 801f85e:	0acb      	lsrs	r3, r1, #11
 801f860:	3a15      	subs	r2, #21
 801f862:	0549      	lsls	r1, r1, #21
 801f864:	2b00      	cmp	r3, #0
 801f866:	d0fa      	beq.n	801f85e <__ieee754_sqrt+0x5e>
 801f868:	e7f7      	b.n	801f85a <__ieee754_sqrt+0x5a>
 801f86a:	462a      	mov	r2, r5
 801f86c:	e7fa      	b.n	801f864 <__ieee754_sqrt+0x64>
 801f86e:	005b      	lsls	r3, r3, #1
 801f870:	3001      	adds	r0, #1
 801f872:	02dc      	lsls	r4, r3, #11
 801f874:	d5fb      	bpl.n	801f86e <__ieee754_sqrt+0x6e>
 801f876:	1e44      	subs	r4, r0, #1
 801f878:	1b12      	subs	r2, r2, r4
 801f87a:	f1c0 0420 	rsb	r4, r0, #32
 801f87e:	fa21 f404 	lsr.w	r4, r1, r4
 801f882:	4323      	orrs	r3, r4
 801f884:	4081      	lsls	r1, r0
 801f886:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f88a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801f88e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f892:	07d2      	lsls	r2, r2, #31
 801f894:	bf5c      	itt	pl
 801f896:	005b      	lslpl	r3, r3, #1
 801f898:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801f89c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801f8a0:	bf58      	it	pl
 801f8a2:	0049      	lslpl	r1, r1, #1
 801f8a4:	2600      	movs	r6, #0
 801f8a6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801f8aa:	106d      	asrs	r5, r5, #1
 801f8ac:	0049      	lsls	r1, r1, #1
 801f8ae:	2016      	movs	r0, #22
 801f8b0:	4632      	mov	r2, r6
 801f8b2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801f8b6:	1917      	adds	r7, r2, r4
 801f8b8:	429f      	cmp	r7, r3
 801f8ba:	bfde      	ittt	le
 801f8bc:	193a      	addle	r2, r7, r4
 801f8be:	1bdb      	suble	r3, r3, r7
 801f8c0:	1936      	addle	r6, r6, r4
 801f8c2:	0fcf      	lsrs	r7, r1, #31
 801f8c4:	3801      	subs	r0, #1
 801f8c6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801f8ca:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801f8ce:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801f8d2:	d1f0      	bne.n	801f8b6 <__ieee754_sqrt+0xb6>
 801f8d4:	4604      	mov	r4, r0
 801f8d6:	2720      	movs	r7, #32
 801f8d8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801f8dc:	429a      	cmp	r2, r3
 801f8de:	eb00 0e0c 	add.w	lr, r0, ip
 801f8e2:	db02      	blt.n	801f8ea <__ieee754_sqrt+0xea>
 801f8e4:	d113      	bne.n	801f90e <__ieee754_sqrt+0x10e>
 801f8e6:	458e      	cmp	lr, r1
 801f8e8:	d811      	bhi.n	801f90e <__ieee754_sqrt+0x10e>
 801f8ea:	f1be 0f00 	cmp.w	lr, #0
 801f8ee:	eb0e 000c 	add.w	r0, lr, ip
 801f8f2:	da42      	bge.n	801f97a <__ieee754_sqrt+0x17a>
 801f8f4:	2800      	cmp	r0, #0
 801f8f6:	db40      	blt.n	801f97a <__ieee754_sqrt+0x17a>
 801f8f8:	f102 0801 	add.w	r8, r2, #1
 801f8fc:	1a9b      	subs	r3, r3, r2
 801f8fe:	458e      	cmp	lr, r1
 801f900:	bf88      	it	hi
 801f902:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 801f906:	eba1 010e 	sub.w	r1, r1, lr
 801f90a:	4464      	add	r4, ip
 801f90c:	4642      	mov	r2, r8
 801f90e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801f912:	3f01      	subs	r7, #1
 801f914:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801f918:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801f91c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801f920:	d1dc      	bne.n	801f8dc <__ieee754_sqrt+0xdc>
 801f922:	4319      	orrs	r1, r3
 801f924:	d01b      	beq.n	801f95e <__ieee754_sqrt+0x15e>
 801f926:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801f9ac <__ieee754_sqrt+0x1ac>
 801f92a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801f9b0 <__ieee754_sqrt+0x1b0>
 801f92e:	e9da 0100 	ldrd	r0, r1, [sl]
 801f932:	e9db 2300 	ldrd	r2, r3, [fp]
 801f936:	f7e0 fcbf 	bl	80002b8 <__aeabi_dsub>
 801f93a:	e9da 8900 	ldrd	r8, r9, [sl]
 801f93e:	4602      	mov	r2, r0
 801f940:	460b      	mov	r3, r1
 801f942:	4640      	mov	r0, r8
 801f944:	4649      	mov	r1, r9
 801f946:	f7e1 f8eb 	bl	8000b20 <__aeabi_dcmple>
 801f94a:	b140      	cbz	r0, 801f95e <__ieee754_sqrt+0x15e>
 801f94c:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801f950:	e9da 0100 	ldrd	r0, r1, [sl]
 801f954:	e9db 2300 	ldrd	r2, r3, [fp]
 801f958:	d111      	bne.n	801f97e <__ieee754_sqrt+0x17e>
 801f95a:	3601      	adds	r6, #1
 801f95c:	463c      	mov	r4, r7
 801f95e:	1072      	asrs	r2, r6, #1
 801f960:	0863      	lsrs	r3, r4, #1
 801f962:	07f1      	lsls	r1, r6, #31
 801f964:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801f968:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801f96c:	bf48      	it	mi
 801f96e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801f972:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801f976:	4618      	mov	r0, r3
 801f978:	e756      	b.n	801f828 <__ieee754_sqrt+0x28>
 801f97a:	4690      	mov	r8, r2
 801f97c:	e7be      	b.n	801f8fc <__ieee754_sqrt+0xfc>
 801f97e:	f7e0 fc9d 	bl	80002bc <__adddf3>
 801f982:	e9da 8900 	ldrd	r8, r9, [sl]
 801f986:	4602      	mov	r2, r0
 801f988:	460b      	mov	r3, r1
 801f98a:	4640      	mov	r0, r8
 801f98c:	4649      	mov	r1, r9
 801f98e:	f7e1 f8bd 	bl	8000b0c <__aeabi_dcmplt>
 801f992:	b120      	cbz	r0, 801f99e <__ieee754_sqrt+0x19e>
 801f994:	1ca0      	adds	r0, r4, #2
 801f996:	bf08      	it	eq
 801f998:	3601      	addeq	r6, #1
 801f99a:	3402      	adds	r4, #2
 801f99c:	e7df      	b.n	801f95e <__ieee754_sqrt+0x15e>
 801f99e:	1c63      	adds	r3, r4, #1
 801f9a0:	f023 0401 	bic.w	r4, r3, #1
 801f9a4:	e7db      	b.n	801f95e <__ieee754_sqrt+0x15e>
 801f9a6:	bf00      	nop
 801f9a8:	7ff00000 	.word	0x7ff00000
 801f9ac:	20000290 	.word	0x20000290
 801f9b0:	20000288 	.word	0x20000288

0801f9b4 <_init>:
 801f9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f9b6:	bf00      	nop
 801f9b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f9ba:	bc08      	pop	{r3}
 801f9bc:	469e      	mov	lr, r3
 801f9be:	4770      	bx	lr

0801f9c0 <_fini>:
 801f9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f9c2:	bf00      	nop
 801f9c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f9c6:	bc08      	pop	{r3}
 801f9c8:	469e      	mov	lr, r3
 801f9ca:	4770      	bx	lr
